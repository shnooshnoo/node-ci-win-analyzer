{"failedTests":[{"testName":"parallel/test-runner-output","timestamp":1712793616158,"status":"FAILED","jobName":"node-test-binary-windows-js-suites","config":"node-test-binary-windows-js-suites Â» 0,win2022-COMPILED_BY-vs2022 #27039","buildUrl":"https://ci.nodejs.org/job/node-test-binary-windows-js-suites/RUN_SUBSET=0,nodes=win2022-COMPILED_BY-vs2022/27039/","buildNumber":27039,"builtOn":"test-rackspace-win2022_vs2022-x64-5","nodeVersion":"22.0.0","commitHash":"4e15a4373cf4bd852ed72dbc423c653f08640dba","callStack":[{"upstreamBuild":62036,"upstreamProject":"node-test-commit-windows-fanned","upstreamUrl":"job/node-test-commit-windows-fanned/"},{"upstreamBuild":69709,"upstreamProject":"node-test-commit","upstreamUrl":"job/node-test-commit/"},{"upstreamBuild":58241,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"prId":"52401"}],"tap":{"ok":false,"name":"parallel/test-runner-output","id":676,"buffered":false,"tapError":null,"skip":false,"todo":false,"previous":null,"plan":null,"diag":{"severity":"fail","exitcode":1,"stack":"TAP version 13\n# Subtest: test runner output\n    # Subtest: test-runner/output/abort.js\n    ok 1 - test-runner/output/abort.js\n      ---\n      duration_ms: 1598.0763\n      ...\n    # Subtest: test-runner/output/abort_suite.js\n    ok 2 - test-runner/output/abort_suite.js\n      ---\n      duration_ms: 1920.7359\n      ...\n    # Subtest: test-runner/output/abort_hooks.js\n    ok 3 - test-runner/output/abort_hooks.js\n      ---\n      duration_ms: 1234.3963\n      ...\n    # Subtest: test-runner/output/describe_it.js\n    ok 4 - test-runner/output/describe_it.js\n      ---\n      duration_ms: 1902.102\n      ...\n    # Subtest: test-runner/output/describe_nested.js\n    ok 5 - test-runner/output/describe_nested.js\n      ---\n      duration_ms: 1192.686\n      ...\n    # Subtest: test-runner/output/eval_dot.js\n    ok 6 - test-runner/output/eval_dot.js\n      ---\n      duration_ms: 1182.4468\n      ...\n    # Subtest: test-runner/output/eval_spec.js\n    ok 7 - test-runner/output/eval_spec.js\n      ---\n      duration_ms: 1171.3522\n      ...\n    # Subtest: test-runner/output/eval_tap.js\n    ok 8 - test-runner/output/eval_tap.js\n      ---\n      duration_ms: 1158.8191\n      ...\n    # Subtest: test-runner/output/hooks.js\n    ok 9 - test-runner/output/hooks.js\n      ---\n      duration_ms: 1134.755\n      ...\n    # Subtest: test-runner/output/hooks_spec_reporter.js\n    ok 10 - test-runner/output/hooks_spec_reporter.js\n      ---\n      duration_ms: 2835.7209\n      ...\n    # Subtest: test-runner/output/skip-each-hooks.js\n    ok 11 - test-runner/output/skip-each-hooks.js\n      ---\n      duration_ms: 1093.5862\n      ...\n    # Subtest: test-runner/output/suite-skip-hooks.js\n    ok 12 - test-runner/output/suite-skip-hooks.js\n      ---\n      duration_ms: 1079.0322\n      ...\n    # Subtest: test-runner/output/timeout_in_before_each_should_not_affect_further_tests.js\n    ok 13 - test-runner/output/timeout_in_before_each_should_not_affect_further_tests.js\n      ---\n      duration_ms: 2877.0681\n      ...\n    # Subtest: test-runner/output/hooks-with-no-global-test.js\n    ok 14 - test-runner/output/hooks-with-no-global-test.js\n      ---\n      duration_ms: 1167.0645\n      ...\n    # Subtest: test-runner/output/global-hooks-with-no-tests.js\n    ok 15 - test-runner/output/global-hooks-with-no-tests.js\n      ---\n      duration_ms: 1155.8827\n      ...\n    # Subtest: test-runner/output/before-and-after-each-too-many-listeners.js\n    ok 16 - test-runner/output/before-and-after-each-too-many-listeners.js\n      ---\n      duration_ms: 1023.1414\n      ...\n    # Subtest: test-runner/output/before-and-after-each-with-timeout-too-many-listeners.js\n    ok 17 - test-runner/output/before-and-after-each-with-timeout-too-many-listeners.js\n      ---\n      duration_ms: 1915.2955\n      ...\n    # Subtest: test-runner/output/force_exit.js\n    ok 18 - test-runner/output/force_exit.js\n      ---\n      duration_ms: 1902.9721\n      ...\n    # Subtest: test-runner/output/global_after_should_fail_the_test.js\n    ok 19 - test-runner/output/global_after_should_fail_the_test.js\n      ---\n      duration_ms: 1973.1764\n      ...\n    # Subtest: test-runner/output/no_refs.js\n    ok 20 - test-runner/output/no_refs.js\n      ---\n      duration_ms: 1766.811\n      ...\n    # Subtest: test-runner/output/no_tests.js\n    ok 21 - test-runner/output/no_tests.js\n      ---\n      duration_ms: 1505.9137\n      ...\n    # Subtest: test-runner/output/only_tests.js\n    ok 22 - test-runner/output/only_tests.js\n      ---\n      duration_ms: 1682.0452\n      ...\n    # Subtest: test-runner/output/dot_reporter.js\n    ok 23 - test-runner/output/dot_reporter.js\n      ---\n      duration_ms: 2676.1702\n      ...\n    # Subtest: test-runner/output/junit_reporter.js\n    not ok 24 - test-runner/output/junit_reporter.js\n      ---\n      duration_ms: 3158.8513\n      location: 'C:\\\\workspace\\\\node-test-binary-windows-js-suites\\\\node\\\\test\\\\parallel\\\\test-runner-output.mjs:151:5'\n      failureType: 'testCodeFailure'\n      error: |-\n        Values have same structure but are not reference-equal:\n        \n        '<?xml version=\"1.0\" encoding=\"utf-8\"?>\\n' +\n          '<testsuites>\\n' +\n          '\\t<testcase name=\"sync pass todo\" time=\"*\" classname=\"test\">\\n' +\n          '\\t\\t<skipped type=\"todo\" message=\"true\"/>\\n' +\n          '\\t</testcase>\\n' +\n          '\\t<testcase name=\"sync pass todo with message\" time=\"*\" classname=\"test\">\\n' +\n          '\\t\\t<skipped type=\"todo\" message=\"this is a passing todo\"/>\\n' +\n          '\\t</testcase>\\n' +\n          '\\t<testcase name=\"sync fail todo\" time=\"*\" classname=\"test\" failure=\"thrown from sync fail todo\">\\n' +\n          '\\t\\t<skipped type=\"todo\" message=\"true\"/>\\n' +\n          '\\t\\t<failure type=\"testCodeFailure\" message=\"thrown from sync fail todo\">\\n' +\n          '[Error [ERR_TEST_FAILURE]: thrown from sync fail todo] {\\n' +\n          \"  code: 'ERR_TEST_FAILURE',\\n\" +\n          \"  failureType: 'testCodeFailure',\\n\" +\n          '  cause: Error: thrown from sync fail todo\\n' +\n          '      *\\n' +\n          '      *\\n' +\n          '      *\\n' +\n          '      *\\n' +\n          '      *\\n' +\n          '      *\\n' +\n          '      *\\n' +\n          '}\\n' +\n          '\\t\\t</failure>\\n' +\n          '\\t</testcase>\\n' +\n          '\\t<testcase name=\"sync fail todo with message\" time=\"*\" classname=\"test\" failure=\"thrown from sync fail todo with message\">\\n' +\n          '\\t\\t<skipped type=\"todo\" message=\"this is a failing todo\"/>\\n' +\n          '\\t\\t<failure type=\"testCodeFailure\" message=\"thrown from sync fail todo with message\">\\n' +\n          '[Error [ERR_TEST_FAILURE]: thrown from sync fail todo with message] {\\n' +\n          \"  code: 'ERR_TEST_FAILURE',\\n\" +\n          \"  failureType: 'testCodeFailure',\\n\" +\n          '  cause: Error: thrown from sync fail todo with message\\n' +\n          '      *\\n' +\n          '      *\\n' +\n          '      *\\n' +\n          '      *\\n' +\n          '      *\\n' +\n          '      *\\n' +\n          '      *\\n' +\n          '}\\n' +\n          '\\t\\t</failure>\\n' +\n          '\\t</testcase>\\n' +\n          '\\t<testcase name=\"sync skip pass\" time=\"*\" classname=\"test\">\\n' +\n          '\\t\\t<skipped type=\"skipped\" message=\"true\"/>\\n' +\n          '\\t</testcase>\\n' +\n          '\\t<testcase name=\"sync skip pass with message\" time=\"*\" classname=\"test\">\\n' +\n        ...\n        \n      code: 'ERR_ASSERTION'\n      name: 'AssertionError'\n      expected: |-\n        <?xml version=\"1.0\" encoding=\"utf-8\"?>\n        <testsuites>\n        \t<testcase name=\"sync pass todo\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"todo\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync pass todo with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"todo\" message=\"this is a passing todo\"/>\n        \t</testcase>\n        \t<testcase name=\"sync fail todo\" time=\"*\" classname=\"test\" failure=\"thrown from sync fail todo\">\n        \t\t<skipped type=\"todo\" message=\"true\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync fail todo\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync fail todo] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync fail todo\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync fail todo with message\" time=\"*\" classname=\"test\" failure=\"thrown from sync fail todo with message\">\n        \t\t<skipped type=\"todo\" message=\"this is a failing todo\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync fail todo with message\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync fail todo with message] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync fail todo with message\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync skip pass\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip pass with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"this is skipped\"/>\n        \t</testcase>\n        \t<testcase name=\"sync pass\" time=\"*\" classname=\"test\"/>\n        \t<!-- this test should pass -->\n        \t<testcase name=\"sync throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from sync throw fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async skip pass\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"async pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from async throw fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from async throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from async throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async skip fail\" time=\"*\" classname=\"test\" failure=\"thrown from async throw fail\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from async throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from async throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async assertion fail\" time=\"*\" classname=\"test\" failure=\"Expected values to be strictly equal:true !== false\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Expected values to be strictly equal:true !== false\">\n        [Error [ERR_TEST_FAILURE]: Expected values to be strictly equal:\n        \n        true !== false\n        ] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n          \n          true !== false\n          \n              *\n              *\n              *\n              *\n              *\n              *\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: true,\n            expected: false,\n            operator: 'strictEqual'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"resolve pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"reject fail\" time=\"*\" classname=\"test\" failure=\"rejected from reject fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"rejected from reject fail\">\n        [Error [ERR_TEST_FAILURE]: rejected from reject fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: rejected from reject fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unhandled rejection - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async unhandled rejection - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate throw - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate reject - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate resolve pass\" time=\"*\" classname=\"test\"/>\n        \t<testsuite name=\"subtest sync throw fail\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"1\" failures=\"1\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"+sync throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fail\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fail\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fail\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<!-- this subtest should make its parent test fail -->\n        \t</testsuite>\n        \t<testcase name=\"sync throw non-error fail\" time=\"*\" classname=\"test\" failure=\"Symbol(thrown symbol from sync throw non-error fail)\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Symbol(thrown symbol from sync throw non-error fail)\">\n        [Error [ERR_TEST_FAILURE]: Symbol(thrown symbol from sync throw non-error fail)] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: Symbol(thrown symbol from sync throw non-error fail) }\n        \t\t</failure>\n        \t</testcase>\n        \t<testsuite name=\"level 0a\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"4\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"level 1a\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1b\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1c\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1d\" time=\"*\" classname=\"test\"/>\n        \t</testsuite>\n        \t<testsuite name=\"top level\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"2\" failures=\"1\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"+long running\" time=\"*\" classname=\"test\" failure=\"test did not finish before its parent and was cancelled\">\n        \t\t\t<failure type=\"cancelledByParent\" message=\"test did not finish before its parent and was cancelled\">\n        [Error [ERR_TEST_FAILURE]: test did not finish before its parent and was cancelled] { code: 'ERR_TEST_FAILURE', failureType: 'cancelledByParent', cause: 'test did not finish before its parent and was cancelled' }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<testsuite name=\"+short running\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"1\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t\t<testcase name=\"++short running\" time=\"*\" classname=\"test\"/>\n        \t\t</testsuite>\n        \t</testsuite>\n        \t<testcase name=\"invalid subtest - pass but subtest fails\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"sync skip option\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip option with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"this is skipped\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip option is false fail\" time=\"*\" classname=\"test\" failure=\"this should be executed\">\n        \t\t<failure type=\"testCodeFailure\" message=\"this should be executed\">\n        [Error [ERR_TEST_FAILURE]: this should be executed] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: this should be executed\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"functionOnly\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"test with only a name provided\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"test with a name and options provided\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"functionAndOptions\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"callback pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback fail\" time=\"*\" classname=\"test\" failure=\"callback failure\">\n        \t\t<failure type=\"testCodeFailure\" message=\"callback failure\">\n        [Error [ERR_TEST_FAILURE]: callback failure] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: callback failure\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback also returns a Promise\" time=\"*\" classname=\"test\" failure=\"passed a callback but also returned a Promise\">\n        \t\t<failure type=\"callbackAndPromisePresent\" message=\"passed a callback but also returned a Promise\">\n        [Error [ERR_TEST_FAILURE]: passed a callback but also returned a Promise] { code: 'ERR_TEST_FAILURE', failureType: 'callbackAndPromisePresent', cause: 'passed a callback but also returned a Promise' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback throw\" time=\"*\" classname=\"test\" failure=\"thrown from callback throw\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from callback throw\">\n        [Error [ERR_TEST_FAILURE]: thrown from callback throw] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from callback throw\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback called twice\" time=\"*\" classname=\"test\" failure=\"callback invoked multiple times\">\n        \t\t<failure type=\"multipleCallbackInvocations\" message=\"callback invoked multiple times\">\n        Error [ERR_TEST_FAILURE]: callback invoked multiple times\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'multipleCallbackInvocations',\n          cause: 'callback invoked multiple times'\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback called twice in different ticks\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback called twice in future tick\" time=\"*\" classname=\"test\" failure=\"callback invoked multiple times\">\n        \t\t<failure type=\"uncaughtException\" message=\"callback invoked multiple times\">\n        Error [ERR_TEST_FAILURE]: callback invoked multiple times\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error [ERR_TEST_FAILURE]: callback invoked multiple times\n              * {\n            code: 'ERR_TEST_FAILURE',\n            failureType: 'multipleCallbackInvocations',\n            cause: 'callback invoked multiple times'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback async throw\" time=\"*\" classname=\"test\" failure=\"thrown from callback async throw\">\n        \t\t<failure type=\"uncaughtException\" message=\"thrown from callback async throw\">\n        Error [ERR_TEST_FAILURE]: thrown from callback async throw\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error: thrown from callback async throw\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback async throw after done\" time=\"*\" classname=\"test\"/>\n        \t<testsuite name=\"only is set but not in only mode\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"4\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"running subtest 1\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"running subtest 2\" time=\"*\" classname=\"test\"/>\n        \t\t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t\t<testcase name=\"running subtest 3\" time=\"*\" classname=\"test\"/>\n        \t\t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t\t<testcase name=\"running subtest 4\" time=\"*\" classname=\"test\"/>\n        \t</testsuite>\n        \t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t<testcase name=\"custom inspect symbol fail\" time=\"*\" classname=\"test\" failure=\"customized\">\n        \t\t<failure type=\"testCodeFailure\" message=\"customized\">\n        [Error [ERR_TEST_FAILURE]: customized] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: customized }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"custom inspect symbol that throws fail\" time=\"*\" classname=\"test\" failure=\"{  foo: 1,  [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]}\">\n        \t\t<failure type=\"testCodeFailure\" message=\"{  foo: 1,  [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]}\">\n        [Error [ERR_TEST_FAILURE]: {\n          foo: 1,\n          [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]\n        }] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: { foo: 1, [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]] }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testsuite name=\"subtest sync throw fails\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"2\" failures=\"2\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"sync throw fails at first\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fails at first\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fails at first\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fails at first\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fails at first\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<testcase name=\"sync throw fails at second\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fails at second\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fails at second\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fails at second\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fails at second\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t</testsuite>\n        \t<testcase name=\"timed out async test\" time=\"*\" classname=\"test\" failure=\"test timed out after 5ms\">\n        \t\t<failure type=\"testTimeoutFailure\" message=\"test timed out after 5ms\">\n        [Error [ERR_TEST_FAILURE]: test timed out after 5ms] { code: 'ERR_TEST_FAILURE', failureType: 'testTimeoutFailure', cause: 'test timed out after 5ms' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"timed out callback test\" time=\"*\" classname=\"test\" failure=\"test timed out after 5ms\">\n        \t\t<failure type=\"testTimeoutFailure\" message=\"test timed out after 5ms\">\n        [Error [ERR_TEST_FAILURE]: test timed out after 5ms] { code: 'ERR_TEST_FAILURE', failureType: 'testTimeoutFailure', cause: 'test timed out after 5ms' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"large timeout async test is ok\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"large timeout callback test is ok\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"successful thenable\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"rejected thenable\" time=\"*\" classname=\"test\" failure=\"custom error\">\n        \t\t<failure type=\"testCodeFailure\" message=\"custom error\">\n        [Error [ERR_TEST_FAILURE]: custom error] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: 'custom error' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unfinished test with uncaughtException\" time=\"*\" classname=\"test\" failure=\"foo\">\n        \t\t<failure type=\"uncaughtException\" message=\"foo\">\n        Error [ERR_TEST_FAILURE]: foo\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error: foo\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unfinished test with unhandledRejection\" time=\"*\" classname=\"test\" failure=\"bar\">\n        \t\t<failure type=\"unhandledRejection\" message=\"bar\">\n        Error [ERR_TEST_FAILURE]: bar\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'unhandledRejection',\n          cause: Error: bar\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"assertion errors display actual and expected properly\" time=\"*\" classname=\"test\" failure=\"Expected values to be loosely deep-equal:{  bar: 1,  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  foo: 1}should loosely deep-equal{  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  circular: &lt;ref *1> {    bar: 2,    c: [Circular *1]  }}\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Expected values to be loosely deep-equal:{  bar: 1,  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  foo: 1}should loosely deep-equal{  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  circular: &lt;ref *1> {    bar: 2,    c: [Circular *1]  }}\">\n        [Error [ERR_TEST_FAILURE]: Expected values to be loosely deep-equal:\n        \n        {\n          bar: 1,\n          baz: {\n            date: 1970-01-01T00:00:00.000Z,\n            null: null,\n            number: 1,\n            string: 'Hello',\n            undefined: undefined\n          },\n          boo: [\n            1\n          ],\n          foo: 1\n        }\n        \n        should loosely deep-equal\n        \n        {\n          baz: {\n            date: 1970-01-01T00:00:00.000Z,\n            null: null,\n            number: 1,\n            string: 'Hello',\n            undefined: undefined\n          },\n          boo: [\n            1\n          ],\n          circular: &lt;ref *1> {\n            bar: 2,\n            c: [Circular *1]\n          }\n        }] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n          \n          {\n            bar: 1,\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            foo: 1\n          }\n          \n          should loosely deep-equal\n          \n          {\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            circular: &lt;ref *1> {\n              bar: 2,\n              c: [Circular *1]\n            }\n          }\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: [Object],\n            expected: [Object],\n            operator: 'deepEqual'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"invalid subtest fail\" time=\"*\" classname=\"test\" failure=\"test could not be started because its parent finished\">\n        \t\t<failure type=\"parentAlreadyFinished\" message=\"test could not be started because its parent finished\">\n        Error [ERR_TEST_FAILURE]: test could not be started because its parent finished\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'parentAlreadyFinished',\n          cause: 'test could not be started because its parent finished'\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<!-- Error: Test \"unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:72:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: Test \"async unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:76:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from async unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: A resource generated asynchronous activity after the test ended. This activity created the error \"Error: uncaught from outside of a test\" which triggered an uncaughtException event, caught by the test runner. -->\n        \t<!-- Error: Test \"immediate throw - passes but warns\" at test/fixtures/test-runner/output/output.js:80:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from immediate throw fail\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- Error: Test \"immediate reject - passes but warns\" at test/fixtures/test-runner/output/output.js:86:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from immediate reject fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: Test \"callback called twice in different ticks\" at test/fixtures/test-runner/output/output.js:251:1 generated asynchronous activity after the test ended. This activity created the error \"Error [ERR_TEST_FAILURE]: callback invoked multiple times\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- Error: Test \"callback async throw after done\" at test/fixtures/test-runner/output/output.js:269:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from callback async throw after done\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- tests 76 -->\n        \t<!-- suites 0 -->\n        \t<!-- pass 35 -->\n        \t<!-- fail 25 -->\n        \t<!-- cancelled 3 -->\n        \t<!-- skipped 9 -->\n        \t<!-- todo 4 -->\n        \t<!-- duration_ms * -->\n        </testsuites>\n        \n      actual: |-\n        <?xml version=\"1.0\" encoding=\"utf-8\"?>\n        <testsuites>\n        \t<testcase name=\"sync pass todo\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"todo\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync pass todo with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"todo\" message=\"this is a passing todo\"/>\n        \t</testcase>\n        \t<testcase name=\"sync fail todo\" time=\"*\" classname=\"test\" failure=\"thrown from sync fail todo\">\n        \t\t<skipped type=\"todo\" message=\"true\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync fail todo\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync fail todo] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync fail todo\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync fail todo with message\" time=\"*\" classname=\"test\" failure=\"thrown from sync fail todo with message\">\n        \t\t<skipped type=\"todo\" message=\"this is a failing todo\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync fail todo with message\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync fail todo with message] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync fail todo with message\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync skip pass\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip pass with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"this is skipped\"/>\n        \t</testcase>\n        \t<testcase name=\"sync pass\" time=\"*\" classname=\"test\"/>\n        \t<!-- this test should pass -->\n        \t<testcase name=\"sync throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from sync throw fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async skip pass\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"async pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from async throw fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from async throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from async throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async skip fail\" time=\"*\" classname=\"test\" failure=\"thrown from async throw fail\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from async throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from async throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async assertion fail\" time=\"*\" classname=\"test\" failure=\"Expected values to be strictly equal:true !== false\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Expected values to be strictly equal:true !== false\">\n        [Error [ERR_TEST_FAILURE]: Expected values to be strictly equal:\n        \n        true !== false\n        ] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n          \n          true !== false\n          \n              *\n              *\n              *\n              *\n              *\n              *\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: true,\n            expected: false,\n            operator: 'strictEqual'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"resolve pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"reject fail\" time=\"*\" classname=\"test\" failure=\"rejected from reject fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"rejected from reject fail\">\n        [Error [ERR_TEST_FAILURE]: rejected from reject fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: rejected from reject fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unhandled rejection - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async unhandled rejection - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate throw - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate reject - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate resolve pass\" time=\"*\" classname=\"test\"/>\n        \t<testsuite name=\"subtest sync throw fail\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"1\" failures=\"1\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"+sync throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fail\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fail\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fail\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<!-- this subtest should make its parent test fail -->\n        \t</testsuite>\n        \t<testcase name=\"sync throw non-error fail\" time=\"*\" classname=\"test\" failure=\"Symbol(thrown symbol from sync throw non-error fail)\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Symbol(thrown symbol from sync throw non-error fail)\">\n        [Error [ERR_TEST_FAILURE]: Symbol(thrown symbol from sync throw non-error fail)] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: Symbol(thrown symbol from sync throw non-error fail) }\n        \t\t</failure>\n        \t</testcase>\n        \t<testsuite name=\"level 0a\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"4\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"level 1a\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1b\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1c\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1d\" time=\"*\" classname=\"test\"/>\n        \t</testsuite>\n        \t<testsuite name=\"top level\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"2\" failures=\"1\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"+long running\" time=\"*\" classname=\"test\" failure=\"test did not finish before its parent and was cancelled\">\n        \t\t\t<failure type=\"cancelledByParent\" message=\"test did not finish before its parent and was cancelled\">\n        [Error [ERR_TEST_FAILURE]: test did not finish before its parent and was cancelled] { code: 'ERR_TEST_FAILURE', failureType: 'cancelledByParent', cause: 'test did not finish before its parent and was cancelled' }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<testsuite name=\"+short running\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"1\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t\t<testcase name=\"++short running\" time=\"*\" classname=\"test\"/>\n        \t\t</testsuite>\n        \t</testsuite>\n        \t<testcase name=\"invalid subtest - pass but subtest fails\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"sync skip option\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip option with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"this is skipped\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip option is false fail\" time=\"*\" classname=\"test\" failure=\"this should be executed\">\n        \t\t<failure type=\"testCodeFailure\" message=\"this should be executed\">\n        [Error [ERR_TEST_FAILURE]: this should be executed] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: this should be executed\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"functionOnly\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"test with only a name provided\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"test with a name and options provided\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"functionAndOptions\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"callback pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback fail\" time=\"*\" classname=\"test\" failure=\"callback failure\">\n        \t\t<failure type=\"testCodeFailure\" message=\"callback failure\">\n        [Error [ERR_TEST_FAILURE]: callback failure] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: callback failure\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback also returns a Promise\" time=\"*\" classname=\"test\" failure=\"passed a callback but also returned a Promise\">\n        \t\t<failure type=\"callbackAndPromisePresent\" message=\"passed a callback but also returned a Promise\">\n        [Error [ERR_TEST_FAILURE]: passed a callback but also returned a Promise] { code: 'ERR_TEST_FAILURE', failureType: 'callbackAndPromisePresent', cause: 'passed a callback but also returned a Promise' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback throw\" time=\"*\" classname=\"test\" failure=\"thrown from callback throw\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from callback throw\">\n        [Error [ERR_TEST_FAILURE]: thrown from callback throw] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from callback throw\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback called twice\" time=\"*\" classname=\"test\" failure=\"callback invoked multiple times\">\n        \t\t<failure type=\"multipleCallbackInvocations\" message=\"callback invoked multiple times\">\n        Error [ERR_TEST_FAILURE]: callback invoked multiple times\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'multipleCallbackInvocations',\n          cause: 'callback invoked multiple times'\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback called twice in different ticks\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback called twice in future tick\" time=\"*\" classname=\"test\" failure=\"callback invoked multiple times\">\n        \t\t<failure type=\"uncaughtException\" message=\"callback invoked multiple times\">\n        Error [ERR_TEST_FAILURE]: callback invoked multiple times\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error [ERR_TEST_FAILURE]: callback invoked multiple times\n              * {\n            code: 'ERR_TEST_FAILURE',\n            failureType: 'multipleCallbackInvocations',\n            cause: 'callback invoked multiple times'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback async throw\" time=\"*\" classname=\"test\" failure=\"thrown from callback async throw\">\n        \t\t<failure type=\"uncaughtException\" message=\"thrown from callback async throw\">\n        Error [ERR_TEST_FAILURE]: thrown from callback async throw\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error: thrown from callback async throw\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback async throw after done\" time=\"*\" classname=\"test\"/>\n        \t<testsuite name=\"only is set but not in only mode\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"4\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"running subtest 1\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"running subtest 2\" time=\"*\" classname=\"test\"/>\n        \t\t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t\t<testcase name=\"running subtest 3\" time=\"*\" classname=\"test\"/>\n        \t\t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t\t<testcase name=\"running subtest 4\" time=\"*\" classname=\"test\"/>\n        \t</testsuite>\n        \t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t<testcase name=\"custom inspect symbol fail\" time=\"*\" classname=\"test\" failure=\"customized\">\n        \t\t<failure type=\"testCodeFailure\" message=\"customized\">\n        [Error [ERR_TEST_FAILURE]: customized] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: customized }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"custom inspect symbol that throws fail\" time=\"*\" classname=\"test\" failure=\"{  foo: 1,  [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]}\">\n        \t\t<failure type=\"testCodeFailure\" message=\"{  foo: 1,  [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]}\">\n        [Error [ERR_TEST_FAILURE]: {\n          foo: 1,\n          [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]\n        }] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: { foo: 1, [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]] }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testsuite name=\"subtest sync throw fails\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"2\" failures=\"2\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"sync throw fails at first\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fails at first\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fails at first\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fails at first\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fails at first\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<testcase name=\"sync throw fails at second\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fails at second\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fails at second\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fails at second\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fails at second\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t</testsuite>\n        \t<testcase name=\"timed out async test\" time=\"*\" classname=\"test\" failure=\"test timed out after 5ms\">\n        \t\t<failure type=\"testTimeoutFailure\" message=\"test timed out after 5ms\">\n        [Error [ERR_TEST_FAILURE]: test timed out after 5ms] { code: 'ERR_TEST_FAILURE', failureType: 'testTimeoutFailure', cause: 'test timed out after 5ms' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"timed out callback test\" time=\"*\" classname=\"test\" failure=\"test timed out after 5ms\">\n        \t\t<failure type=\"testTimeoutFailure\" message=\"test timed out after 5ms\">\n        [Error [ERR_TEST_FAILURE]: test timed out after 5ms] { code: 'ERR_TEST_FAILURE', failureType: 'testTimeoutFailure', cause: 'test timed out after 5ms' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"large timeout async test is ok\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"large timeout callback test is ok\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"successful thenable\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"rejected thenable\" time=\"*\" classname=\"test\" failure=\"custom error\">\n        \t\t<failure type=\"testCodeFailure\" message=\"custom error\">\n        [Error [ERR_TEST_FAILURE]: custom error] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: 'custom error' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unfinished test with uncaughtException\" time=\"*\" classname=\"test\" failure=\"foo\">\n        \t\t<failure type=\"uncaughtException\" message=\"foo\">\n        Error [ERR_TEST_FAILURE]: foo\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error: foo\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unfinished test with unhandledRejection\" time=\"*\" classname=\"test\" failure=\"bar\">\n        \t\t<failure type=\"unhandledRejection\" message=\"bar\">\n        Error [ERR_TEST_FAILURE]: bar\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'unhandledRejection',\n          cause: Error: bar\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"assertion errors display actual and expected properly\" time=\"*\" classname=\"test\" failure=\"Expected values to be loosely deep-equal:{  bar: 1,  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  foo: 1}should loosely deep-equal{  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  circular: &lt;ref *1> {    bar: 2,    c: [Circular *1]  }}\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Expected values to be loosely deep-equal:{  bar: 1,  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  foo: 1}should loosely deep-equal{  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  circular: &lt;ref *1> {    bar: 2,    c: [Circular *1]  }}\">\n        [Error [ERR_TEST_FAILURE]: Expected values to be loosely deep-equal:\n        \n        {\n          bar: 1,\n          baz: {\n            date: 1970-01-01T00:00:00.000Z,\n            null: null,\n            number: 1,\n            string: 'Hello',\n            undefined: undefined\n          },\n          boo: [\n            1\n          ],\n          foo: 1\n        }\n        \n        should loosely deep-equal\n        \n        {\n          baz: {\n            date: 1970-01-01T00:00:00.000Z,\n            null: null,\n            number: 1,\n            string: 'Hello',\n            undefined: undefined\n          },\n          boo: [\n            1\n          ],\n          circular: &lt;ref *1> {\n            bar: 2,\n            c: [Circular *1]\n          }\n        }] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n          \n          {\n            bar: 1,\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            foo: 1\n          }\n          \n          should loosely deep-equal\n          \n          {\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            circular: &lt;ref *1> {\n              bar: 2,\n              c: [Circular *1]\n            }\n          }\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: [Object],\n            expected: [Object],\n            operator: 'deepEqual'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"invalid subtest fail\" time=\"*\" classname=\"test\" failure=\"test could not be started because its parent finished\">\n        \t\t<failure type=\"parentAlreadyFinished\" message=\"test could not be started because its parent finished\">\n        Error [ERR_TEST_FAILURE]: test could not be started because its parent finished\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'parentAlreadyFinished',\n          cause: 'test could not be started because its parent finished'\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<!-- Error: Test \"unhandled rejection - passes but warns\" at test\\fixtures\\test-runner\\output\\output.js:72:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: Test \"async unhandled rejection - passes but warns\" at test\\fixtures\\test-runner\\output\\output.js:76:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from async unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: A resource generated asynchronous activity after the test ended. This activity created the error \"Error: uncaught from outside of a test\" which triggered an uncaughtException event, caught by the test runner. -->\n        \t<!-- Error: Test \"immediate throw - passes but warns\" at test\\fixtures\\test-runner\\output\\output.js:80:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from immediate throw fail\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- Error: Test \"immediate reject - passes but warns\" at test\\fixtures\\test-runner\\output\\output.js:86:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from immediate reject fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: Test \"callback called twice in different ticks\" at test\\fixtures\\test-runner\\output\\output.js:251:1 generated asynchronous activity after the test ended. This activity created the error \"Error [ERR_TEST_FAILURE]: callback invoked multiple times\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- Error: Test \"callback async throw after done\" at test\\fixtures\\test-runner\\output\\output.js:269:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from callback async throw after done\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- tests 76 -->\n        \t<!-- suites 0 -->\n        \t<!-- pass 35 -->\n        \t<!-- fail 25 -->\n        \t<!-- cancelled 3 -->\n        \t<!-- skipped 9 -->\n        \t<!-- todo 4 -->\n        \t<!-- duration_ms * -->\n        </testsuites>\n        \n      operator: 'strictEqual'\n      stack: |-\n        assertSnapshot (C:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:56:12)\n        async Module.spawnAndAssert (C:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:84:3)\n        async TestContext.<anonymous> (file:///C:/workspace/node-test-binary-windows-js-suites/node/test/parallel/test-runner-output.mjs:145:5)\n        async Test.run (node:internal/test_runner/test:736:9)\n        async Promise.all (index 23)\n        async Suite.run (node:internal/test_runner/test:1091:7)\n        async Test.processPendingSubtests (node:internal/test_runner/test:449:7)\n      ...\n    # Subtest: test-runner/output/spec_reporter_successful.js\n    ok 25 - test-runner/output/spec_reporter_successful.js\n      ---\n      duration_ms: 1318.9607\n      ...\n    # Subtest: test-runner/output/spec_reporter.js\n    not ok 26 - test-runner/output/spec_reporter.js\n      ---\n      duration_ms: 2936.9163\n      location: 'C:\\\\workspace\\\\node-test-binary-windows-js-suites\\\\node\\\\test\\\\parallel\\\\test-runner-output.mjs:151:5'\n      failureType: 'testCodeFailure'\n      error: |-\n        Expected values to be strictly equal:\n        + actual - expected ... Lines skipped\n        \n          ' sync pass todo (*ms) # TODO\\n' +\n            ' sync pass todo with message (*ms) # this is a passing todo\\n' +\n        ...\n            \"  'test could not be started because its parent finished'\\n\" +\n            '\\n' +\n        +   ' Error: Test \"unhandled rejection - passes but warns\" at test\\\\fixtures\\\\test-runner\\\\output\\\\output.js:72:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\\n' +\n        +   ' Error: Test \"async unhandled rejection - passes but warns\" at test\\\\fixtures\\\\test-runner\\\\output\\\\output.js:76:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from async unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\\n' +\n        -   ' Error: Test \"unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:72:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\\n' +\n        -   ' Error: Test \"async unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:76:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from async unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\\n' +\n            ' Error: A resource generated asynchronous activity after the test ended. This activity created the error \"Error: uncaught from outside of a test\" which triggered an uncaughtException event, caught by the test runner.\\n' +\n        +   ' Error: Test \"immediate throw - passes but warns\" at test\\\\fixtures\\\\test-runner\\\\output\\\\output.js:80:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from immediate throw fail\" and would have caused the test to fail, but instead triggered an uncaughtException event.\\n' +\n        +   ' Error: Test \"immediate reject - passes but warns\" at test\\\\fixtures\\\\test-runner\\\\output\\\\output.js:86:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from immediate reject fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\\n' +\n        +   ' Error: Test \"callback called twice in different ticks\" at test\\\\fixtures\\\\test-runner\\\\output\\\\output.js:251:1 generated asynchronous activity after the test ended. This activity created the error \"Error [ERR_TEST_FAILURE]: callback invoked multiple times\" and would have caused the test to fail, but instead triggered an uncaughtException event.\\n' +\n        +   ' Error: Test \"callback async throw after done\" at test\\\\fixtures\\\\test-runner\\\\output\\\\output.js:269:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from callback async throw after done\" and would have caused the test to fail, but instead triggered an uncaughtException event.\\n' +\n        -   ' Error: Test \"immediate throw - passes but warns\" at test/fixtures/test-runner/output/output.js:80:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from immediate throw fail\" and would have caused the test to fail, but instead triggered an uncaughtException event.\\n' +\n        -   ' Error: Test \"immediate reject - passes but warns\" at test/fixtures/test-runner/output/output.js:86:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from immediate reject fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\\n' +\n        -   ' Error: Test \"callback called twice in different ticks\" at test/fixtures/test-runner/output/output.js:251:1 generated asynchronous activity after the test ended. This activity created the error \"Error [ERR_TEST_FAILURE]: callback invoked multiple times\" and would have caused the test to fail, but instead triggered an uncaughtException event.\\n' +\n        -   ' Error: Test \"callback async throw after done\" at test/fixtures/test-runner/output/output.js:269:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from callback async throw after done\" and would have caused the test to fail, but instead triggered an uncaughtException event.\\n' +\n            ' tests 76\\n' +\n        ...\n            '*\\n' +\n            ' callback called twice (*ms)\\n' +\n            '  '... 2076 more characters\n      code: 'ERR_ASSERTION'\n      name: 'AssertionError'\n      expected: |-\n         sync pass todo (*ms) # TODO\n         sync pass todo with message (*ms) # this is a passing todo\n         sync fail todo (*ms) # TODO\n          Error: thrown from sync fail todo\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         sync fail todo with message (*ms) # this is a failing todo\n          Error: thrown from sync fail todo with message\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         sync skip pass (*ms) # SKIP\n         sync skip pass with message (*ms) # this is skipped\n         sync pass (*ms)\n         this test should pass\n         sync throw fail (*ms)\n          Error: thrown from sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         async skip pass (*ms) # SKIP\n         async pass (*ms)\n         async throw fail (*ms)\n          Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         async skip fail (*ms) # SKIP\n          Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         async assertion fail (*ms)\n          AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n          \n          true !== false\n          \n              *\n              *\n              *\n              *\n              *\n              *\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: true,\n            expected: false,\n            operator: 'strictEqual'\n          }\n        \n         resolve pass (*ms)\n         reject fail (*ms)\n          Error: rejected from reject fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         unhandled rejection - passes but warns (*ms)\n         async unhandled rejection - passes but warns (*ms)\n         immediate throw - passes but warns (*ms)\n         immediate reject - passes but warns (*ms)\n         immediate resolve pass (*ms)\n         subtest sync throw fail\n           +sync throw fail (*ms)\n            Error: thrown from subtest sync throw fail\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n        \n           this subtest should make its parent test fail\n         subtest sync throw fail (*ms)\n         sync throw non-error fail (*ms)\n          Symbol(thrown symbol from sync throw non-error fail)\n        \n         level 0a\n           level 1a (*ms)\n           level 1b (*ms)\n           level 1c (*ms)\n           level 1d (*ms)\n         level 0a (*ms)\n         top level\n           +long running (*ms)\n            'test did not finish before its parent and was cancelled'\n        \n           +short running\n             ++short running (*ms)\n           +short running (*ms)\n         top level (*ms)\n         invalid subtest - pass but subtest fails (*ms)\n         sync skip option (*ms) # SKIP\n         sync skip option with message (*ms) # this is skipped\n         sync skip option is false fail (*ms)\n          Error: this should be executed\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         <anonymous> (*ms)\n         functionOnly (*ms)\n         <anonymous> (*ms)\n         test with only a name provided (*ms)\n         <anonymous> (*ms)\n         <anonymous> (*ms) # SKIP\n         test with a name and options provided (*ms) # SKIP\n         functionAndOptions (*ms) # SKIP\n         callback pass (*ms)\n         callback fail (*ms)\n          Error: callback failure\n              *\n              *\n        \n         sync t is this in test (*ms)\n         async t is this in test (*ms)\n         callback t is this in test (*ms)\n         callback also returns a Promise (*ms)\n          'passed a callback but also returned a Promise'\n        \n         callback throw (*ms)\n          Error: thrown from callback throw\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         callback called twice (*ms)\n          'callback invoked multiple times'\n        \n         callback called twice in different ticks (*ms)\n         callback called twice in future tick (*ms)\n          Error [ERR_TEST_FAILURE]: callback invoked multiple times\n              * {\n            code: 'ERR_TEST_FAILURE',\n            failureType: 'multipleCallbackInvocations',\n            cause: 'callback invoked multiple times'\n          }\n        \n         callback async throw (*ms)\n          Error: thrown from callback async throw\n              *\n              *\n        \n         callback async throw after done (*ms)\n         only is set but not in only mode\n           running subtest 1 (*ms)\n           running subtest 2 (*ms)\n           'only' and 'runOnly' require the --test-only command-line option.\n           running subtest 3 (*ms)\n           'only' and 'runOnly' require the --test-only command-line option.\n           running subtest 4 (*ms)\n         only is set but not in only mode (*ms)\n         'only' and 'runOnly' require the --test-only command-line option.\n         custom inspect symbol fail (*ms)\n          customized\n        \n         custom inspect symbol that throws fail (*ms)\n          { foo: 1, [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]] }\n        \n         subtest sync throw fails\n           sync throw fails at first (*ms)\n            Error: thrown from subtest sync throw fails at first\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n        \n           sync throw fails at second (*ms)\n            Error: thrown from subtest sync throw fails at second\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n        \n         subtest sync throw fails (*ms)\n         timed out async test (*ms)\n          'test timed out after *ms'\n        \n         timed out callback test (*ms)\n          'test timed out after *ms'\n        \n         large timeout async test is ok (*ms)\n         large timeout callback test is ok (*ms)\n         successful thenable (*ms)\n         rejected thenable (*ms)\n          'custom error'\n        \n         unfinished test with uncaughtException (*ms)\n          Error: foo\n              *\n              *\n              *\n        \n         unfinished test with unhandledRejection (*ms)\n          Error: bar\n              *\n              *\n              *\n        \n         assertion errors display actual and expected properly (*ms)\n          AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n          \n          {\n            bar: 1,\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            foo: 1\n          }\n          \n          should loosely deep-equal\n          \n          {\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            circular: <ref *1> {\n              bar: 2,\n              c: [Circular *1]\n            }\n          }\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: [Object],\n            expected: [Object],\n            operator: 'deepEqual'\n          }\n        \n         invalid subtest fail (*ms)\n          'test could not be started because its parent finished'\n        \n         Error: Test \"unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:72:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\n         Error: Test \"async unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:76:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from async unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\n         Error: A resource generated asynchronous activity after the test ended. This activity created the error \"Error: uncaught from outside of a test\" which triggered an uncaughtException event, caught by the test runner.\n         Error: Test \"immediate throw - passes but warns\" at test/fixtures/test-runner/output/output.js:80:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from immediate throw fail\" and would have caused the test to fail, but instead triggered an uncaughtException event.\n         Error: Test \"immediate reject - passes but warns\" at test/fixtures/test-runner/output/output.js:86:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from immediate reject fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\n         Error: Test \"callback called twice in different ticks\" at test/fixtures/test-runner/output/output.js:251:1 generated asynchronous activity after the test ended. This activity created the error \"Error [ERR_TEST_FAILURE]: callback invoked multiple times\" and would have caused the test to fail, but instead triggered an uncaughtException event.\n         Error: Test \"callback async throw after done\" at test/fixtures/test-runner/output/output.js:269:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from callback async throw after done\" and would have caused the test to fail, but instead triggered an uncaughtException event.\n         tests 76\n         suites 0\n         pass 35\n         fail 25\n         cancelled 3\n         skipped 9\n         todo 4\n         duration_ms *\n        \n         failing tests:\n        \n        *\n         sync fail todo (*ms) # TODO\n          Error: thrown from sync fail todo\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         sync fail todo with message (*ms) # this is a failing todo\n          Error: thrown from sync fail todo with message\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         sync throw fail (*ms)\n          Error: thrown from sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         async throw fail (*ms)\n          Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         async skip fail (*ms) # SKIP\n          Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         async assertion fail (*ms)\n          AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n          \n          true !== false\n          \n              *\n              *\n              *\n              *\n              *\n              *\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: true,\n            expected: false,\n            operator: 'strictEqual'\n          }\n        \n        *\n         reject fail (*ms)\n          Error: rejected from reject fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         +sync throw fail (*ms)\n          Error: thrown from subtest sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         sync throw non-error fail (*ms)\n          Symbol(thrown symbol from sync throw non-error fail)\n        \n        *\n         +long running (*ms)\n          'test did not finish before its parent and was cancelled'\n        \n        *\n         sync skip option is false fail (*ms)\n          Error: this should be executed\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         callback fail (*ms)\n          Error: callback failure\n              *\n              *\n        \n        *\n         callback also returns a Promise (*ms)\n          'passed a callback but also returned a Promise'\n        \n        *\n         callback throw (*ms)\n          Error: thrown from callback throw\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         callback called twice (*ms)\n          'callback invoked multiple times'\n        \n        *\n         callback called twice in future tick (*ms)\n          Error [ERR_TEST_FAILURE]: callback invoked multiple times\n              * {\n            code: 'ERR_TEST_FAILURE',\n            failureType: 'multipleCallbackInvocations',\n            cause: 'callback invoked multiple times'\n          }\n        \n        *\n         callback async throw (*ms)\n          Error: thrown from callback async throw\n              *\n              *\n        \n        *\n         custom inspect symbol fail (*ms)\n          customized\n        \n        *\n         custom inspect symbol that throws fail (*ms)\n          { foo: 1, [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]] }\n        \n        *\n         sync throw fails at first (*ms)\n          Error: thrown from subtest sync throw fails at first\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         sync throw fails at second (*ms)\n          Error: thrown from subtest sync throw fails at second\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         timed out async test (*ms)\n          'test timed out after *ms'\n        \n        *\n         timed out callback test (*ms)\n          'test timed out after *ms'\n        \n        *\n         rejected thenable (*ms)\n          'custom error'\n        \n        *\n         unfinished test with uncaughtException (*ms)\n          Error: foo\n              *\n              *\n              *\n        \n        *\n         unfinished test with unhandledRejection (*ms)\n          Error: bar\n              *\n              *\n              *\n        \n        *\n         assertion errors display actual and expected properly (*ms)\n          AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n          \n          {\n            bar: 1,\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            foo: 1\n          }\n          \n          should loosely deep-equal\n          \n          {\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            circular: <ref *1> {\n              bar: 2,\n              c: [Circular *1]\n            }\n          }\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: [Object],\n            expected: [Object],\n            operator: 'deepEqual'\n          }\n        \n        *\n         invalid subtest fail (*ms)\n          'test could not be started because its parent finished'\n        \n      actual: |-\n         sync pass todo (*ms) # TODO\n         sync pass todo with message (*ms) # this is a passing todo\n         sync fail todo (*ms) # TODO\n          Error: thrown from sync fail todo\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         sync fail todo with message (*ms) # this is a failing todo\n          Error: thrown from sync fail todo with message\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         sync skip pass (*ms) # SKIP\n         sync skip pass with message (*ms) # this is skipped\n         sync pass (*ms)\n         this test should pass\n         sync throw fail (*ms)\n          Error: thrown from sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         async skip pass (*ms) # SKIP\n         async pass (*ms)\n         async throw fail (*ms)\n          Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         async skip fail (*ms) # SKIP\n          Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         async assertion fail (*ms)\n          AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n          \n          true !== false\n          \n              *\n              *\n              *\n              *\n              *\n              *\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: true,\n            expected: false,\n            operator: 'strictEqual'\n          }\n        \n         resolve pass (*ms)\n         reject fail (*ms)\n          Error: rejected from reject fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         unhandled rejection - passes but warns (*ms)\n         async unhandled rejection - passes but warns (*ms)\n         immediate throw - passes but warns (*ms)\n         immediate reject - passes but warns (*ms)\n         immediate resolve pass (*ms)\n         subtest sync throw fail\n           +sync throw fail (*ms)\n            Error: thrown from subtest sync throw fail\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n        \n           this subtest should make its parent test fail\n         subtest sync throw fail (*ms)\n         sync throw non-error fail (*ms)\n          Symbol(thrown symbol from sync throw non-error fail)\n        \n         level 0a\n           level 1a (*ms)\n           level 1b (*ms)\n           level 1c (*ms)\n           level 1d (*ms)\n         level 0a (*ms)\n         top level\n           +long running (*ms)\n            'test did not finish before its parent and was cancelled'\n        \n           +short running\n             ++short running (*ms)\n           +short running (*ms)\n         top level (*ms)\n         invalid subtest - pass but subtest fails (*ms)\n         sync skip option (*ms) # SKIP\n         sync skip option with message (*ms) # this is skipped\n         sync skip option is false fail (*ms)\n          Error: this should be executed\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         <anonymous> (*ms)\n         functionOnly (*ms)\n         <anonymous> (*ms)\n         test with only a name provided (*ms)\n         <anonymous> (*ms)\n         <anonymous> (*ms) # SKIP\n         test with a name and options provided (*ms) # SKIP\n         functionAndOptions (*ms) # SKIP\n         callback pass (*ms)\n         callback fail (*ms)\n          Error: callback failure\n              *\n              *\n        \n         sync t is this in test (*ms)\n         async t is this in test (*ms)\n         callback t is this in test (*ms)\n         callback also returns a Promise (*ms)\n          'passed a callback but also returned a Promise'\n        \n         callback throw (*ms)\n          Error: thrown from callback throw\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         callback called twice (*ms)\n          'callback invoked multiple times'\n        \n         callback called twice in different ticks (*ms)\n         callback called twice in future tick (*ms)\n          Error [ERR_TEST_FAILURE]: callback invoked multiple times\n              * {\n            code: 'ERR_TEST_FAILURE',\n            failureType: 'multipleCallbackInvocations',\n            cause: 'callback invoked multiple times'\n          }\n        \n         callback async throw (*ms)\n          Error: thrown from callback async throw\n              *\n              *\n        \n         callback async throw after done (*ms)\n         only is set but not in only mode\n           running subtest 1 (*ms)\n           running subtest 2 (*ms)\n           'only' and 'runOnly' require the --test-only command-line option.\n           running subtest 3 (*ms)\n           'only' and 'runOnly' require the --test-only command-line option.\n           running subtest 4 (*ms)\n         only is set but not in only mode (*ms)\n         'only' and 'runOnly' require the --test-only command-line option.\n         custom inspect symbol fail (*ms)\n          customized\n        \n         custom inspect symbol that throws fail (*ms)\n          { foo: 1, [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]] }\n        \n         subtest sync throw fails\n           sync throw fails at first (*ms)\n            Error: thrown from subtest sync throw fails at first\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n        \n           sync throw fails at second (*ms)\n            Error: thrown from subtest sync throw fails at second\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n        \n         subtest sync throw fails (*ms)\n         timed out async test (*ms)\n          'test timed out after *ms'\n        \n         timed out callback test (*ms)\n          'test timed out after *ms'\n        \n         large timeout async test is ok (*ms)\n         large timeout callback test is ok (*ms)\n         successful thenable (*ms)\n         rejected thenable (*ms)\n          'custom error'\n        \n         unfinished test with uncaughtException (*ms)\n          Error: foo\n              *\n              *\n              *\n        \n         unfinished test with unhandledRejection (*ms)\n          Error: bar\n              *\n              *\n              *\n        \n         assertion errors display actual and expected properly (*ms)\n          AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n          \n          {\n            bar: 1,\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            foo: 1\n          }\n          \n          should loosely deep-equal\n          \n          {\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            circular: <ref *1> {\n              bar: 2,\n              c: [Circular *1]\n            }\n          }\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: [Object],\n            expected: [Object],\n            operator: 'deepEqual'\n          }\n        \n         invalid subtest fail (*ms)\n          'test could not be started because its parent finished'\n        \n         Error: Test \"unhandled rejection - passes but warns\" at test\\fixtures\\test-runner\\output\\output.js:72:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\n         Error: Test \"async unhandled rejection - passes but warns\" at test\\fixtures\\test-runner\\output\\output.js:76:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from async unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\n         Error: A resource generated asynchronous activity after the test ended. This activity created the error \"Error: uncaught from outside of a test\" which triggered an uncaughtException event, caught by the test runner.\n         Error: Test \"immediate throw - passes but warns\" at test\\fixtures\\test-runner\\output\\output.js:80:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from immediate throw fail\" and would have caused the test to fail, but instead triggered an uncaughtException event.\n         Error: Test \"immediate reject - passes but warns\" at test\\fixtures\\test-runner\\output\\output.js:86:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from immediate reject fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\n         Error: Test \"callback called twice in different ticks\" at test\\fixtures\\test-runner\\output\\output.js:251:1 generated asynchronous activity after the test ended. This activity created the error \"Error [ERR_TEST_FAILURE]: callback invoked multiple times\" and would have caused the test to fail, but instead triggered an uncaughtException event.\n         Error: Test \"callback async throw after done\" at test\\fixtures\\test-runner\\output\\output.js:269:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from callback async throw after done\" and would have caused the test to fail, but instead triggered an uncaughtException event.\n         tests 76\n         suites 0\n         pass 35\n         fail 25\n         cancelled 3\n         skipped 9\n         todo 4\n         duration_ms *\n        \n         failing tests:\n        \n        *\n         sync fail todo (*ms) # TODO\n          Error: thrown from sync fail todo\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         sync fail todo with message (*ms) # this is a failing todo\n          Error: thrown from sync fail todo with message\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         sync throw fail (*ms)\n          Error: thrown from sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         async throw fail (*ms)\n          Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         async skip fail (*ms) # SKIP\n          Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         async assertion fail (*ms)\n          AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n          \n          true !== false\n          \n              *\n              *\n              *\n              *\n              *\n              *\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: true,\n            expected: false,\n            operator: 'strictEqual'\n          }\n        \n        *\n         reject fail (*ms)\n          Error: rejected from reject fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         +sync throw fail (*ms)\n          Error: thrown from subtest sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         sync throw non-error fail (*ms)\n          Symbol(thrown symbol from sync throw non-error fail)\n        \n        *\n         +long running (*ms)\n          'test did not finish before its parent and was cancelled'\n        \n        *\n         sync skip option is false fail (*ms)\n          Error: this should be executed\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         callback fail (*ms)\n          Error: callback failure\n              *\n              *\n        \n        *\n         callback also returns a Promise (*ms)\n          'passed a callback but also returned a Promise'\n        \n        *\n         callback throw (*ms)\n          Error: thrown from callback throw\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         callback called twice (*ms)\n          'callback invoked multiple times'\n        \n        *\n         callback called twice in future tick (*ms)\n          Error [ERR_TEST_FAILURE]: callback invoked multiple times\n              * {\n            code: 'ERR_TEST_FAILURE',\n            failureType: 'multipleCallbackInvocations',\n            cause: 'callback invoked multiple times'\n          }\n        \n        *\n         callback async throw (*ms)\n          Error: thrown from callback async throw\n              *\n              *\n        \n        *\n         custom inspect symbol fail (*ms)\n          customized\n        \n        *\n         custom inspect symbol that throws fail (*ms)\n          { foo: 1, [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]] }\n        \n        *\n         sync throw fails at first (*ms)\n          Error: thrown from subtest sync throw fails at first\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         sync throw fails at second (*ms)\n          Error: thrown from subtest sync throw fails at second\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         timed out async test (*ms)\n          'test timed out after *ms'\n        \n        *\n         timed out callback test (*ms)\n          'test timed out after *ms'\n        \n        *\n         rejected thenable (*ms)\n          'custom error'\n        \n        *\n         unfinished test with uncaughtException (*ms)\n          Error: foo\n              *\n              *\n              *\n        \n        *\n         unfinished test with unhandledRejection (*ms)\n          Error: bar\n              *\n              *\n              *\n        \n        *\n         assertion errors display actual and expected properly (*ms)\n          AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n          \n          {\n            bar: 1,\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            foo: 1\n          }\n          \n          should loosely deep-equal\n          \n          {\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            circular: <ref *1> {\n              bar: 2,\n              c: [Circular *1]\n            }\n          }\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: [Object],\n            expected: [Object],\n            operator: 'deepEqual'\n          }\n        \n        *\n         invalid subtest fail (*ms)\n          'test could not be started because its parent finished'\n        \n      operator: 'strictEqual'\n      stack: |-\n        assertSnapshot (C:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:56:12)\n        async Module.spawnAndAssert (C:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:84:3)\n        async TestContext.<anonymous> (file:///C:/workspace/node-test-binary-windows-js-suites/node/test/parallel/test-runner-output.mjs:145:5)\n        async Test.run (node:internal/test_runner/test:736:9)\n        async Promise.all (index 25)\n        async Suite.run (node:internal/test_runner/test:1091:7)\n        async Test.processPendingSubtests (node:internal/test_runner/test:449:7)\n      ...\n    # Subtest: test-runner/output/spec_reporter_cli.js\n    not ok 27 - test-runner/output/spec_reporter_cli.js\n      ---\n      duration_ms: 3611.6444\n      location: 'C:\\\\workspace\\\\node-test-binary-windows-js-suites\\\\node\\\\test\\\\parallel\\\\test-runner-output.mjs:151:5'\n      failureType: 'testCodeFailure'\n      error: |-\n        Expected values to be strictly equal:\n        + actual - expected ... Lines skipped\n        \n          ' sync pass todo (*ms) # TODO\\n' +\n            ' sync pass todo with message (*ms) # this is a passing todo\\n' +\n        ...\n            \"  'test could not be started because its parent finished'\\n\" +\n            '\\n' +\n        +   ' Error: Test \"unhandled rejection - passes but warns\" at test\\\\fixtures\\\\test-runner\\\\output\\\\output.js:72:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\\n' +\n        +   ' Error: Test \"async unhandled rejection - passes but warns\" at test\\\\fixtures\\\\test-runner\\\\output\\\\output.js:76:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from async unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\\n' +\n        -   ' Error: Test \"unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:72:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\\n' +\n        -   ' Error: Test \"async unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:76:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from async unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\\n' +\n            ' Error: A resource generated asynchronous activity after the test ended. This activity created the error \"Error: uncaught from outside of a test\" which triggered an uncaughtException event, caught by the test runner.\\n' +\n        +   ' Error: Test \"immediate throw - passes but warns\" at test\\\\fixtures\\\\test-runner\\\\output\\\\output.js:80:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from immediate throw fail\" and would have caused the test to fail, but instead triggered an uncaughtException event.\\n' +\n        +   ' Error: Test \"immediate reject - passes but warns\" at test\\\\fixtures\\\\test-runner\\\\output\\\\output.js:86:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from immediate reject fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\\n' +\n        +   ' Error: Test \"callback called twice in different ticks\" at test\\\\fixtures\\\\test-runner\\\\output\\\\output.js:251:1 generated asynchronous activity after the test ended. This activity created the error \"Error [ERR_TEST_FAILURE]: callback invoked multiple times\" and would have caused the test to fail, but instead triggered an uncaughtException event.\\n' +\n        +   ' Error: Test \"callback async throw after done\" at test\\\\fixtures\\\\test-runner\\\\output\\\\output.js:269:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from callback async throw after done\" and would have caused the test to fail, but instead triggered an uncaughtException event.\\n' +\n        -   ' Error: Test \"immediate throw - passes but warns\" at test/fixtures/test-runner/output/output.js:80:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from immediate throw fail\" and would have caused the test to fail, but instead triggered an uncaughtException event.\\n' +\n        -   ' Error: Test \"immediate reject - passes but warns\" at test/fixtures/test-runner/output/output.js:86:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from immediate reject fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\\n' +\n        -   ' Error: Test \"callback called twice in different ticks\" at test/fixtures/test-runner/output/output.js:251:1 generated asynchronous activity after the test ended. This activity created the error \"Error [ERR_TEST_FAILURE]: callback invoked multiple times\" and would have caused the test to fail, but instead triggered an uncaughtException event.\\n' +\n        -   ' Error: Test \"callback async throw after done\" at test/fixtures/test-runner/output/output.js:269:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from callback async throw after done\" and would have caused the test to fail, but instead triggered an uncaughtException event.\\n' +\n            ' tests 76\\n' +\n        ...\n            '\\n' +\n            '*\\n' +\n            ' callback also returns a Promise (*ms'... 2482 more characters\n      code: 'ERR_ASSERTION'\n      name: 'AssertionError'\n      expected: |-\n         sync pass todo (*ms) # TODO\n         sync pass todo with message (*ms) # this is a passing todo\n         sync fail todo (*ms) # TODO\n          Error: thrown from sync fail todo\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         sync fail todo with message (*ms) # this is a failing todo\n          Error: thrown from sync fail todo with message\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         sync skip pass (*ms) # SKIP\n         sync skip pass with message (*ms) # this is skipped\n         sync pass (*ms)\n         this test should pass\n         sync throw fail (*ms)\n          Error: thrown from sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         async skip pass (*ms) # SKIP\n         async pass (*ms)\n         async throw fail (*ms)\n          Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         async skip fail (*ms) # SKIP\n          Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         async assertion fail (*ms)\n          AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n          \n          true !== false\n          \n              *\n              *\n              *\n              *\n              *\n              *\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: true,\n            expected: false,\n            operator: 'strictEqual'\n          }\n        \n         resolve pass (*ms)\n         reject fail (*ms)\n          Error: rejected from reject fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         unhandled rejection - passes but warns (*ms)\n         async unhandled rejection - passes but warns (*ms)\n         immediate throw - passes but warns (*ms)\n         immediate reject - passes but warns (*ms)\n         immediate resolve pass (*ms)\n         subtest sync throw fail\n           +sync throw fail (*ms)\n            Error: thrown from subtest sync throw fail\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n        \n           this subtest should make its parent test fail\n         subtest sync throw fail (*ms)\n         sync throw non-error fail (*ms)\n          Symbol(thrown symbol from sync throw non-error fail)\n        \n         level 0a\n           level 1a (*ms)\n           level 1b (*ms)\n           level 1c (*ms)\n           level 1d (*ms)\n         level 0a (*ms)\n         top level\n           +long running (*ms)\n            'test did not finish before its parent and was cancelled'\n        \n           +short running\n             ++short running (*ms)\n           +short running (*ms)\n         top level (*ms)\n         invalid subtest - pass but subtest fails (*ms)\n         sync skip option (*ms) # SKIP\n         sync skip option with message (*ms) # this is skipped\n         sync skip option is false fail (*ms)\n          Error: this should be executed\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         <anonymous> (*ms)\n         functionOnly (*ms)\n         <anonymous> (*ms)\n         test with only a name provided (*ms)\n         <anonymous> (*ms)\n         <anonymous> (*ms) # SKIP\n         test with a name and options provided (*ms) # SKIP\n         functionAndOptions (*ms) # SKIP\n         callback pass (*ms)\n         callback fail (*ms)\n          Error: callback failure\n              *\n              *\n        \n         sync t is this in test (*ms)\n         async t is this in test (*ms)\n         callback t is this in test (*ms)\n         callback also returns a Promise (*ms)\n          'passed a callback but also returned a Promise'\n        \n         callback throw (*ms)\n          Error: thrown from callback throw\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         callback called twice (*ms)\n          'callback invoked multiple times'\n        \n         callback called twice in different ticks (*ms)\n         callback called twice in future tick (*ms)\n          Error [ERR_TEST_FAILURE]: callback invoked multiple times\n              * {\n            code: 'ERR_TEST_FAILURE',\n            failureType: 'multipleCallbackInvocations',\n            cause: 'callback invoked multiple times'\n          }\n        \n         callback async throw (*ms)\n          Error: thrown from callback async throw\n              *\n              *\n        \n         callback async throw after done (*ms)\n         only is set but not in only mode\n           running subtest 1 (*ms)\n           running subtest 2 (*ms)\n           'only' and 'runOnly' require the --test-only command-line option.\n           running subtest 3 (*ms)\n           'only' and 'runOnly' require the --test-only command-line option.\n           running subtest 4 (*ms)\n         only is set but not in only mode (*ms)\n         'only' and 'runOnly' require the --test-only command-line option.\n         custom inspect symbol fail (*ms)\n          customized\n        \n         custom inspect symbol that throws fail (*ms)\n          { foo: 1 }\n        \n         subtest sync throw fails\n           sync throw fails at first (*ms)\n            Error: thrown from subtest sync throw fails at first\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n        \n           sync throw fails at second (*ms)\n            Error: thrown from subtest sync throw fails at second\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n        \n         subtest sync throw fails (*ms)\n         timed out async test (*ms)\n          'test timed out after *ms'\n        \n         timed out callback test (*ms)\n          'test timed out after *ms'\n        \n         large timeout async test is ok (*ms)\n         large timeout callback test is ok (*ms)\n         successful thenable (*ms)\n         rejected thenable (*ms)\n          'custom error'\n        \n         unfinished test with uncaughtException (*ms)\n          Error: foo\n              *\n              *\n              *\n        \n         unfinished test with unhandledRejection (*ms)\n          Error: bar\n              *\n              *\n              *\n        \n         assertion errors display actual and expected properly (*ms)\n          AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n          \n          {\n            bar: 1,\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            foo: 1\n          }\n          \n          should loosely deep-equal\n          \n          {\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            circular: <ref *1> {\n              bar: 2,\n              c: [Circular *1]\n            }\n          }\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: { foo: 1, bar: 1, boo: [ 1 ], baz: { date: 1970-01-01T00:00:00.000Z, null: null, number: 1, string: 'Hello', undefined: undefined } },\n            expected: { boo: [ 1 ], baz: { date: 1970-01-01T00:00:00.000Z, null: null, number: 1, string: 'Hello', undefined: undefined }, circular: <ref *1> { bar: 2, c: [Circular *1] } },\n            operator: 'deepEqual'\n          }\n        \n         invalid subtest fail (*ms)\n          'test could not be started because its parent finished'\n        \n         Error: Test \"unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:72:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\n         Error: Test \"async unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:76:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from async unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\n         Error: A resource generated asynchronous activity after the test ended. This activity created the error \"Error: uncaught from outside of a test\" which triggered an uncaughtException event, caught by the test runner.\n         Error: Test \"immediate throw - passes but warns\" at test/fixtures/test-runner/output/output.js:80:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from immediate throw fail\" and would have caused the test to fail, but instead triggered an uncaughtException event.\n         Error: Test \"immediate reject - passes but warns\" at test/fixtures/test-runner/output/output.js:86:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from immediate reject fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\n         Error: Test \"callback called twice in different ticks\" at test/fixtures/test-runner/output/output.js:251:1 generated asynchronous activity after the test ended. This activity created the error \"Error [ERR_TEST_FAILURE]: callback invoked multiple times\" and would have caused the test to fail, but instead triggered an uncaughtException event.\n         Error: Test \"callback async throw after done\" at test/fixtures/test-runner/output/output.js:269:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from callback async throw after done\" and would have caused the test to fail, but instead triggered an uncaughtException event.\n         tests 76\n         suites 0\n         pass 35\n         fail 25\n         cancelled 3\n         skipped 9\n         todo 4\n         duration_ms *\n        \n         failing tests:\n        \n        *\n         sync fail todo (*ms) # TODO\n          Error: thrown from sync fail todo\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         sync fail todo with message (*ms) # this is a failing todo\n          Error: thrown from sync fail todo with message\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         sync throw fail (*ms)\n          Error: thrown from sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         async throw fail (*ms)\n          Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         async skip fail (*ms) # SKIP\n          Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         async assertion fail (*ms)\n          AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n          \n          true !== false\n          \n              *\n              *\n              *\n              *\n              *\n              *\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: true,\n            expected: false,\n            operator: 'strictEqual'\n          }\n        \n        *\n         reject fail (*ms)\n          Error: rejected from reject fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         +sync throw fail (*ms)\n          Error: thrown from subtest sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         sync throw non-error fail (*ms)\n          Symbol(thrown symbol from sync throw non-error fail)\n        \n        *\n         +long running (*ms)\n          'test did not finish before its parent and was cancelled'\n        \n        *\n         sync skip option is false fail (*ms)\n          Error: this should be executed\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         callback fail (*ms)\n          Error: callback failure\n              *\n              *\n        \n        *\n         callback also returns a Promise (*ms)\n          'passed a callback but also returned a Promise'\n        \n        *\n         callback throw (*ms)\n          Error: thrown from callback throw\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         callback called twice (*ms)\n          'callback invoked multiple times'\n        \n        *\n         callback called twice in future tick (*ms)\n          Error [ERR_TEST_FAILURE]: callback invoked multiple times\n              * {\n            code: 'ERR_TEST_FAILURE',\n            failureType: 'multipleCallbackInvocations',\n            cause: 'callback invoked multiple times'\n          }\n        \n        *\n         callback async throw (*ms)\n          Error: thrown from callback async throw\n              *\n              *\n        \n        *\n         custom inspect symbol fail (*ms)\n          customized\n        \n        *\n         custom inspect symbol that throws fail (*ms)\n          { foo: 1 }\n        \n        *\n         sync throw fails at first (*ms)\n          Error: thrown from subtest sync throw fails at first\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         sync throw fails at second (*ms)\n          Error: thrown from subtest sync throw fails at second\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         timed out async test (*ms)\n          'test timed out after *ms'\n        \n        *\n         timed out callback test (*ms)\n          'test timed out after *ms'\n        \n        *\n         rejected thenable (*ms)\n          'custom error'\n        \n        *\n         unfinished test with uncaughtException (*ms)\n          Error: foo\n              *\n              *\n              *\n        \n        *\n         unfinished test with unhandledRejection (*ms)\n          Error: bar\n              *\n              *\n              *\n        \n        *\n         assertion errors display actual and expected properly (*ms)\n          AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n          \n          {\n            bar: 1,\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            foo: 1\n          }\n          \n          should loosely deep-equal\n          \n          {\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            circular: <ref *1> {\n              bar: 2,\n              c: [Circular *1]\n            }\n          }\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: { foo: 1, bar: 1, boo: [ 1 ], baz: { date: 1970-01-01T00:00:00.000Z, null: null, number: 1, string: 'Hello', undefined: undefined } },\n            expected: { boo: [ 1 ], baz: { date: 1970-01-01T00:00:00.000Z, null: null, number: 1, string: 'Hello', undefined: undefined }, circular: <ref *1> { bar: 2, c: [Circular *1] } },\n            operator: 'deepEqual'\n          }\n        \n        *\n         invalid subtest fail (*ms)\n          'test could not be started because its parent finished'\n        \n      actual: |-\n         sync pass todo (*ms) # TODO\n         sync pass todo with message (*ms) # this is a passing todo\n         sync fail todo (*ms) # TODO\n          Error: thrown from sync fail todo\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         sync fail todo with message (*ms) # this is a failing todo\n          Error: thrown from sync fail todo with message\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         sync skip pass (*ms) # SKIP\n         sync skip pass with message (*ms) # this is skipped\n         sync pass (*ms)\n         this test should pass\n         sync throw fail (*ms)\n          Error: thrown from sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         async skip pass (*ms) # SKIP\n         async pass (*ms)\n         async throw fail (*ms)\n          Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         async skip fail (*ms) # SKIP\n          Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         async assertion fail (*ms)\n          AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n          \n          true !== false\n          \n              *\n              *\n              *\n              *\n              *\n              *\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: true,\n            expected: false,\n            operator: 'strictEqual'\n          }\n        \n         resolve pass (*ms)\n         reject fail (*ms)\n          Error: rejected from reject fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         unhandled rejection - passes but warns (*ms)\n         async unhandled rejection - passes but warns (*ms)\n         immediate throw - passes but warns (*ms)\n         immediate reject - passes but warns (*ms)\n         immediate resolve pass (*ms)\n         subtest sync throw fail\n           +sync throw fail (*ms)\n            Error: thrown from subtest sync throw fail\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n        \n           this subtest should make its parent test fail\n         subtest sync throw fail (*ms)\n         sync throw non-error fail (*ms)\n          Symbol(thrown symbol from sync throw non-error fail)\n        \n         level 0a\n           level 1a (*ms)\n           level 1b (*ms)\n           level 1c (*ms)\n           level 1d (*ms)\n         level 0a (*ms)\n         top level\n           +long running (*ms)\n            'test did not finish before its parent and was cancelled'\n        \n           +short running\n             ++short running (*ms)\n           +short running (*ms)\n         top level (*ms)\n         invalid subtest - pass but subtest fails (*ms)\n         sync skip option (*ms) # SKIP\n         sync skip option with message (*ms) # this is skipped\n         sync skip option is false fail (*ms)\n          Error: this should be executed\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         <anonymous> (*ms)\n         functionOnly (*ms)\n         <anonymous> (*ms)\n         test with only a name provided (*ms)\n         <anonymous> (*ms)\n         <anonymous> (*ms) # SKIP\n         test with a name and options provided (*ms) # SKIP\n         functionAndOptions (*ms) # SKIP\n         callback pass (*ms)\n         callback fail (*ms)\n          Error: callback failure\n              *\n              *\n        \n         sync t is this in test (*ms)\n         async t is this in test (*ms)\n         callback t is this in test (*ms)\n         callback also returns a Promise (*ms)\n          'passed a callback but also returned a Promise'\n        \n         callback throw (*ms)\n          Error: thrown from callback throw\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         callback called twice (*ms)\n          'callback invoked multiple times'\n        \n         callback called twice in different ticks (*ms)\n         callback called twice in future tick (*ms)\n          Error [ERR_TEST_FAILURE]: callback invoked multiple times\n              * {\n            code: 'ERR_TEST_FAILURE',\n            failureType: 'multipleCallbackInvocations',\n            cause: 'callback invoked multiple times'\n          }\n        \n         callback async throw (*ms)\n          Error: thrown from callback async throw\n              *\n              *\n        \n         callback async throw after done (*ms)\n         only is set but not in only mode\n           running subtest 1 (*ms)\n           running subtest 2 (*ms)\n           'only' and 'runOnly' require the --test-only command-line option.\n           running subtest 3 (*ms)\n           'only' and 'runOnly' require the --test-only command-line option.\n           running subtest 4 (*ms)\n         only is set but not in only mode (*ms)\n         'only' and 'runOnly' require the --test-only command-line option.\n         custom inspect symbol fail (*ms)\n          customized\n        \n         custom inspect symbol that throws fail (*ms)\n          { foo: 1 }\n        \n         subtest sync throw fails\n           sync throw fails at first (*ms)\n            Error: thrown from subtest sync throw fails at first\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n        \n           sync throw fails at second (*ms)\n            Error: thrown from subtest sync throw fails at second\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n        \n         subtest sync throw fails (*ms)\n         timed out async test (*ms)\n          'test timed out after *ms'\n        \n         timed out callback test (*ms)\n          'test timed out after *ms'\n        \n         large timeout async test is ok (*ms)\n         large timeout callback test is ok (*ms)\n         successful thenable (*ms)\n         rejected thenable (*ms)\n          'custom error'\n        \n         unfinished test with uncaughtException (*ms)\n          Error: foo\n              *\n              *\n              *\n        \n         unfinished test with unhandledRejection (*ms)\n          Error: bar\n              *\n              *\n              *\n        \n         assertion errors display actual and expected properly (*ms)\n          AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n          \n          {\n            bar: 1,\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            foo: 1\n          }\n          \n          should loosely deep-equal\n          \n          {\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            circular: <ref *1> {\n              bar: 2,\n              c: [Circular *1]\n            }\n          }\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: { foo: 1, bar: 1, boo: [ 1 ], baz: { date: 1970-01-01T00:00:00.000Z, null: null, number: 1, string: 'Hello', undefined: undefined } },\n            expected: { boo: [ 1 ], baz: { date: 1970-01-01T00:00:00.000Z, null: null, number: 1, string: 'Hello', undefined: undefined }, circular: <ref *1> { bar: 2, c: [Circular *1] } },\n            operator: 'deepEqual'\n          }\n        \n         invalid subtest fail (*ms)\n          'test could not be started because its parent finished'\n        \n         Error: Test \"unhandled rejection - passes but warns\" at test\\fixtures\\test-runner\\output\\output.js:72:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\n         Error: Test \"async unhandled rejection - passes but warns\" at test\\fixtures\\test-runner\\output\\output.js:76:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from async unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\n         Error: A resource generated asynchronous activity after the test ended. This activity created the error \"Error: uncaught from outside of a test\" which triggered an uncaughtException event, caught by the test runner.\n         Error: Test \"immediate throw - passes but warns\" at test\\fixtures\\test-runner\\output\\output.js:80:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from immediate throw fail\" and would have caused the test to fail, but instead triggered an uncaughtException event.\n         Error: Test \"immediate reject - passes but warns\" at test\\fixtures\\test-runner\\output\\output.js:86:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from immediate reject fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\n         Error: Test \"callback called twice in different ticks\" at test\\fixtures\\test-runner\\output\\output.js:251:1 generated asynchronous activity after the test ended. This activity created the error \"Error [ERR_TEST_FAILURE]: callback invoked multiple times\" and would have caused the test to fail, but instead triggered an uncaughtException event.\n         Error: Test \"callback async throw after done\" at test\\fixtures\\test-runner\\output\\output.js:269:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from callback async throw after done\" and would have caused the test to fail, but instead triggered an uncaughtException event.\n         tests 76\n         suites 0\n         pass 35\n         fail 25\n         cancelled 3\n         skipped 9\n         todo 4\n         duration_ms *\n        \n         failing tests:\n        \n        *\n         sync fail todo (*ms) # TODO\n          Error: thrown from sync fail todo\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         sync fail todo with message (*ms) # this is a failing todo\n          Error: thrown from sync fail todo with message\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         sync throw fail (*ms)\n          Error: thrown from sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         async throw fail (*ms)\n          Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         async skip fail (*ms) # SKIP\n          Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         async assertion fail (*ms)\n          AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n          \n          true !== false\n          \n              *\n              *\n              *\n              *\n              *\n              *\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: true,\n            expected: false,\n            operator: 'strictEqual'\n          }\n        \n        *\n         reject fail (*ms)\n          Error: rejected from reject fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         +sync throw fail (*ms)\n          Error: thrown from subtest sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         sync throw non-error fail (*ms)\n          Symbol(thrown symbol from sync throw non-error fail)\n        \n        *\n         +long running (*ms)\n          'test did not finish before its parent and was cancelled'\n        \n        *\n         sync skip option is false fail (*ms)\n          Error: this should be executed\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         callback fail (*ms)\n          Error: callback failure\n              *\n              *\n        \n        *\n         callback also returns a Promise (*ms)\n          'passed a callback but also returned a Promise'\n        \n        *\n         callback throw (*ms)\n          Error: thrown from callback throw\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         callback called twice (*ms)\n          'callback invoked multiple times'\n        \n        *\n         callback called twice in future tick (*ms)\n          Error [ERR_TEST_FAILURE]: callback invoked multiple times\n              * {\n            code: 'ERR_TEST_FAILURE',\n            failureType: 'multipleCallbackInvocations',\n            cause: 'callback invoked multiple times'\n          }\n        \n        *\n         callback async throw (*ms)\n          Error: thrown from callback async throw\n              *\n              *\n        \n        *\n         custom inspect symbol fail (*ms)\n          customized\n        \n        *\n         custom inspect symbol that throws fail (*ms)\n          { foo: 1 }\n        \n        *\n         sync throw fails at first (*ms)\n          Error: thrown from subtest sync throw fails at first\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         sync throw fails at second (*ms)\n          Error: thrown from subtest sync throw fails at second\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         timed out async test (*ms)\n          'test timed out after *ms'\n        \n        *\n         timed out callback test (*ms)\n          'test timed out after *ms'\n        \n        *\n         rejected thenable (*ms)\n          'custom error'\n        \n        *\n         unfinished test with uncaughtException (*ms)\n          Error: foo\n              *\n              *\n              *\n        \n        *\n         unfinished test with unhandledRejection (*ms)\n          Error: bar\n              *\n              *\n              *\n        \n        *\n         assertion errors display actual and expected properly (*ms)\n          AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n          \n          {\n            bar: 1,\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            foo: 1\n          }\n          \n          should loosely deep-equal\n          \n          {\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            circular: <ref *1> {\n              bar: 2,\n              c: [Circular *1]\n            }\n          }\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: { foo: 1, bar: 1, boo: [ 1 ], baz: { date: 1970-01-01T00:00:00.000Z, null: null, number: 1, string: 'Hello', undefined: undefined } },\n            expected: { boo: [ 1 ], baz: { date: 1970-01-01T00:00:00.000Z, null: null, number: 1, string: 'Hello', undefined: undefined }, circular: <ref *1> { bar: 2, c: [Circular *1] } },\n            operator: 'deepEqual'\n          }\n        \n        *\n         invalid subtest fail (*ms)\n          'test could not be started because its parent finished'\n        \n      operator: 'strictEqual'\n      stack: |-\n        assertSnapshot (C:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:56:12)\n        async Module.spawnAndAssert (C:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:84:3)\n        async TestContext.<anonymous> (file:///C:/workspace/node-test-binary-windows-js-suites/node/test/parallel/test-runner-output.mjs:145:5)\n        async Test.run (node:internal/test_runner/test:736:9)\n        async Promise.all (index 26)\n        async Suite.run (node:internal/test_runner/test:1091:7)\n        async Test.processPendingSubtests (node:internal/test_runner/test:449:7)\n      ...\n    # Subtest: test-runner/output/source_mapped_locations.mjs\n    ok 28 - test-runner/output/source_mapped_locations.mjs\n      ---\n      duration_ms: 2161.2703\n      ...\n    # Subtest: test-runner/output/lcov_reporter.js\n    ok 29 - test-runner/output/lcov_reporter.js\n      ---\n      duration_ms: 3335.9964\n      ...\n    # Subtest: test-runner/output/output.js\n    ok 30 - test-runner/output/output.js\n      ---\n      duration_ms: 2308.4737\n      ...\n    # Subtest: test-runner/output/output_cli.js\n    ok 31 - test-runner/output/output_cli.js\n      ---\n      duration_ms: 3441.1101\n      ...\n    # Subtest: test-runner/output/name_pattern.js\n    ok 32 - test-runner/output/name_pattern.js\n      ---\n      duration_ms: 1918.0153\n      ...\n    # Subtest: test-runner/output/name_pattern_with_only.js\n    ok 33 - test-runner/output/name_pattern_with_only.js\n      ---\n      duration_ms: 1903.6303\n      ...\n    # Subtest: test-runner/output/unfinished-suite-async-error.js\n    ok 34 - test-runner/output/unfinished-suite-async-error.js\n      ---\n      duration_ms: 1890.1261\n      ...\n    # Subtest: test-runner/output/unresolved_promise.js\n    ok 35 - test-runner/output/unresolved_promise.js\n      ---\n      duration_ms: 1875.657\n      ...\n    # Subtest: test-runner/output/default_output.js\n        # Subtest: <anonymous>\n        ok 1 - <anonymous> # SKIP Skipping pseudo-tty tests, as pseudo terminals are not available on Windows.\n          ---\n          duration_ms: 59.2934\n          ...\n        1..1\n    ok 36 - test-runner/output/default_output.js\n      ---\n      duration_ms: 60.5194\n      ...\n    # Subtest: test-runner/output/arbitrary-output.js\n    ok 37 - test-runner/output/arbitrary-output.js\n      ---\n      duration_ms: 2631.9741\n      ...\n    # Subtest: test-runner/output/async-test-scheduling.mjs\n    ok 38 - test-runner/output/async-test-scheduling.mjs\n      ---\n      duration_ms: 2618.7428\n      ...\n    # Subtest: test-runner/output/arbitrary-output-colored.js\n        # Subtest: <anonymous>\n        ok 1 - <anonymous> # SKIP Skipping pseudo-tty tests, as pseudo terminals are not available on Windows.\n          ---\n          duration_ms: 28.8039\n          ...\n        1..1\n    ok 39 - test-runner/output/arbitrary-output-colored.js\n      ---\n      duration_ms: 29.5769\n      ...\n    # Subtest: test-runner/output/dot_output_custom_columns.js\n        # Subtest: <anonymous>\n        ok 1 - <anonymous> # SKIP Skipping pseudo-tty tests, as pseudo terminals are not available on Windows.\n          ---\n          duration_ms: 28.576\n          ...\n        1..1\n    ok 40 - test-runner/output/dot_output_custom_columns.js\n      ---\n      duration_ms: 29.286\n      ...\n    # Subtest: test-runner/output/tap_escape.js\n    ok 41 - test-runner/output/tap_escape.js\n      ---\n      duration_ms: 1831.6049\n      ...\n    # Subtest: test-runner/output/coverage_failure.js\n    ok 42 - test-runner/output/coverage_failure.js\n      ---\n      duration_ms: 1818.4917\n      ...\n    1..42\nnot ok 1 - test runner output\n  ---\n  duration_ms: 4537.0663\n  type: 'suite'\n  location: 'C:\\\\workspace\\\\node-test-binary-windows-js-suites\\\\node\\\\test\\\\parallel\\\\test-runner-output.mjs:149:1'\n  failureType: 'subtestsFailed'\n  error: '3 subtests failed'\n  code: 'ERR_TEST_FAILURE'\n  ...\n1..1\n# tests 45\n# suites 1\n# pass 39\n# fail 3\n# cancelled 0\n# skipped 3\n# todo 0\n# duration_ms 4564.6701"},"time":5035.159,"fullname":"parallel/test-runner-output","closingTestPoint":false}},{"testName":"parallel/test-runner-output","timestamp":1712793616158,"status":"FAILED","jobName":"node-test-binary-windows-js-suites","config":"node-test-binary-windows-js-suites Â» 0,win2016-COMPILED_BY-vs2022-x86 #27039","buildUrl":"https://ci.nodejs.org/job/node-test-binary-windows-js-suites/RUN_SUBSET=0,nodes=win2016-COMPILED_BY-vs2022-x86/27039/","buildNumber":27039,"builtOn":"test-rackspace-win2016_vs2015-x64-1","nodeVersion":"22.0.0","commitHash":"4e15a4373cf4bd852ed72dbc423c653f08640dba","callStack":[{"upstreamBuild":62036,"upstreamProject":"node-test-commit-windows-fanned","upstreamUrl":"job/node-test-commit-windows-fanned/"},{"upstreamBuild":69709,"upstreamProject":"node-test-commit","upstreamUrl":"job/node-test-commit/"},{"upstreamBuild":58241,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"prId":"52401"}],"tap":{"ok":false,"name":"parallel/test-runner-output","id":679,"buffered":false,"tapError":null,"skip":false,"todo":false,"previous":null,"plan":null,"diag":{"severity":"fail","exitcode":1,"stack":"TAP version 13\n# Subtest: test runner output\n    # Subtest: test-runner/output/abort.js\n    ok 1 - test-runner/output/abort.js\n      ---\n      duration_ms: 3215.5478\n      ...\n    # Subtest: test-runner/output/abort_suite.js\n    ok 2 - test-runner/output/abort_suite.js\n      ---\n      duration_ms: 3169.6221\n      ...\n    # Subtest: test-runner/output/abort_hooks.js\n    ok 3 - test-runner/output/abort_hooks.js\n      ---\n      duration_ms: 3141.6854\n      ...\n    # Subtest: test-runner/output/describe_it.js\n    ok 4 - test-runner/output/describe_it.js\n      ---\n      duration_ms: 3109.9022\n      ...\n    # Subtest: test-runner/output/describe_nested.js\n    ok 5 - test-runner/output/describe_nested.js\n      ---\n      duration_ms: 3047.5537\n      ...\n    # Subtest: test-runner/output/eval_dot.js\n    ok 6 - test-runner/output/eval_dot.js\n      ---\n      duration_ms: 3006.2075\n      ...\n    # Subtest: test-runner/output/eval_spec.js\n    ok 7 - test-runner/output/eval_spec.js\n      ---\n      duration_ms: 3092.8988\n      ...\n    # Subtest: test-runner/output/eval_tap.js\n    ok 8 - test-runner/output/eval_tap.js\n      ---\n      duration_ms: 2867.2807\n      ...\n    # Subtest: test-runner/output/hooks.js\n    ok 9 - test-runner/output/hooks.js\n      ---\n      duration_ms: 2957.9391\n      ...\n    # Subtest: test-runner/output/hooks_spec_reporter.js\n    ok 10 - test-runner/output/hooks_spec_reporter.js\n      ---\n      duration_ms: 3142.6082\n      ...\n    # Subtest: test-runner/output/skip-each-hooks.js\n    ok 11 - test-runner/output/skip-each-hooks.js\n      ---\n      duration_ms: 2511.3298\n      ...\n    # Subtest: test-runner/output/suite-skip-hooks.js\n    ok 12 - test-runner/output/suite-skip-hooks.js\n      ---\n      duration_ms: 2451.8835\n      ...\n    # Subtest: test-runner/output/timeout_in_before_each_should_not_affect_further_tests.js\n    ok 13 - test-runner/output/timeout_in_before_each_should_not_affect_further_tests.js\n      ---\n      duration_ms: 2406.4769\n      ...\n    # Subtest: test-runner/output/hooks-with-no-global-test.js\n    ok 14 - test-runner/output/hooks-with-no-global-test.js\n      ---\n      duration_ms: 2285.7197\n      ...\n    # Subtest: test-runner/output/global-hooks-with-no-tests.js\n    ok 15 - test-runner/output/global-hooks-with-no-tests.js\n      ---\n      duration_ms: 2162.7038\n      ...\n    # Subtest: test-runner/output/before-and-after-each-too-many-listeners.js\n    ok 16 - test-runner/output/before-and-after-each-too-many-listeners.js\n      ---\n      duration_ms: 2121.8805\n      ...\n    # Subtest: test-runner/output/before-and-after-each-with-timeout-too-many-listeners.js\n    ok 17 - test-runner/output/before-and-after-each-with-timeout-too-many-listeners.js\n      ---\n      duration_ms: 1989.1534\n      ...\n    # Subtest: test-runner/output/force_exit.js\n    ok 18 - test-runner/output/force_exit.js\n      ---\n      duration_ms: 1891.2523\n      ...\n    # Subtest: test-runner/output/global_after_should_fail_the_test.js\n    ok 19 - test-runner/output/global_after_should_fail_the_test.js\n      ---\n      duration_ms: 1851.285\n      ...\n    # Subtest: test-runner/output/no_refs.js\n    ok 20 - test-runner/output/no_refs.js\n      ---\n      duration_ms: 1815.7031\n      ...\n    # Subtest: test-runner/output/no_tests.js\n    ok 21 - test-runner/output/no_tests.js\n      ---\n      duration_ms: 1783.2089\n      ...\n    # Subtest: test-runner/output/only_tests.js\n    ok 22 - test-runner/output/only_tests.js\n      ---\n      duration_ms: 1732.9753\n      ...\n    # Subtest: test-runner/output/dot_reporter.js\n    ok 23 - test-runner/output/dot_reporter.js\n      ---\n      duration_ms: 2296.4144\n      ...\n    # Subtest: test-runner/output/junit_reporter.js\n    not ok 24 - test-runner/output/junit_reporter.js\n      ---\n      duration_ms: 2838.5528\n      location: 'C:\\\\workspace\\\\node-test-binary-windows-js-suites\\\\node\\\\test\\\\parallel\\\\test-runner-output.mjs:151:5'\n      failureType: 'testCodeFailure'\n      error: |-\n        Values have same structure but are not reference-equal:\n        \n        '<?xml version=\"1.0\" encoding=\"utf-8\"?>\\n' +\n          '<testsuites>\\n' +\n          '\\t<testcase name=\"sync pass todo\" time=\"*\" classname=\"test\">\\n' +\n          '\\t\\t<skipped type=\"todo\" message=\"true\"/>\\n' +\n          '\\t</testcase>\\n' +\n          '\\t<testcase name=\"sync pass todo with message\" time=\"*\" classname=\"test\">\\n' +\n          '\\t\\t<skipped type=\"todo\" message=\"this is a passing todo\"/>\\n' +\n          '\\t</testcase>\\n' +\n          '\\t<testcase name=\"sync fail todo\" time=\"*\" classname=\"test\" failure=\"thrown from sync fail todo\">\\n' +\n          '\\t\\t<skipped type=\"todo\" message=\"true\"/>\\n' +\n          '\\t\\t<failure type=\"testCodeFailure\" message=\"thrown from sync fail todo\">\\n' +\n          '[Error [ERR_TEST_FAILURE]: thrown from sync fail todo] {\\n' +\n          \"  code: 'ERR_TEST_FAILURE',\\n\" +\n          \"  failureType: 'testCodeFailure',\\n\" +\n          '  cause: Error: thrown from sync fail todo\\n' +\n          '      *\\n' +\n          '      *\\n' +\n          '      *\\n' +\n          '      *\\n' +\n          '      *\\n' +\n          '      *\\n' +\n          '      *\\n' +\n          '}\\n' +\n          '\\t\\t</failure>\\n' +\n          '\\t</testcase>\\n' +\n          '\\t<testcase name=\"sync fail todo with message\" time=\"*\" classname=\"test\" failure=\"thrown from sync fail todo with message\">\\n' +\n          '\\t\\t<skipped type=\"todo\" message=\"this is a failing todo\"/>\\n' +\n          '\\t\\t<failure type=\"testCodeFailure\" message=\"thrown from sync fail todo with message\">\\n' +\n          '[Error [ERR_TEST_FAILURE]: thrown from sync fail todo with message] {\\n' +\n          \"  code: 'ERR_TEST_FAILURE',\\n\" +\n          \"  failureType: 'testCodeFailure',\\n\" +\n          '  cause: Error: thrown from sync fail todo with message\\n' +\n          '      *\\n' +\n          '      *\\n' +\n          '      *\\n' +\n          '      *\\n' +\n          '      *\\n' +\n          '      *\\n' +\n          '      *\\n' +\n          '}\\n' +\n          '\\t\\t</failure>\\n' +\n          '\\t</testcase>\\n' +\n          '\\t<testcase name=\"sync skip pass\" time=\"*\" classname=\"test\">\\n' +\n          '\\t\\t<skipped type=\"skipped\" message=\"true\"/>\\n' +\n          '\\t</testcase>\\n' +\n          '\\t<testcase name=\"sync skip pass with message\" time=\"*\" classname=\"test\">\\n' +\n        ...\n        \n      code: 'ERR_ASSERTION'\n      name: 'AssertionError'\n      expected: |-\n        <?xml version=\"1.0\" encoding=\"utf-8\"?>\n        <testsuites>\n        \t<testcase name=\"sync pass todo\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"todo\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync pass todo with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"todo\" message=\"this is a passing todo\"/>\n        \t</testcase>\n        \t<testcase name=\"sync fail todo\" time=\"*\" classname=\"test\" failure=\"thrown from sync fail todo\">\n        \t\t<skipped type=\"todo\" message=\"true\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync fail todo\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync fail todo] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync fail todo\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync fail todo with message\" time=\"*\" classname=\"test\" failure=\"thrown from sync fail todo with message\">\n        \t\t<skipped type=\"todo\" message=\"this is a failing todo\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync fail todo with message\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync fail todo with message] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync fail todo with message\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync skip pass\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip pass with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"this is skipped\"/>\n        \t</testcase>\n        \t<testcase name=\"sync pass\" time=\"*\" classname=\"test\"/>\n        \t<!-- this test should pass -->\n        \t<testcase name=\"sync throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from sync throw fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async skip pass\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"async pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from async throw fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from async throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from async throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async skip fail\" time=\"*\" classname=\"test\" failure=\"thrown from async throw fail\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from async throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from async throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async assertion fail\" time=\"*\" classname=\"test\" failure=\"Expected values to be strictly equal:true !== false\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Expected values to be strictly equal:true !== false\">\n        [Error [ERR_TEST_FAILURE]: Expected values to be strictly equal:\n        \n        true !== false\n        ] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n          \n          true !== false\n          \n              *\n              *\n              *\n              *\n              *\n              *\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: true,\n            expected: false,\n            operator: 'strictEqual'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"resolve pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"reject fail\" time=\"*\" classname=\"test\" failure=\"rejected from reject fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"rejected from reject fail\">\n        [Error [ERR_TEST_FAILURE]: rejected from reject fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: rejected from reject fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unhandled rejection - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async unhandled rejection - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate throw - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate reject - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate resolve pass\" time=\"*\" classname=\"test\"/>\n        \t<testsuite name=\"subtest sync throw fail\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"1\" failures=\"1\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"+sync throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fail\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fail\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fail\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<!-- this subtest should make its parent test fail -->\n        \t</testsuite>\n        \t<testcase name=\"sync throw non-error fail\" time=\"*\" classname=\"test\" failure=\"Symbol(thrown symbol from sync throw non-error fail)\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Symbol(thrown symbol from sync throw non-error fail)\">\n        [Error [ERR_TEST_FAILURE]: Symbol(thrown symbol from sync throw non-error fail)] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: Symbol(thrown symbol from sync throw non-error fail) }\n        \t\t</failure>\n        \t</testcase>\n        \t<testsuite name=\"level 0a\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"4\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"level 1a\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1b\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1c\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1d\" time=\"*\" classname=\"test\"/>\n        \t</testsuite>\n        \t<testsuite name=\"top level\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"2\" failures=\"1\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"+long running\" time=\"*\" classname=\"test\" failure=\"test did not finish before its parent and was cancelled\">\n        \t\t\t<failure type=\"cancelledByParent\" message=\"test did not finish before its parent and was cancelled\">\n        [Error [ERR_TEST_FAILURE]: test did not finish before its parent and was cancelled] { code: 'ERR_TEST_FAILURE', failureType: 'cancelledByParent', cause: 'test did not finish before its parent and was cancelled' }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<testsuite name=\"+short running\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"1\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t\t<testcase name=\"++short running\" time=\"*\" classname=\"test\"/>\n        \t\t</testsuite>\n        \t</testsuite>\n        \t<testcase name=\"invalid subtest - pass but subtest fails\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"sync skip option\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip option with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"this is skipped\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip option is false fail\" time=\"*\" classname=\"test\" failure=\"this should be executed\">\n        \t\t<failure type=\"testCodeFailure\" message=\"this should be executed\">\n        [Error [ERR_TEST_FAILURE]: this should be executed] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: this should be executed\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"functionOnly\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"test with only a name provided\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"test with a name and options provided\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"functionAndOptions\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"callback pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback fail\" time=\"*\" classname=\"test\" failure=\"callback failure\">\n        \t\t<failure type=\"testCodeFailure\" message=\"callback failure\">\n        [Error [ERR_TEST_FAILURE]: callback failure] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: callback failure\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback also returns a Promise\" time=\"*\" classname=\"test\" failure=\"passed a callback but also returned a Promise\">\n        \t\t<failure type=\"callbackAndPromisePresent\" message=\"passed a callback but also returned a Promise\">\n        [Error [ERR_TEST_FAILURE]: passed a callback but also returned a Promise] { code: 'ERR_TEST_FAILURE', failureType: 'callbackAndPromisePresent', cause: 'passed a callback but also returned a Promise' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback throw\" time=\"*\" classname=\"test\" failure=\"thrown from callback throw\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from callback throw\">\n        [Error [ERR_TEST_FAILURE]: thrown from callback throw] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from callback throw\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback called twice\" time=\"*\" classname=\"test\" failure=\"callback invoked multiple times\">\n        \t\t<failure type=\"multipleCallbackInvocations\" message=\"callback invoked multiple times\">\n        Error [ERR_TEST_FAILURE]: callback invoked multiple times\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'multipleCallbackInvocations',\n          cause: 'callback invoked multiple times'\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback called twice in different ticks\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback called twice in future tick\" time=\"*\" classname=\"test\" failure=\"callback invoked multiple times\">\n        \t\t<failure type=\"uncaughtException\" message=\"callback invoked multiple times\">\n        Error [ERR_TEST_FAILURE]: callback invoked multiple times\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error [ERR_TEST_FAILURE]: callback invoked multiple times\n              * {\n            code: 'ERR_TEST_FAILURE',\n            failureType: 'multipleCallbackInvocations',\n            cause: 'callback invoked multiple times'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback async throw\" time=\"*\" classname=\"test\" failure=\"thrown from callback async throw\">\n        \t\t<failure type=\"uncaughtException\" message=\"thrown from callback async throw\">\n        Error [ERR_TEST_FAILURE]: thrown from callback async throw\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error: thrown from callback async throw\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback async throw after done\" time=\"*\" classname=\"test\"/>\n        \t<testsuite name=\"only is set but not in only mode\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"4\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"running subtest 1\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"running subtest 2\" time=\"*\" classname=\"test\"/>\n        \t\t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t\t<testcase name=\"running subtest 3\" time=\"*\" classname=\"test\"/>\n        \t\t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t\t<testcase name=\"running subtest 4\" time=\"*\" classname=\"test\"/>\n        \t</testsuite>\n        \t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t<testcase name=\"custom inspect symbol fail\" time=\"*\" classname=\"test\" failure=\"customized\">\n        \t\t<failure type=\"testCodeFailure\" message=\"customized\">\n        [Error [ERR_TEST_FAILURE]: customized] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: customized }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"custom inspect symbol that throws fail\" time=\"*\" classname=\"test\" failure=\"{  foo: 1,  [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]}\">\n        \t\t<failure type=\"testCodeFailure\" message=\"{  foo: 1,  [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]}\">\n        [Error [ERR_TEST_FAILURE]: {\n          foo: 1,\n          [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]\n        }] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: { foo: 1, [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]] }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testsuite name=\"subtest sync throw fails\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"2\" failures=\"2\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"sync throw fails at first\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fails at first\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fails at first\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fails at first\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fails at first\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<testcase name=\"sync throw fails at second\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fails at second\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fails at second\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fails at second\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fails at second\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t</testsuite>\n        \t<testcase name=\"timed out async test\" time=\"*\" classname=\"test\" failure=\"test timed out after 5ms\">\n        \t\t<failure type=\"testTimeoutFailure\" message=\"test timed out after 5ms\">\n        [Error [ERR_TEST_FAILURE]: test timed out after 5ms] { code: 'ERR_TEST_FAILURE', failureType: 'testTimeoutFailure', cause: 'test timed out after 5ms' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"timed out callback test\" time=\"*\" classname=\"test\" failure=\"test timed out after 5ms\">\n        \t\t<failure type=\"testTimeoutFailure\" message=\"test timed out after 5ms\">\n        [Error [ERR_TEST_FAILURE]: test timed out after 5ms] { code: 'ERR_TEST_FAILURE', failureType: 'testTimeoutFailure', cause: 'test timed out after 5ms' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"large timeout async test is ok\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"large timeout callback test is ok\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"successful thenable\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"rejected thenable\" time=\"*\" classname=\"test\" failure=\"custom error\">\n        \t\t<failure type=\"testCodeFailure\" message=\"custom error\">\n        [Error [ERR_TEST_FAILURE]: custom error] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: 'custom error' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unfinished test with uncaughtException\" time=\"*\" classname=\"test\" failure=\"foo\">\n        \t\t<failure type=\"uncaughtException\" message=\"foo\">\n        Error [ERR_TEST_FAILURE]: foo\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error: foo\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unfinished test with unhandledRejection\" time=\"*\" classname=\"test\" failure=\"bar\">\n        \t\t<failure type=\"unhandledRejection\" message=\"bar\">\n        Error [ERR_TEST_FAILURE]: bar\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'unhandledRejection',\n          cause: Error: bar\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"assertion errors display actual and expected properly\" time=\"*\" classname=\"test\" failure=\"Expected values to be loosely deep-equal:{  bar: 1,  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  foo: 1}should loosely deep-equal{  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  circular: &lt;ref *1> {    bar: 2,    c: [Circular *1]  }}\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Expected values to be loosely deep-equal:{  bar: 1,  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  foo: 1}should loosely deep-equal{  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  circular: &lt;ref *1> {    bar: 2,    c: [Circular *1]  }}\">\n        [Error [ERR_TEST_FAILURE]: Expected values to be loosely deep-equal:\n        \n        {\n          bar: 1,\n          baz: {\n            date: 1970-01-01T00:00:00.000Z,\n            null: null,\n            number: 1,\n            string: 'Hello',\n            undefined: undefined\n          },\n          boo: [\n            1\n          ],\n          foo: 1\n        }\n        \n        should loosely deep-equal\n        \n        {\n          baz: {\n            date: 1970-01-01T00:00:00.000Z,\n            null: null,\n            number: 1,\n            string: 'Hello',\n            undefined: undefined\n          },\n          boo: [\n            1\n          ],\n          circular: &lt;ref *1> {\n            bar: 2,\n            c: [Circular *1]\n          }\n        }] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n          \n          {\n            bar: 1,\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            foo: 1\n          }\n          \n          should loosely deep-equal\n          \n          {\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            circular: &lt;ref *1> {\n              bar: 2,\n              c: [Circular *1]\n            }\n          }\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: [Object],\n            expected: [Object],\n            operator: 'deepEqual'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"invalid subtest fail\" time=\"*\" classname=\"test\" failure=\"test could not be started because its parent finished\">\n        \t\t<failure type=\"parentAlreadyFinished\" message=\"test could not be started because its parent finished\">\n        Error [ERR_TEST_FAILURE]: test could not be started because its parent finished\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'parentAlreadyFinished',\n          cause: 'test could not be started because its parent finished'\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<!-- Error: Test \"unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:72:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: Test \"async unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:76:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from async unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: A resource generated asynchronous activity after the test ended. This activity created the error \"Error: uncaught from outside of a test\" which triggered an uncaughtException event, caught by the test runner. -->\n        \t<!-- Error: Test \"immediate throw - passes but warns\" at test/fixtures/test-runner/output/output.js:80:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from immediate throw fail\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- Error: Test \"immediate reject - passes but warns\" at test/fixtures/test-runner/output/output.js:86:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from immediate reject fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: Test \"callback called twice in different ticks\" at test/fixtures/test-runner/output/output.js:251:1 generated asynchronous activity after the test ended. This activity created the error \"Error [ERR_TEST_FAILURE]: callback invoked multiple times\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- Error: Test \"callback async throw after done\" at test/fixtures/test-runner/output/output.js:269:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from callback async throw after done\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- tests 76 -->\n        \t<!-- suites 0 -->\n        \t<!-- pass 35 -->\n        \t<!-- fail 25 -->\n        \t<!-- cancelled 3 -->\n        \t<!-- skipped 9 -->\n        \t<!-- todo 4 -->\n        \t<!-- duration_ms * -->\n        </testsuites>\n        \n      actual: |-\n        <?xml version=\"1.0\" encoding=\"utf-8\"?>\n        <testsuites>\n        \t<testcase name=\"sync pass todo\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"todo\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync pass todo with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"todo\" message=\"this is a passing todo\"/>\n        \t</testcase>\n        \t<testcase name=\"sync fail todo\" time=\"*\" classname=\"test\" failure=\"thrown from sync fail todo\">\n        \t\t<skipped type=\"todo\" message=\"true\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync fail todo\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync fail todo] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync fail todo\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync fail todo with message\" time=\"*\" classname=\"test\" failure=\"thrown from sync fail todo with message\">\n        \t\t<skipped type=\"todo\" message=\"this is a failing todo\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync fail todo with message\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync fail todo with message] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync fail todo with message\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync skip pass\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip pass with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"this is skipped\"/>\n        \t</testcase>\n        \t<testcase name=\"sync pass\" time=\"*\" classname=\"test\"/>\n        \t<!-- this test should pass -->\n        \t<testcase name=\"sync throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from sync throw fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async skip pass\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"async pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from async throw fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from async throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from async throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async skip fail\" time=\"*\" classname=\"test\" failure=\"thrown from async throw fail\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from async throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from async throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async assertion fail\" time=\"*\" classname=\"test\" failure=\"Expected values to be strictly equal:true !== false\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Expected values to be strictly equal:true !== false\">\n        [Error [ERR_TEST_FAILURE]: Expected values to be strictly equal:\n        \n        true !== false\n        ] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n          \n          true !== false\n          \n              *\n              *\n              *\n              *\n              *\n              *\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: true,\n            expected: false,\n            operator: 'strictEqual'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"resolve pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"reject fail\" time=\"*\" classname=\"test\" failure=\"rejected from reject fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"rejected from reject fail\">\n        [Error [ERR_TEST_FAILURE]: rejected from reject fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: rejected from reject fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unhandled rejection - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async unhandled rejection - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate throw - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate reject - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate resolve pass\" time=\"*\" classname=\"test\"/>\n        \t<testsuite name=\"subtest sync throw fail\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"1\" failures=\"1\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"+sync throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fail\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fail\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fail\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<!-- this subtest should make its parent test fail -->\n        \t</testsuite>\n        \t<testcase name=\"sync throw non-error fail\" time=\"*\" classname=\"test\" failure=\"Symbol(thrown symbol from sync throw non-error fail)\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Symbol(thrown symbol from sync throw non-error fail)\">\n        [Error [ERR_TEST_FAILURE]: Symbol(thrown symbol from sync throw non-error fail)] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: Symbol(thrown symbol from sync throw non-error fail) }\n        \t\t</failure>\n        \t</testcase>\n        \t<testsuite name=\"level 0a\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"4\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"level 1a\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1b\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1c\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1d\" time=\"*\" classname=\"test\"/>\n        \t</testsuite>\n        \t<testsuite name=\"top level\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"2\" failures=\"1\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"+long running\" time=\"*\" classname=\"test\" failure=\"test did not finish before its parent and was cancelled\">\n        \t\t\t<failure type=\"cancelledByParent\" message=\"test did not finish before its parent and was cancelled\">\n        [Error [ERR_TEST_FAILURE]: test did not finish before its parent and was cancelled] { code: 'ERR_TEST_FAILURE', failureType: 'cancelledByParent', cause: 'test did not finish before its parent and was cancelled' }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<testsuite name=\"+short running\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"1\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t\t<testcase name=\"++short running\" time=\"*\" classname=\"test\"/>\n        \t\t</testsuite>\n        \t</testsuite>\n        \t<testcase name=\"invalid subtest - pass but subtest fails\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"sync skip option\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip option with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"this is skipped\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip option is false fail\" time=\"*\" classname=\"test\" failure=\"this should be executed\">\n        \t\t<failure type=\"testCodeFailure\" message=\"this should be executed\">\n        [Error [ERR_TEST_FAILURE]: this should be executed] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: this should be executed\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"functionOnly\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"test with only a name provided\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"test with a name and options provided\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"functionAndOptions\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"callback pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback fail\" time=\"*\" classname=\"test\" failure=\"callback failure\">\n        \t\t<failure type=\"testCodeFailure\" message=\"callback failure\">\n        [Error [ERR_TEST_FAILURE]: callback failure] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: callback failure\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback also returns a Promise\" time=\"*\" classname=\"test\" failure=\"passed a callback but also returned a Promise\">\n        \t\t<failure type=\"callbackAndPromisePresent\" message=\"passed a callback but also returned a Promise\">\n        [Error [ERR_TEST_FAILURE]: passed a callback but also returned a Promise] { code: 'ERR_TEST_FAILURE', failureType: 'callbackAndPromisePresent', cause: 'passed a callback but also returned a Promise' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback throw\" time=\"*\" classname=\"test\" failure=\"thrown from callback throw\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from callback throw\">\n        [Error [ERR_TEST_FAILURE]: thrown from callback throw] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from callback throw\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback called twice\" time=\"*\" classname=\"test\" failure=\"callback invoked multiple times\">\n        \t\t<failure type=\"multipleCallbackInvocations\" message=\"callback invoked multiple times\">\n        Error [ERR_TEST_FAILURE]: callback invoked multiple times\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'multipleCallbackInvocations',\n          cause: 'callback invoked multiple times'\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback called twice in different ticks\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback called twice in future tick\" time=\"*\" classname=\"test\" failure=\"callback invoked multiple times\">\n        \t\t<failure type=\"uncaughtException\" message=\"callback invoked multiple times\">\n        Error [ERR_TEST_FAILURE]: callback invoked multiple times\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error [ERR_TEST_FAILURE]: callback invoked multiple times\n              * {\n            code: 'ERR_TEST_FAILURE',\n            failureType: 'multipleCallbackInvocations',\n            cause: 'callback invoked multiple times'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback async throw\" time=\"*\" classname=\"test\" failure=\"thrown from callback async throw\">\n        \t\t<failure type=\"uncaughtException\" message=\"thrown from callback async throw\">\n        Error [ERR_TEST_FAILURE]: thrown from callback async throw\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error: thrown from callback async throw\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback async throw after done\" time=\"*\" classname=\"test\"/>\n        \t<testsuite name=\"only is set but not in only mode\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"4\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"running subtest 1\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"running subtest 2\" time=\"*\" classname=\"test\"/>\n        \t\t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t\t<testcase name=\"running subtest 3\" time=\"*\" classname=\"test\"/>\n        \t\t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t\t<testcase name=\"running subtest 4\" time=\"*\" classname=\"test\"/>\n        \t</testsuite>\n        \t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t<testcase name=\"custom inspect symbol fail\" time=\"*\" classname=\"test\" failure=\"customized\">\n        \t\t<failure type=\"testCodeFailure\" message=\"customized\">\n        [Error [ERR_TEST_FAILURE]: customized] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: customized }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"custom inspect symbol that throws fail\" time=\"*\" classname=\"test\" failure=\"{  foo: 1,  [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]}\">\n        \t\t<failure type=\"testCodeFailure\" message=\"{  foo: 1,  [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]}\">\n        [Error [ERR_TEST_FAILURE]: {\n          foo: 1,\n          [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]\n        }] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: { foo: 1, [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]] }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testsuite name=\"subtest sync throw fails\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"2\" failures=\"2\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"sync throw fails at first\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fails at first\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fails at first\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fails at first\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fails at first\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<testcase name=\"sync throw fails at second\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fails at second\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fails at second\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fails at second\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fails at second\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t</testsuite>\n        \t<testcase name=\"timed out async test\" time=\"*\" classname=\"test\" failure=\"test timed out after 5ms\">\n        \t\t<failure type=\"testTimeoutFailure\" message=\"test timed out after 5ms\">\n        [Error [ERR_TEST_FAILURE]: test timed out after 5ms] { code: 'ERR_TEST_FAILURE', failureType: 'testTimeoutFailure', cause: 'test timed out after 5ms' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"timed out callback test\" time=\"*\" classname=\"test\" failure=\"test timed out after 5ms\">\n        \t\t<failure type=\"testTimeoutFailure\" message=\"test timed out after 5ms\">\n        [Error [ERR_TEST_FAILURE]: test timed out after 5ms] { code: 'ERR_TEST_FAILURE', failureType: 'testTimeoutFailure', cause: 'test timed out after 5ms' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"large timeout async test is ok\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"large timeout callback test is ok\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"successful thenable\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"rejected thenable\" time=\"*\" classname=\"test\" failure=\"custom error\">\n        \t\t<failure type=\"testCodeFailure\" message=\"custom error\">\n        [Error [ERR_TEST_FAILURE]: custom error] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: 'custom error' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unfinished test with uncaughtException\" time=\"*\" classname=\"test\" failure=\"foo\">\n        \t\t<failure type=\"uncaughtException\" message=\"foo\">\n        Error [ERR_TEST_FAILURE]: foo\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error: foo\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unfinished test with unhandledRejection\" time=\"*\" classname=\"test\" failure=\"bar\">\n        \t\t<failure type=\"unhandledRejection\" message=\"bar\">\n        Error [ERR_TEST_FAILURE]: bar\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'unhandledRejection',\n          cause: Error: bar\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"assertion errors display actual and expected properly\" time=\"*\" classname=\"test\" failure=\"Expected values to be loosely deep-equal:{  bar: 1,  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  foo: 1}should loosely deep-equal{  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  circular: &lt;ref *1> {    bar: 2,    c: [Circular *1]  }}\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Expected values to be loosely deep-equal:{  bar: 1,  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  foo: 1}should loosely deep-equal{  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  circular: &lt;ref *1> {    bar: 2,    c: [Circular *1]  }}\">\n        [Error [ERR_TEST_FAILURE]: Expected values to be loosely deep-equal:\n        \n        {\n          bar: 1,\n          baz: {\n            date: 1970-01-01T00:00:00.000Z,\n            null: null,\n            number: 1,\n            string: 'Hello',\n            undefined: undefined\n          },\n          boo: [\n            1\n          ],\n          foo: 1\n        }\n        \n        should loosely deep-equal\n        \n        {\n          baz: {\n            date: 1970-01-01T00:00:00.000Z,\n            null: null,\n            number: 1,\n            string: 'Hello',\n            undefined: undefined\n          },\n          boo: [\n            1\n          ],\n          circular: &lt;ref *1> {\n            bar: 2,\n            c: [Circular *1]\n          }\n        }] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n          \n          {\n            bar: 1,\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            foo: 1\n          }\n          \n          should loosely deep-equal\n          \n          {\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            circular: &lt;ref *1> {\n              bar: 2,\n              c: [Circular *1]\n            }\n          }\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: [Object],\n            expected: [Object],\n            operator: 'deepEqual'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"invalid subtest fail\" time=\"*\" classname=\"test\" failure=\"test could not be started because its parent finished\">\n        \t\t<failure type=\"parentAlreadyFinished\" message=\"test could not be started because its parent finished\">\n        Error [ERR_TEST_FAILURE]: test could not be started because its parent finished\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'parentAlreadyFinished',\n          cause: 'test could not be started because its parent finished'\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<!-- Error: Test \"unhandled rejection - passes but warns\" at test\\fixtures\\test-runner\\output\\output.js:72:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: Test \"async unhandled rejection - passes but warns\" at test\\fixtures\\test-runner\\output\\output.js:76:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from async unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: A resource generated asynchronous activity after the test ended. This activity created the error \"Error: uncaught from outside of a test\" which triggered an uncaughtException event, caught by the test runner. -->\n        \t<!-- Error: Test \"immediate throw - passes but warns\" at test\\fixtures\\test-runner\\output\\output.js:80:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from immediate throw fail\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- Error: Test \"immediate reject - passes but warns\" at test\\fixtures\\test-runner\\output\\output.js:86:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from immediate reject fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: Test \"callback called twice in different ticks\" at test\\fixtures\\test-runner\\output\\output.js:251:1 generated asynchronous activity after the test ended. This activity created the error \"Error [ERR_TEST_FAILURE]: callback invoked multiple times\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- Error: Test \"callback async throw after done\" at test\\fixtures\\test-runner\\output\\output.js:269:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from callback async throw after done\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- tests 76 -->\n        \t<!-- suites 0 -->\n        \t<!-- pass 35 -->\n        \t<!-- fail 25 -->\n        \t<!-- cancelled 3 -->\n        \t<!-- skipped 9 -->\n        \t<!-- todo 4 -->\n        \t<!-- duration_ms * -->\n        </testsuites>\n        \n      operator: 'strictEqual'\n      stack: |-\n        assertSnapshot (C:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:56:12)\n        async Module.spawnAndAssert (C:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:84:3)\n        async TestContext.<anonymous> (file:///C:/workspace/node-test-binary-windows-js-suites/node/test/parallel/test-runner-output.mjs:145:5)\n        async Test.run (node:internal/test_runner/test:736:9)\n        async Promise.all (index 23)\n        async Suite.run (node:internal/test_runner/test:1091:7)\n        async Test.processPendingSubtests (node:internal/test_runner/test:449:7)\n      ...\n    # Subtest: test-runner/output/spec_reporter_successful.js\n    ok 25 - test-runner/output/spec_reporter_successful.js\n      ---\n      duration_ms: 1697.3429\n      ...\n    # Subtest: test-runner/output/spec_reporter.js\n    not ok 26 - test-runner/output/spec_reporter.js\n      ---\n      duration_ms: 2566.476\n      location: 'C:\\\\workspace\\\\node-test-binary-windows-js-suites\\\\node\\\\test\\\\parallel\\\\test-runner-output.mjs:151:5'\n      failureType: 'testCodeFailure'\n      error: |-\n        Expected values to be strictly equal:\n        + actual - expected ... Lines skipped\n        \n          ' sync pass todo (*ms) # TODO\\n' +\n            ' sync pass todo with message (*ms) # this is a passing todo\\n' +\n        ...\n            \"  'test could not be started because its parent finished'\\n\" +\n            '\\n' +\n        +   ' Error: Test \"unhandled rejection - passes but warns\" at test\\\\fixtures\\\\test-runner\\\\output\\\\output.js:72:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\\n' +\n        +   ' Error: Test \"async unhandled rejection - passes but warns\" at test\\\\fixtures\\\\test-runner\\\\output\\\\output.js:76:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from async unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\\n' +\n        -   ' Error: Test \"unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:72:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\\n' +\n        -   ' Error: Test \"async unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:76:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from async unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\\n' +\n            ' Error: A resource generated asynchronous activity after the test ended. This activity created the error \"Error: uncaught from outside of a test\" which triggered an uncaughtException event, caught by the test runner.\\n' +\n        +   ' Error: Test \"immediate throw - passes but warns\" at test\\\\fixtures\\\\test-runner\\\\output\\\\output.js:80:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from immediate throw fail\" and would have caused the test to fail, but instead triggered an uncaughtException event.\\n' +\n        +   ' Error: Test \"immediate reject - passes but warns\" at test\\\\fixtures\\\\test-runner\\\\output\\\\output.js:86:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from immediate reject fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\\n' +\n        +   ' Error: Test \"callback called twice in different ticks\" at test\\\\fixtures\\\\test-runner\\\\output\\\\output.js:251:1 generated asynchronous activity after the test ended. This activity created the error \"Error [ERR_TEST_FAILURE]: callback invoked multiple times\" and would have caused the test to fail, but instead triggered an uncaughtException event.\\n' +\n        +   ' Error: Test \"callback async throw after done\" at test\\\\fixtures\\\\test-runner\\\\output\\\\output.js:269:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from callback async throw after done\" and would have caused the test to fail, but instead triggered an uncaughtException event.\\n' +\n        -   ' Error: Test \"immediate throw - passes but warns\" at test/fixtures/test-runner/output/output.js:80:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from immediate throw fail\" and would have caused the test to fail, but instead triggered an uncaughtException event.\\n' +\n        -   ' Error: Test \"immediate reject - passes but warns\" at test/fixtures/test-runner/output/output.js:86:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from immediate reject fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\\n' +\n        -   ' Error: Test \"callback called twice in different ticks\" at test/fixtures/test-runner/output/output.js:251:1 generated asynchronous activity after the test ended. This activity created the error \"Error [ERR_TEST_FAILURE]: callback invoked multiple times\" and would have caused the test to fail, but instead triggered an uncaughtException event.\\n' +\n        -   ' Error: Test \"callback async throw after done\" at test/fixtures/test-runner/output/output.js:269:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from callback async throw after done\" and would have caused the test to fail, but instead triggered an uncaughtException event.\\n' +\n            ' tests 76\\n' +\n        ...\n            '*\\n' +\n            ' callback called twice (*ms)\\n' +\n            '  '... 2076 more characters\n      code: 'ERR_ASSERTION'\n      name: 'AssertionError'\n      expected: |-\n         sync pass todo (*ms) # TODO\n         sync pass todo with message (*ms) # this is a passing todo\n         sync fail todo (*ms) # TODO\n          Error: thrown from sync fail todo\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         sync fail todo with message (*ms) # this is a failing todo\n          Error: thrown from sync fail todo with message\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         sync skip pass (*ms) # SKIP\n         sync skip pass with message (*ms) # this is skipped\n         sync pass (*ms)\n         this test should pass\n         sync throw fail (*ms)\n          Error: thrown from sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         async skip pass (*ms) # SKIP\n         async pass (*ms)\n         async throw fail (*ms)\n          Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         async skip fail (*ms) # SKIP\n          Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         async assertion fail (*ms)\n          AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n          \n          true !== false\n          \n              *\n              *\n              *\n              *\n              *\n              *\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: true,\n            expected: false,\n            operator: 'strictEqual'\n          }\n        \n         resolve pass (*ms)\n         reject fail (*ms)\n          Error: rejected from reject fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         unhandled rejection - passes but warns (*ms)\n         async unhandled rejection - passes but warns (*ms)\n         immediate throw - passes but warns (*ms)\n         immediate reject - passes but warns (*ms)\n         immediate resolve pass (*ms)\n         subtest sync throw fail\n           +sync throw fail (*ms)\n            Error: thrown from subtest sync throw fail\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n        \n           this subtest should make its parent test fail\n         subtest sync throw fail (*ms)\n         sync throw non-error fail (*ms)\n          Symbol(thrown symbol from sync throw non-error fail)\n        \n         level 0a\n           level 1a (*ms)\n           level 1b (*ms)\n           level 1c (*ms)\n           level 1d (*ms)\n         level 0a (*ms)\n         top level\n           +long running (*ms)\n            'test did not finish before its parent and was cancelled'\n        \n           +short running\n             ++short running (*ms)\n           +short running (*ms)\n         top level (*ms)\n         invalid subtest - pass but subtest fails (*ms)\n         sync skip option (*ms) # SKIP\n         sync skip option with message (*ms) # this is skipped\n         sync skip option is false fail (*ms)\n          Error: this should be executed\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         <anonymous> (*ms)\n         functionOnly (*ms)\n         <anonymous> (*ms)\n         test with only a name provided (*ms)\n         <anonymous> (*ms)\n         <anonymous> (*ms) # SKIP\n         test with a name and options provided (*ms) # SKIP\n         functionAndOptions (*ms) # SKIP\n         callback pass (*ms)\n         callback fail (*ms)\n          Error: callback failure\n              *\n              *\n        \n         sync t is this in test (*ms)\n         async t is this in test (*ms)\n         callback t is this in test (*ms)\n         callback also returns a Promise (*ms)\n          'passed a callback but also returned a Promise'\n        \n         callback throw (*ms)\n          Error: thrown from callback throw\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         callback called twice (*ms)\n          'callback invoked multiple times'\n        \n         callback called twice in different ticks (*ms)\n         callback called twice in future tick (*ms)\n          Error [ERR_TEST_FAILURE]: callback invoked multiple times\n              * {\n            code: 'ERR_TEST_FAILURE',\n            failureType: 'multipleCallbackInvocations',\n            cause: 'callback invoked multiple times'\n          }\n        \n         callback async throw (*ms)\n          Error: thrown from callback async throw\n              *\n              *\n        \n         callback async throw after done (*ms)\n         only is set but not in only mode\n           running subtest 1 (*ms)\n           running subtest 2 (*ms)\n           'only' and 'runOnly' require the --test-only command-line option.\n           running subtest 3 (*ms)\n           'only' and 'runOnly' require the --test-only command-line option.\n           running subtest 4 (*ms)\n         only is set but not in only mode (*ms)\n         'only' and 'runOnly' require the --test-only command-line option.\n         custom inspect symbol fail (*ms)\n          customized\n        \n         custom inspect symbol that throws fail (*ms)\n          { foo: 1, [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]] }\n        \n         subtest sync throw fails\n           sync throw fails at first (*ms)\n            Error: thrown from subtest sync throw fails at first\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n        \n           sync throw fails at second (*ms)\n            Error: thrown from subtest sync throw fails at second\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n        \n         subtest sync throw fails (*ms)\n         timed out async test (*ms)\n          'test timed out after *ms'\n        \n         timed out callback test (*ms)\n          'test timed out after *ms'\n        \n         large timeout async test is ok (*ms)\n         large timeout callback test is ok (*ms)\n         successful thenable (*ms)\n         rejected thenable (*ms)\n          'custom error'\n        \n         unfinished test with uncaughtException (*ms)\n          Error: foo\n              *\n              *\n              *\n        \n         unfinished test with unhandledRejection (*ms)\n          Error: bar\n              *\n              *\n              *\n        \n         assertion errors display actual and expected properly (*ms)\n          AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n          \n          {\n            bar: 1,\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            foo: 1\n          }\n          \n          should loosely deep-equal\n          \n          {\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            circular: <ref *1> {\n              bar: 2,\n              c: [Circular *1]\n            }\n          }\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: [Object],\n            expected: [Object],\n            operator: 'deepEqual'\n          }\n        \n         invalid subtest fail (*ms)\n          'test could not be started because its parent finished'\n        \n         Error: Test \"unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:72:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\n         Error: Test \"async unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:76:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from async unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\n         Error: A resource generated asynchronous activity after the test ended. This activity created the error \"Error: uncaught from outside of a test\" which triggered an uncaughtException event, caught by the test runner.\n         Error: Test \"immediate throw - passes but warns\" at test/fixtures/test-runner/output/output.js:80:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from immediate throw fail\" and would have caused the test to fail, but instead triggered an uncaughtException event.\n         Error: Test \"immediate reject - passes but warns\" at test/fixtures/test-runner/output/output.js:86:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from immediate reject fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\n         Error: Test \"callback called twice in different ticks\" at test/fixtures/test-runner/output/output.js:251:1 generated asynchronous activity after the test ended. This activity created the error \"Error [ERR_TEST_FAILURE]: callback invoked multiple times\" and would have caused the test to fail, but instead triggered an uncaughtException event.\n         Error: Test \"callback async throw after done\" at test/fixtures/test-runner/output/output.js:269:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from callback async throw after done\" and would have caused the test to fail, but instead triggered an uncaughtException event.\n         tests 76\n         suites 0\n         pass 35\n         fail 25\n         cancelled 3\n         skipped 9\n         todo 4\n         duration_ms *\n        \n         failing tests:\n        \n        *\n         sync fail todo (*ms) # TODO\n          Error: thrown from sync fail todo\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         sync fail todo with message (*ms) # this is a failing todo\n          Error: thrown from sync fail todo with message\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         sync throw fail (*ms)\n          Error: thrown from sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         async throw fail (*ms)\n          Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         async skip fail (*ms) # SKIP\n          Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         async assertion fail (*ms)\n          AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n          \n          true !== false\n          \n              *\n              *\n              *\n              *\n              *\n              *\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: true,\n            expected: false,\n            operator: 'strictEqual'\n          }\n        \n        *\n         reject fail (*ms)\n          Error: rejected from reject fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         +sync throw fail (*ms)\n          Error: thrown from subtest sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         sync throw non-error fail (*ms)\n          Symbol(thrown symbol from sync throw non-error fail)\n        \n        *\n         +long running (*ms)\n          'test did not finish before its parent and was cancelled'\n        \n        *\n         sync skip option is false fail (*ms)\n          Error: this should be executed\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         callback fail (*ms)\n          Error: callback failure\n              *\n              *\n        \n        *\n         callback also returns a Promise (*ms)\n          'passed a callback but also returned a Promise'\n        \n        *\n         callback throw (*ms)\n          Error: thrown from callback throw\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         callback called twice (*ms)\n          'callback invoked multiple times'\n        \n        *\n         callback called twice in future tick (*ms)\n          Error [ERR_TEST_FAILURE]: callback invoked multiple times\n              * {\n            code: 'ERR_TEST_FAILURE',\n            failureType: 'multipleCallbackInvocations',\n            cause: 'callback invoked multiple times'\n          }\n        \n        *\n         callback async throw (*ms)\n          Error: thrown from callback async throw\n              *\n              *\n        \n        *\n         custom inspect symbol fail (*ms)\n          customized\n        \n        *\n         custom inspect symbol that throws fail (*ms)\n          { foo: 1, [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]] }\n        \n        *\n         sync throw fails at first (*ms)\n          Error: thrown from subtest sync throw fails at first\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         sync throw fails at second (*ms)\n          Error: thrown from subtest sync throw fails at second\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         timed out async test (*ms)\n          'test timed out after *ms'\n        \n        *\n         timed out callback test (*ms)\n          'test timed out after *ms'\n        \n        *\n         rejected thenable (*ms)\n          'custom error'\n        \n        *\n         unfinished test with uncaughtException (*ms)\n          Error: foo\n              *\n              *\n              *\n        \n        *\n         unfinished test with unhandledRejection (*ms)\n          Error: bar\n              *\n              *\n              *\n        \n        *\n         assertion errors display actual and expected properly (*ms)\n          AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n          \n          {\n            bar: 1,\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            foo: 1\n          }\n          \n          should loosely deep-equal\n          \n          {\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            circular: <ref *1> {\n              bar: 2,\n              c: [Circular *1]\n            }\n          }\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: [Object],\n            expected: [Object],\n            operator: 'deepEqual'\n          }\n        \n        *\n         invalid subtest fail (*ms)\n          'test could not be started because its parent finished'\n        \n      actual: |-\n         sync pass todo (*ms) # TODO\n         sync pass todo with message (*ms) # this is a passing todo\n         sync fail todo (*ms) # TODO\n          Error: thrown from sync fail todo\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         sync fail todo with message (*ms) # this is a failing todo\n          Error: thrown from sync fail todo with message\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         sync skip pass (*ms) # SKIP\n         sync skip pass with message (*ms) # this is skipped\n         sync pass (*ms)\n         this test should pass\n         sync throw fail (*ms)\n          Error: thrown from sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         async skip pass (*ms) # SKIP\n         async pass (*ms)\n         async throw fail (*ms)\n          Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         async skip fail (*ms) # SKIP\n          Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         async assertion fail (*ms)\n          AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n          \n          true !== false\n          \n              *\n              *\n              *\n              *\n              *\n              *\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: true,\n            expected: false,\n            operator: 'strictEqual'\n          }\n        \n         resolve pass (*ms)\n         reject fail (*ms)\n          Error: rejected from reject fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         unhandled rejection - passes but warns (*ms)\n         async unhandled rejection - passes but warns (*ms)\n         immediate throw - passes but warns (*ms)\n         immediate reject - passes but warns (*ms)\n         immediate resolve pass (*ms)\n         subtest sync throw fail\n           +sync throw fail (*ms)\n            Error: thrown from subtest sync throw fail\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n        \n           this subtest should make its parent test fail\n         subtest sync throw fail (*ms)\n         sync throw non-error fail (*ms)\n          Symbol(thrown symbol from sync throw non-error fail)\n        \n         level 0a\n           level 1a (*ms)\n           level 1b (*ms)\n           level 1c (*ms)\n           level 1d (*ms)\n         level 0a (*ms)\n         top level\n           +long running (*ms)\n            'test did not finish before its parent and was cancelled'\n        \n           +short running\n             ++short running (*ms)\n           +short running (*ms)\n         top level (*ms)\n         invalid subtest - pass but subtest fails (*ms)\n         sync skip option (*ms) # SKIP\n         sync skip option with message (*ms) # this is skipped\n         sync skip option is false fail (*ms)\n          Error: this should be executed\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         <anonymous> (*ms)\n         functionOnly (*ms)\n         <anonymous> (*ms)\n         test with only a name provided (*ms)\n         <anonymous> (*ms)\n         <anonymous> (*ms) # SKIP\n         test with a name and options provided (*ms) # SKIP\n         functionAndOptions (*ms) # SKIP\n         callback pass (*ms)\n         callback fail (*ms)\n          Error: callback failure\n              *\n              *\n        \n         sync t is this in test (*ms)\n         async t is this in test (*ms)\n         callback t is this in test (*ms)\n         callback also returns a Promise (*ms)\n          'passed a callback but also returned a Promise'\n        \n         callback throw (*ms)\n          Error: thrown from callback throw\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         callback called twice (*ms)\n          'callback invoked multiple times'\n        \n         callback called twice in different ticks (*ms)\n         callback called twice in future tick (*ms)\n          Error [ERR_TEST_FAILURE]: callback invoked multiple times\n              * {\n            code: 'ERR_TEST_FAILURE',\n            failureType: 'multipleCallbackInvocations',\n            cause: 'callback invoked multiple times'\n          }\n        \n         callback async throw (*ms)\n          Error: thrown from callback async throw\n              *\n              *\n        \n         callback async throw after done (*ms)\n         only is set but not in only mode\n           running subtest 1 (*ms)\n           running subtest 2 (*ms)\n           'only' and 'runOnly' require the --test-only command-line option.\n           running subtest 3 (*ms)\n           'only' and 'runOnly' require the --test-only command-line option.\n           running subtest 4 (*ms)\n         only is set but not in only mode (*ms)\n         'only' and 'runOnly' require the --test-only command-line option.\n         custom inspect symbol fail (*ms)\n          customized\n        \n         custom inspect symbol that throws fail (*ms)\n          { foo: 1, [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]] }\n        \n         subtest sync throw fails\n           sync throw fails at first (*ms)\n            Error: thrown from subtest sync throw fails at first\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n        \n           sync throw fails at second (*ms)\n            Error: thrown from subtest sync throw fails at second\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n        \n         subtest sync throw fails (*ms)\n         timed out async test (*ms)\n          'test timed out after *ms'\n        \n         timed out callback test (*ms)\n          'test timed out after *ms'\n        \n         large timeout async test is ok (*ms)\n         large timeout callback test is ok (*ms)\n         successful thenable (*ms)\n         rejected thenable (*ms)\n          'custom error'\n        \n         unfinished test with uncaughtException (*ms)\n          Error: foo\n              *\n              *\n              *\n        \n         unfinished test with unhandledRejection (*ms)\n          Error: bar\n              *\n              *\n              *\n        \n         assertion errors display actual and expected properly (*ms)\n          AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n          \n          {\n            bar: 1,\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            foo: 1\n          }\n          \n          should loosely deep-equal\n          \n          {\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            circular: <ref *1> {\n              bar: 2,\n              c: [Circular *1]\n            }\n          }\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: [Object],\n            expected: [Object],\n            operator: 'deepEqual'\n          }\n        \n         invalid subtest fail (*ms)\n          'test could not be started because its parent finished'\n        \n         Error: Test \"unhandled rejection - passes but warns\" at test\\fixtures\\test-runner\\output\\output.js:72:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\n         Error: Test \"async unhandled rejection - passes but warns\" at test\\fixtures\\test-runner\\output\\output.js:76:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from async unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\n         Error: A resource generated asynchronous activity after the test ended. This activity created the error \"Error: uncaught from outside of a test\" which triggered an uncaughtException event, caught by the test runner.\n         Error: Test \"immediate throw - passes but warns\" at test\\fixtures\\test-runner\\output\\output.js:80:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from immediate throw fail\" and would have caused the test to fail, but instead triggered an uncaughtException event.\n         Error: Test \"immediate reject - passes but warns\" at test\\fixtures\\test-runner\\output\\output.js:86:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from immediate reject fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\n         Error: Test \"callback called twice in different ticks\" at test\\fixtures\\test-runner\\output\\output.js:251:1 generated asynchronous activity after the test ended. This activity created the error \"Error [ERR_TEST_FAILURE]: callback invoked multiple times\" and would have caused the test to fail, but instead triggered an uncaughtException event.\n         Error: Test \"callback async throw after done\" at test\\fixtures\\test-runner\\output\\output.js:269:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from callback async throw after done\" and would have caused the test to fail, but instead triggered an uncaughtException event.\n         tests 76\n         suites 0\n         pass 35\n         fail 25\n         cancelled 3\n         skipped 9\n         todo 4\n         duration_ms *\n        \n         failing tests:\n        \n        *\n         sync fail todo (*ms) # TODO\n          Error: thrown from sync fail todo\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         sync fail todo with message (*ms) # this is a failing todo\n          Error: thrown from sync fail todo with message\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         sync throw fail (*ms)\n          Error: thrown from sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         async throw fail (*ms)\n          Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         async skip fail (*ms) # SKIP\n          Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         async assertion fail (*ms)\n          AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n          \n          true !== false\n          \n              *\n              *\n              *\n              *\n              *\n              *\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: true,\n            expected: false,\n            operator: 'strictEqual'\n          }\n        \n        *\n         reject fail (*ms)\n          Error: rejected from reject fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         +sync throw fail (*ms)\n          Error: thrown from subtest sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         sync throw non-error fail (*ms)\n          Symbol(thrown symbol from sync throw non-error fail)\n        \n        *\n         +long running (*ms)\n          'test did not finish before its parent and was cancelled'\n        \n        *\n         sync skip option is false fail (*ms)\n          Error: this should be executed\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         callback fail (*ms)\n          Error: callback failure\n              *\n              *\n        \n        *\n         callback also returns a Promise (*ms)\n          'passed a callback but also returned a Promise'\n        \n        *\n         callback throw (*ms)\n          Error: thrown from callback throw\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         callback called twice (*ms)\n          'callback invoked multiple times'\n        \n        *\n         callback called twice in future tick (*ms)\n          Error [ERR_TEST_FAILURE]: callback invoked multiple times\n              * {\n            code: 'ERR_TEST_FAILURE',\n            failureType: 'multipleCallbackInvocations',\n            cause: 'callback invoked multiple times'\n          }\n        \n        *\n         callback async throw (*ms)\n          Error: thrown from callback async throw\n              *\n              *\n        \n        *\n         custom inspect symbol fail (*ms)\n          customized\n        \n        *\n         custom inspect symbol that throws fail (*ms)\n          { foo: 1, [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]] }\n        \n        *\n         sync throw fails at first (*ms)\n          Error: thrown from subtest sync throw fails at first\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         sync throw fails at second (*ms)\n          Error: thrown from subtest sync throw fails at second\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         timed out async test (*ms)\n          'test timed out after *ms'\n        \n        *\n         timed out callback test (*ms)\n          'test timed out after *ms'\n        \n        *\n         rejected thenable (*ms)\n          'custom error'\n        \n        *\n         unfinished test with uncaughtException (*ms)\n          Error: foo\n              *\n              *\n              *\n        \n        *\n         unfinished test with unhandledRejection (*ms)\n          Error: bar\n              *\n              *\n              *\n        \n        *\n         assertion errors display actual and expected properly (*ms)\n          AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n          \n          {\n            bar: 1,\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            foo: 1\n          }\n          \n          should loosely deep-equal\n          \n          {\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            circular: <ref *1> {\n              bar: 2,\n              c: [Circular *1]\n            }\n          }\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: [Object],\n            expected: [Object],\n            operator: 'deepEqual'\n          }\n        \n        *\n         invalid subtest fail (*ms)\n          'test could not be started because its parent finished'\n        \n      operator: 'strictEqual'\n      stack: |-\n        assertSnapshot (C:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:56:12)\n        async Module.spawnAndAssert (C:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:84:3)\n        async TestContext.<anonymous> (file:///C:/workspace/node-test-binary-windows-js-suites/node/test/parallel/test-runner-output.mjs:145:5)\n        async Test.run (node:internal/test_runner/test:736:9)\n        async Promise.all (index 25)\n        async Suite.run (node:internal/test_runner/test:1091:7)\n        async Test.processPendingSubtests (node:internal/test_runner/test:449:7)\n      ...\n    # Subtest: test-runner/output/spec_reporter_cli.js\n    not ok 27 - test-runner/output/spec_reporter_cli.js\n      ---\n      duration_ms: 2915.4205\n      location: 'C:\\\\workspace\\\\node-test-binary-windows-js-suites\\\\node\\\\test\\\\parallel\\\\test-runner-output.mjs:151:5'\n      failureType: 'testCodeFailure'\n      error: |-\n        Expected values to be strictly equal:\n        + actual - expected ... Lines skipped\n        \n          ' sync pass todo (*ms) # TODO\\n' +\n            ' sync pass todo with message (*ms) # this is a passing todo\\n' +\n        ...\n            \"  'test could not be started because its parent finished'\\n\" +\n            '\\n' +\n        +   ' Error: Test \"unhandled rejection - passes but warns\" at test\\\\fixtures\\\\test-runner\\\\output\\\\output.js:72:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\\n' +\n        +   ' Error: Test \"async unhandled rejection - passes but warns\" at test\\\\fixtures\\\\test-runner\\\\output\\\\output.js:76:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from async unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\\n' +\n        -   ' Error: Test \"unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:72:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\\n' +\n        -   ' Error: Test \"async unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:76:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from async unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\\n' +\n            ' Error: A resource generated asynchronous activity after the test ended. This activity created the error \"Error: uncaught from outside of a test\" which triggered an uncaughtException event, caught by the test runner.\\n' +\n        +   ' Error: Test \"immediate throw - passes but warns\" at test\\\\fixtures\\\\test-runner\\\\output\\\\output.js:80:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from immediate throw fail\" and would have caused the test to fail, but instead triggered an uncaughtException event.\\n' +\n        +   ' Error: Test \"immediate reject - passes but warns\" at test\\\\fixtures\\\\test-runner\\\\output\\\\output.js:86:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from immediate reject fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\\n' +\n        +   ' Error: Test \"callback called twice in different ticks\" at test\\\\fixtures\\\\test-runner\\\\output\\\\output.js:251:1 generated asynchronous activity after the test ended. This activity created the error \"Error [ERR_TEST_FAILURE]: callback invoked multiple times\" and would have caused the test to fail, but instead triggered an uncaughtException event.\\n' +\n        +   ' Error: Test \"callback async throw after done\" at test\\\\fixtures\\\\test-runner\\\\output\\\\output.js:269:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from callback async throw after done\" and would have caused the test to fail, but instead triggered an uncaughtException event.\\n' +\n        -   ' Error: Test \"immediate throw - passes but warns\" at test/fixtures/test-runner/output/output.js:80:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from immediate throw fail\" and would have caused the test to fail, but instead triggered an uncaughtException event.\\n' +\n        -   ' Error: Test \"immediate reject - passes but warns\" at test/fixtures/test-runner/output/output.js:86:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from immediate reject fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\\n' +\n        -   ' Error: Test \"callback called twice in different ticks\" at test/fixtures/test-runner/output/output.js:251:1 generated asynchronous activity after the test ended. This activity created the error \"Error [ERR_TEST_FAILURE]: callback invoked multiple times\" and would have caused the test to fail, but instead triggered an uncaughtException event.\\n' +\n        -   ' Error: Test \"callback async throw after done\" at test/fixtures/test-runner/output/output.js:269:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from callback async throw after done\" and would have caused the test to fail, but instead triggered an uncaughtException event.\\n' +\n            ' tests 76\\n' +\n        ...\n            '\\n' +\n            '*\\n' +\n            ' callback also returns a Promise (*ms'... 2482 more characters\n      code: 'ERR_ASSERTION'\n      name: 'AssertionError'\n      expected: |-\n         sync pass todo (*ms) # TODO\n         sync pass todo with message (*ms) # this is a passing todo\n         sync fail todo (*ms) # TODO\n          Error: thrown from sync fail todo\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         sync fail todo with message (*ms) # this is a failing todo\n          Error: thrown from sync fail todo with message\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         sync skip pass (*ms) # SKIP\n         sync skip pass with message (*ms) # this is skipped\n         sync pass (*ms)\n         this test should pass\n         sync throw fail (*ms)\n          Error: thrown from sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         async skip pass (*ms) # SKIP\n         async pass (*ms)\n         async throw fail (*ms)\n          Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         async skip fail (*ms) # SKIP\n          Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         async assertion fail (*ms)\n          AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n          \n          true !== false\n          \n              *\n              *\n              *\n              *\n              *\n              *\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: true,\n            expected: false,\n            operator: 'strictEqual'\n          }\n        \n         resolve pass (*ms)\n         reject fail (*ms)\n          Error: rejected from reject fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         unhandled rejection - passes but warns (*ms)\n         async unhandled rejection - passes but warns (*ms)\n         immediate throw - passes but warns (*ms)\n         immediate reject - passes but warns (*ms)\n         immediate resolve pass (*ms)\n         subtest sync throw fail\n           +sync throw fail (*ms)\n            Error: thrown from subtest sync throw fail\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n        \n           this subtest should make its parent test fail\n         subtest sync throw fail (*ms)\n         sync throw non-error fail (*ms)\n          Symbol(thrown symbol from sync throw non-error fail)\n        \n         level 0a\n           level 1a (*ms)\n           level 1b (*ms)\n           level 1c (*ms)\n           level 1d (*ms)\n         level 0a (*ms)\n         top level\n           +long running (*ms)\n            'test did not finish before its parent and was cancelled'\n        \n           +short running\n             ++short running (*ms)\n           +short running (*ms)\n         top level (*ms)\n         invalid subtest - pass but subtest fails (*ms)\n         sync skip option (*ms) # SKIP\n         sync skip option with message (*ms) # this is skipped\n         sync skip option is false fail (*ms)\n          Error: this should be executed\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         <anonymous> (*ms)\n         functionOnly (*ms)\n         <anonymous> (*ms)\n         test with only a name provided (*ms)\n         <anonymous> (*ms)\n         <anonymous> (*ms) # SKIP\n         test with a name and options provided (*ms) # SKIP\n         functionAndOptions (*ms) # SKIP\n         callback pass (*ms)\n         callback fail (*ms)\n          Error: callback failure\n              *\n              *\n        \n         sync t is this in test (*ms)\n         async t is this in test (*ms)\n         callback t is this in test (*ms)\n         callback also returns a Promise (*ms)\n          'passed a callback but also returned a Promise'\n        \n         callback throw (*ms)\n          Error: thrown from callback throw\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         callback called twice (*ms)\n          'callback invoked multiple times'\n        \n         callback called twice in different ticks (*ms)\n         callback called twice in future tick (*ms)\n          Error [ERR_TEST_FAILURE]: callback invoked multiple times\n              * {\n            code: 'ERR_TEST_FAILURE',\n            failureType: 'multipleCallbackInvocations',\n            cause: 'callback invoked multiple times'\n          }\n        \n         callback async throw (*ms)\n          Error: thrown from callback async throw\n              *\n              *\n        \n         callback async throw after done (*ms)\n         only is set but not in only mode\n           running subtest 1 (*ms)\n           running subtest 2 (*ms)\n           'only' and 'runOnly' require the --test-only command-line option.\n           running subtest 3 (*ms)\n           'only' and 'runOnly' require the --test-only command-line option.\n           running subtest 4 (*ms)\n         only is set but not in only mode (*ms)\n         'only' and 'runOnly' require the --test-only command-line option.\n         custom inspect symbol fail (*ms)\n          customized\n        \n         custom inspect symbol that throws fail (*ms)\n          { foo: 1 }\n        \n         subtest sync throw fails\n           sync throw fails at first (*ms)\n            Error: thrown from subtest sync throw fails at first\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n        \n           sync throw fails at second (*ms)\n            Error: thrown from subtest sync throw fails at second\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n        \n         subtest sync throw fails (*ms)\n         timed out async test (*ms)\n          'test timed out after *ms'\n        \n         timed out callback test (*ms)\n          'test timed out after *ms'\n        \n         large timeout async test is ok (*ms)\n         large timeout callback test is ok (*ms)\n         successful thenable (*ms)\n         rejected thenable (*ms)\n          'custom error'\n        \n         unfinished test with uncaughtException (*ms)\n          Error: foo\n              *\n              *\n              *\n        \n         unfinished test with unhandledRejection (*ms)\n          Error: bar\n              *\n              *\n              *\n        \n         assertion errors display actual and expected properly (*ms)\n          AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n          \n          {\n            bar: 1,\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            foo: 1\n          }\n          \n          should loosely deep-equal\n          \n          {\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            circular: <ref *1> {\n              bar: 2,\n              c: [Circular *1]\n            }\n          }\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: { foo: 1, bar: 1, boo: [ 1 ], baz: { date: 1970-01-01T00:00:00.000Z, null: null, number: 1, string: 'Hello', undefined: undefined } },\n            expected: { boo: [ 1 ], baz: { date: 1970-01-01T00:00:00.000Z, null: null, number: 1, string: 'Hello', undefined: undefined }, circular: <ref *1> { bar: 2, c: [Circular *1] } },\n            operator: 'deepEqual'\n          }\n        \n         invalid subtest fail (*ms)\n          'test could not be started because its parent finished'\n        \n         Error: Test \"unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:72:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\n         Error: Test \"async unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:76:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from async unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\n         Error: A resource generated asynchronous activity after the test ended. This activity created the error \"Error: uncaught from outside of a test\" which triggered an uncaughtException event, caught by the test runner.\n         Error: Test \"immediate throw - passes but warns\" at test/fixtures/test-runner/output/output.js:80:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from immediate throw fail\" and would have caused the test to fail, but instead triggered an uncaughtException event.\n         Error: Test \"immediate reject - passes but warns\" at test/fixtures/test-runner/output/output.js:86:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from immediate reject fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\n         Error: Test \"callback called twice in different ticks\" at test/fixtures/test-runner/output/output.js:251:1 generated asynchronous activity after the test ended. This activity created the error \"Error [ERR_TEST_FAILURE]: callback invoked multiple times\" and would have caused the test to fail, but instead triggered an uncaughtException event.\n         Error: Test \"callback async throw after done\" at test/fixtures/test-runner/output/output.js:269:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from callback async throw after done\" and would have caused the test to fail, but instead triggered an uncaughtException event.\n         tests 76\n         suites 0\n         pass 35\n         fail 25\n         cancelled 3\n         skipped 9\n         todo 4\n         duration_ms *\n        \n         failing tests:\n        \n        *\n         sync fail todo (*ms) # TODO\n          Error: thrown from sync fail todo\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         sync fail todo with message (*ms) # this is a failing todo\n          Error: thrown from sync fail todo with message\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         sync throw fail (*ms)\n          Error: thrown from sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         async throw fail (*ms)\n          Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         async skip fail (*ms) # SKIP\n          Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         async assertion fail (*ms)\n          AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n          \n          true !== false\n          \n              *\n              *\n              *\n              *\n              *\n              *\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: true,\n            expected: false,\n            operator: 'strictEqual'\n          }\n        \n        *\n         reject fail (*ms)\n          Error: rejected from reject fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         +sync throw fail (*ms)\n          Error: thrown from subtest sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         sync throw non-error fail (*ms)\n          Symbol(thrown symbol from sync throw non-error fail)\n        \n        *\n         +long running (*ms)\n          'test did not finish before its parent and was cancelled'\n        \n        *\n         sync skip option is false fail (*ms)\n          Error: this should be executed\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         callback fail (*ms)\n          Error: callback failure\n              *\n              *\n        \n        *\n         callback also returns a Promise (*ms)\n          'passed a callback but also returned a Promise'\n        \n        *\n         callback throw (*ms)\n          Error: thrown from callback throw\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         callback called twice (*ms)\n          'callback invoked multiple times'\n        \n        *\n         callback called twice in future tick (*ms)\n          Error [ERR_TEST_FAILURE]: callback invoked multiple times\n              * {\n            code: 'ERR_TEST_FAILURE',\n            failureType: 'multipleCallbackInvocations',\n            cause: 'callback invoked multiple times'\n          }\n        \n        *\n         callback async throw (*ms)\n          Error: thrown from callback async throw\n              *\n              *\n        \n        *\n         custom inspect symbol fail (*ms)\n          customized\n        \n        *\n         custom inspect symbol that throws fail (*ms)\n          { foo: 1 }\n        \n        *\n         sync throw fails at first (*ms)\n          Error: thrown from subtest sync throw fails at first\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         sync throw fails at second (*ms)\n          Error: thrown from subtest sync throw fails at second\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         timed out async test (*ms)\n          'test timed out after *ms'\n        \n        *\n         timed out callback test (*ms)\n          'test timed out after *ms'\n        \n        *\n         rejected thenable (*ms)\n          'custom error'\n        \n        *\n         unfinished test with uncaughtException (*ms)\n          Error: foo\n              *\n              *\n              *\n        \n        *\n         unfinished test with unhandledRejection (*ms)\n          Error: bar\n              *\n              *\n              *\n        \n        *\n         assertion errors display actual and expected properly (*ms)\n          AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n          \n          {\n            bar: 1,\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            foo: 1\n          }\n          \n          should loosely deep-equal\n          \n          {\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            circular: <ref *1> {\n              bar: 2,\n              c: [Circular *1]\n            }\n          }\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: { foo: 1, bar: 1, boo: [ 1 ], baz: { date: 1970-01-01T00:00:00.000Z, null: null, number: 1, string: 'Hello', undefined: undefined } },\n            expected: { boo: [ 1 ], baz: { date: 1970-01-01T00:00:00.000Z, null: null, number: 1, string: 'Hello', undefined: undefined }, circular: <ref *1> { bar: 2, c: [Circular *1] } },\n            operator: 'deepEqual'\n          }\n        \n        *\n         invalid subtest fail (*ms)\n          'test could not be started because its parent finished'\n        \n      actual: |-\n         sync pass todo (*ms) # TODO\n         sync pass todo with message (*ms) # this is a passing todo\n         sync fail todo (*ms) # TODO\n          Error: thrown from sync fail todo\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         sync fail todo with message (*ms) # this is a failing todo\n          Error: thrown from sync fail todo with message\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         sync skip pass (*ms) # SKIP\n         sync skip pass with message (*ms) # this is skipped\n         sync pass (*ms)\n         this test should pass\n         sync throw fail (*ms)\n          Error: thrown from sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         async skip pass (*ms) # SKIP\n         async pass (*ms)\n         async throw fail (*ms)\n          Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         async skip fail (*ms) # SKIP\n          Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         async assertion fail (*ms)\n          AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n          \n          true !== false\n          \n              *\n              *\n              *\n              *\n              *\n              *\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: true,\n            expected: false,\n            operator: 'strictEqual'\n          }\n        \n         resolve pass (*ms)\n         reject fail (*ms)\n          Error: rejected from reject fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         unhandled rejection - passes but warns (*ms)\n         async unhandled rejection - passes but warns (*ms)\n         immediate throw - passes but warns (*ms)\n         immediate reject - passes but warns (*ms)\n         immediate resolve pass (*ms)\n         subtest sync throw fail\n           +sync throw fail (*ms)\n            Error: thrown from subtest sync throw fail\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n        \n           this subtest should make its parent test fail\n         subtest sync throw fail (*ms)\n         sync throw non-error fail (*ms)\n          Symbol(thrown symbol from sync throw non-error fail)\n        \n         level 0a\n           level 1a (*ms)\n           level 1b (*ms)\n           level 1c (*ms)\n           level 1d (*ms)\n         level 0a (*ms)\n         top level\n           +long running (*ms)\n            'test did not finish before its parent and was cancelled'\n        \n           +short running\n             ++short running (*ms)\n           +short running (*ms)\n         top level (*ms)\n         invalid subtest - pass but subtest fails (*ms)\n         sync skip option (*ms) # SKIP\n         sync skip option with message (*ms) # this is skipped\n         sync skip option is false fail (*ms)\n          Error: this should be executed\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         <anonymous> (*ms)\n         functionOnly (*ms)\n         <anonymous> (*ms)\n         test with only a name provided (*ms)\n         <anonymous> (*ms)\n         <anonymous> (*ms) # SKIP\n         test with a name and options provided (*ms) # SKIP\n         functionAndOptions (*ms) # SKIP\n         callback pass (*ms)\n         callback fail (*ms)\n          Error: callback failure\n              *\n              *\n        \n         sync t is this in test (*ms)\n         async t is this in test (*ms)\n         callback t is this in test (*ms)\n         callback also returns a Promise (*ms)\n          'passed a callback but also returned a Promise'\n        \n         callback throw (*ms)\n          Error: thrown from callback throw\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         callback called twice (*ms)\n          'callback invoked multiple times'\n        \n         callback called twice in different ticks (*ms)\n         callback called twice in future tick (*ms)\n          Error [ERR_TEST_FAILURE]: callback invoked multiple times\n              * {\n            code: 'ERR_TEST_FAILURE',\n            failureType: 'multipleCallbackInvocations',\n            cause: 'callback invoked multiple times'\n          }\n        \n         callback async throw (*ms)\n          Error: thrown from callback async throw\n              *\n              *\n        \n         callback async throw after done (*ms)\n         only is set but not in only mode\n           running subtest 1 (*ms)\n           running subtest 2 (*ms)\n           'only' and 'runOnly' require the --test-only command-line option.\n           running subtest 3 (*ms)\n           'only' and 'runOnly' require the --test-only command-line option.\n           running subtest 4 (*ms)\n         only is set but not in only mode (*ms)\n         'only' and 'runOnly' require the --test-only command-line option.\n         custom inspect symbol fail (*ms)\n          customized\n        \n         custom inspect symbol that throws fail (*ms)\n          { foo: 1 }\n        \n         subtest sync throw fails\n           sync throw fails at first (*ms)\n            Error: thrown from subtest sync throw fails at first\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n        \n           sync throw fails at second (*ms)\n            Error: thrown from subtest sync throw fails at second\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n        \n         subtest sync throw fails (*ms)\n         timed out async test (*ms)\n          'test timed out after *ms'\n        \n         timed out callback test (*ms)\n          'test timed out after *ms'\n        \n         large timeout async test is ok (*ms)\n         large timeout callback test is ok (*ms)\n         successful thenable (*ms)\n         rejected thenable (*ms)\n          'custom error'\n        \n         unfinished test with uncaughtException (*ms)\n          Error: foo\n              *\n              *\n              *\n        \n         unfinished test with unhandledRejection (*ms)\n          Error: bar\n              *\n              *\n              *\n        \n         assertion errors display actual and expected properly (*ms)\n          AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n          \n          {\n            bar: 1,\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            foo: 1\n          }\n          \n          should loosely deep-equal\n          \n          {\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            circular: <ref *1> {\n              bar: 2,\n              c: [Circular *1]\n            }\n          }\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: { foo: 1, bar: 1, boo: [ 1 ], baz: { date: 1970-01-01T00:00:00.000Z, null: null, number: 1, string: 'Hello', undefined: undefined } },\n            expected: { boo: [ 1 ], baz: { date: 1970-01-01T00:00:00.000Z, null: null, number: 1, string: 'Hello', undefined: undefined }, circular: <ref *1> { bar: 2, c: [Circular *1] } },\n            operator: 'deepEqual'\n          }\n        \n         invalid subtest fail (*ms)\n          'test could not be started because its parent finished'\n        \n         Error: Test \"unhandled rejection - passes but warns\" at test\\fixtures\\test-runner\\output\\output.js:72:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\n         Error: Test \"async unhandled rejection - passes but warns\" at test\\fixtures\\test-runner\\output\\output.js:76:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from async unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\n         Error: A resource generated asynchronous activity after the test ended. This activity created the error \"Error: uncaught from outside of a test\" which triggered an uncaughtException event, caught by the test runner.\n         Error: Test \"immediate throw - passes but warns\" at test\\fixtures\\test-runner\\output\\output.js:80:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from immediate throw fail\" and would have caused the test to fail, but instead triggered an uncaughtException event.\n         Error: Test \"immediate reject - passes but warns\" at test\\fixtures\\test-runner\\output\\output.js:86:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from immediate reject fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\n         Error: Test \"callback called twice in different ticks\" at test\\fixtures\\test-runner\\output\\output.js:251:1 generated asynchronous activity after the test ended. This activity created the error \"Error [ERR_TEST_FAILURE]: callback invoked multiple times\" and would have caused the test to fail, but instead triggered an uncaughtException event.\n         Error: Test \"callback async throw after done\" at test\\fixtures\\test-runner\\output\\output.js:269:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from callback async throw after done\" and would have caused the test to fail, but instead triggered an uncaughtException event.\n         tests 76\n         suites 0\n         pass 35\n         fail 25\n         cancelled 3\n         skipped 9\n         todo 4\n         duration_ms *\n        \n         failing tests:\n        \n        *\n         sync fail todo (*ms) # TODO\n          Error: thrown from sync fail todo\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         sync fail todo with message (*ms) # this is a failing todo\n          Error: thrown from sync fail todo with message\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         sync throw fail (*ms)\n          Error: thrown from sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         async throw fail (*ms)\n          Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         async skip fail (*ms) # SKIP\n          Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         async assertion fail (*ms)\n          AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n          \n          true !== false\n          \n              *\n              *\n              *\n              *\n              *\n              *\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: true,\n            expected: false,\n            operator: 'strictEqual'\n          }\n        \n        *\n         reject fail (*ms)\n          Error: rejected from reject fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         +sync throw fail (*ms)\n          Error: thrown from subtest sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         sync throw non-error fail (*ms)\n          Symbol(thrown symbol from sync throw non-error fail)\n        \n        *\n         +long running (*ms)\n          'test did not finish before its parent and was cancelled'\n        \n        *\n         sync skip option is false fail (*ms)\n          Error: this should be executed\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         callback fail (*ms)\n          Error: callback failure\n              *\n              *\n        \n        *\n         callback also returns a Promise (*ms)\n          'passed a callback but also returned a Promise'\n        \n        *\n         callback throw (*ms)\n          Error: thrown from callback throw\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         callback called twice (*ms)\n          'callback invoked multiple times'\n        \n        *\n         callback called twice in future tick (*ms)\n          Error [ERR_TEST_FAILURE]: callback invoked multiple times\n              * {\n            code: 'ERR_TEST_FAILURE',\n            failureType: 'multipleCallbackInvocations',\n            cause: 'callback invoked multiple times'\n          }\n        \n        *\n         callback async throw (*ms)\n          Error: thrown from callback async throw\n              *\n              *\n        \n        *\n         custom inspect symbol fail (*ms)\n          customized\n        \n        *\n         custom inspect symbol that throws fail (*ms)\n          { foo: 1 }\n        \n        *\n         sync throw fails at first (*ms)\n          Error: thrown from subtest sync throw fails at first\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         sync throw fails at second (*ms)\n          Error: thrown from subtest sync throw fails at second\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         timed out async test (*ms)\n          'test timed out after *ms'\n        \n        *\n         timed out callback test (*ms)\n          'test timed out after *ms'\n        \n        *\n         rejected thenable (*ms)\n          'custom error'\n        \n        *\n         unfinished test with uncaughtException (*ms)\n          Error: foo\n              *\n              *\n              *\n        \n        *\n         unfinished test with unhandledRejection (*ms)\n          Error: bar\n              *\n              *\n              *\n        \n        *\n         assertion errors display actual and expected properly (*ms)\n          AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n          \n          {\n            bar: 1,\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            foo: 1\n          }\n          \n          should loosely deep-equal\n          \n          {\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            circular: <ref *1> {\n              bar: 2,\n              c: [Circular *1]\n            }\n          }\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: { foo: 1, bar: 1, boo: [ 1 ], baz: { date: 1970-01-01T00:00:00.000Z, null: null, number: 1, string: 'Hello', undefined: undefined } },\n            expected: { boo: [ 1 ], baz: { date: 1970-01-01T00:00:00.000Z, null: null, number: 1, string: 'Hello', undefined: undefined }, circular: <ref *1> { bar: 2, c: [Circular *1] } },\n            operator: 'deepEqual'\n          }\n        \n        *\n         invalid subtest fail (*ms)\n          'test could not be started because its parent finished'\n        \n      operator: 'strictEqual'\n      stack: |-\n        assertSnapshot (C:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:56:12)\n        async Module.spawnAndAssert (C:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:84:3)\n        async TestContext.<anonymous> (file:///C:/workspace/node-test-binary-windows-js-suites/node/test/parallel/test-runner-output.mjs:145:5)\n        async Test.run (node:internal/test_runner/test:736:9)\n        async Promise.all (index 26)\n        async Suite.run (node:internal/test_runner/test:1091:7)\n        async Test.processPendingSubtests (node:internal/test_runner/test:449:7)\n      ...\n    # Subtest: test-runner/output/source_mapped_locations.mjs\n    ok 28 - test-runner/output/source_mapped_locations.mjs\n      ---\n      duration_ms: 1668.2767\n      ...\n    # Subtest: test-runner/output/lcov_reporter.js\n    ok 29 - test-runner/output/lcov_reporter.js\n      ---\n      duration_ms: 2727.5805\n      ...\n    # Subtest: test-runner/output/output.js\n    ok 30 - test-runner/output/output.js\n      ---\n      duration_ms: 1985.0023\n      ...\n    # Subtest: test-runner/output/output_cli.js\n    ok 31 - test-runner/output/output_cli.js\n      ---\n      duration_ms: 2400.3241\n      ...\n    # Subtest: test-runner/output/name_pattern.js\n    ok 32 - test-runner/output/name_pattern.js\n      ---\n      duration_ms: 1269.5755\n      ...\n    # Subtest: test-runner/output/name_pattern_with_only.js\n    ok 33 - test-runner/output/name_pattern_with_only.js\n      ---\n      duration_ms: 1121.1344\n      ...\n    # Subtest: test-runner/output/unfinished-suite-async-error.js\n    ok 34 - test-runner/output/unfinished-suite-async-error.js\n      ---\n      duration_ms: 1054.7556\n      ...\n    # Subtest: test-runner/output/unresolved_promise.js\n    ok 35 - test-runner/output/unresolved_promise.js\n      ---\n      duration_ms: 1089.3812\n      ...\n    # Subtest: test-runner/output/default_output.js\n        # Subtest: <anonymous>\n        ok 1 - <anonymous> # SKIP Skipping pseudo-tty tests, as pseudo terminals are not available on Windows.\n          ---\n          duration_ms: 266.8781\n          ...\n        1..1\n    ok 36 - test-runner/output/default_output.js\n      ---\n      duration_ms: 268.3202\n      ...\n    # Subtest: test-runner/output/arbitrary-output.js\n    ok 37 - test-runner/output/arbitrary-output.js\n      ---\n      duration_ms: 1181.9611\n      ...\n    # Subtest: test-runner/output/async-test-scheduling.mjs\n    ok 38 - test-runner/output/async-test-scheduling.mjs\n      ---\n      duration_ms: 1443.6856\n      ...\n    # Subtest: test-runner/output/arbitrary-output-colored.js\n        # Subtest: <anonymous>\n        ok 1 - <anonymous> # SKIP Skipping pseudo-tty tests, as pseudo terminals are not available on Windows.\n          ---\n          duration_ms: 72.776\n          ...\n        1..1\n    ok 39 - test-runner/output/arbitrary-output-colored.js\n      ---\n      duration_ms: 73.7802\n      ...\n    # Subtest: test-runner/output/dot_output_custom_columns.js\n        # Subtest: <anonymous>\n        ok 1 - <anonymous> # SKIP Skipping pseudo-tty tests, as pseudo terminals are not available on Windows.\n          ---\n          duration_ms: 72.5599\n          ...\n        1..1\n    ok 40 - test-runner/output/dot_output_custom_columns.js\n      ---\n      duration_ms: 73.495\n      ...\n    # Subtest: test-runner/output/tap_escape.js\n    ok 41 - test-runner/output/tap_escape.js\n      ---\n      duration_ms: 860.6723\n      ...\n    # Subtest: test-runner/output/coverage_failure.js\n    ok 42 - test-runner/output/coverage_failure.js\n      ---\n      duration_ms: 1099.7091\n      ...\n    1..42\nnot ok 1 - test runner output\n  ---\n  duration_ms: 5053.7659\n  type: 'suite'\n  location: 'C:\\\\workspace\\\\node-test-binary-windows-js-suites\\\\node\\\\test\\\\parallel\\\\test-runner-output.mjs:149:1'\n  failureType: 'subtestsFailed'\n  error: '3 subtests failed'\n  code: 'ERR_TEST_FAILURE'\n  ...\n1..1\n# tests 45\n# suites 1\n# pass 39\n# fail 3\n# cancelled 0\n# skipped 3\n# todo 0\n# duration_ms 5080.6869"},"time":5591.973,"fullname":"parallel/test-runner-output","closingTestPoint":false}},{"testName":"wasi/test-wasi-poll","timestamp":1712793616158,"status":"FAILED","jobName":"node-test-binary-windows-js-suites","config":"node-test-binary-windows-js-suites Â» 0,win11-arm64-COMPILED_BY-vs2022-arm64 #27039","buildUrl":"https://ci.nodejs.org/job/node-test-binary-windows-js-suites/RUN_SUBSET=0,nodes=win11-arm64-COMPILED_BY-vs2022-arm64/27039/","buildNumber":27039,"builtOn":"test-azure_msft-win11_vs2022-arm64-6","nodeVersion":"22.0.0","commitHash":"4e15a4373cf4bd852ed72dbc423c653f08640dba","callStack":[{"upstreamBuild":62036,"upstreamProject":"node-test-commit-windows-fanned","upstreamUrl":"job/node-test-commit-windows-fanned/"},{"upstreamBuild":69709,"upstreamProject":"node-test-commit","upstreamUrl":"job/node-test-commit/"},{"upstreamBuild":58241,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"prId":"52401"}],"tap":{"ok":false,"name":"wasi/test-wasi-poll","id":926,"buffered":false,"tapError":null,"skip":false,"todo":": Fix flaky test","previous":null,"plan":null,"diag":{"severity":"flaky","exitcode":1,"stack":"Testing with --turbo-fast-api-calls: poll\n[process 6192]: --- stderr ---\n(node:6192) ExperimentalWarning: WASI is an experimental feature and might change at any time\n(Use `node --trace-warnings ...` to show where the warning was created)\n\n[process 6192]: --- stdout ---\n\n[process 6192]: status = 3221225477, signal = null\nd:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\child_process.js:86\n    throw new Error(`${failures.join('\\n')}`);\n    ^\n\nError: - process terminated with status 3221225477, expected 0\n    at logAndThrow (d:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\child_process.js:86:11)\n    at expectSyncExit (d:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\child_process.js:91:5)\n    at spawnSyncAndAssert (d:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\child_process.js:131:10)\n    at testWasiPreview1 (d:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\wasi.js:18:3)\n    at Object.<anonymous> (d:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\wasi\\test-wasi-poll.js:5:1)\n    at Module._compile (node:internal/modules/cjs/loader:1455:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1534:10)\n    at Module.load (node:internal/modules/cjs/loader:1265:32)\n    at Module._load (node:internal/modules/cjs/loader:1081:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:187:14)\n\nNode.js v22.0.0-pre"},"time":469.001,"fullname":"wasi/test-wasi-poll","closingTestPoint":false}},{"testName":"parallel/test-runner-output","timestamp":1712793616158,"status":"FAILED","jobName":"node-test-binary-windows-js-suites","config":"node-test-binary-windows-js-suites Â» 0,win11-COMPILED_BY-vs2022 #27039","buildUrl":"https://ci.nodejs.org/job/node-test-binary-windows-js-suites/RUN_SUBSET=0,nodes=win11-COMPILED_BY-vs2022/27039/","buildNumber":27039,"builtOn":"test-azure_msft-win11_vs2022-x64-2","nodeVersion":"22.0.0","commitHash":"4e15a4373cf4bd852ed72dbc423c653f08640dba","callStack":[{"upstreamBuild":62036,"upstreamProject":"node-test-commit-windows-fanned","upstreamUrl":"job/node-test-commit-windows-fanned/"},{"upstreamBuild":69709,"upstreamProject":"node-test-commit","upstreamUrl":"job/node-test-commit/"},{"upstreamBuild":58241,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"prId":"52401"}],"tap":{"ok":false,"name":"parallel/test-runner-output","id":674,"buffered":false,"tapError":null,"skip":false,"todo":false,"previous":null,"plan":null,"diag":{"severity":"fail","exitcode":1,"stack":"TAP version 13\n# Subtest: test runner output\n    # Subtest: test-runner/output/abort.js\n    ok 1 - test-runner/output/abort.js\n      ---\n      duration_ms: 1914.8514\n      ...\n    # Subtest: test-runner/output/abort_suite.js\n    ok 2 - test-runner/output/abort_suite.js\n      ---\n      duration_ms: 1807.7311\n      ...\n    # Subtest: test-runner/output/abort_hooks.js\n    ok 3 - test-runner/output/abort_hooks.js\n      ---\n      duration_ms: 902.0718\n      ...\n    # Subtest: test-runner/output/describe_it.js\n    ok 4 - test-runner/output/describe_it.js\n      ---\n      duration_ms: 1768.3604\n      ...\n    # Subtest: test-runner/output/describe_nested.js\n    ok 5 - test-runner/output/describe_nested.js\n      ---\n      duration_ms: 852.1649\n      ...\n    # Subtest: test-runner/output/eval_dot.js\n    ok 6 - test-runner/output/eval_dot.js\n      ---\n      duration_ms: 834.9185\n      ...\n    # Subtest: test-runner/output/eval_spec.js\n    ok 7 - test-runner/output/eval_spec.js\n      ---\n      duration_ms: 818.6857\n      ...\n    # Subtest: test-runner/output/eval_tap.js\n    ok 8 - test-runner/output/eval_tap.js\n      ---\n      duration_ms: 802.8909\n      ...\n    # Subtest: test-runner/output/hooks.js\n    ok 9 - test-runner/output/hooks.js\n      ---\n      duration_ms: 803.2579\n      ...\n    # Subtest: test-runner/output/hooks_spec_reporter.js\n    ok 10 - test-runner/output/hooks_spec_reporter.js\n      ---\n      duration_ms: 2859.2288\n      ...\n    # Subtest: test-runner/output/skip-each-hooks.js\n    ok 11 - test-runner/output/skip-each-hooks.js\n      ---\n      duration_ms: 846.8961\n      ...\n    # Subtest: test-runner/output/suite-skip-hooks.js\n    ok 12 - test-runner/output/suite-skip-hooks.js\n      ---\n      duration_ms: 829.1867\n      ...\n    # Subtest: test-runner/output/timeout_in_before_each_should_not_affect_further_tests.js\n    ok 13 - test-runner/output/timeout_in_before_each_should_not_affect_further_tests.js\n      ---\n      duration_ms: 2553.4537\n      ...\n    # Subtest: test-runner/output/hooks-with-no-global-test.js\n    ok 14 - test-runner/output/hooks-with-no-global-test.js\n      ---\n      duration_ms: 1207.6652\n      ...\n    # Subtest: test-runner/output/global-hooks-with-no-tests.js\n    ok 15 - test-runner/output/global-hooks-with-no-tests.js\n      ---\n      duration_ms: 1171.3333\n      ...\n    # Subtest: test-runner/output/before-and-after-each-too-many-listeners.js\n    ok 16 - test-runner/output/before-and-after-each-too-many-listeners.js\n      ---\n      duration_ms: 1586.6609\n      ...\n    # Subtest: test-runner/output/before-and-after-each-with-timeout-too-many-listeners.js\n    ok 17 - test-runner/output/before-and-after-each-with-timeout-too-many-listeners.js\n      ---\n      duration_ms: 1647.203\n      ...\n    # Subtest: test-runner/output/force_exit.js\n    ok 18 - test-runner/output/force_exit.js\n      ---\n      duration_ms: 1448.4559\n      ...\n    # Subtest: test-runner/output/global_after_should_fail_the_test.js\n    ok 19 - test-runner/output/global_after_should_fail_the_test.js\n      ---\n      duration_ms: 1430.1201\n      ...\n    # Subtest: test-runner/output/no_refs.js\n    ok 20 - test-runner/output/no_refs.js\n      ---\n      duration_ms: 1257.2475\n      ...\n    # Subtest: test-runner/output/no_tests.js\n    ok 21 - test-runner/output/no_tests.js\n      ---\n      duration_ms: 1398.0386\n      ...\n    # Subtest: test-runner/output/only_tests.js\n    ok 22 - test-runner/output/only_tests.js\n      ---\n      duration_ms: 1541.4314\n      ...\n    # Subtest: test-runner/output/dot_reporter.js\n    ok 23 - test-runner/output/dot_reporter.js\n      ---\n      duration_ms: 3487.9321\n      ...\n    # Subtest: test-runner/output/junit_reporter.js\n    not ok 24 - test-runner/output/junit_reporter.js\n      ---\n      duration_ms: 3504.0202\n      location: 'c:\\\\workspace\\\\node-test-binary-windows-js-suites\\\\node\\\\test\\\\parallel\\\\test-runner-output.mjs:151:5'\n      failureType: 'testCodeFailure'\n      error: |-\n        Values have same structure but are not reference-equal:\n        \n        '<?xml version=\"1.0\" encoding=\"utf-8\"?>\\n' +\n          '<testsuites>\\n' +\n          '\\t<testcase name=\"sync pass todo\" time=\"*\" classname=\"test\">\\n' +\n          '\\t\\t<skipped type=\"todo\" message=\"true\"/>\\n' +\n          '\\t</testcase>\\n' +\n          '\\t<testcase name=\"sync pass todo with message\" time=\"*\" classname=\"test\">\\n' +\n          '\\t\\t<skipped type=\"todo\" message=\"this is a passing todo\"/>\\n' +\n          '\\t</testcase>\\n' +\n          '\\t<testcase name=\"sync fail todo\" time=\"*\" classname=\"test\" failure=\"thrown from sync fail todo\">\\n' +\n          '\\t\\t<skipped type=\"todo\" message=\"true\"/>\\n' +\n          '\\t\\t<failure type=\"testCodeFailure\" message=\"thrown from sync fail todo\">\\n' +\n          '[Error [ERR_TEST_FAILURE]: thrown from sync fail todo] {\\n' +\n          \"  code: 'ERR_TEST_FAILURE',\\n\" +\n          \"  failureType: 'testCodeFailure',\\n\" +\n          '  cause: Error: thrown from sync fail todo\\n' +\n          '      *\\n' +\n          '      *\\n' +\n          '      *\\n' +\n          '      *\\n' +\n          '      *\\n' +\n          '      *\\n' +\n          '      *\\n' +\n          '}\\n' +\n          '\\t\\t</failure>\\n' +\n          '\\t</testcase>\\n' +\n          '\\t<testcase name=\"sync fail todo with message\" time=\"*\" classname=\"test\" failure=\"thrown from sync fail todo with message\">\\n' +\n          '\\t\\t<skipped type=\"todo\" message=\"this is a failing todo\"/>\\n' +\n          '\\t\\t<failure type=\"testCodeFailure\" message=\"thrown from sync fail todo with message\">\\n' +\n          '[Error [ERR_TEST_FAILURE]: thrown from sync fail todo with message] {\\n' +\n          \"  code: 'ERR_TEST_FAILURE',\\n\" +\n          \"  failureType: 'testCodeFailure',\\n\" +\n          '  cause: Error: thrown from sync fail todo with message\\n' +\n          '      *\\n' +\n          '      *\\n' +\n          '      *\\n' +\n          '      *\\n' +\n          '      *\\n' +\n          '      *\\n' +\n          '      *\\n' +\n          '}\\n' +\n          '\\t\\t</failure>\\n' +\n          '\\t</testcase>\\n' +\n          '\\t<testcase name=\"sync skip pass\" time=\"*\" classname=\"test\">\\n' +\n          '\\t\\t<skipped type=\"skipped\" message=\"true\"/>\\n' +\n          '\\t</testcase>\\n' +\n          '\\t<testcase name=\"sync skip pass with message\" time=\"*\" classname=\"test\">\\n' +\n        ...\n        \n      code: 'ERR_ASSERTION'\n      name: 'AssertionError'\n      expected: |-\n        <?xml version=\"1.0\" encoding=\"utf-8\"?>\n        <testsuites>\n        \t<testcase name=\"sync pass todo\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"todo\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync pass todo with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"todo\" message=\"this is a passing todo\"/>\n        \t</testcase>\n        \t<testcase name=\"sync fail todo\" time=\"*\" classname=\"test\" failure=\"thrown from sync fail todo\">\n        \t\t<skipped type=\"todo\" message=\"true\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync fail todo\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync fail todo] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync fail todo\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync fail todo with message\" time=\"*\" classname=\"test\" failure=\"thrown from sync fail todo with message\">\n        \t\t<skipped type=\"todo\" message=\"this is a failing todo\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync fail todo with message\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync fail todo with message] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync fail todo with message\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync skip pass\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip pass with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"this is skipped\"/>\n        \t</testcase>\n        \t<testcase name=\"sync pass\" time=\"*\" classname=\"test\"/>\n        \t<!-- this test should pass -->\n        \t<testcase name=\"sync throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from sync throw fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async skip pass\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"async pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from async throw fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from async throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from async throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async skip fail\" time=\"*\" classname=\"test\" failure=\"thrown from async throw fail\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from async throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from async throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async assertion fail\" time=\"*\" classname=\"test\" failure=\"Expected values to be strictly equal:true !== false\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Expected values to be strictly equal:true !== false\">\n        [Error [ERR_TEST_FAILURE]: Expected values to be strictly equal:\n        \n        true !== false\n        ] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n          \n          true !== false\n          \n              *\n              *\n              *\n              *\n              *\n              *\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: true,\n            expected: false,\n            operator: 'strictEqual'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"resolve pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"reject fail\" time=\"*\" classname=\"test\" failure=\"rejected from reject fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"rejected from reject fail\">\n        [Error [ERR_TEST_FAILURE]: rejected from reject fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: rejected from reject fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unhandled rejection - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async unhandled rejection - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate throw - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate reject - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate resolve pass\" time=\"*\" classname=\"test\"/>\n        \t<testsuite name=\"subtest sync throw fail\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"1\" failures=\"1\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"+sync throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fail\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fail\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fail\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<!-- this subtest should make its parent test fail -->\n        \t</testsuite>\n        \t<testcase name=\"sync throw non-error fail\" time=\"*\" classname=\"test\" failure=\"Symbol(thrown symbol from sync throw non-error fail)\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Symbol(thrown symbol from sync throw non-error fail)\">\n        [Error [ERR_TEST_FAILURE]: Symbol(thrown symbol from sync throw non-error fail)] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: Symbol(thrown symbol from sync throw non-error fail) }\n        \t\t</failure>\n        \t</testcase>\n        \t<testsuite name=\"level 0a\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"4\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"level 1a\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1b\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1c\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1d\" time=\"*\" classname=\"test\"/>\n        \t</testsuite>\n        \t<testsuite name=\"top level\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"2\" failures=\"1\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"+long running\" time=\"*\" classname=\"test\" failure=\"test did not finish before its parent and was cancelled\">\n        \t\t\t<failure type=\"cancelledByParent\" message=\"test did not finish before its parent and was cancelled\">\n        [Error [ERR_TEST_FAILURE]: test did not finish before its parent and was cancelled] { code: 'ERR_TEST_FAILURE', failureType: 'cancelledByParent', cause: 'test did not finish before its parent and was cancelled' }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<testsuite name=\"+short running\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"1\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t\t<testcase name=\"++short running\" time=\"*\" classname=\"test\"/>\n        \t\t</testsuite>\n        \t</testsuite>\n        \t<testcase name=\"invalid subtest - pass but subtest fails\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"sync skip option\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip option with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"this is skipped\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip option is false fail\" time=\"*\" classname=\"test\" failure=\"this should be executed\">\n        \t\t<failure type=\"testCodeFailure\" message=\"this should be executed\">\n        [Error [ERR_TEST_FAILURE]: this should be executed] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: this should be executed\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"functionOnly\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"test with only a name provided\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"test with a name and options provided\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"functionAndOptions\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"callback pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback fail\" time=\"*\" classname=\"test\" failure=\"callback failure\">\n        \t\t<failure type=\"testCodeFailure\" message=\"callback failure\">\n        [Error [ERR_TEST_FAILURE]: callback failure] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: callback failure\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback also returns a Promise\" time=\"*\" classname=\"test\" failure=\"passed a callback but also returned a Promise\">\n        \t\t<failure type=\"callbackAndPromisePresent\" message=\"passed a callback but also returned a Promise\">\n        [Error [ERR_TEST_FAILURE]: passed a callback but also returned a Promise] { code: 'ERR_TEST_FAILURE', failureType: 'callbackAndPromisePresent', cause: 'passed a callback but also returned a Promise' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback throw\" time=\"*\" classname=\"test\" failure=\"thrown from callback throw\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from callback throw\">\n        [Error [ERR_TEST_FAILURE]: thrown from callback throw] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from callback throw\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback called twice\" time=\"*\" classname=\"test\" failure=\"callback invoked multiple times\">\n        \t\t<failure type=\"multipleCallbackInvocations\" message=\"callback invoked multiple times\">\n        Error [ERR_TEST_FAILURE]: callback invoked multiple times\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'multipleCallbackInvocations',\n          cause: 'callback invoked multiple times'\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback called twice in different ticks\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback called twice in future tick\" time=\"*\" classname=\"test\" failure=\"callback invoked multiple times\">\n        \t\t<failure type=\"uncaughtException\" message=\"callback invoked multiple times\">\n        Error [ERR_TEST_FAILURE]: callback invoked multiple times\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error [ERR_TEST_FAILURE]: callback invoked multiple times\n              * {\n            code: 'ERR_TEST_FAILURE',\n            failureType: 'multipleCallbackInvocations',\n            cause: 'callback invoked multiple times'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback async throw\" time=\"*\" classname=\"test\" failure=\"thrown from callback async throw\">\n        \t\t<failure type=\"uncaughtException\" message=\"thrown from callback async throw\">\n        Error [ERR_TEST_FAILURE]: thrown from callback async throw\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error: thrown from callback async throw\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback async throw after done\" time=\"*\" classname=\"test\"/>\n        \t<testsuite name=\"only is set but not in only mode\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"4\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"running subtest 1\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"running subtest 2\" time=\"*\" classname=\"test\"/>\n        \t\t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t\t<testcase name=\"running subtest 3\" time=\"*\" classname=\"test\"/>\n        \t\t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t\t<testcase name=\"running subtest 4\" time=\"*\" classname=\"test\"/>\n        \t</testsuite>\n        \t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t<testcase name=\"custom inspect symbol fail\" time=\"*\" classname=\"test\" failure=\"customized\">\n        \t\t<failure type=\"testCodeFailure\" message=\"customized\">\n        [Error [ERR_TEST_FAILURE]: customized] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: customized }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"custom inspect symbol that throws fail\" time=\"*\" classname=\"test\" failure=\"{  foo: 1,  [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]}\">\n        \t\t<failure type=\"testCodeFailure\" message=\"{  foo: 1,  [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]}\">\n        [Error [ERR_TEST_FAILURE]: {\n          foo: 1,\n          [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]\n        }] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: { foo: 1, [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]] }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testsuite name=\"subtest sync throw fails\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"2\" failures=\"2\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"sync throw fails at first\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fails at first\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fails at first\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fails at first\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fails at first\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<testcase name=\"sync throw fails at second\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fails at second\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fails at second\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fails at second\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fails at second\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t</testsuite>\n        \t<testcase name=\"timed out async test\" time=\"*\" classname=\"test\" failure=\"test timed out after 5ms\">\n        \t\t<failure type=\"testTimeoutFailure\" message=\"test timed out after 5ms\">\n        [Error [ERR_TEST_FAILURE]: test timed out after 5ms] { code: 'ERR_TEST_FAILURE', failureType: 'testTimeoutFailure', cause: 'test timed out after 5ms' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"timed out callback test\" time=\"*\" classname=\"test\" failure=\"test timed out after 5ms\">\n        \t\t<failure type=\"testTimeoutFailure\" message=\"test timed out after 5ms\">\n        [Error [ERR_TEST_FAILURE]: test timed out after 5ms] { code: 'ERR_TEST_FAILURE', failureType: 'testTimeoutFailure', cause: 'test timed out after 5ms' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"large timeout async test is ok\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"large timeout callback test is ok\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"successful thenable\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"rejected thenable\" time=\"*\" classname=\"test\" failure=\"custom error\">\n        \t\t<failure type=\"testCodeFailure\" message=\"custom error\">\n        [Error [ERR_TEST_FAILURE]: custom error] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: 'custom error' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unfinished test with uncaughtException\" time=\"*\" classname=\"test\" failure=\"foo\">\n        \t\t<failure type=\"uncaughtException\" message=\"foo\">\n        Error [ERR_TEST_FAILURE]: foo\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error: foo\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unfinished test with unhandledRejection\" time=\"*\" classname=\"test\" failure=\"bar\">\n        \t\t<failure type=\"unhandledRejection\" message=\"bar\">\n        Error [ERR_TEST_FAILURE]: bar\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'unhandledRejection',\n          cause: Error: bar\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"assertion errors display actual and expected properly\" time=\"*\" classname=\"test\" failure=\"Expected values to be loosely deep-equal:{  bar: 1,  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  foo: 1}should loosely deep-equal{  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  circular: &lt;ref *1> {    bar: 2,    c: [Circular *1]  }}\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Expected values to be loosely deep-equal:{  bar: 1,  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  foo: 1}should loosely deep-equal{  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  circular: &lt;ref *1> {    bar: 2,    c: [Circular *1]  }}\">\n        [Error [ERR_TEST_FAILURE]: Expected values to be loosely deep-equal:\n        \n        {\n          bar: 1,\n          baz: {\n            date: 1970-01-01T00:00:00.000Z,\n            null: null,\n            number: 1,\n            string: 'Hello',\n            undefined: undefined\n          },\n          boo: [\n            1\n          ],\n          foo: 1\n        }\n        \n        should loosely deep-equal\n        \n        {\n          baz: {\n            date: 1970-01-01T00:00:00.000Z,\n            null: null,\n            number: 1,\n            string: 'Hello',\n            undefined: undefined\n          },\n          boo: [\n            1\n          ],\n          circular: &lt;ref *1> {\n            bar: 2,\n            c: [Circular *1]\n          }\n        }] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n          \n          {\n            bar: 1,\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            foo: 1\n          }\n          \n          should loosely deep-equal\n          \n          {\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            circular: &lt;ref *1> {\n              bar: 2,\n              c: [Circular *1]\n            }\n          }\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: [Object],\n            expected: [Object],\n            operator: 'deepEqual'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"invalid subtest fail\" time=\"*\" classname=\"test\" failure=\"test could not be started because its parent finished\">\n        \t\t<failure type=\"parentAlreadyFinished\" message=\"test could not be started because its parent finished\">\n        Error [ERR_TEST_FAILURE]: test could not be started because its parent finished\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'parentAlreadyFinished',\n          cause: 'test could not be started because its parent finished'\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<!-- Error: Test \"unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:72:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: Test \"async unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:76:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from async unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: A resource generated asynchronous activity after the test ended. This activity created the error \"Error: uncaught from outside of a test\" which triggered an uncaughtException event, caught by the test runner. -->\n        \t<!-- Error: Test \"immediate throw - passes but warns\" at test/fixtures/test-runner/output/output.js:80:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from immediate throw fail\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- Error: Test \"immediate reject - passes but warns\" at test/fixtures/test-runner/output/output.js:86:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from immediate reject fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: Test \"callback called twice in different ticks\" at test/fixtures/test-runner/output/output.js:251:1 generated asynchronous activity after the test ended. This activity created the error \"Error [ERR_TEST_FAILURE]: callback invoked multiple times\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- Error: Test \"callback async throw after done\" at test/fixtures/test-runner/output/output.js:269:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from callback async throw after done\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- tests 76 -->\n        \t<!-- suites 0 -->\n        \t<!-- pass 35 -->\n        \t<!-- fail 25 -->\n        \t<!-- cancelled 3 -->\n        \t<!-- skipped 9 -->\n        \t<!-- todo 4 -->\n        \t<!-- duration_ms * -->\n        </testsuites>\n        \n      actual: |-\n        <?xml version=\"1.0\" encoding=\"utf-8\"?>\n        <testsuites>\n        \t<testcase name=\"sync pass todo\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"todo\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync pass todo with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"todo\" message=\"this is a passing todo\"/>\n        \t</testcase>\n        \t<testcase name=\"sync fail todo\" time=\"*\" classname=\"test\" failure=\"thrown from sync fail todo\">\n        \t\t<skipped type=\"todo\" message=\"true\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync fail todo\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync fail todo] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync fail todo\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync fail todo with message\" time=\"*\" classname=\"test\" failure=\"thrown from sync fail todo with message\">\n        \t\t<skipped type=\"todo\" message=\"this is a failing todo\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync fail todo with message\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync fail todo with message] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync fail todo with message\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync skip pass\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip pass with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"this is skipped\"/>\n        \t</testcase>\n        \t<testcase name=\"sync pass\" time=\"*\" classname=\"test\"/>\n        \t<!-- this test should pass -->\n        \t<testcase name=\"sync throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from sync throw fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async skip pass\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"async pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from async throw fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from async throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from async throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async skip fail\" time=\"*\" classname=\"test\" failure=\"thrown from async throw fail\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from async throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from async throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async assertion fail\" time=\"*\" classname=\"test\" failure=\"Expected values to be strictly equal:true !== false\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Expected values to be strictly equal:true !== false\">\n        [Error [ERR_TEST_FAILURE]: Expected values to be strictly equal:\n        \n        true !== false\n        ] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n          \n          true !== false\n          \n              *\n              *\n              *\n              *\n              *\n              *\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: true,\n            expected: false,\n            operator: 'strictEqual'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"resolve pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"reject fail\" time=\"*\" classname=\"test\" failure=\"rejected from reject fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"rejected from reject fail\">\n        [Error [ERR_TEST_FAILURE]: rejected from reject fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: rejected from reject fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unhandled rejection - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async unhandled rejection - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate throw - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate reject - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate resolve pass\" time=\"*\" classname=\"test\"/>\n        \t<testsuite name=\"subtest sync throw fail\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"1\" failures=\"1\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"+sync throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fail\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fail\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fail\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<!-- this subtest should make its parent test fail -->\n        \t</testsuite>\n        \t<testcase name=\"sync throw non-error fail\" time=\"*\" classname=\"test\" failure=\"Symbol(thrown symbol from sync throw non-error fail)\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Symbol(thrown symbol from sync throw non-error fail)\">\n        [Error [ERR_TEST_FAILURE]: Symbol(thrown symbol from sync throw non-error fail)] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: Symbol(thrown symbol from sync throw non-error fail) }\n        \t\t</failure>\n        \t</testcase>\n        \t<testsuite name=\"level 0a\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"4\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"level 1a\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1b\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1c\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1d\" time=\"*\" classname=\"test\"/>\n        \t</testsuite>\n        \t<testsuite name=\"top level\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"2\" failures=\"1\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"+long running\" time=\"*\" classname=\"test\" failure=\"test did not finish before its parent and was cancelled\">\n        \t\t\t<failure type=\"cancelledByParent\" message=\"test did not finish before its parent and was cancelled\">\n        [Error [ERR_TEST_FAILURE]: test did not finish before its parent and was cancelled] { code: 'ERR_TEST_FAILURE', failureType: 'cancelledByParent', cause: 'test did not finish before its parent and was cancelled' }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<testsuite name=\"+short running\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"1\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t\t<testcase name=\"++short running\" time=\"*\" classname=\"test\"/>\n        \t\t</testsuite>\n        \t</testsuite>\n        \t<testcase name=\"invalid subtest - pass but subtest fails\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"sync skip option\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip option with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"this is skipped\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip option is false fail\" time=\"*\" classname=\"test\" failure=\"this should be executed\">\n        \t\t<failure type=\"testCodeFailure\" message=\"this should be executed\">\n        [Error [ERR_TEST_FAILURE]: this should be executed] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: this should be executed\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"functionOnly\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"test with only a name provided\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"test with a name and options provided\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"functionAndOptions\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"callback pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback fail\" time=\"*\" classname=\"test\" failure=\"callback failure\">\n        \t\t<failure type=\"testCodeFailure\" message=\"callback failure\">\n        [Error [ERR_TEST_FAILURE]: callback failure] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: callback failure\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback also returns a Promise\" time=\"*\" classname=\"test\" failure=\"passed a callback but also returned a Promise\">\n        \t\t<failure type=\"callbackAndPromisePresent\" message=\"passed a callback but also returned a Promise\">\n        [Error [ERR_TEST_FAILURE]: passed a callback but also returned a Promise] { code: 'ERR_TEST_FAILURE', failureType: 'callbackAndPromisePresent', cause: 'passed a callback but also returned a Promise' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback throw\" time=\"*\" classname=\"test\" failure=\"thrown from callback throw\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from callback throw\">\n        [Error [ERR_TEST_FAILURE]: thrown from callback throw] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from callback throw\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback called twice\" time=\"*\" classname=\"test\" failure=\"callback invoked multiple times\">\n        \t\t<failure type=\"multipleCallbackInvocations\" message=\"callback invoked multiple times\">\n        Error [ERR_TEST_FAILURE]: callback invoked multiple times\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'multipleCallbackInvocations',\n          cause: 'callback invoked multiple times'\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback called twice in different ticks\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback called twice in future tick\" time=\"*\" classname=\"test\" failure=\"callback invoked multiple times\">\n        \t\t<failure type=\"uncaughtException\" message=\"callback invoked multiple times\">\n        Error [ERR_TEST_FAILURE]: callback invoked multiple times\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error [ERR_TEST_FAILURE]: callback invoked multiple times\n              * {\n            code: 'ERR_TEST_FAILURE',\n            failureType: 'multipleCallbackInvocations',\n            cause: 'callback invoked multiple times'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback async throw\" time=\"*\" classname=\"test\" failure=\"thrown from callback async throw\">\n        \t\t<failure type=\"uncaughtException\" message=\"thrown from callback async throw\">\n        Error [ERR_TEST_FAILURE]: thrown from callback async throw\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error: thrown from callback async throw\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback async throw after done\" time=\"*\" classname=\"test\"/>\n        \t<testsuite name=\"only is set but not in only mode\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"4\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"running subtest 1\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"running subtest 2\" time=\"*\" classname=\"test\"/>\n        \t\t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t\t<testcase name=\"running subtest 3\" time=\"*\" classname=\"test\"/>\n        \t\t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t\t<testcase name=\"running subtest 4\" time=\"*\" classname=\"test\"/>\n        \t</testsuite>\n        \t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t<testcase name=\"custom inspect symbol fail\" time=\"*\" classname=\"test\" failure=\"customized\">\n        \t\t<failure type=\"testCodeFailure\" message=\"customized\">\n        [Error [ERR_TEST_FAILURE]: customized] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: customized }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"custom inspect symbol that throws fail\" time=\"*\" classname=\"test\" failure=\"{  foo: 1,  [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]}\">\n        \t\t<failure type=\"testCodeFailure\" message=\"{  foo: 1,  [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]}\">\n        [Error [ERR_TEST_FAILURE]: {\n          foo: 1,\n          [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]\n        }] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: { foo: 1, [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]] }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testsuite name=\"subtest sync throw fails\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"2\" failures=\"2\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"sync throw fails at first\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fails at first\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fails at first\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fails at first\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fails at first\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<testcase name=\"sync throw fails at second\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fails at second\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fails at second\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fails at second\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fails at second\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t</testsuite>\n        \t<testcase name=\"timed out async test\" time=\"*\" classname=\"test\" failure=\"test timed out after 5ms\">\n        \t\t<failure type=\"testTimeoutFailure\" message=\"test timed out after 5ms\">\n        [Error [ERR_TEST_FAILURE]: test timed out after 5ms] { code: 'ERR_TEST_FAILURE', failureType: 'testTimeoutFailure', cause: 'test timed out after 5ms' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"timed out callback test\" time=\"*\" classname=\"test\" failure=\"test timed out after 5ms\">\n        \t\t<failure type=\"testTimeoutFailure\" message=\"test timed out after 5ms\">\n        [Error [ERR_TEST_FAILURE]: test timed out after 5ms] { code: 'ERR_TEST_FAILURE', failureType: 'testTimeoutFailure', cause: 'test timed out after 5ms' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"large timeout async test is ok\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"large timeout callback test is ok\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"successful thenable\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"rejected thenable\" time=\"*\" classname=\"test\" failure=\"custom error\">\n        \t\t<failure type=\"testCodeFailure\" message=\"custom error\">\n        [Error [ERR_TEST_FAILURE]: custom error] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: 'custom error' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unfinished test with uncaughtException\" time=\"*\" classname=\"test\" failure=\"foo\">\n        \t\t<failure type=\"uncaughtException\" message=\"foo\">\n        Error [ERR_TEST_FAILURE]: foo\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error: foo\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unfinished test with unhandledRejection\" time=\"*\" classname=\"test\" failure=\"bar\">\n        \t\t<failure type=\"unhandledRejection\" message=\"bar\">\n        Error [ERR_TEST_FAILURE]: bar\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'unhandledRejection',\n          cause: Error: bar\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"assertion errors display actual and expected properly\" time=\"*\" classname=\"test\" failure=\"Expected values to be loosely deep-equal:{  bar: 1,  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  foo: 1}should loosely deep-equal{  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  circular: &lt;ref *1> {    bar: 2,    c: [Circular *1]  }}\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Expected values to be loosely deep-equal:{  bar: 1,  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  foo: 1}should loosely deep-equal{  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  circular: &lt;ref *1> {    bar: 2,    c: [Circular *1]  }}\">\n        [Error [ERR_TEST_FAILURE]: Expected values to be loosely deep-equal:\n        \n        {\n          bar: 1,\n          baz: {\n            date: 1970-01-01T00:00:00.000Z,\n            null: null,\n            number: 1,\n            string: 'Hello',\n            undefined: undefined\n          },\n          boo: [\n            1\n          ],\n          foo: 1\n        }\n        \n        should loosely deep-equal\n        \n        {\n          baz: {\n            date: 1970-01-01T00:00:00.000Z,\n            null: null,\n            number: 1,\n            string: 'Hello',\n            undefined: undefined\n          },\n          boo: [\n            1\n          ],\n          circular: &lt;ref *1> {\n            bar: 2,\n            c: [Circular *1]\n          }\n        }] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n          \n          {\n            bar: 1,\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            foo: 1\n          }\n          \n          should loosely deep-equal\n          \n          {\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            circular: &lt;ref *1> {\n              bar: 2,\n              c: [Circular *1]\n            }\n          }\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: [Object],\n            expected: [Object],\n            operator: 'deepEqual'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"invalid subtest fail\" time=\"*\" classname=\"test\" failure=\"test could not be started because its parent finished\">\n        \t\t<failure type=\"parentAlreadyFinished\" message=\"test could not be started because its parent finished\">\n        Error [ERR_TEST_FAILURE]: test could not be started because its parent finished\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'parentAlreadyFinished',\n          cause: 'test could not be started because its parent finished'\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<!-- Error: Test \"unhandled rejection - passes but warns\" at test\\fixtures\\test-runner\\output\\output.js:72:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: Test \"async unhandled rejection - passes but warns\" at test\\fixtures\\test-runner\\output\\output.js:76:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from async unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: A resource generated asynchronous activity after the test ended. This activity created the error \"Error: uncaught from outside of a test\" which triggered an uncaughtException event, caught by the test runner. -->\n        \t<!-- Error: Test \"immediate throw - passes but warns\" at test\\fixtures\\test-runner\\output\\output.js:80:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from immediate throw fail\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- Error: Test \"immediate reject - passes but warns\" at test\\fixtures\\test-runner\\output\\output.js:86:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from immediate reject fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: Test \"callback called twice in different ticks\" at test\\fixtures\\test-runner\\output\\output.js:251:1 generated asynchronous activity after the test ended. This activity created the error \"Error [ERR_TEST_FAILURE]: callback invoked multiple times\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- Error: Test \"callback async throw after done\" at test\\fixtures\\test-runner\\output\\output.js:269:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from callback async throw after done\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- tests 76 -->\n        \t<!-- suites 0 -->\n        \t<!-- pass 35 -->\n        \t<!-- fail 25 -->\n        \t<!-- cancelled 3 -->\n        \t<!-- skipped 9 -->\n        \t<!-- todo 4 -->\n        \t<!-- duration_ms * -->\n        </testsuites>\n        \n      operator: 'strictEqual'\n      stack: |-\n        assertSnapshot (c:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:56:12)\n        async Module.spawnAndAssert (c:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:84:3)\n        async TestContext.<anonymous> (file:///c:/workspace/node-test-binary-windows-js-suites/node/test/parallel/test-runner-output.mjs:145:5)\n        async Test.run (node:internal/test_runner/test:736:9)\n        async Promise.all (index 23)\n        async Suite.run (node:internal/test_runner/test:1091:7)\n        async Test.processPendingSubtests (node:internal/test_runner/test:449:7)\n      ...\n    # Subtest: test-runner/output/spec_reporter_successful.js\n    ok 25 - test-runner/output/spec_reporter_successful.js\n      ---\n      duration_ms: 1483.257\n      ...\n    # Subtest: test-runner/output/spec_reporter.js\n    not ok 26 - test-runner/output/spec_reporter.js\n      ---\n      duration_ms: 3250.4454\n      location: 'c:\\\\workspace\\\\node-test-binary-windows-js-suites\\\\node\\\\test\\\\parallel\\\\test-runner-output.mjs:151:5'\n      failureType: 'testCodeFailure'\n      error: |-\n        Expected values to be strictly equal:\n        + actual - expected ... Lines skipped\n        \n          ' sync pass todo (*ms) # TODO\\n' +\n            ' sync pass todo with message (*ms) # this is a passing todo\\n' +\n        ...\n            \"  'test could not be started because its parent finished'\\n\" +\n            '\\n' +\n        +   ' Error: Test \"unhandled rejection - passes but warns\" at test\\\\fixtures\\\\test-runner\\\\output\\\\output.js:72:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\\n' +\n        +   ' Error: Test \"async unhandled rejection - passes but warns\" at test\\\\fixtures\\\\test-runner\\\\output\\\\output.js:76:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from async unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\\n' +\n        -   ' Error: Test \"unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:72:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\\n' +\n        -   ' Error: Test \"async unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:76:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from async unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\\n' +\n            ' Error: A resource generated asynchronous activity after the test ended. This activity created the error \"Error: uncaught from outside of a test\" which triggered an uncaughtException event, caught by the test runner.\\n' +\n        +   ' Error: Test \"immediate throw - passes but warns\" at test\\\\fixtures\\\\test-runner\\\\output\\\\output.js:80:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from immediate throw fail\" and would have caused the test to fail, but instead triggered an uncaughtException event.\\n' +\n        +   ' Error: Test \"immediate reject - passes but warns\" at test\\\\fixtures\\\\test-runner\\\\output\\\\output.js:86:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from immediate reject fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\\n' +\n        +   ' Error: Test \"callback called twice in different ticks\" at test\\\\fixtures\\\\test-runner\\\\output\\\\output.js:251:1 generated asynchronous activity after the test ended. This activity created the error \"Error [ERR_TEST_FAILURE]: callback invoked multiple times\" and would have caused the test to fail, but instead triggered an uncaughtException event.\\n' +\n        +   ' Error: Test \"callback async throw after done\" at test\\\\fixtures\\\\test-runner\\\\output\\\\output.js:269:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from callback async throw after done\" and would have caused the test to fail, but instead triggered an uncaughtException event.\\n' +\n        -   ' Error: Test \"immediate throw - passes but warns\" at test/fixtures/test-runner/output/output.js:80:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from immediate throw fail\" and would have caused the test to fail, but instead triggered an uncaughtException event.\\n' +\n        -   ' Error: Test \"immediate reject - passes but warns\" at test/fixtures/test-runner/output/output.js:86:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from immediate reject fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\\n' +\n        -   ' Error: Test \"callback called twice in different ticks\" at test/fixtures/test-runner/output/output.js:251:1 generated asynchronous activity after the test ended. This activity created the error \"Error [ERR_TEST_FAILURE]: callback invoked multiple times\" and would have caused the test to fail, but instead triggered an uncaughtException event.\\n' +\n        -   ' Error: Test \"callback async throw after done\" at test/fixtures/test-runner/output/output.js:269:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from callback async throw after done\" and would have caused the test to fail, but instead triggered an uncaughtException event.\\n' +\n            ' tests 76\\n' +\n        ...\n            '*\\n' +\n            ' callback called twice (*ms)\\n' +\n            '  '... 2076 more characters\n      code: 'ERR_ASSERTION'\n      name: 'AssertionError'\n      expected: |-\n         sync pass todo (*ms) # TODO\n         sync pass todo with message (*ms) # this is a passing todo\n         sync fail todo (*ms) # TODO\n          Error: thrown from sync fail todo\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         sync fail todo with message (*ms) # this is a failing todo\n          Error: thrown from sync fail todo with message\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         sync skip pass (*ms) # SKIP\n         sync skip pass with message (*ms) # this is skipped\n         sync pass (*ms)\n         this test should pass\n         sync throw fail (*ms)\n          Error: thrown from sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         async skip pass (*ms) # SKIP\n         async pass (*ms)\n         async throw fail (*ms)\n          Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         async skip fail (*ms) # SKIP\n          Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         async assertion fail (*ms)\n          AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n          \n          true !== false\n          \n              *\n              *\n              *\n              *\n              *\n              *\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: true,\n            expected: false,\n            operator: 'strictEqual'\n          }\n        \n         resolve pass (*ms)\n         reject fail (*ms)\n          Error: rejected from reject fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         unhandled rejection - passes but warns (*ms)\n         async unhandled rejection - passes but warns (*ms)\n         immediate throw - passes but warns (*ms)\n         immediate reject - passes but warns (*ms)\n         immediate resolve pass (*ms)\n         subtest sync throw fail\n           +sync throw fail (*ms)\n            Error: thrown from subtest sync throw fail\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n        \n           this subtest should make its parent test fail\n         subtest sync throw fail (*ms)\n         sync throw non-error fail (*ms)\n          Symbol(thrown symbol from sync throw non-error fail)\n        \n         level 0a\n           level 1a (*ms)\n           level 1b (*ms)\n           level 1c (*ms)\n           level 1d (*ms)\n         level 0a (*ms)\n         top level\n           +long running (*ms)\n            'test did not finish before its parent and was cancelled'\n        \n           +short running\n             ++short running (*ms)\n           +short running (*ms)\n         top level (*ms)\n         invalid subtest - pass but subtest fails (*ms)\n         sync skip option (*ms) # SKIP\n         sync skip option with message (*ms) # this is skipped\n         sync skip option is false fail (*ms)\n          Error: this should be executed\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         <anonymous> (*ms)\n         functionOnly (*ms)\n         <anonymous> (*ms)\n         test with only a name provided (*ms)\n         <anonymous> (*ms)\n         <anonymous> (*ms) # SKIP\n         test with a name and options provided (*ms) # SKIP\n         functionAndOptions (*ms) # SKIP\n         callback pass (*ms)\n         callback fail (*ms)\n          Error: callback failure\n              *\n              *\n        \n         sync t is this in test (*ms)\n         async t is this in test (*ms)\n         callback t is this in test (*ms)\n         callback also returns a Promise (*ms)\n          'passed a callback but also returned a Promise'\n        \n         callback throw (*ms)\n          Error: thrown from callback throw\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         callback called twice (*ms)\n          'callback invoked multiple times'\n        \n         callback called twice in different ticks (*ms)\n         callback called twice in future tick (*ms)\n          Error [ERR_TEST_FAILURE]: callback invoked multiple times\n              * {\n            code: 'ERR_TEST_FAILURE',\n            failureType: 'multipleCallbackInvocations',\n            cause: 'callback invoked multiple times'\n          }\n        \n         callback async throw (*ms)\n          Error: thrown from callback async throw\n              *\n              *\n        \n         callback async throw after done (*ms)\n         only is set but not in only mode\n           running subtest 1 (*ms)\n           running subtest 2 (*ms)\n           'only' and 'runOnly' require the --test-only command-line option.\n           running subtest 3 (*ms)\n           'only' and 'runOnly' require the --test-only command-line option.\n           running subtest 4 (*ms)\n         only is set but not in only mode (*ms)\n         'only' and 'runOnly' require the --test-only command-line option.\n         custom inspect symbol fail (*ms)\n          customized\n        \n         custom inspect symbol that throws fail (*ms)\n          { foo: 1, [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]] }\n        \n         subtest sync throw fails\n           sync throw fails at first (*ms)\n            Error: thrown from subtest sync throw fails at first\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n        \n           sync throw fails at second (*ms)\n            Error: thrown from subtest sync throw fails at second\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n        \n         subtest sync throw fails (*ms)\n         timed out async test (*ms)\n          'test timed out after *ms'\n        \n         timed out callback test (*ms)\n          'test timed out after *ms'\n        \n         large timeout async test is ok (*ms)\n         large timeout callback test is ok (*ms)\n         successful thenable (*ms)\n         rejected thenable (*ms)\n          'custom error'\n        \n         unfinished test with uncaughtException (*ms)\n          Error: foo\n              *\n              *\n              *\n        \n         unfinished test with unhandledRejection (*ms)\n          Error: bar\n              *\n              *\n              *\n        \n         assertion errors display actual and expected properly (*ms)\n          AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n          \n          {\n            bar: 1,\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            foo: 1\n          }\n          \n          should loosely deep-equal\n          \n          {\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            circular: <ref *1> {\n              bar: 2,\n              c: [Circular *1]\n            }\n          }\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: [Object],\n            expected: [Object],\n            operator: 'deepEqual'\n          }\n        \n         invalid subtest fail (*ms)\n          'test could not be started because its parent finished'\n        \n         Error: Test \"unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:72:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\n         Error: Test \"async unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:76:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from async unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\n         Error: A resource generated asynchronous activity after the test ended. This activity created the error \"Error: uncaught from outside of a test\" which triggered an uncaughtException event, caught by the test runner.\n         Error: Test \"immediate throw - passes but warns\" at test/fixtures/test-runner/output/output.js:80:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from immediate throw fail\" and would have caused the test to fail, but instead triggered an uncaughtException event.\n         Error: Test \"immediate reject - passes but warns\" at test/fixtures/test-runner/output/output.js:86:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from immediate reject fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\n         Error: Test \"callback called twice in different ticks\" at test/fixtures/test-runner/output/output.js:251:1 generated asynchronous activity after the test ended. This activity created the error \"Error [ERR_TEST_FAILURE]: callback invoked multiple times\" and would have caused the test to fail, but instead triggered an uncaughtException event.\n         Error: Test \"callback async throw after done\" at test/fixtures/test-runner/output/output.js:269:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from callback async throw after done\" and would have caused the test to fail, but instead triggered an uncaughtException event.\n         tests 76\n         suites 0\n         pass 35\n         fail 25\n         cancelled 3\n         skipped 9\n         todo 4\n         duration_ms *\n        \n         failing tests:\n        \n        *\n         sync fail todo (*ms) # TODO\n          Error: thrown from sync fail todo\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         sync fail todo with message (*ms) # this is a failing todo\n          Error: thrown from sync fail todo with message\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         sync throw fail (*ms)\n          Error: thrown from sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         async throw fail (*ms)\n          Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         async skip fail (*ms) # SKIP\n          Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         async assertion fail (*ms)\n          AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n          \n          true !== false\n          \n              *\n              *\n              *\n              *\n              *\n              *\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: true,\n            expected: false,\n            operator: 'strictEqual'\n          }\n        \n        *\n         reject fail (*ms)\n          Error: rejected from reject fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         +sync throw fail (*ms)\n          Error: thrown from subtest sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         sync throw non-error fail (*ms)\n          Symbol(thrown symbol from sync throw non-error fail)\n        \n        *\n         +long running (*ms)\n          'test did not finish before its parent and was cancelled'\n        \n        *\n         sync skip option is false fail (*ms)\n          Error: this should be executed\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         callback fail (*ms)\n          Error: callback failure\n              *\n              *\n        \n        *\n         callback also returns a Promise (*ms)\n          'passed a callback but also returned a Promise'\n        \n        *\n         callback throw (*ms)\n          Error: thrown from callback throw\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         callback called twice (*ms)\n          'callback invoked multiple times'\n        \n        *\n         callback called twice in future tick (*ms)\n          Error [ERR_TEST_FAILURE]: callback invoked multiple times\n              * {\n            code: 'ERR_TEST_FAILURE',\n            failureType: 'multipleCallbackInvocations',\n            cause: 'callback invoked multiple times'\n          }\n        \n        *\n         callback async throw (*ms)\n          Error: thrown from callback async throw\n              *\n              *\n        \n        *\n         custom inspect symbol fail (*ms)\n          customized\n        \n        *\n         custom inspect symbol that throws fail (*ms)\n          { foo: 1, [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]] }\n        \n        *\n         sync throw fails at first (*ms)\n          Error: thrown from subtest sync throw fails at first\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         sync throw fails at second (*ms)\n          Error: thrown from subtest sync throw fails at second\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         timed out async test (*ms)\n          'test timed out after *ms'\n        \n        *\n         timed out callback test (*ms)\n          'test timed out after *ms'\n        \n        *\n         rejected thenable (*ms)\n          'custom error'\n        \n        *\n         unfinished test with uncaughtException (*ms)\n          Error: foo\n              *\n              *\n              *\n        \n        *\n         unfinished test with unhandledRejection (*ms)\n          Error: bar\n              *\n              *\n              *\n        \n        *\n         assertion errors display actual and expected properly (*ms)\n          AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n          \n          {\n            bar: 1,\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            foo: 1\n          }\n          \n          should loosely deep-equal\n          \n          {\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            circular: <ref *1> {\n              bar: 2,\n              c: [Circular *1]\n            }\n          }\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: [Object],\n            expected: [Object],\n            operator: 'deepEqual'\n          }\n        \n        *\n         invalid subtest fail (*ms)\n          'test could not be started because its parent finished'\n        \n      actual: |-\n         sync pass todo (*ms) # TODO\n         sync pass todo with message (*ms) # this is a passing todo\n         sync fail todo (*ms) # TODO\n          Error: thrown from sync fail todo\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         sync fail todo with message (*ms) # this is a failing todo\n          Error: thrown from sync fail todo with message\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         sync skip pass (*ms) # SKIP\n         sync skip pass with message (*ms) # this is skipped\n         sync pass (*ms)\n         this test should pass\n         sync throw fail (*ms)\n          Error: thrown from sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         async skip pass (*ms) # SKIP\n         async pass (*ms)\n         async throw fail (*ms)\n          Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         async skip fail (*ms) # SKIP\n          Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         async assertion fail (*ms)\n          AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n          \n          true !== false\n          \n              *\n              *\n              *\n              *\n              *\n              *\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: true,\n            expected: false,\n            operator: 'strictEqual'\n          }\n        \n         resolve pass (*ms)\n         reject fail (*ms)\n          Error: rejected from reject fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         unhandled rejection - passes but warns (*ms)\n         async unhandled rejection - passes but warns (*ms)\n         immediate throw - passes but warns (*ms)\n         immediate reject - passes but warns (*ms)\n         immediate resolve pass (*ms)\n         subtest sync throw fail\n           +sync throw fail (*ms)\n            Error: thrown from subtest sync throw fail\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n        \n           this subtest should make its parent test fail\n         subtest sync throw fail (*ms)\n         sync throw non-error fail (*ms)\n          Symbol(thrown symbol from sync throw non-error fail)\n        \n         level 0a\n           level 1a (*ms)\n           level 1b (*ms)\n           level 1c (*ms)\n           level 1d (*ms)\n         level 0a (*ms)\n         top level\n           +long running (*ms)\n            'test did not finish before its parent and was cancelled'\n        \n           +short running\n             ++short running (*ms)\n           +short running (*ms)\n         top level (*ms)\n         invalid subtest - pass but subtest fails (*ms)\n         sync skip option (*ms) # SKIP\n         sync skip option with message (*ms) # this is skipped\n         sync skip option is false fail (*ms)\n          Error: this should be executed\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         <anonymous> (*ms)\n         functionOnly (*ms)\n         <anonymous> (*ms)\n         test with only a name provided (*ms)\n         <anonymous> (*ms)\n         <anonymous> (*ms) # SKIP\n         test with a name and options provided (*ms) # SKIP\n         functionAndOptions (*ms) # SKIP\n         callback pass (*ms)\n         callback fail (*ms)\n          Error: callback failure\n              *\n              *\n        \n         sync t is this in test (*ms)\n         async t is this in test (*ms)\n         callback t is this in test (*ms)\n         callback also returns a Promise (*ms)\n          'passed a callback but also returned a Promise'\n        \n         callback throw (*ms)\n          Error: thrown from callback throw\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         callback called twice (*ms)\n          'callback invoked multiple times'\n        \n         callback called twice in different ticks (*ms)\n         callback called twice in future tick (*ms)\n          Error [ERR_TEST_FAILURE]: callback invoked multiple times\n              * {\n            code: 'ERR_TEST_FAILURE',\n            failureType: 'multipleCallbackInvocations',\n            cause: 'callback invoked multiple times'\n          }\n        \n         callback async throw (*ms)\n          Error: thrown from callback async throw\n              *\n              *\n        \n         callback async throw after done (*ms)\n         only is set but not in only mode\n           running subtest 1 (*ms)\n           running subtest 2 (*ms)\n           'only' and 'runOnly' require the --test-only command-line option.\n           running subtest 3 (*ms)\n           'only' and 'runOnly' require the --test-only command-line option.\n           running subtest 4 (*ms)\n         only is set but not in only mode (*ms)\n         'only' and 'runOnly' require the --test-only command-line option.\n         custom inspect symbol fail (*ms)\n          customized\n        \n         custom inspect symbol that throws fail (*ms)\n          { foo: 1, [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]] }\n        \n         subtest sync throw fails\n           sync throw fails at first (*ms)\n            Error: thrown from subtest sync throw fails at first\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n        \n           sync throw fails at second (*ms)\n            Error: thrown from subtest sync throw fails at second\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n        \n         subtest sync throw fails (*ms)\n         timed out async test (*ms)\n          'test timed out after *ms'\n        \n         timed out callback test (*ms)\n          'test timed out after *ms'\n        \n         large timeout async test is ok (*ms)\n         large timeout callback test is ok (*ms)\n         successful thenable (*ms)\n         rejected thenable (*ms)\n          'custom error'\n        \n         unfinished test with uncaughtException (*ms)\n          Error: foo\n              *\n              *\n              *\n        \n         unfinished test with unhandledRejection (*ms)\n          Error: bar\n              *\n              *\n              *\n        \n         assertion errors display actual and expected properly (*ms)\n          AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n          \n          {\n            bar: 1,\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            foo: 1\n          }\n          \n          should loosely deep-equal\n          \n          {\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            circular: <ref *1> {\n              bar: 2,\n              c: [Circular *1]\n            }\n          }\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: [Object],\n            expected: [Object],\n            operator: 'deepEqual'\n          }\n        \n         invalid subtest fail (*ms)\n          'test could not be started because its parent finished'\n        \n         Error: Test \"unhandled rejection - passes but warns\" at test\\fixtures\\test-runner\\output\\output.js:72:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\n         Error: Test \"async unhandled rejection - passes but warns\" at test\\fixtures\\test-runner\\output\\output.js:76:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from async unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\n         Error: A resource generated asynchronous activity after the test ended. This activity created the error \"Error: uncaught from outside of a test\" which triggered an uncaughtException event, caught by the test runner.\n         Error: Test \"immediate throw - passes but warns\" at test\\fixtures\\test-runner\\output\\output.js:80:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from immediate throw fail\" and would have caused the test to fail, but instead triggered an uncaughtException event.\n         Error: Test \"immediate reject - passes but warns\" at test\\fixtures\\test-runner\\output\\output.js:86:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from immediate reject fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\n         Error: Test \"callback called twice in different ticks\" at test\\fixtures\\test-runner\\output\\output.js:251:1 generated asynchronous activity after the test ended. This activity created the error \"Error [ERR_TEST_FAILURE]: callback invoked multiple times\" and would have caused the test to fail, but instead triggered an uncaughtException event.\n         Error: Test \"callback async throw after done\" at test\\fixtures\\test-runner\\output\\output.js:269:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from callback async throw after done\" and would have caused the test to fail, but instead triggered an uncaughtException event.\n         tests 76\n         suites 0\n         pass 35\n         fail 25\n         cancelled 3\n         skipped 9\n         todo 4\n         duration_ms *\n        \n         failing tests:\n        \n        *\n         sync fail todo (*ms) # TODO\n          Error: thrown from sync fail todo\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         sync fail todo with message (*ms) # this is a failing todo\n          Error: thrown from sync fail todo with message\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         sync throw fail (*ms)\n          Error: thrown from sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         async throw fail (*ms)\n          Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         async skip fail (*ms) # SKIP\n          Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         async assertion fail (*ms)\n          AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n          \n          true !== false\n          \n              *\n              *\n              *\n              *\n              *\n              *\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: true,\n            expected: false,\n            operator: 'strictEqual'\n          }\n        \n        *\n         reject fail (*ms)\n          Error: rejected from reject fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         +sync throw fail (*ms)\n          Error: thrown from subtest sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         sync throw non-error fail (*ms)\n          Symbol(thrown symbol from sync throw non-error fail)\n        \n        *\n         +long running (*ms)\n          'test did not finish before its parent and was cancelled'\n        \n        *\n         sync skip option is false fail (*ms)\n          Error: this should be executed\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         callback fail (*ms)\n          Error: callback failure\n              *\n              *\n        \n        *\n         callback also returns a Promise (*ms)\n          'passed a callback but also returned a Promise'\n        \n        *\n         callback throw (*ms)\n          Error: thrown from callback throw\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         callback called twice (*ms)\n          'callback invoked multiple times'\n        \n        *\n         callback called twice in future tick (*ms)\n          Error [ERR_TEST_FAILURE]: callback invoked multiple times\n              * {\n            code: 'ERR_TEST_FAILURE',\n            failureType: 'multipleCallbackInvocations',\n            cause: 'callback invoked multiple times'\n          }\n        \n        *\n         callback async throw (*ms)\n          Error: thrown from callback async throw\n              *\n              *\n        \n        *\n         custom inspect symbol fail (*ms)\n          customized\n        \n        *\n         custom inspect symbol that throws fail (*ms)\n          { foo: 1, [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]] }\n        \n        *\n         sync throw fails at first (*ms)\n          Error: thrown from subtest sync throw fails at first\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         sync throw fails at second (*ms)\n          Error: thrown from subtest sync throw fails at second\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         timed out async test (*ms)\n          'test timed out after *ms'\n        \n        *\n         timed out callback test (*ms)\n          'test timed out after *ms'\n        \n        *\n         rejected thenable (*ms)\n          'custom error'\n        \n        *\n         unfinished test with uncaughtException (*ms)\n          Error: foo\n              *\n              *\n              *\n        \n        *\n         unfinished test with unhandledRejection (*ms)\n          Error: bar\n              *\n              *\n              *\n        \n        *\n         assertion errors display actual and expected properly (*ms)\n          AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n          \n          {\n            bar: 1,\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            foo: 1\n          }\n          \n          should loosely deep-equal\n          \n          {\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            circular: <ref *1> {\n              bar: 2,\n              c: [Circular *1]\n            }\n          }\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: [Object],\n            expected: [Object],\n            operator: 'deepEqual'\n          }\n        \n        *\n         invalid subtest fail (*ms)\n          'test could not be started because its parent finished'\n        \n      operator: 'strictEqual'\n      stack: |-\n        assertSnapshot (c:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:56:12)\n        async Module.spawnAndAssert (c:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:84:3)\n        async TestContext.<anonymous> (file:///c:/workspace/node-test-binary-windows-js-suites/node/test/parallel/test-runner-output.mjs:145:5)\n        async Test.run (node:internal/test_runner/test:736:9)\n        async Promise.all (index 25)\n        async Suite.run (node:internal/test_runner/test:1091:7)\n        async Test.processPendingSubtests (node:internal/test_runner/test:449:7)\n      ...\n    # Subtest: test-runner/output/spec_reporter_cli.js\n    not ok 27 - test-runner/output/spec_reporter_cli.js\n      ---\n      duration_ms: 3803.7122\n      location: 'c:\\\\workspace\\\\node-test-binary-windows-js-suites\\\\node\\\\test\\\\parallel\\\\test-runner-output.mjs:151:5'\n      failureType: 'testCodeFailure'\n      error: |-\n        Expected values to be strictly equal:\n        + actual - expected ... Lines skipped\n        \n          ' sync pass todo (*ms) # TODO\\n' +\n            ' sync pass todo with message (*ms) # this is a passing todo\\n' +\n        ...\n            \"  'test could not be started because its parent finished'\\n\" +\n            '\\n' +\n        +   ' Error: Test \"unhandled rejection - passes but warns\" at test\\\\fixtures\\\\test-runner\\\\output\\\\output.js:72:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\\n' +\n        +   ' Error: Test \"async unhandled rejection - passes but warns\" at test\\\\fixtures\\\\test-runner\\\\output\\\\output.js:76:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from async unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\\n' +\n        -   ' Error: Test \"unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:72:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\\n' +\n        -   ' Error: Test \"async unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:76:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from async unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\\n' +\n            ' Error: A resource generated asynchronous activity after the test ended. This activity created the error \"Error: uncaught from outside of a test\" which triggered an uncaughtException event, caught by the test runner.\\n' +\n        +   ' Error: Test \"immediate throw - passes but warns\" at test\\\\fixtures\\\\test-runner\\\\output\\\\output.js:80:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from immediate throw fail\" and would have caused the test to fail, but instead triggered an uncaughtException event.\\n' +\n        +   ' Error: Test \"immediate reject - passes but warns\" at test\\\\fixtures\\\\test-runner\\\\output\\\\output.js:86:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from immediate reject fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\\n' +\n        +   ' Error: Test \"callback called twice in different ticks\" at test\\\\fixtures\\\\test-runner\\\\output\\\\output.js:251:1 generated asynchronous activity after the test ended. This activity created the error \"Error [ERR_TEST_FAILURE]: callback invoked multiple times\" and would have caused the test to fail, but instead triggered an uncaughtException event.\\n' +\n        +   ' Error: Test \"callback async throw after done\" at test\\\\fixtures\\\\test-runner\\\\output\\\\output.js:269:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from callback async throw after done\" and would have caused the test to fail, but instead triggered an uncaughtException event.\\n' +\n        -   ' Error: Test \"immediate throw - passes but warns\" at test/fixtures/test-runner/output/output.js:80:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from immediate throw fail\" and would have caused the test to fail, but instead triggered an uncaughtException event.\\n' +\n        -   ' Error: Test \"immediate reject - passes but warns\" at test/fixtures/test-runner/output/output.js:86:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from immediate reject fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\\n' +\n        -   ' Error: Test \"callback called twice in different ticks\" at test/fixtures/test-runner/output/output.js:251:1 generated asynchronous activity after the test ended. This activity created the error \"Error [ERR_TEST_FAILURE]: callback invoked multiple times\" and would have caused the test to fail, but instead triggered an uncaughtException event.\\n' +\n        -   ' Error: Test \"callback async throw after done\" at test/fixtures/test-runner/output/output.js:269:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from callback async throw after done\" and would have caused the test to fail, but instead triggered an uncaughtException event.\\n' +\n            ' tests 76\\n' +\n        ...\n            '\\n' +\n            '*\\n' +\n            ' callback also returns a Promise (*ms'... 2482 more characters\n      code: 'ERR_ASSERTION'\n      name: 'AssertionError'\n      expected: |-\n         sync pass todo (*ms) # TODO\n         sync pass todo with message (*ms) # this is a passing todo\n         sync fail todo (*ms) # TODO\n          Error: thrown from sync fail todo\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         sync fail todo with message (*ms) # this is a failing todo\n          Error: thrown from sync fail todo with message\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         sync skip pass (*ms) # SKIP\n         sync skip pass with message (*ms) # this is skipped\n         sync pass (*ms)\n         this test should pass\n         sync throw fail (*ms)\n          Error: thrown from sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         async skip pass (*ms) # SKIP\n         async pass (*ms)\n         async throw fail (*ms)\n          Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         async skip fail (*ms) # SKIP\n          Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         async assertion fail (*ms)\n          AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n          \n          true !== false\n          \n              *\n              *\n              *\n              *\n              *\n              *\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: true,\n            expected: false,\n            operator: 'strictEqual'\n          }\n        \n         resolve pass (*ms)\n         reject fail (*ms)\n          Error: rejected from reject fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         unhandled rejection - passes but warns (*ms)\n         async unhandled rejection - passes but warns (*ms)\n         immediate throw - passes but warns (*ms)\n         immediate reject - passes but warns (*ms)\n         immediate resolve pass (*ms)\n         subtest sync throw fail\n           +sync throw fail (*ms)\n            Error: thrown from subtest sync throw fail\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n        \n           this subtest should make its parent test fail\n         subtest sync throw fail (*ms)\n         sync throw non-error fail (*ms)\n          Symbol(thrown symbol from sync throw non-error fail)\n        \n         level 0a\n           level 1a (*ms)\n           level 1b (*ms)\n           level 1c (*ms)\n           level 1d (*ms)\n         level 0a (*ms)\n         top level\n           +long running (*ms)\n            'test did not finish before its parent and was cancelled'\n        \n           +short running\n             ++short running (*ms)\n           +short running (*ms)\n         top level (*ms)\n         invalid subtest - pass but subtest fails (*ms)\n         sync skip option (*ms) # SKIP\n         sync skip option with message (*ms) # this is skipped\n         sync skip option is false fail (*ms)\n          Error: this should be executed\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         <anonymous> (*ms)\n         functionOnly (*ms)\n         <anonymous> (*ms)\n         test with only a name provided (*ms)\n         <anonymous> (*ms)\n         <anonymous> (*ms) # SKIP\n         test with a name and options provided (*ms) # SKIP\n         functionAndOptions (*ms) # SKIP\n         callback pass (*ms)\n         callback fail (*ms)\n          Error: callback failure\n              *\n              *\n        \n         sync t is this in test (*ms)\n         async t is this in test (*ms)\n         callback t is this in test (*ms)\n         callback also returns a Promise (*ms)\n          'passed a callback but also returned a Promise'\n        \n         callback throw (*ms)\n          Error: thrown from callback throw\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         callback called twice (*ms)\n          'callback invoked multiple times'\n        \n         callback called twice in different ticks (*ms)\n         callback called twice in future tick (*ms)\n          Error [ERR_TEST_FAILURE]: callback invoked multiple times\n              * {\n            code: 'ERR_TEST_FAILURE',\n            failureType: 'multipleCallbackInvocations',\n            cause: 'callback invoked multiple times'\n          }\n        \n         callback async throw (*ms)\n          Error: thrown from callback async throw\n              *\n              *\n        \n         callback async throw after done (*ms)\n         only is set but not in only mode\n           running subtest 1 (*ms)\n           running subtest 2 (*ms)\n           'only' and 'runOnly' require the --test-only command-line option.\n           running subtest 3 (*ms)\n           'only' and 'runOnly' require the --test-only command-line option.\n           running subtest 4 (*ms)\n         only is set but not in only mode (*ms)\n         'only' and 'runOnly' require the --test-only command-line option.\n         custom inspect symbol fail (*ms)\n          customized\n        \n         custom inspect symbol that throws fail (*ms)\n          { foo: 1 }\n        \n         subtest sync throw fails\n           sync throw fails at first (*ms)\n            Error: thrown from subtest sync throw fails at first\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n        \n           sync throw fails at second (*ms)\n            Error: thrown from subtest sync throw fails at second\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n        \n         subtest sync throw fails (*ms)\n         timed out async test (*ms)\n          'test timed out after *ms'\n        \n         timed out callback test (*ms)\n          'test timed out after *ms'\n        \n         large timeout async test is ok (*ms)\n         large timeout callback test is ok (*ms)\n         successful thenable (*ms)\n         rejected thenable (*ms)\n          'custom error'\n        \n         unfinished test with uncaughtException (*ms)\n          Error: foo\n              *\n              *\n              *\n        \n         unfinished test with unhandledRejection (*ms)\n          Error: bar\n              *\n              *\n              *\n        \n         assertion errors display actual and expected properly (*ms)\n          AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n          \n          {\n            bar: 1,\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            foo: 1\n          }\n          \n          should loosely deep-equal\n          \n          {\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            circular: <ref *1> {\n              bar: 2,\n              c: [Circular *1]\n            }\n          }\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: { foo: 1, bar: 1, boo: [ 1 ], baz: { date: 1970-01-01T00:00:00.000Z, null: null, number: 1, string: 'Hello', undefined: undefined } },\n            expected: { boo: [ 1 ], baz: { date: 1970-01-01T00:00:00.000Z, null: null, number: 1, string: 'Hello', undefined: undefined }, circular: <ref *1> { bar: 2, c: [Circular *1] } },\n            operator: 'deepEqual'\n          }\n        \n         invalid subtest fail (*ms)\n          'test could not be started because its parent finished'\n        \n         Error: Test \"unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:72:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\n         Error: Test \"async unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:76:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from async unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\n         Error: A resource generated asynchronous activity after the test ended. This activity created the error \"Error: uncaught from outside of a test\" which triggered an uncaughtException event, caught by the test runner.\n         Error: Test \"immediate throw - passes but warns\" at test/fixtures/test-runner/output/output.js:80:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from immediate throw fail\" and would have caused the test to fail, but instead triggered an uncaughtException event.\n         Error: Test \"immediate reject - passes but warns\" at test/fixtures/test-runner/output/output.js:86:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from immediate reject fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\n         Error: Test \"callback called twice in different ticks\" at test/fixtures/test-runner/output/output.js:251:1 generated asynchronous activity after the test ended. This activity created the error \"Error [ERR_TEST_FAILURE]: callback invoked multiple times\" and would have caused the test to fail, but instead triggered an uncaughtException event.\n         Error: Test \"callback async throw after done\" at test/fixtures/test-runner/output/output.js:269:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from callback async throw after done\" and would have caused the test to fail, but instead triggered an uncaughtException event.\n         tests 76\n         suites 0\n         pass 35\n         fail 25\n         cancelled 3\n         skipped 9\n         todo 4\n         duration_ms *\n        \n         failing tests:\n        \n        *\n         sync fail todo (*ms) # TODO\n          Error: thrown from sync fail todo\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         sync fail todo with message (*ms) # this is a failing todo\n          Error: thrown from sync fail todo with message\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         sync throw fail (*ms)\n          Error: thrown from sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         async throw fail (*ms)\n          Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         async skip fail (*ms) # SKIP\n          Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         async assertion fail (*ms)\n          AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n          \n          true !== false\n          \n              *\n              *\n              *\n              *\n              *\n              *\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: true,\n            expected: false,\n            operator: 'strictEqual'\n          }\n        \n        *\n         reject fail (*ms)\n          Error: rejected from reject fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         +sync throw fail (*ms)\n          Error: thrown from subtest sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         sync throw non-error fail (*ms)\n          Symbol(thrown symbol from sync throw non-error fail)\n        \n        *\n         +long running (*ms)\n          'test did not finish before its parent and was cancelled'\n        \n        *\n         sync skip option is false fail (*ms)\n          Error: this should be executed\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         callback fail (*ms)\n          Error: callback failure\n              *\n              *\n        \n        *\n         callback also returns a Promise (*ms)\n          'passed a callback but also returned a Promise'\n        \n        *\n         callback throw (*ms)\n          Error: thrown from callback throw\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         callback called twice (*ms)\n          'callback invoked multiple times'\n        \n        *\n         callback called twice in future tick (*ms)\n          Error [ERR_TEST_FAILURE]: callback invoked multiple times\n              * {\n            code: 'ERR_TEST_FAILURE',\n            failureType: 'multipleCallbackInvocations',\n            cause: 'callback invoked multiple times'\n          }\n        \n        *\n         callback async throw (*ms)\n          Error: thrown from callback async throw\n              *\n              *\n        \n        *\n         custom inspect symbol fail (*ms)\n          customized\n        \n        *\n         custom inspect symbol that throws fail (*ms)\n          { foo: 1 }\n        \n        *\n         sync throw fails at first (*ms)\n          Error: thrown from subtest sync throw fails at first\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         sync throw fails at second (*ms)\n          Error: thrown from subtest sync throw fails at second\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         timed out async test (*ms)\n          'test timed out after *ms'\n        \n        *\n         timed out callback test (*ms)\n          'test timed out after *ms'\n        \n        *\n         rejected thenable (*ms)\n          'custom error'\n        \n        *\n         unfinished test with uncaughtException (*ms)\n          Error: foo\n              *\n              *\n              *\n        \n        *\n         unfinished test with unhandledRejection (*ms)\n          Error: bar\n              *\n              *\n              *\n        \n        *\n         assertion errors display actual and expected properly (*ms)\n          AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n          \n          {\n            bar: 1,\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            foo: 1\n          }\n          \n          should loosely deep-equal\n          \n          {\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            circular: <ref *1> {\n              bar: 2,\n              c: [Circular *1]\n            }\n          }\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: { foo: 1, bar: 1, boo: [ 1 ], baz: { date: 1970-01-01T00:00:00.000Z, null: null, number: 1, string: 'Hello', undefined: undefined } },\n            expected: { boo: [ 1 ], baz: { date: 1970-01-01T00:00:00.000Z, null: null, number: 1, string: 'Hello', undefined: undefined }, circular: <ref *1> { bar: 2, c: [Circular *1] } },\n            operator: 'deepEqual'\n          }\n        \n        *\n         invalid subtest fail (*ms)\n          'test could not be started because its parent finished'\n        \n      actual: |-\n         sync pass todo (*ms) # TODO\n         sync pass todo with message (*ms) # this is a passing todo\n         sync fail todo (*ms) # TODO\n          Error: thrown from sync fail todo\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         sync fail todo with message (*ms) # this is a failing todo\n          Error: thrown from sync fail todo with message\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         sync skip pass (*ms) # SKIP\n         sync skip pass with message (*ms) # this is skipped\n         sync pass (*ms)\n         this test should pass\n         sync throw fail (*ms)\n          Error: thrown from sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         async skip pass (*ms) # SKIP\n         async pass (*ms)\n         async throw fail (*ms)\n          Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         async skip fail (*ms) # SKIP\n          Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         async assertion fail (*ms)\n          AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n          \n          true !== false\n          \n              *\n              *\n              *\n              *\n              *\n              *\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: true,\n            expected: false,\n            operator: 'strictEqual'\n          }\n        \n         resolve pass (*ms)\n         reject fail (*ms)\n          Error: rejected from reject fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         unhandled rejection - passes but warns (*ms)\n         async unhandled rejection - passes but warns (*ms)\n         immediate throw - passes but warns (*ms)\n         immediate reject - passes but warns (*ms)\n         immediate resolve pass (*ms)\n         subtest sync throw fail\n           +sync throw fail (*ms)\n            Error: thrown from subtest sync throw fail\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n        \n           this subtest should make its parent test fail\n         subtest sync throw fail (*ms)\n         sync throw non-error fail (*ms)\n          Symbol(thrown symbol from sync throw non-error fail)\n        \n         level 0a\n           level 1a (*ms)\n           level 1b (*ms)\n           level 1c (*ms)\n           level 1d (*ms)\n         level 0a (*ms)\n         top level\n           +long running (*ms)\n            'test did not finish before its parent and was cancelled'\n        \n           +short running\n             ++short running (*ms)\n           +short running (*ms)\n         top level (*ms)\n         invalid subtest - pass but subtest fails (*ms)\n         sync skip option (*ms) # SKIP\n         sync skip option with message (*ms) # this is skipped\n         sync skip option is false fail (*ms)\n          Error: this should be executed\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         <anonymous> (*ms)\n         functionOnly (*ms)\n         <anonymous> (*ms)\n         test with only a name provided (*ms)\n         <anonymous> (*ms)\n         <anonymous> (*ms) # SKIP\n         test with a name and options provided (*ms) # SKIP\n         functionAndOptions (*ms) # SKIP\n         callback pass (*ms)\n         callback fail (*ms)\n          Error: callback failure\n              *\n              *\n        \n         sync t is this in test (*ms)\n         async t is this in test (*ms)\n         callback t is this in test (*ms)\n         callback also returns a Promise (*ms)\n          'passed a callback but also returned a Promise'\n        \n         callback throw (*ms)\n          Error: thrown from callback throw\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         callback called twice (*ms)\n          'callback invoked multiple times'\n        \n         callback called twice in different ticks (*ms)\n         callback called twice in future tick (*ms)\n          Error [ERR_TEST_FAILURE]: callback invoked multiple times\n              * {\n            code: 'ERR_TEST_FAILURE',\n            failureType: 'multipleCallbackInvocations',\n            cause: 'callback invoked multiple times'\n          }\n        \n         callback async throw (*ms)\n          Error: thrown from callback async throw\n              *\n              *\n        \n         callback async throw after done (*ms)\n         only is set but not in only mode\n           running subtest 1 (*ms)\n           running subtest 2 (*ms)\n           'only' and 'runOnly' require the --test-only command-line option.\n           running subtest 3 (*ms)\n           'only' and 'runOnly' require the --test-only command-line option.\n           running subtest 4 (*ms)\n         only is set but not in only mode (*ms)\n         'only' and 'runOnly' require the --test-only command-line option.\n         custom inspect symbol fail (*ms)\n          customized\n        \n         custom inspect symbol that throws fail (*ms)\n          { foo: 1 }\n        \n         subtest sync throw fails\n           sync throw fails at first (*ms)\n            Error: thrown from subtest sync throw fails at first\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n        \n           sync throw fails at second (*ms)\n            Error: thrown from subtest sync throw fails at second\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n        \n         subtest sync throw fails (*ms)\n         timed out async test (*ms)\n          'test timed out after *ms'\n        \n         timed out callback test (*ms)\n          'test timed out after *ms'\n        \n         large timeout async test is ok (*ms)\n         large timeout callback test is ok (*ms)\n         successful thenable (*ms)\n         rejected thenable (*ms)\n          'custom error'\n        \n         unfinished test with uncaughtException (*ms)\n          Error: foo\n              *\n              *\n              *\n        \n         unfinished test with unhandledRejection (*ms)\n          Error: bar\n              *\n              *\n              *\n        \n         assertion errors display actual and expected properly (*ms)\n          AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n          \n          {\n            bar: 1,\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            foo: 1\n          }\n          \n          should loosely deep-equal\n          \n          {\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            circular: <ref *1> {\n              bar: 2,\n              c: [Circular *1]\n            }\n          }\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: { foo: 1, bar: 1, boo: [ 1 ], baz: { date: 1970-01-01T00:00:00.000Z, null: null, number: 1, string: 'Hello', undefined: undefined } },\n            expected: { boo: [ 1 ], baz: { date: 1970-01-01T00:00:00.000Z, null: null, number: 1, string: 'Hello', undefined: undefined }, circular: <ref *1> { bar: 2, c: [Circular *1] } },\n            operator: 'deepEqual'\n          }\n        \n         invalid subtest fail (*ms)\n          'test could not be started because its parent finished'\n        \n         Error: Test \"unhandled rejection - passes but warns\" at test\\fixtures\\test-runner\\output\\output.js:72:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\n         Error: Test \"async unhandled rejection - passes but warns\" at test\\fixtures\\test-runner\\output\\output.js:76:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from async unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\n         Error: A resource generated asynchronous activity after the test ended. This activity created the error \"Error: uncaught from outside of a test\" which triggered an uncaughtException event, caught by the test runner.\n         Error: Test \"immediate throw - passes but warns\" at test\\fixtures\\test-runner\\output\\output.js:80:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from immediate throw fail\" and would have caused the test to fail, but instead triggered an uncaughtException event.\n         Error: Test \"immediate reject - passes but warns\" at test\\fixtures\\test-runner\\output\\output.js:86:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from immediate reject fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\n         Error: Test \"callback called twice in different ticks\" at test\\fixtures\\test-runner\\output\\output.js:251:1 generated asynchronous activity after the test ended. This activity created the error \"Error [ERR_TEST_FAILURE]: callback invoked multiple times\" and would have caused the test to fail, but instead triggered an uncaughtException event.\n         Error: Test \"callback async throw after done\" at test\\fixtures\\test-runner\\output\\output.js:269:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from callback async throw after done\" and would have caused the test to fail, but instead triggered an uncaughtException event.\n         tests 76\n         suites 0\n         pass 35\n         fail 25\n         cancelled 3\n         skipped 9\n         todo 4\n         duration_ms *\n        \n         failing tests:\n        \n        *\n         sync fail todo (*ms) # TODO\n          Error: thrown from sync fail todo\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         sync fail todo with message (*ms) # this is a failing todo\n          Error: thrown from sync fail todo with message\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         sync throw fail (*ms)\n          Error: thrown from sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         async throw fail (*ms)\n          Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         async skip fail (*ms) # SKIP\n          Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         async assertion fail (*ms)\n          AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n          \n          true !== false\n          \n              *\n              *\n              *\n              *\n              *\n              *\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: true,\n            expected: false,\n            operator: 'strictEqual'\n          }\n        \n        *\n         reject fail (*ms)\n          Error: rejected from reject fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         +sync throw fail (*ms)\n          Error: thrown from subtest sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         sync throw non-error fail (*ms)\n          Symbol(thrown symbol from sync throw non-error fail)\n        \n        *\n         +long running (*ms)\n          'test did not finish before its parent and was cancelled'\n        \n        *\n         sync skip option is false fail (*ms)\n          Error: this should be executed\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         callback fail (*ms)\n          Error: callback failure\n              *\n              *\n        \n        *\n         callback also returns a Promise (*ms)\n          'passed a callback but also returned a Promise'\n        \n        *\n         callback throw (*ms)\n          Error: thrown from callback throw\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         callback called twice (*ms)\n          'callback invoked multiple times'\n        \n        *\n         callback called twice in future tick (*ms)\n          Error [ERR_TEST_FAILURE]: callback invoked multiple times\n              * {\n            code: 'ERR_TEST_FAILURE',\n            failureType: 'multipleCallbackInvocations',\n            cause: 'callback invoked multiple times'\n          }\n        \n        *\n         callback async throw (*ms)\n          Error: thrown from callback async throw\n              *\n              *\n        \n        *\n         custom inspect symbol fail (*ms)\n          customized\n        \n        *\n         custom inspect symbol that throws fail (*ms)\n          { foo: 1 }\n        \n        *\n         sync throw fails at first (*ms)\n          Error: thrown from subtest sync throw fails at first\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         sync throw fails at second (*ms)\n          Error: thrown from subtest sync throw fails at second\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         timed out async test (*ms)\n          'test timed out after *ms'\n        \n        *\n         timed out callback test (*ms)\n          'test timed out after *ms'\n        \n        *\n         rejected thenable (*ms)\n          'custom error'\n        \n        *\n         unfinished test with uncaughtException (*ms)\n          Error: foo\n              *\n              *\n              *\n        \n        *\n         unfinished test with unhandledRejection (*ms)\n          Error: bar\n              *\n              *\n              *\n        \n        *\n         assertion errors display actual and expected properly (*ms)\n          AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n          \n          {\n            bar: 1,\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            foo: 1\n          }\n          \n          should loosely deep-equal\n          \n          {\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            circular: <ref *1> {\n              bar: 2,\n              c: [Circular *1]\n            }\n          }\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: { foo: 1, bar: 1, boo: [ 1 ], baz: { date: 1970-01-01T00:00:00.000Z, null: null, number: 1, string: 'Hello', undefined: undefined } },\n            expected: { boo: [ 1 ], baz: { date: 1970-01-01T00:00:00.000Z, null: null, number: 1, string: 'Hello', undefined: undefined }, circular: <ref *1> { bar: 2, c: [Circular *1] } },\n            operator: 'deepEqual'\n          }\n        \n        *\n         invalid subtest fail (*ms)\n          'test could not be started because its parent finished'\n        \n      operator: 'strictEqual'\n      stack: |-\n        assertSnapshot (c:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:56:12)\n        async Module.spawnAndAssert (c:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:84:3)\n        async TestContext.<anonymous> (file:///c:/workspace/node-test-binary-windows-js-suites/node/test/parallel/test-runner-output.mjs:145:5)\n        async Test.run (node:internal/test_runner/test:736:9)\n        async Promise.all (index 26)\n        async Suite.run (node:internal/test_runner/test:1091:7)\n        async Test.processPendingSubtests (node:internal/test_runner/test:449:7)\n      ...\n    # Subtest: test-runner/output/source_mapped_locations.mjs\n    ok 28 - test-runner/output/source_mapped_locations.mjs\n      ---\n      duration_ms: 1944.0013\n      ...\n    # Subtest: test-runner/output/lcov_reporter.js\n    ok 29 - test-runner/output/lcov_reporter.js\n      ---\n      duration_ms: 3435.4432\n      ...\n    # Subtest: test-runner/output/output.js\n    ok 30 - test-runner/output/output.js\n      ---\n      duration_ms: 2232.3759\n      ...\n    # Subtest: test-runner/output/output_cli.js\n    ok 31 - test-runner/output/output_cli.js\n      ---\n      duration_ms: 3803.9356\n      ...\n    # Subtest: test-runner/output/name_pattern.js\n    ok 32 - test-runner/output/name_pattern.js\n      ---\n      duration_ms: 1554.2059\n      ...\n    # Subtest: test-runner/output/name_pattern_with_only.js\n    ok 33 - test-runner/output/name_pattern_with_only.js\n      ---\n      duration_ms: 1930.1065\n      ...\n    # Subtest: test-runner/output/unfinished-suite-async-error.js\n    ok 34 - test-runner/output/unfinished-suite-async-error.js\n      ---\n      duration_ms: 1349.2964\n      ...\n    # Subtest: test-runner/output/unresolved_promise.js\n    ok 35 - test-runner/output/unresolved_promise.js\n      ---\n      duration_ms: 1329.3096\n      ...\n    # Subtest: test-runner/output/default_output.js\n        # Subtest: <anonymous>\n        ok 1 - <anonymous> # SKIP Skipping pseudo-tty tests, as pseudo terminals are not available on Windows.\n          ---\n          duration_ms: 83.5244\n          ...\n        1..1\n    ok 36 - test-runner/output/default_output.js\n      ---\n      duration_ms: 84.1606\n      ...\n    # Subtest: test-runner/output/arbitrary-output.js\n    ok 37 - test-runner/output/arbitrary-output.js\n      ---\n      duration_ms: 2645.3524\n      ...\n    # Subtest: test-runner/output/async-test-scheduling.mjs\n    ok 38 - test-runner/output/async-test-scheduling.mjs\n      ---\n      duration_ms: 2081.1801\n      ...\n    # Subtest: test-runner/output/arbitrary-output-colored.js\n        # Subtest: <anonymous>\n        ok 1 - <anonymous> # SKIP Skipping pseudo-tty tests, as pseudo terminals are not available on Windows.\n          ---\n          duration_ms: 46.2564\n          ...\n        1..1\n    ok 39 - test-runner/output/arbitrary-output-colored.js\n      ---\n      duration_ms: 46.6506\n      ...\n    # Subtest: test-runner/output/dot_output_custom_columns.js\n        # Subtest: <anonymous>\n        ok 1 - <anonymous> # SKIP Skipping pseudo-tty tests, as pseudo terminals are not available on Windows.\n          ---\n          duration_ms: 46.1793\n          ...\n        1..1\n    ok 40 - test-runner/output/dot_output_custom_columns.js\n      ---\n      duration_ms: 46.469\n      ...\n    # Subtest: test-runner/output/tap_escape.js\n    ok 41 - test-runner/output/tap_escape.js\n      ---\n      duration_ms: 1849.8475\n      ...\n    # Subtest: test-runner/output/coverage_failure.js\n    ok 42 - test-runner/output/coverage_failure.js\n      ---\n      duration_ms: 1811.0508\n      ...\n    1..42\nnot ok 1 - test runner output\n  ---\n  duration_ms: 4538.045\n  type: 'suite'\n  location: 'c:\\\\workspace\\\\node-test-binary-windows-js-suites\\\\node\\\\test\\\\parallel\\\\test-runner-output.mjs:149:1'\n  failureType: 'subtestsFailed'\n  error: '3 subtests failed'\n  code: 'ERR_TEST_FAILURE'\n  ...\n1..1\n# tests 45\n# suites 1\n# pass 39\n# fail 3\n# cancelled 0\n# skipped 3\n# todo 0\n# duration_ms 4550.621"},"time":5004.07,"fullname":"parallel/test-runner-output","closingTestPoint":false}},{"testName":"parallel/test-runner-output","timestamp":1712793616158,"status":"FAILED","jobName":"node-test-binary-windows-js-suites","config":"node-test-binary-windows-js-suites Â» 1,win11-arm64-COMPILED_BY-vs2022-arm64 #27039","buildUrl":"https://ci.nodejs.org/job/node-test-binary-windows-js-suites/RUN_SUBSET=1,nodes=win11-arm64-COMPILED_BY-vs2022-arm64/27039/","buildNumber":27039,"builtOn":"test-azure_msft-win11_vs2022-arm64-3","nodeVersion":"22.0.0","commitHash":"4e15a4373cf4bd852ed72dbc423c653f08640dba","callStack":[{"upstreamBuild":62036,"upstreamProject":"node-test-commit-windows-fanned","upstreamUrl":"job/node-test-commit-windows-fanned/"},{"upstreamBuild":69709,"upstreamProject":"node-test-commit","upstreamUrl":"job/node-test-commit/"},{"upstreamBuild":58241,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"prId":"52401"}],"tap":{"ok":false,"name":"parallel/test-runner-output","id":674,"buffered":false,"tapError":null,"skip":false,"todo":false,"previous":null,"plan":null,"diag":{"severity":"fail","exitcode":1,"stack":"TAP version 13\n# Subtest: test runner output\n    # Subtest: test-runner/output/abort.js\n    ok 1 - test-runner/output/abort.js\n      ---\n      duration_ms: 2074.9445\n      ...\n    # Subtest: test-runner/output/abort_suite.js\n    ok 2 - test-runner/output/abort_suite.js\n      ---\n      duration_ms: 2216.8304\n      ...\n    # Subtest: test-runner/output/abort_hooks.js\n    ok 3 - test-runner/output/abort_hooks.js\n      ---\n      duration_ms: 935.1237\n      ...\n    # Subtest: test-runner/output/describe_it.js\n    ok 4 - test-runner/output/describe_it.js\n      ---\n      duration_ms: 1916.0284\n      ...\n    # Subtest: test-runner/output/describe_nested.js\n    ok 5 - test-runner/output/describe_nested.js\n      ---\n      duration_ms: 1561.6009\n      ...\n    # Subtest: test-runner/output/eval_dot.js\n    ok 6 - test-runner/output/eval_dot.js\n      ---\n      duration_ms: 897.7402\n      ...\n    # Subtest: test-runner/output/eval_spec.js\n    ok 7 - test-runner/output/eval_spec.js\n      ---\n      duration_ms: 1009.6972\n      ...\n    # Subtest: test-runner/output/eval_tap.js\n    ok 8 - test-runner/output/eval_tap.js\n      ---\n      duration_ms: 1517.1498\n      ...\n    # Subtest: test-runner/output/hooks.js\n    ok 9 - test-runner/output/hooks.js\n      ---\n      duration_ms: 1974.3234\n      ...\n    # Subtest: test-runner/output/hooks_spec_reporter.js\n    ok 10 - test-runner/output/hooks_spec_reporter.js\n      ---\n      duration_ms: 3137.1991\n      ...\n    # Subtest: test-runner/output/skip-each-hooks.js\n    ok 11 - test-runner/output/skip-each-hooks.js\n      ---\n      duration_ms: 1816.6747\n      ...\n    # Subtest: test-runner/output/suite-skip-hooks.js\n    ok 12 - test-runner/output/suite-skip-hooks.js\n      ---\n      duration_ms: 1466.6166\n      ...\n    # Subtest: test-runner/output/timeout_in_before_each_should_not_affect_further_tests.js\n    ok 13 - test-runner/output/timeout_in_before_each_should_not_affect_further_tests.js\n      ---\n      duration_ms: 2609.9201\n      ...\n    # Subtest: test-runner/output/hooks-with-no-global-test.js\n    ok 14 - test-runner/output/hooks-with-no-global-test.js\n      ---\n      duration_ms: 1843.6055\n      ...\n    # Subtest: test-runner/output/global-hooks-with-no-tests.js\n    ok 15 - test-runner/output/global-hooks-with-no-tests.js\n      ---\n      duration_ms: 1833.5286\n      ...\n    # Subtest: test-runner/output/before-and-after-each-too-many-listeners.js\n    ok 16 - test-runner/output/before-and-after-each-too-many-listeners.js\n      ---\n      duration_ms: 1521.7192\n      ...\n    # Subtest: test-runner/output/before-and-after-each-with-timeout-too-many-listeners.js\n    ok 17 - test-runner/output/before-and-after-each-with-timeout-too-many-listeners.js\n      ---\n      duration_ms: 1676.6692\n      ...\n    # Subtest: test-runner/output/force_exit.js\n    ok 18 - test-runner/output/force_exit.js\n      ---\n      duration_ms: 1957.7483\n      ...\n    # Subtest: test-runner/output/global_after_should_fail_the_test.js\n    ok 19 - test-runner/output/global_after_should_fail_the_test.js\n      ---\n      duration_ms: 1790.3386\n      ...\n    # Subtest: test-runner/output/no_refs.js\n    ok 20 - test-runner/output/no_refs.js\n      ---\n      duration_ms: 2034.1527\n      ...\n    # Subtest: test-runner/output/no_tests.js\n    ok 21 - test-runner/output/no_tests.js\n      ---\n      duration_ms: 2254.35\n      ...\n    # Subtest: test-runner/output/only_tests.js\n    ok 22 - test-runner/output/only_tests.js\n      ---\n      duration_ms: 2083.102\n      ...\n    # Subtest: test-runner/output/dot_reporter.js\n    ok 23 - test-runner/output/dot_reporter.js\n      ---\n      duration_ms: 3697.9016\n      ...\n    # Subtest: test-runner/output/junit_reporter.js\n    not ok 24 - test-runner/output/junit_reporter.js\n      ---\n      duration_ms: 3703.3959\n      location: 'd:\\\\workspace\\\\node-test-binary-windows-js-suites\\\\node\\\\test\\\\parallel\\\\test-runner-output.mjs:151:5'\n      failureType: 'testCodeFailure'\n      error: |-\n        Values have same structure but are not reference-equal:\n        \n        '<?xml version=\"1.0\" encoding=\"utf-8\"?>\\n' +\n          '<testsuites>\\n' +\n          '\\t<testcase name=\"sync pass todo\" time=\"*\" classname=\"test\">\\n' +\n          '\\t\\t<skipped type=\"todo\" message=\"true\"/>\\n' +\n          '\\t</testcase>\\n' +\n          '\\t<testcase name=\"sync pass todo with message\" time=\"*\" classname=\"test\">\\n' +\n          '\\t\\t<skipped type=\"todo\" message=\"this is a passing todo\"/>\\n' +\n          '\\t</testcase>\\n' +\n          '\\t<testcase name=\"sync fail todo\" time=\"*\" classname=\"test\" failure=\"thrown from sync fail todo\">\\n' +\n          '\\t\\t<skipped type=\"todo\" message=\"true\"/>\\n' +\n          '\\t\\t<failure type=\"testCodeFailure\" message=\"thrown from sync fail todo\">\\n' +\n          '[Error [ERR_TEST_FAILURE]: thrown from sync fail todo] {\\n' +\n          \"  code: 'ERR_TEST_FAILURE',\\n\" +\n          \"  failureType: 'testCodeFailure',\\n\" +\n          '  cause: Error: thrown from sync fail todo\\n' +\n          '      *\\n' +\n          '      *\\n' +\n          '      *\\n' +\n          '      *\\n' +\n          '      *\\n' +\n          '      *\\n' +\n          '      *\\n' +\n          '}\\n' +\n          '\\t\\t</failure>\\n' +\n          '\\t</testcase>\\n' +\n          '\\t<testcase name=\"sync fail todo with message\" time=\"*\" classname=\"test\" failure=\"thrown from sync fail todo with message\">\\n' +\n          '\\t\\t<skipped type=\"todo\" message=\"this is a failing todo\"/>\\n' +\n          '\\t\\t<failure type=\"testCodeFailure\" message=\"thrown from sync fail todo with message\">\\n' +\n          '[Error [ERR_TEST_FAILURE]: thrown from sync fail todo with message] {\\n' +\n          \"  code: 'ERR_TEST_FAILURE',\\n\" +\n          \"  failureType: 'testCodeFailure',\\n\" +\n          '  cause: Error: thrown from sync fail todo with message\\n' +\n          '      *\\n' +\n          '      *\\n' +\n          '      *\\n' +\n          '      *\\n' +\n          '      *\\n' +\n          '      *\\n' +\n          '      *\\n' +\n          '}\\n' +\n          '\\t\\t</failure>\\n' +\n          '\\t</testcase>\\n' +\n          '\\t<testcase name=\"sync skip pass\" time=\"*\" classname=\"test\">\\n' +\n          '\\t\\t<skipped type=\"skipped\" message=\"true\"/>\\n' +\n          '\\t</testcase>\\n' +\n          '\\t<testcase name=\"sync skip pass with message\" time=\"*\" classname=\"test\">\\n' +\n        ...\n        \n      code: 'ERR_ASSERTION'\n      name: 'AssertionError'\n      expected: |-\n        <?xml version=\"1.0\" encoding=\"utf-8\"?>\n        <testsuites>\n        \t<testcase name=\"sync pass todo\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"todo\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync pass todo with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"todo\" message=\"this is a passing todo\"/>\n        \t</testcase>\n        \t<testcase name=\"sync fail todo\" time=\"*\" classname=\"test\" failure=\"thrown from sync fail todo\">\n        \t\t<skipped type=\"todo\" message=\"true\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync fail todo\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync fail todo] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync fail todo\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync fail todo with message\" time=\"*\" classname=\"test\" failure=\"thrown from sync fail todo with message\">\n        \t\t<skipped type=\"todo\" message=\"this is a failing todo\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync fail todo with message\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync fail todo with message] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync fail todo with message\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync skip pass\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip pass with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"this is skipped\"/>\n        \t</testcase>\n        \t<testcase name=\"sync pass\" time=\"*\" classname=\"test\"/>\n        \t<!-- this test should pass -->\n        \t<testcase name=\"sync throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from sync throw fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async skip pass\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"async pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from async throw fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from async throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from async throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async skip fail\" time=\"*\" classname=\"test\" failure=\"thrown from async throw fail\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from async throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from async throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async assertion fail\" time=\"*\" classname=\"test\" failure=\"Expected values to be strictly equal:true !== false\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Expected values to be strictly equal:true !== false\">\n        [Error [ERR_TEST_FAILURE]: Expected values to be strictly equal:\n        \n        true !== false\n        ] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n          \n          true !== false\n          \n              *\n              *\n              *\n              *\n              *\n              *\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: true,\n            expected: false,\n            operator: 'strictEqual'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"resolve pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"reject fail\" time=\"*\" classname=\"test\" failure=\"rejected from reject fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"rejected from reject fail\">\n        [Error [ERR_TEST_FAILURE]: rejected from reject fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: rejected from reject fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unhandled rejection - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async unhandled rejection - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate throw - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate reject - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate resolve pass\" time=\"*\" classname=\"test\"/>\n        \t<testsuite name=\"subtest sync throw fail\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"1\" failures=\"1\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"+sync throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fail\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fail\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fail\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<!-- this subtest should make its parent test fail -->\n        \t</testsuite>\n        \t<testcase name=\"sync throw non-error fail\" time=\"*\" classname=\"test\" failure=\"Symbol(thrown symbol from sync throw non-error fail)\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Symbol(thrown symbol from sync throw non-error fail)\">\n        [Error [ERR_TEST_FAILURE]: Symbol(thrown symbol from sync throw non-error fail)] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: Symbol(thrown symbol from sync throw non-error fail) }\n        \t\t</failure>\n        \t</testcase>\n        \t<testsuite name=\"level 0a\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"4\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"level 1a\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1b\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1c\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1d\" time=\"*\" classname=\"test\"/>\n        \t</testsuite>\n        \t<testsuite name=\"top level\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"2\" failures=\"1\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"+long running\" time=\"*\" classname=\"test\" failure=\"test did not finish before its parent and was cancelled\">\n        \t\t\t<failure type=\"cancelledByParent\" message=\"test did not finish before its parent and was cancelled\">\n        [Error [ERR_TEST_FAILURE]: test did not finish before its parent and was cancelled] { code: 'ERR_TEST_FAILURE', failureType: 'cancelledByParent', cause: 'test did not finish before its parent and was cancelled' }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<testsuite name=\"+short running\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"1\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t\t<testcase name=\"++short running\" time=\"*\" classname=\"test\"/>\n        \t\t</testsuite>\n        \t</testsuite>\n        \t<testcase name=\"invalid subtest - pass but subtest fails\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"sync skip option\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip option with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"this is skipped\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip option is false fail\" time=\"*\" classname=\"test\" failure=\"this should be executed\">\n        \t\t<failure type=\"testCodeFailure\" message=\"this should be executed\">\n        [Error [ERR_TEST_FAILURE]: this should be executed] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: this should be executed\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"functionOnly\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"test with only a name provided\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"test with a name and options provided\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"functionAndOptions\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"callback pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback fail\" time=\"*\" classname=\"test\" failure=\"callback failure\">\n        \t\t<failure type=\"testCodeFailure\" message=\"callback failure\">\n        [Error [ERR_TEST_FAILURE]: callback failure] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: callback failure\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback also returns a Promise\" time=\"*\" classname=\"test\" failure=\"passed a callback but also returned a Promise\">\n        \t\t<failure type=\"callbackAndPromisePresent\" message=\"passed a callback but also returned a Promise\">\n        [Error [ERR_TEST_FAILURE]: passed a callback but also returned a Promise] { code: 'ERR_TEST_FAILURE', failureType: 'callbackAndPromisePresent', cause: 'passed a callback but also returned a Promise' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback throw\" time=\"*\" classname=\"test\" failure=\"thrown from callback throw\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from callback throw\">\n        [Error [ERR_TEST_FAILURE]: thrown from callback throw] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from callback throw\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback called twice\" time=\"*\" classname=\"test\" failure=\"callback invoked multiple times\">\n        \t\t<failure type=\"multipleCallbackInvocations\" message=\"callback invoked multiple times\">\n        Error [ERR_TEST_FAILURE]: callback invoked multiple times\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'multipleCallbackInvocations',\n          cause: 'callback invoked multiple times'\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback called twice in different ticks\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback called twice in future tick\" time=\"*\" classname=\"test\" failure=\"callback invoked multiple times\">\n        \t\t<failure type=\"uncaughtException\" message=\"callback invoked multiple times\">\n        Error [ERR_TEST_FAILURE]: callback invoked multiple times\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error [ERR_TEST_FAILURE]: callback invoked multiple times\n              * {\n            code: 'ERR_TEST_FAILURE',\n            failureType: 'multipleCallbackInvocations',\n            cause: 'callback invoked multiple times'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback async throw\" time=\"*\" classname=\"test\" failure=\"thrown from callback async throw\">\n        \t\t<failure type=\"uncaughtException\" message=\"thrown from callback async throw\">\n        Error [ERR_TEST_FAILURE]: thrown from callback async throw\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error: thrown from callback async throw\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback async throw after done\" time=\"*\" classname=\"test\"/>\n        \t<testsuite name=\"only is set but not in only mode\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"4\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"running subtest 1\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"running subtest 2\" time=\"*\" classname=\"test\"/>\n        \t\t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t\t<testcase name=\"running subtest 3\" time=\"*\" classname=\"test\"/>\n        \t\t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t\t<testcase name=\"running subtest 4\" time=\"*\" classname=\"test\"/>\n        \t</testsuite>\n        \t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t<testcase name=\"custom inspect symbol fail\" time=\"*\" classname=\"test\" failure=\"customized\">\n        \t\t<failure type=\"testCodeFailure\" message=\"customized\">\n        [Error [ERR_TEST_FAILURE]: customized] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: customized }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"custom inspect symbol that throws fail\" time=\"*\" classname=\"test\" failure=\"{  foo: 1,  [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]}\">\n        \t\t<failure type=\"testCodeFailure\" message=\"{  foo: 1,  [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]}\">\n        [Error [ERR_TEST_FAILURE]: {\n          foo: 1,\n          [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]\n        }] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: { foo: 1, [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]] }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testsuite name=\"subtest sync throw fails\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"2\" failures=\"2\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"sync throw fails at first\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fails at first\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fails at first\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fails at first\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fails at first\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<testcase name=\"sync throw fails at second\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fails at second\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fails at second\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fails at second\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fails at second\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t</testsuite>\n        \t<testcase name=\"timed out async test\" time=\"*\" classname=\"test\" failure=\"test timed out after 5ms\">\n        \t\t<failure type=\"testTimeoutFailure\" message=\"test timed out after 5ms\">\n        [Error [ERR_TEST_FAILURE]: test timed out after 5ms] { code: 'ERR_TEST_FAILURE', failureType: 'testTimeoutFailure', cause: 'test timed out after 5ms' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"timed out callback test\" time=\"*\" classname=\"test\" failure=\"test timed out after 5ms\">\n        \t\t<failure type=\"testTimeoutFailure\" message=\"test timed out after 5ms\">\n        [Error [ERR_TEST_FAILURE]: test timed out after 5ms] { code: 'ERR_TEST_FAILURE', failureType: 'testTimeoutFailure', cause: 'test timed out after 5ms' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"large timeout async test is ok\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"large timeout callback test is ok\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"successful thenable\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"rejected thenable\" time=\"*\" classname=\"test\" failure=\"custom error\">\n        \t\t<failure type=\"testCodeFailure\" message=\"custom error\">\n        [Error [ERR_TEST_FAILURE]: custom error] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: 'custom error' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unfinished test with uncaughtException\" time=\"*\" classname=\"test\" failure=\"foo\">\n        \t\t<failure type=\"uncaughtException\" message=\"foo\">\n        Error [ERR_TEST_FAILURE]: foo\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error: foo\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unfinished test with unhandledRejection\" time=\"*\" classname=\"test\" failure=\"bar\">\n        \t\t<failure type=\"unhandledRejection\" message=\"bar\">\n        Error [ERR_TEST_FAILURE]: bar\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'unhandledRejection',\n          cause: Error: bar\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"assertion errors display actual and expected properly\" time=\"*\" classname=\"test\" failure=\"Expected values to be loosely deep-equal:{  bar: 1,  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  foo: 1}should loosely deep-equal{  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  circular: &lt;ref *1> {    bar: 2,    c: [Circular *1]  }}\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Expected values to be loosely deep-equal:{  bar: 1,  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  foo: 1}should loosely deep-equal{  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  circular: &lt;ref *1> {    bar: 2,    c: [Circular *1]  }}\">\n        [Error [ERR_TEST_FAILURE]: Expected values to be loosely deep-equal:\n        \n        {\n          bar: 1,\n          baz: {\n            date: 1970-01-01T00:00:00.000Z,\n            null: null,\n            number: 1,\n            string: 'Hello',\n            undefined: undefined\n          },\n          boo: [\n            1\n          ],\n          foo: 1\n        }\n        \n        should loosely deep-equal\n        \n        {\n          baz: {\n            date: 1970-01-01T00:00:00.000Z,\n            null: null,\n            number: 1,\n            string: 'Hello',\n            undefined: undefined\n          },\n          boo: [\n            1\n          ],\n          circular: &lt;ref *1> {\n            bar: 2,\n            c: [Circular *1]\n          }\n        }] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n          \n          {\n            bar: 1,\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            foo: 1\n          }\n          \n          should loosely deep-equal\n          \n          {\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            circular: &lt;ref *1> {\n              bar: 2,\n              c: [Circular *1]\n            }\n          }\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: [Object],\n            expected: [Object],\n            operator: 'deepEqual'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"invalid subtest fail\" time=\"*\" classname=\"test\" failure=\"test could not be started because its parent finished\">\n        \t\t<failure type=\"parentAlreadyFinished\" message=\"test could not be started because its parent finished\">\n        Error [ERR_TEST_FAILURE]: test could not be started because its parent finished\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'parentAlreadyFinished',\n          cause: 'test could not be started because its parent finished'\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<!-- Error: Test \"unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:72:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: Test \"async unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:76:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from async unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: A resource generated asynchronous activity after the test ended. This activity created the error \"Error: uncaught from outside of a test\" which triggered an uncaughtException event, caught by the test runner. -->\n        \t<!-- Error: Test \"immediate throw - passes but warns\" at test/fixtures/test-runner/output/output.js:80:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from immediate throw fail\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- Error: Test \"immediate reject - passes but warns\" at test/fixtures/test-runner/output/output.js:86:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from immediate reject fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: Test \"callback called twice in different ticks\" at test/fixtures/test-runner/output/output.js:251:1 generated asynchronous activity after the test ended. This activity created the error \"Error [ERR_TEST_FAILURE]: callback invoked multiple times\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- Error: Test \"callback async throw after done\" at test/fixtures/test-runner/output/output.js:269:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from callback async throw after done\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- tests 76 -->\n        \t<!-- suites 0 -->\n        \t<!-- pass 35 -->\n        \t<!-- fail 25 -->\n        \t<!-- cancelled 3 -->\n        \t<!-- skipped 9 -->\n        \t<!-- todo 4 -->\n        \t<!-- duration_ms * -->\n        </testsuites>\n        \n      actual: |-\n        <?xml version=\"1.0\" encoding=\"utf-8\"?>\n        <testsuites>\n        \t<testcase name=\"sync pass todo\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"todo\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync pass todo with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"todo\" message=\"this is a passing todo\"/>\n        \t</testcase>\n        \t<testcase name=\"sync fail todo\" time=\"*\" classname=\"test\" failure=\"thrown from sync fail todo\">\n        \t\t<skipped type=\"todo\" message=\"true\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync fail todo\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync fail todo] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync fail todo\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync fail todo with message\" time=\"*\" classname=\"test\" failure=\"thrown from sync fail todo with message\">\n        \t\t<skipped type=\"todo\" message=\"this is a failing todo\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync fail todo with message\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync fail todo with message] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync fail todo with message\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync skip pass\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip pass with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"this is skipped\"/>\n        \t</testcase>\n        \t<testcase name=\"sync pass\" time=\"*\" classname=\"test\"/>\n        \t<!-- this test should pass -->\n        \t<testcase name=\"sync throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from sync throw fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async skip pass\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"async pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from async throw fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from async throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from async throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async skip fail\" time=\"*\" classname=\"test\" failure=\"thrown from async throw fail\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from async throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from async throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async assertion fail\" time=\"*\" classname=\"test\" failure=\"Expected values to be strictly equal:true !== false\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Expected values to be strictly equal:true !== false\">\n        [Error [ERR_TEST_FAILURE]: Expected values to be strictly equal:\n        \n        true !== false\n        ] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n          \n          true !== false\n          \n              *\n              *\n              *\n              *\n              *\n              *\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: true,\n            expected: false,\n            operator: 'strictEqual'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"resolve pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"reject fail\" time=\"*\" classname=\"test\" failure=\"rejected from reject fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"rejected from reject fail\">\n        [Error [ERR_TEST_FAILURE]: rejected from reject fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: rejected from reject fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unhandled rejection - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async unhandled rejection - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate throw - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate reject - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate resolve pass\" time=\"*\" classname=\"test\"/>\n        \t<testsuite name=\"subtest sync throw fail\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"1\" failures=\"1\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"+sync throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fail\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fail\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fail\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<!-- this subtest should make its parent test fail -->\n        \t</testsuite>\n        \t<testcase name=\"sync throw non-error fail\" time=\"*\" classname=\"test\" failure=\"Symbol(thrown symbol from sync throw non-error fail)\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Symbol(thrown symbol from sync throw non-error fail)\">\n        [Error [ERR_TEST_FAILURE]: Symbol(thrown symbol from sync throw non-error fail)] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: Symbol(thrown symbol from sync throw non-error fail) }\n        \t\t</failure>\n        \t</testcase>\n        \t<testsuite name=\"level 0a\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"4\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"level 1a\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1b\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1c\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1d\" time=\"*\" classname=\"test\"/>\n        \t</testsuite>\n        \t<testsuite name=\"top level\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"2\" failures=\"1\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"+long running\" time=\"*\" classname=\"test\" failure=\"test did not finish before its parent and was cancelled\">\n        \t\t\t<failure type=\"cancelledByParent\" message=\"test did not finish before its parent and was cancelled\">\n        [Error [ERR_TEST_FAILURE]: test did not finish before its parent and was cancelled] { code: 'ERR_TEST_FAILURE', failureType: 'cancelledByParent', cause: 'test did not finish before its parent and was cancelled' }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<testsuite name=\"+short running\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"1\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t\t<testcase name=\"++short running\" time=\"*\" classname=\"test\"/>\n        \t\t</testsuite>\n        \t</testsuite>\n        \t<testcase name=\"invalid subtest - pass but subtest fails\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"sync skip option\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip option with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"this is skipped\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip option is false fail\" time=\"*\" classname=\"test\" failure=\"this should be executed\">\n        \t\t<failure type=\"testCodeFailure\" message=\"this should be executed\">\n        [Error [ERR_TEST_FAILURE]: this should be executed] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: this should be executed\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"functionOnly\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"test with only a name provided\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"test with a name and options provided\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"functionAndOptions\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"callback pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback fail\" time=\"*\" classname=\"test\" failure=\"callback failure\">\n        \t\t<failure type=\"testCodeFailure\" message=\"callback failure\">\n        [Error [ERR_TEST_FAILURE]: callback failure] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: callback failure\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback also returns a Promise\" time=\"*\" classname=\"test\" failure=\"passed a callback but also returned a Promise\">\n        \t\t<failure type=\"callbackAndPromisePresent\" message=\"passed a callback but also returned a Promise\">\n        [Error [ERR_TEST_FAILURE]: passed a callback but also returned a Promise] { code: 'ERR_TEST_FAILURE', failureType: 'callbackAndPromisePresent', cause: 'passed a callback but also returned a Promise' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback throw\" time=\"*\" classname=\"test\" failure=\"thrown from callback throw\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from callback throw\">\n        [Error [ERR_TEST_FAILURE]: thrown from callback throw] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from callback throw\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback called twice\" time=\"*\" classname=\"test\" failure=\"callback invoked multiple times\">\n        \t\t<failure type=\"multipleCallbackInvocations\" message=\"callback invoked multiple times\">\n        Error [ERR_TEST_FAILURE]: callback invoked multiple times\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'multipleCallbackInvocations',\n          cause: 'callback invoked multiple times'\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback called twice in different ticks\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback called twice in future tick\" time=\"*\" classname=\"test\" failure=\"callback invoked multiple times\">\n        \t\t<failure type=\"uncaughtException\" message=\"callback invoked multiple times\">\n        Error [ERR_TEST_FAILURE]: callback invoked multiple times\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error [ERR_TEST_FAILURE]: callback invoked multiple times\n              * {\n            code: 'ERR_TEST_FAILURE',\n            failureType: 'multipleCallbackInvocations',\n            cause: 'callback invoked multiple times'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback async throw\" time=\"*\" classname=\"test\" failure=\"thrown from callback async throw\">\n        \t\t<failure type=\"uncaughtException\" message=\"thrown from callback async throw\">\n        Error [ERR_TEST_FAILURE]: thrown from callback async throw\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error: thrown from callback async throw\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback async throw after done\" time=\"*\" classname=\"test\"/>\n        \t<testsuite name=\"only is set but not in only mode\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"4\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"running subtest 1\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"running subtest 2\" time=\"*\" classname=\"test\"/>\n        \t\t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t\t<testcase name=\"running subtest 3\" time=\"*\" classname=\"test\"/>\n        \t\t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t\t<testcase name=\"running subtest 4\" time=\"*\" classname=\"test\"/>\n        \t</testsuite>\n        \t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t<testcase name=\"custom inspect symbol fail\" time=\"*\" classname=\"test\" failure=\"customized\">\n        \t\t<failure type=\"testCodeFailure\" message=\"customized\">\n        [Error [ERR_TEST_FAILURE]: customized] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: customized }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"custom inspect symbol that throws fail\" time=\"*\" classname=\"test\" failure=\"{  foo: 1,  [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]}\">\n        \t\t<failure type=\"testCodeFailure\" message=\"{  foo: 1,  [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]}\">\n        [Error [ERR_TEST_FAILURE]: {\n          foo: 1,\n          [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]\n        }] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: { foo: 1, [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]] }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testsuite name=\"subtest sync throw fails\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"2\" failures=\"2\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"sync throw fails at first\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fails at first\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fails at first\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fails at first\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fails at first\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<testcase name=\"sync throw fails at second\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fails at second\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fails at second\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fails at second\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fails at second\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t</testsuite>\n        \t<testcase name=\"timed out async test\" time=\"*\" classname=\"test\" failure=\"test timed out after 5ms\">\n        \t\t<failure type=\"testTimeoutFailure\" message=\"test timed out after 5ms\">\n        [Error [ERR_TEST_FAILURE]: test timed out after 5ms] { code: 'ERR_TEST_FAILURE', failureType: 'testTimeoutFailure', cause: 'test timed out after 5ms' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"timed out callback test\" time=\"*\" classname=\"test\" failure=\"test timed out after 5ms\">\n        \t\t<failure type=\"testTimeoutFailure\" message=\"test timed out after 5ms\">\n        [Error [ERR_TEST_FAILURE]: test timed out after 5ms] { code: 'ERR_TEST_FAILURE', failureType: 'testTimeoutFailure', cause: 'test timed out after 5ms' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"large timeout async test is ok\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"large timeout callback test is ok\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"successful thenable\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"rejected thenable\" time=\"*\" classname=\"test\" failure=\"custom error\">\n        \t\t<failure type=\"testCodeFailure\" message=\"custom error\">\n        [Error [ERR_TEST_FAILURE]: custom error] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: 'custom error' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unfinished test with uncaughtException\" time=\"*\" classname=\"test\" failure=\"foo\">\n        \t\t<failure type=\"uncaughtException\" message=\"foo\">\n        Error [ERR_TEST_FAILURE]: foo\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error: foo\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unfinished test with unhandledRejection\" time=\"*\" classname=\"test\" failure=\"bar\">\n        \t\t<failure type=\"unhandledRejection\" message=\"bar\">\n        Error [ERR_TEST_FAILURE]: bar\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'unhandledRejection',\n          cause: Error: bar\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"assertion errors display actual and expected properly\" time=\"*\" classname=\"test\" failure=\"Expected values to be loosely deep-equal:{  bar: 1,  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  foo: 1}should loosely deep-equal{  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  circular: &lt;ref *1> {    bar: 2,    c: [Circular *1]  }}\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Expected values to be loosely deep-equal:{  bar: 1,  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  foo: 1}should loosely deep-equal{  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  circular: &lt;ref *1> {    bar: 2,    c: [Circular *1]  }}\">\n        [Error [ERR_TEST_FAILURE]: Expected values to be loosely deep-equal:\n        \n        {\n          bar: 1,\n          baz: {\n            date: 1970-01-01T00:00:00.000Z,\n            null: null,\n            number: 1,\n            string: 'Hello',\n            undefined: undefined\n          },\n          boo: [\n            1\n          ],\n          foo: 1\n        }\n        \n        should loosely deep-equal\n        \n        {\n          baz: {\n            date: 1970-01-01T00:00:00.000Z,\n            null: null,\n            number: 1,\n            string: 'Hello',\n            undefined: undefined\n          },\n          boo: [\n            1\n          ],\n          circular: &lt;ref *1> {\n            bar: 2,\n            c: [Circular *1]\n          }\n        }] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n          \n          {\n            bar: 1,\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            foo: 1\n          }\n          \n          should loosely deep-equal\n          \n          {\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            circular: &lt;ref *1> {\n              bar: 2,\n              c: [Circular *1]\n            }\n          }\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: [Object],\n            expected: [Object],\n            operator: 'deepEqual'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"invalid subtest fail\" time=\"*\" classname=\"test\" failure=\"test could not be started because its parent finished\">\n        \t\t<failure type=\"parentAlreadyFinished\" message=\"test could not be started because its parent finished\">\n        Error [ERR_TEST_FAILURE]: test could not be started because its parent finished\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'parentAlreadyFinished',\n          cause: 'test could not be started because its parent finished'\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<!-- Error: Test \"unhandled rejection - passes but warns\" at test\\fixtures\\test-runner\\output\\output.js:72:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: Test \"async unhandled rejection - passes but warns\" at test\\fixtures\\test-runner\\output\\output.js:76:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from async unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: A resource generated asynchronous activity after the test ended. This activity created the error \"Error: uncaught from outside of a test\" which triggered an uncaughtException event, caught by the test runner. -->\n        \t<!-- Error: Test \"immediate throw - passes but warns\" at test\\fixtures\\test-runner\\output\\output.js:80:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from immediate throw fail\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- Error: Test \"immediate reject - passes but warns\" at test\\fixtures\\test-runner\\output\\output.js:86:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from immediate reject fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: Test \"callback called twice in different ticks\" at test\\fixtures\\test-runner\\output\\output.js:251:1 generated asynchronous activity after the test ended. This activity created the error \"Error [ERR_TEST_FAILURE]: callback invoked multiple times\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- Error: Test \"callback async throw after done\" at test\\fixtures\\test-runner\\output\\output.js:269:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from callback async throw after done\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- tests 76 -->\n        \t<!-- suites 0 -->\n        \t<!-- pass 35 -->\n        \t<!-- fail 25 -->\n        \t<!-- cancelled 3 -->\n        \t<!-- skipped 9 -->\n        \t<!-- todo 4 -->\n        \t<!-- duration_ms * -->\n        </testsuites>\n        \n      operator: 'strictEqual'\n      stack: |-\n        assertSnapshot (d:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:56:12)\n        async Module.spawnAndAssert (d:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:84:3)\n        async TestContext.<anonymous> (file:///d:/workspace/node-test-binary-windows-js-suites/node/test/parallel/test-runner-output.mjs:145:5)\n        async Test.run (node:internal/test_runner/test:736:9)\n        async Promise.all (index 23)\n        async Suite.run (node:internal/test_runner/test:1091:7)\n        async Test.processPendingSubtests (node:internal/test_runner/test:449:7)\n      ...\n    # Subtest: test-runner/output/spec_reporter_successful.js\n    ok 25 - test-runner/output/spec_reporter_successful.js\n      ---\n      duration_ms: 2050.5396\n      ...\n    # Subtest: test-runner/output/spec_reporter.js\n    not ok 26 - test-runner/output/spec_reporter.js\n      ---\n      duration_ms: 3683.0548\n      location: 'd:\\\\workspace\\\\node-test-binary-windows-js-suites\\\\node\\\\test\\\\parallel\\\\test-runner-output.mjs:151:5'\n      failureType: 'testCodeFailure'\n      error: |-\n        Expected values to be strictly equal:\n        + actual - expected ... Lines skipped\n        \n          ' sync pass todo (*ms) # TODO\\n' +\n            ' sync pass todo with message (*ms) # this is a passing todo\\n' +\n        ...\n            \"  'test could not be started because its parent finished'\\n\" +\n            '\\n' +\n        +   ' Error: Test \"unhandled rejection - passes but warns\" at test\\\\fixtures\\\\test-runner\\\\output\\\\output.js:72:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\\n' +\n        +   ' Error: Test \"async unhandled rejection - passes but warns\" at test\\\\fixtures\\\\test-runner\\\\output\\\\output.js:76:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from async unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\\n' +\n        -   ' Error: Test \"unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:72:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\\n' +\n        -   ' Error: Test \"async unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:76:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from async unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\\n' +\n            ' Error: A resource generated asynchronous activity after the test ended. This activity created the error \"Error: uncaught from outside of a test\" which triggered an uncaughtException event, caught by the test runner.\\n' +\n        +   ' Error: Test \"immediate throw - passes but warns\" at test\\\\fixtures\\\\test-runner\\\\output\\\\output.js:80:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from immediate throw fail\" and would have caused the test to fail, but instead triggered an uncaughtException event.\\n' +\n        +   ' Error: Test \"immediate reject - passes but warns\" at test\\\\fixtures\\\\test-runner\\\\output\\\\output.js:86:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from immediate reject fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\\n' +\n        +   ' Error: Test \"callback called twice in different ticks\" at test\\\\fixtures\\\\test-runner\\\\output\\\\output.js:251:1 generated asynchronous activity after the test ended. This activity created the error \"Error [ERR_TEST_FAILURE]: callback invoked multiple times\" and would have caused the test to fail, but instead triggered an uncaughtException event.\\n' +\n        +   ' Error: Test \"callback async throw after done\" at test\\\\fixtures\\\\test-runner\\\\output\\\\output.js:269:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from callback async throw after done\" and would have caused the test to fail, but instead triggered an uncaughtException event.\\n' +\n        -   ' Error: Test \"immediate throw - passes but warns\" at test/fixtures/test-runner/output/output.js:80:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from immediate throw fail\" and would have caused the test to fail, but instead triggered an uncaughtException event.\\n' +\n        -   ' Error: Test \"immediate reject - passes but warns\" at test/fixtures/test-runner/output/output.js:86:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from immediate reject fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\\n' +\n        -   ' Error: Test \"callback called twice in different ticks\" at test/fixtures/test-runner/output/output.js:251:1 generated asynchronous activity after the test ended. This activity created the error \"Error [ERR_TEST_FAILURE]: callback invoked multiple times\" and would have caused the test to fail, but instead triggered an uncaughtException event.\\n' +\n        -   ' Error: Test \"callback async throw after done\" at test/fixtures/test-runner/output/output.js:269:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from callback async throw after done\" and would have caused the test to fail, but instead triggered an uncaughtException event.\\n' +\n            ' tests 76\\n' +\n        ...\n            '*\\n' +\n            ' callback called twice (*ms)\\n' +\n            '  '... 2076 more characters\n      code: 'ERR_ASSERTION'\n      name: 'AssertionError'\n      expected: |-\n         sync pass todo (*ms) # TODO\n         sync pass todo with message (*ms) # this is a passing todo\n         sync fail todo (*ms) # TODO\n          Error: thrown from sync fail todo\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         sync fail todo with message (*ms) # this is a failing todo\n          Error: thrown from sync fail todo with message\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         sync skip pass (*ms) # SKIP\n         sync skip pass with message (*ms) # this is skipped\n         sync pass (*ms)\n         this test should pass\n         sync throw fail (*ms)\n          Error: thrown from sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         async skip pass (*ms) # SKIP\n         async pass (*ms)\n         async throw fail (*ms)\n          Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         async skip fail (*ms) # SKIP\n          Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         async assertion fail (*ms)\n          AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n          \n          true !== false\n          \n              *\n              *\n              *\n              *\n              *\n              *\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: true,\n            expected: false,\n            operator: 'strictEqual'\n          }\n        \n         resolve pass (*ms)\n         reject fail (*ms)\n          Error: rejected from reject fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         unhandled rejection - passes but warns (*ms)\n         async unhandled rejection - passes but warns (*ms)\n         immediate throw - passes but warns (*ms)\n         immediate reject - passes but warns (*ms)\n         immediate resolve pass (*ms)\n         subtest sync throw fail\n           +sync throw fail (*ms)\n            Error: thrown from subtest sync throw fail\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n        \n           this subtest should make its parent test fail\n         subtest sync throw fail (*ms)\n         sync throw non-error fail (*ms)\n          Symbol(thrown symbol from sync throw non-error fail)\n        \n         level 0a\n           level 1a (*ms)\n           level 1b (*ms)\n           level 1c (*ms)\n           level 1d (*ms)\n         level 0a (*ms)\n         top level\n           +long running (*ms)\n            'test did not finish before its parent and was cancelled'\n        \n           +short running\n             ++short running (*ms)\n           +short running (*ms)\n         top level (*ms)\n         invalid subtest - pass but subtest fails (*ms)\n         sync skip option (*ms) # SKIP\n         sync skip option with message (*ms) # this is skipped\n         sync skip option is false fail (*ms)\n          Error: this should be executed\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         <anonymous> (*ms)\n         functionOnly (*ms)\n         <anonymous> (*ms)\n         test with only a name provided (*ms)\n         <anonymous> (*ms)\n         <anonymous> (*ms) # SKIP\n         test with a name and options provided (*ms) # SKIP\n         functionAndOptions (*ms) # SKIP\n         callback pass (*ms)\n         callback fail (*ms)\n          Error: callback failure\n              *\n              *\n        \n         sync t is this in test (*ms)\n         async t is this in test (*ms)\n         callback t is this in test (*ms)\n         callback also returns a Promise (*ms)\n          'passed a callback but also returned a Promise'\n        \n         callback throw (*ms)\n          Error: thrown from callback throw\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         callback called twice (*ms)\n          'callback invoked multiple times'\n        \n         callback called twice in different ticks (*ms)\n         callback called twice in future tick (*ms)\n          Error [ERR_TEST_FAILURE]: callback invoked multiple times\n              * {\n            code: 'ERR_TEST_FAILURE',\n            failureType: 'multipleCallbackInvocations',\n            cause: 'callback invoked multiple times'\n          }\n        \n         callback async throw (*ms)\n          Error: thrown from callback async throw\n              *\n              *\n        \n         callback async throw after done (*ms)\n         only is set but not in only mode\n           running subtest 1 (*ms)\n           running subtest 2 (*ms)\n           'only' and 'runOnly' require the --test-only command-line option.\n           running subtest 3 (*ms)\n           'only' and 'runOnly' require the --test-only command-line option.\n           running subtest 4 (*ms)\n         only is set but not in only mode (*ms)\n         'only' and 'runOnly' require the --test-only command-line option.\n         custom inspect symbol fail (*ms)\n          customized\n        \n         custom inspect symbol that throws fail (*ms)\n          { foo: 1, [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]] }\n        \n         subtest sync throw fails\n           sync throw fails at first (*ms)\n            Error: thrown from subtest sync throw fails at first\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n        \n           sync throw fails at second (*ms)\n            Error: thrown from subtest sync throw fails at second\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n        \n         subtest sync throw fails (*ms)\n         timed out async test (*ms)\n          'test timed out after *ms'\n        \n         timed out callback test (*ms)\n          'test timed out after *ms'\n        \n         large timeout async test is ok (*ms)\n         large timeout callback test is ok (*ms)\n         successful thenable (*ms)\n         rejected thenable (*ms)\n          'custom error'\n        \n         unfinished test with uncaughtException (*ms)\n          Error: foo\n              *\n              *\n              *\n        \n         unfinished test with unhandledRejection (*ms)\n          Error: bar\n              *\n              *\n              *\n        \n         assertion errors display actual and expected properly (*ms)\n          AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n          \n          {\n            bar: 1,\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            foo: 1\n          }\n          \n          should loosely deep-equal\n          \n          {\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            circular: <ref *1> {\n              bar: 2,\n              c: [Circular *1]\n            }\n          }\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: [Object],\n            expected: [Object],\n            operator: 'deepEqual'\n          }\n        \n         invalid subtest fail (*ms)\n          'test could not be started because its parent finished'\n        \n         Error: Test \"unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:72:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\n         Error: Test \"async unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:76:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from async unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\n         Error: A resource generated asynchronous activity after the test ended. This activity created the error \"Error: uncaught from outside of a test\" which triggered an uncaughtException event, caught by the test runner.\n         Error: Test \"immediate throw - passes but warns\" at test/fixtures/test-runner/output/output.js:80:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from immediate throw fail\" and would have caused the test to fail, but instead triggered an uncaughtException event.\n         Error: Test \"immediate reject - passes but warns\" at test/fixtures/test-runner/output/output.js:86:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from immediate reject fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\n         Error: Test \"callback called twice in different ticks\" at test/fixtures/test-runner/output/output.js:251:1 generated asynchronous activity after the test ended. This activity created the error \"Error [ERR_TEST_FAILURE]: callback invoked multiple times\" and would have caused the test to fail, but instead triggered an uncaughtException event.\n         Error: Test \"callback async throw after done\" at test/fixtures/test-runner/output/output.js:269:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from callback async throw after done\" and would have caused the test to fail, but instead triggered an uncaughtException event.\n         tests 76\n         suites 0\n         pass 35\n         fail 25\n         cancelled 3\n         skipped 9\n         todo 4\n         duration_ms *\n        \n         failing tests:\n        \n        *\n         sync fail todo (*ms) # TODO\n          Error: thrown from sync fail todo\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         sync fail todo with message (*ms) # this is a failing todo\n          Error: thrown from sync fail todo with message\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         sync throw fail (*ms)\n          Error: thrown from sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         async throw fail (*ms)\n          Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         async skip fail (*ms) # SKIP\n          Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         async assertion fail (*ms)\n          AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n          \n          true !== false\n          \n              *\n              *\n              *\n              *\n              *\n              *\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: true,\n            expected: false,\n            operator: 'strictEqual'\n          }\n        \n        *\n         reject fail (*ms)\n          Error: rejected from reject fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         +sync throw fail (*ms)\n          Error: thrown from subtest sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         sync throw non-error fail (*ms)\n          Symbol(thrown symbol from sync throw non-error fail)\n        \n        *\n         +long running (*ms)\n          'test did not finish before its parent and was cancelled'\n        \n        *\n         sync skip option is false fail (*ms)\n          Error: this should be executed\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         callback fail (*ms)\n          Error: callback failure\n              *\n              *\n        \n        *\n         callback also returns a Promise (*ms)\n          'passed a callback but also returned a Promise'\n        \n        *\n         callback throw (*ms)\n          Error: thrown from callback throw\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         callback called twice (*ms)\n          'callback invoked multiple times'\n        \n        *\n         callback called twice in future tick (*ms)\n          Error [ERR_TEST_FAILURE]: callback invoked multiple times\n              * {\n            code: 'ERR_TEST_FAILURE',\n            failureType: 'multipleCallbackInvocations',\n            cause: 'callback invoked multiple times'\n          }\n        \n        *\n         callback async throw (*ms)\n          Error: thrown from callback async throw\n              *\n              *\n        \n        *\n         custom inspect symbol fail (*ms)\n          customized\n        \n        *\n         custom inspect symbol that throws fail (*ms)\n          { foo: 1, [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]] }\n        \n        *\n         sync throw fails at first (*ms)\n          Error: thrown from subtest sync throw fails at first\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         sync throw fails at second (*ms)\n          Error: thrown from subtest sync throw fails at second\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         timed out async test (*ms)\n          'test timed out after *ms'\n        \n        *\n         timed out callback test (*ms)\n          'test timed out after *ms'\n        \n        *\n         rejected thenable (*ms)\n          'custom error'\n        \n        *\n         unfinished test with uncaughtException (*ms)\n          Error: foo\n              *\n              *\n              *\n        \n        *\n         unfinished test with unhandledRejection (*ms)\n          Error: bar\n              *\n              *\n              *\n        \n        *\n         assertion errors display actual and expected properly (*ms)\n          AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n          \n          {\n            bar: 1,\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            foo: 1\n          }\n          \n          should loosely deep-equal\n          \n          {\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            circular: <ref *1> {\n              bar: 2,\n              c: [Circular *1]\n            }\n          }\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: [Object],\n            expected: [Object],\n            operator: 'deepEqual'\n          }\n        \n        *\n         invalid subtest fail (*ms)\n          'test could not be started because its parent finished'\n        \n      actual: |-\n         sync pass todo (*ms) # TODO\n         sync pass todo with message (*ms) # this is a passing todo\n         sync fail todo (*ms) # TODO\n          Error: thrown from sync fail todo\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         sync fail todo with message (*ms) # this is a failing todo\n          Error: thrown from sync fail todo with message\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         sync skip pass (*ms) # SKIP\n         sync skip pass with message (*ms) # this is skipped\n         sync pass (*ms)\n         this test should pass\n         sync throw fail (*ms)\n          Error: thrown from sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         async skip pass (*ms) # SKIP\n         async pass (*ms)\n         async throw fail (*ms)\n          Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         async skip fail (*ms) # SKIP\n          Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         async assertion fail (*ms)\n          AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n          \n          true !== false\n          \n              *\n              *\n              *\n              *\n              *\n              *\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: true,\n            expected: false,\n            operator: 'strictEqual'\n          }\n        \n         resolve pass (*ms)\n         reject fail (*ms)\n          Error: rejected from reject fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         unhandled rejection - passes but warns (*ms)\n         async unhandled rejection - passes but warns (*ms)\n         immediate throw - passes but warns (*ms)\n         immediate reject - passes but warns (*ms)\n         immediate resolve pass (*ms)\n         subtest sync throw fail\n           +sync throw fail (*ms)\n            Error: thrown from subtest sync throw fail\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n        \n           this subtest should make its parent test fail\n         subtest sync throw fail (*ms)\n         sync throw non-error fail (*ms)\n          Symbol(thrown symbol from sync throw non-error fail)\n        \n         level 0a\n           level 1a (*ms)\n           level 1b (*ms)\n           level 1c (*ms)\n           level 1d (*ms)\n         level 0a (*ms)\n         top level\n           +long running (*ms)\n            'test did not finish before its parent and was cancelled'\n        \n           +short running\n             ++short running (*ms)\n           +short running (*ms)\n         top level (*ms)\n         invalid subtest - pass but subtest fails (*ms)\n         sync skip option (*ms) # SKIP\n         sync skip option with message (*ms) # this is skipped\n         sync skip option is false fail (*ms)\n          Error: this should be executed\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         <anonymous> (*ms)\n         functionOnly (*ms)\n         <anonymous> (*ms)\n         test with only a name provided (*ms)\n         <anonymous> (*ms)\n         <anonymous> (*ms) # SKIP\n         test with a name and options provided (*ms) # SKIP\n         functionAndOptions (*ms) # SKIP\n         callback pass (*ms)\n         callback fail (*ms)\n          Error: callback failure\n              *\n              *\n        \n         sync t is this in test (*ms)\n         async t is this in test (*ms)\n         callback t is this in test (*ms)\n         callback also returns a Promise (*ms)\n          'passed a callback but also returned a Promise'\n        \n         callback throw (*ms)\n          Error: thrown from callback throw\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         callback called twice (*ms)\n          'callback invoked multiple times'\n        \n         callback called twice in different ticks (*ms)\n         callback called twice in future tick (*ms)\n          Error [ERR_TEST_FAILURE]: callback invoked multiple times\n              * {\n            code: 'ERR_TEST_FAILURE',\n            failureType: 'multipleCallbackInvocations',\n            cause: 'callback invoked multiple times'\n          }\n        \n         callback async throw (*ms)\n          Error: thrown from callback async throw\n              *\n              *\n        \n         callback async throw after done (*ms)\n         only is set but not in only mode\n           running subtest 1 (*ms)\n           running subtest 2 (*ms)\n           'only' and 'runOnly' require the --test-only command-line option.\n           running subtest 3 (*ms)\n           'only' and 'runOnly' require the --test-only command-line option.\n           running subtest 4 (*ms)\n         only is set but not in only mode (*ms)\n         'only' and 'runOnly' require the --test-only command-line option.\n         custom inspect symbol fail (*ms)\n          customized\n        \n         custom inspect symbol that throws fail (*ms)\n          { foo: 1, [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]] }\n        \n         subtest sync throw fails\n           sync throw fails at first (*ms)\n            Error: thrown from subtest sync throw fails at first\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n        \n           sync throw fails at second (*ms)\n            Error: thrown from subtest sync throw fails at second\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n        \n         subtest sync throw fails (*ms)\n         timed out async test (*ms)\n          'test timed out after *ms'\n        \n         timed out callback test (*ms)\n          'test timed out after *ms'\n        \n         large timeout async test is ok (*ms)\n         large timeout callback test is ok (*ms)\n         successful thenable (*ms)\n         rejected thenable (*ms)\n          'custom error'\n        \n         unfinished test with uncaughtException (*ms)\n          Error: foo\n              *\n              *\n              *\n        \n         unfinished test with unhandledRejection (*ms)\n          Error: bar\n              *\n              *\n              *\n        \n         assertion errors display actual and expected properly (*ms)\n          AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n          \n          {\n            bar: 1,\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            foo: 1\n          }\n          \n          should loosely deep-equal\n          \n          {\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            circular: <ref *1> {\n              bar: 2,\n              c: [Circular *1]\n            }\n          }\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: [Object],\n            expected: [Object],\n            operator: 'deepEqual'\n          }\n        \n         invalid subtest fail (*ms)\n          'test could not be started because its parent finished'\n        \n         Error: Test \"unhandled rejection - passes but warns\" at test\\fixtures\\test-runner\\output\\output.js:72:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\n         Error: Test \"async unhandled rejection - passes but warns\" at test\\fixtures\\test-runner\\output\\output.js:76:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from async unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\n         Error: A resource generated asynchronous activity after the test ended. This activity created the error \"Error: uncaught from outside of a test\" which triggered an uncaughtException event, caught by the test runner.\n         Error: Test \"immediate throw - passes but warns\" at test\\fixtures\\test-runner\\output\\output.js:80:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from immediate throw fail\" and would have caused the test to fail, but instead triggered an uncaughtException event.\n         Error: Test \"immediate reject - passes but warns\" at test\\fixtures\\test-runner\\output\\output.js:86:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from immediate reject fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\n         Error: Test \"callback called twice in different ticks\" at test\\fixtures\\test-runner\\output\\output.js:251:1 generated asynchronous activity after the test ended. This activity created the error \"Error [ERR_TEST_FAILURE]: callback invoked multiple times\" and would have caused the test to fail, but instead triggered an uncaughtException event.\n         Error: Test \"callback async throw after done\" at test\\fixtures\\test-runner\\output\\output.js:269:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from callback async throw after done\" and would have caused the test to fail, but instead triggered an uncaughtException event.\n         tests 76\n         suites 0\n         pass 35\n         fail 25\n         cancelled 3\n         skipped 9\n         todo 4\n         duration_ms *\n        \n         failing tests:\n        \n        *\n         sync fail todo (*ms) # TODO\n          Error: thrown from sync fail todo\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         sync fail todo with message (*ms) # this is a failing todo\n          Error: thrown from sync fail todo with message\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         sync throw fail (*ms)\n          Error: thrown from sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         async throw fail (*ms)\n          Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         async skip fail (*ms) # SKIP\n          Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         async assertion fail (*ms)\n          AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n          \n          true !== false\n          \n              *\n              *\n              *\n              *\n              *\n              *\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: true,\n            expected: false,\n            operator: 'strictEqual'\n          }\n        \n        *\n         reject fail (*ms)\n          Error: rejected from reject fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         +sync throw fail (*ms)\n          Error: thrown from subtest sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         sync throw non-error fail (*ms)\n          Symbol(thrown symbol from sync throw non-error fail)\n        \n        *\n         +long running (*ms)\n          'test did not finish before its parent and was cancelled'\n        \n        *\n         sync skip option is false fail (*ms)\n          Error: this should be executed\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         callback fail (*ms)\n          Error: callback failure\n              *\n              *\n        \n        *\n         callback also returns a Promise (*ms)\n          'passed a callback but also returned a Promise'\n        \n        *\n         callback throw (*ms)\n          Error: thrown from callback throw\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         callback called twice (*ms)\n          'callback invoked multiple times'\n        \n        *\n         callback called twice in future tick (*ms)\n          Error [ERR_TEST_FAILURE]: callback invoked multiple times\n              * {\n            code: 'ERR_TEST_FAILURE',\n            failureType: 'multipleCallbackInvocations',\n            cause: 'callback invoked multiple times'\n          }\n        \n        *\n         callback async throw (*ms)\n          Error: thrown from callback async throw\n              *\n              *\n        \n        *\n         custom inspect symbol fail (*ms)\n          customized\n        \n        *\n         custom inspect symbol that throws fail (*ms)\n          { foo: 1, [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]] }\n        \n        *\n         sync throw fails at first (*ms)\n          Error: thrown from subtest sync throw fails at first\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         sync throw fails at second (*ms)\n          Error: thrown from subtest sync throw fails at second\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         timed out async test (*ms)\n          'test timed out after *ms'\n        \n        *\n         timed out callback test (*ms)\n          'test timed out after *ms'\n        \n        *\n         rejected thenable (*ms)\n          'custom error'\n        \n        *\n         unfinished test with uncaughtException (*ms)\n          Error: foo\n              *\n              *\n              *\n        \n        *\n         unfinished test with unhandledRejection (*ms)\n          Error: bar\n              *\n              *\n              *\n        \n        *\n         assertion errors display actual and expected properly (*ms)\n          AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n          \n          {\n            bar: 1,\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            foo: 1\n          }\n          \n          should loosely deep-equal\n          \n          {\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            circular: <ref *1> {\n              bar: 2,\n              c: [Circular *1]\n            }\n          }\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: [Object],\n            expected: [Object],\n            operator: 'deepEqual'\n          }\n        \n        *\n         invalid subtest fail (*ms)\n          'test could not be started because its parent finished'\n        \n      operator: 'strictEqual'\n      stack: |-\n        assertSnapshot (d:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:56:12)\n        async Module.spawnAndAssert (d:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:84:3)\n        async TestContext.<anonymous> (file:///d:/workspace/node-test-binary-windows-js-suites/node/test/parallel/test-runner-output.mjs:145:5)\n        async Test.run (node:internal/test_runner/test:736:9)\n        async Promise.all (index 25)\n        async Suite.run (node:internal/test_runner/test:1091:7)\n        async Test.processPendingSubtests (node:internal/test_runner/test:449:7)\n      ...\n    # Subtest: test-runner/output/spec_reporter_cli.js\n    not ok 27 - test-runner/output/spec_reporter_cli.js\n      ---\n      duration_ms: 4163.1234\n      location: 'd:\\\\workspace\\\\node-test-binary-windows-js-suites\\\\node\\\\test\\\\parallel\\\\test-runner-output.mjs:151:5'\n      failureType: 'testCodeFailure'\n      error: |-\n        Expected values to be strictly equal:\n        + actual - expected ... Lines skipped\n        \n          ' sync pass todo (*ms) # TODO\\n' +\n            ' sync pass todo with message (*ms) # this is a passing todo\\n' +\n        ...\n            \"  'test could not be started because its parent finished'\\n\" +\n            '\\n' +\n        +   ' Error: Test \"unhandled rejection - passes but warns\" at test\\\\fixtures\\\\test-runner\\\\output\\\\output.js:72:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\\n' +\n        +   ' Error: Test \"async unhandled rejection - passes but warns\" at test\\\\fixtures\\\\test-runner\\\\output\\\\output.js:76:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from async unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\\n' +\n        -   ' Error: Test \"unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:72:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\\n' +\n        -   ' Error: Test \"async unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:76:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from async unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\\n' +\n            ' Error: A resource generated asynchronous activity after the test ended. This activity created the error \"Error: uncaught from outside of a test\" which triggered an uncaughtException event, caught by the test runner.\\n' +\n        +   ' Error: Test \"immediate throw - passes but warns\" at test\\\\fixtures\\\\test-runner\\\\output\\\\output.js:80:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from immediate throw fail\" and would have caused the test to fail, but instead triggered an uncaughtException event.\\n' +\n        +   ' Error: Test \"immediate reject - passes but warns\" at test\\\\fixtures\\\\test-runner\\\\output\\\\output.js:86:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from immediate reject fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\\n' +\n        +   ' Error: Test \"callback called twice in different ticks\" at test\\\\fixtures\\\\test-runner\\\\output\\\\output.js:251:1 generated asynchronous activity after the test ended. This activity created the error \"Error [ERR_TEST_FAILURE]: callback invoked multiple times\" and would have caused the test to fail, but instead triggered an uncaughtException event.\\n' +\n        +   ' Error: Test \"callback async throw after done\" at test\\\\fixtures\\\\test-runner\\\\output\\\\output.js:269:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from callback async throw after done\" and would have caused the test to fail, but instead triggered an uncaughtException event.\\n' +\n        -   ' Error: Test \"immediate throw - passes but warns\" at test/fixtures/test-runner/output/output.js:80:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from immediate throw fail\" and would have caused the test to fail, but instead triggered an uncaughtException event.\\n' +\n        -   ' Error: Test \"immediate reject - passes but warns\" at test/fixtures/test-runner/output/output.js:86:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from immediate reject fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\\n' +\n        -   ' Error: Test \"callback called twice in different ticks\" at test/fixtures/test-runner/output/output.js:251:1 generated asynchronous activity after the test ended. This activity created the error \"Error [ERR_TEST_FAILURE]: callback invoked multiple times\" and would have caused the test to fail, but instead triggered an uncaughtException event.\\n' +\n        -   ' Error: Test \"callback async throw after done\" at test/fixtures/test-runner/output/output.js:269:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from callback async throw after done\" and would have caused the test to fail, but instead triggered an uncaughtException event.\\n' +\n            ' tests 76\\n' +\n        ...\n            '\\n' +\n            '*\\n' +\n            ' callback also returns a Promise (*ms'... 2482 more characters\n      code: 'ERR_ASSERTION'\n      name: 'AssertionError'\n      expected: |-\n         sync pass todo (*ms) # TODO\n         sync pass todo with message (*ms) # this is a passing todo\n         sync fail todo (*ms) # TODO\n          Error: thrown from sync fail todo\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         sync fail todo with message (*ms) # this is a failing todo\n          Error: thrown from sync fail todo with message\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         sync skip pass (*ms) # SKIP\n         sync skip pass with message (*ms) # this is skipped\n         sync pass (*ms)\n         this test should pass\n         sync throw fail (*ms)\n          Error: thrown from sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         async skip pass (*ms) # SKIP\n         async pass (*ms)\n         async throw fail (*ms)\n          Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         async skip fail (*ms) # SKIP\n          Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         async assertion fail (*ms)\n          AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n          \n          true !== false\n          \n              *\n              *\n              *\n              *\n              *\n              *\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: true,\n            expected: false,\n            operator: 'strictEqual'\n          }\n        \n         resolve pass (*ms)\n         reject fail (*ms)\n          Error: rejected from reject fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         unhandled rejection - passes but warns (*ms)\n         async unhandled rejection - passes but warns (*ms)\n         immediate throw - passes but warns (*ms)\n         immediate reject - passes but warns (*ms)\n         immediate resolve pass (*ms)\n         subtest sync throw fail\n           +sync throw fail (*ms)\n            Error: thrown from subtest sync throw fail\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n        \n           this subtest should make its parent test fail\n         subtest sync throw fail (*ms)\n         sync throw non-error fail (*ms)\n          Symbol(thrown symbol from sync throw non-error fail)\n        \n         level 0a\n           level 1a (*ms)\n           level 1b (*ms)\n           level 1c (*ms)\n           level 1d (*ms)\n         level 0a (*ms)\n         top level\n           +long running (*ms)\n            'test did not finish before its parent and was cancelled'\n        \n           +short running\n             ++short running (*ms)\n           +short running (*ms)\n         top level (*ms)\n         invalid subtest - pass but subtest fails (*ms)\n         sync skip option (*ms) # SKIP\n         sync skip option with message (*ms) # this is skipped\n         sync skip option is false fail (*ms)\n          Error: this should be executed\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         <anonymous> (*ms)\n         functionOnly (*ms)\n         <anonymous> (*ms)\n         test with only a name provided (*ms)\n         <anonymous> (*ms)\n         <anonymous> (*ms) # SKIP\n         test with a name and options provided (*ms) # SKIP\n         functionAndOptions (*ms) # SKIP\n         callback pass (*ms)\n         callback fail (*ms)\n          Error: callback failure\n              *\n              *\n        \n         sync t is this in test (*ms)\n         async t is this in test (*ms)\n         callback t is this in test (*ms)\n         callback also returns a Promise (*ms)\n          'passed a callback but also returned a Promise'\n        \n         callback throw (*ms)\n          Error: thrown from callback throw\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         callback called twice (*ms)\n          'callback invoked multiple times'\n        \n         callback called twice in different ticks (*ms)\n         callback called twice in future tick (*ms)\n          Error [ERR_TEST_FAILURE]: callback invoked multiple times\n              * {\n            code: 'ERR_TEST_FAILURE',\n            failureType: 'multipleCallbackInvocations',\n            cause: 'callback invoked multiple times'\n          }\n        \n         callback async throw (*ms)\n          Error: thrown from callback async throw\n              *\n              *\n        \n         callback async throw after done (*ms)\n         only is set but not in only mode\n           running subtest 1 (*ms)\n           running subtest 2 (*ms)\n           'only' and 'runOnly' require the --test-only command-line option.\n           running subtest 3 (*ms)\n           'only' and 'runOnly' require the --test-only command-line option.\n           running subtest 4 (*ms)\n         only is set but not in only mode (*ms)\n         'only' and 'runOnly' require the --test-only command-line option.\n         custom inspect symbol fail (*ms)\n          customized\n        \n         custom inspect symbol that throws fail (*ms)\n          { foo: 1 }\n        \n         subtest sync throw fails\n           sync throw fails at first (*ms)\n            Error: thrown from subtest sync throw fails at first\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n        \n           sync throw fails at second (*ms)\n            Error: thrown from subtest sync throw fails at second\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n        \n         subtest sync throw fails (*ms)\n         timed out async test (*ms)\n          'test timed out after *ms'\n        \n         timed out callback test (*ms)\n          'test timed out after *ms'\n        \n         large timeout async test is ok (*ms)\n         large timeout callback test is ok (*ms)\n         successful thenable (*ms)\n         rejected thenable (*ms)\n          'custom error'\n        \n         unfinished test with uncaughtException (*ms)\n          Error: foo\n              *\n              *\n              *\n        \n         unfinished test with unhandledRejection (*ms)\n          Error: bar\n              *\n              *\n              *\n        \n         assertion errors display actual and expected properly (*ms)\n          AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n          \n          {\n            bar: 1,\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            foo: 1\n          }\n          \n          should loosely deep-equal\n          \n          {\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            circular: <ref *1> {\n              bar: 2,\n              c: [Circular *1]\n            }\n          }\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: { foo: 1, bar: 1, boo: [ 1 ], baz: { date: 1970-01-01T00:00:00.000Z, null: null, number: 1, string: 'Hello', undefined: undefined } },\n            expected: { boo: [ 1 ], baz: { date: 1970-01-01T00:00:00.000Z, null: null, number: 1, string: 'Hello', undefined: undefined }, circular: <ref *1> { bar: 2, c: [Circular *1] } },\n            operator: 'deepEqual'\n          }\n        \n         invalid subtest fail (*ms)\n          'test could not be started because its parent finished'\n        \n         Error: Test \"unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:72:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\n         Error: Test \"async unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:76:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from async unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\n         Error: A resource generated asynchronous activity after the test ended. This activity created the error \"Error: uncaught from outside of a test\" which triggered an uncaughtException event, caught by the test runner.\n         Error: Test \"immediate throw - passes but warns\" at test/fixtures/test-runner/output/output.js:80:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from immediate throw fail\" and would have caused the test to fail, but instead triggered an uncaughtException event.\n         Error: Test \"immediate reject - passes but warns\" at test/fixtures/test-runner/output/output.js:86:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from immediate reject fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\n         Error: Test \"callback called twice in different ticks\" at test/fixtures/test-runner/output/output.js:251:1 generated asynchronous activity after the test ended. This activity created the error \"Error [ERR_TEST_FAILURE]: callback invoked multiple times\" and would have caused the test to fail, but instead triggered an uncaughtException event.\n         Error: Test \"callback async throw after done\" at test/fixtures/test-runner/output/output.js:269:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from callback async throw after done\" and would have caused the test to fail, but instead triggered an uncaughtException event.\n         tests 76\n         suites 0\n         pass 35\n         fail 25\n         cancelled 3\n         skipped 9\n         todo 4\n         duration_ms *\n        \n         failing tests:\n        \n        *\n         sync fail todo (*ms) # TODO\n          Error: thrown from sync fail todo\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         sync fail todo with message (*ms) # this is a failing todo\n          Error: thrown from sync fail todo with message\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         sync throw fail (*ms)\n          Error: thrown from sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         async throw fail (*ms)\n          Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         async skip fail (*ms) # SKIP\n          Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         async assertion fail (*ms)\n          AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n          \n          true !== false\n          \n              *\n              *\n              *\n              *\n              *\n              *\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: true,\n            expected: false,\n            operator: 'strictEqual'\n          }\n        \n        *\n         reject fail (*ms)\n          Error: rejected from reject fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         +sync throw fail (*ms)\n          Error: thrown from subtest sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         sync throw non-error fail (*ms)\n          Symbol(thrown symbol from sync throw non-error fail)\n        \n        *\n         +long running (*ms)\n          'test did not finish before its parent and was cancelled'\n        \n        *\n         sync skip option is false fail (*ms)\n          Error: this should be executed\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         callback fail (*ms)\n          Error: callback failure\n              *\n              *\n        \n        *\n         callback also returns a Promise (*ms)\n          'passed a callback but also returned a Promise'\n        \n        *\n         callback throw (*ms)\n          Error: thrown from callback throw\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         callback called twice (*ms)\n          'callback invoked multiple times'\n        \n        *\n         callback called twice in future tick (*ms)\n          Error [ERR_TEST_FAILURE]: callback invoked multiple times\n              * {\n            code: 'ERR_TEST_FAILURE',\n            failureType: 'multipleCallbackInvocations',\n            cause: 'callback invoked multiple times'\n          }\n        \n        *\n         callback async throw (*ms)\n          Error: thrown from callback async throw\n              *\n              *\n        \n        *\n         custom inspect symbol fail (*ms)\n          customized\n        \n        *\n         custom inspect symbol that throws fail (*ms)\n          { foo: 1 }\n        \n        *\n         sync throw fails at first (*ms)\n          Error: thrown from subtest sync throw fails at first\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         sync throw fails at second (*ms)\n          Error: thrown from subtest sync throw fails at second\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         timed out async test (*ms)\n          'test timed out after *ms'\n        \n        *\n         timed out callback test (*ms)\n          'test timed out after *ms'\n        \n        *\n         rejected thenable (*ms)\n          'custom error'\n        \n        *\n         unfinished test with uncaughtException (*ms)\n          Error: foo\n              *\n              *\n              *\n        \n        *\n         unfinished test with unhandledRejection (*ms)\n          Error: bar\n              *\n              *\n              *\n        \n        *\n         assertion errors display actual and expected properly (*ms)\n          AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n          \n          {\n            bar: 1,\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            foo: 1\n          }\n          \n          should loosely deep-equal\n          \n          {\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            circular: <ref *1> {\n              bar: 2,\n              c: [Circular *1]\n            }\n          }\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: { foo: 1, bar: 1, boo: [ 1 ], baz: { date: 1970-01-01T00:00:00.000Z, null: null, number: 1, string: 'Hello', undefined: undefined } },\n            expected: { boo: [ 1 ], baz: { date: 1970-01-01T00:00:00.000Z, null: null, number: 1, string: 'Hello', undefined: undefined }, circular: <ref *1> { bar: 2, c: [Circular *1] } },\n            operator: 'deepEqual'\n          }\n        \n        *\n         invalid subtest fail (*ms)\n          'test could not be started because its parent finished'\n        \n      actual: |-\n         sync pass todo (*ms) # TODO\n         sync pass todo with message (*ms) # this is a passing todo\n         sync fail todo (*ms) # TODO\n          Error: thrown from sync fail todo\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         sync fail todo with message (*ms) # this is a failing todo\n          Error: thrown from sync fail todo with message\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         sync skip pass (*ms) # SKIP\n         sync skip pass with message (*ms) # this is skipped\n         sync pass (*ms)\n         this test should pass\n         sync throw fail (*ms)\n          Error: thrown from sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         async skip pass (*ms) # SKIP\n         async pass (*ms)\n         async throw fail (*ms)\n          Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         async skip fail (*ms) # SKIP\n          Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         async assertion fail (*ms)\n          AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n          \n          true !== false\n          \n              *\n              *\n              *\n              *\n              *\n              *\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: true,\n            expected: false,\n            operator: 'strictEqual'\n          }\n        \n         resolve pass (*ms)\n         reject fail (*ms)\n          Error: rejected from reject fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         unhandled rejection - passes but warns (*ms)\n         async unhandled rejection - passes but warns (*ms)\n         immediate throw - passes but warns (*ms)\n         immediate reject - passes but warns (*ms)\n         immediate resolve pass (*ms)\n         subtest sync throw fail\n           +sync throw fail (*ms)\n            Error: thrown from subtest sync throw fail\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n        \n           this subtest should make its parent test fail\n         subtest sync throw fail (*ms)\n         sync throw non-error fail (*ms)\n          Symbol(thrown symbol from sync throw non-error fail)\n        \n         level 0a\n           level 1a (*ms)\n           level 1b (*ms)\n           level 1c (*ms)\n           level 1d (*ms)\n         level 0a (*ms)\n         top level\n           +long running (*ms)\n            'test did not finish before its parent and was cancelled'\n        \n           +short running\n             ++short running (*ms)\n           +short running (*ms)\n         top level (*ms)\n         invalid subtest - pass but subtest fails (*ms)\n         sync skip option (*ms) # SKIP\n         sync skip option with message (*ms) # this is skipped\n         sync skip option is false fail (*ms)\n          Error: this should be executed\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         <anonymous> (*ms)\n         functionOnly (*ms)\n         <anonymous> (*ms)\n         test with only a name provided (*ms)\n         <anonymous> (*ms)\n         <anonymous> (*ms) # SKIP\n         test with a name and options provided (*ms) # SKIP\n         functionAndOptions (*ms) # SKIP\n         callback pass (*ms)\n         callback fail (*ms)\n          Error: callback failure\n              *\n              *\n        \n         sync t is this in test (*ms)\n         async t is this in test (*ms)\n         callback t is this in test (*ms)\n         callback also returns a Promise (*ms)\n          'passed a callback but also returned a Promise'\n        \n         callback throw (*ms)\n          Error: thrown from callback throw\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         callback called twice (*ms)\n          'callback invoked multiple times'\n        \n         callback called twice in different ticks (*ms)\n         callback called twice in future tick (*ms)\n          Error [ERR_TEST_FAILURE]: callback invoked multiple times\n              * {\n            code: 'ERR_TEST_FAILURE',\n            failureType: 'multipleCallbackInvocations',\n            cause: 'callback invoked multiple times'\n          }\n        \n         callback async throw (*ms)\n          Error: thrown from callback async throw\n              *\n              *\n        \n         callback async throw after done (*ms)\n         only is set but not in only mode\n           running subtest 1 (*ms)\n           running subtest 2 (*ms)\n           'only' and 'runOnly' require the --test-only command-line option.\n           running subtest 3 (*ms)\n           'only' and 'runOnly' require the --test-only command-line option.\n           running subtest 4 (*ms)\n         only is set but not in only mode (*ms)\n         'only' and 'runOnly' require the --test-only command-line option.\n         custom inspect symbol fail (*ms)\n          customized\n        \n         custom inspect symbol that throws fail (*ms)\n          { foo: 1 }\n        \n         subtest sync throw fails\n           sync throw fails at first (*ms)\n            Error: thrown from subtest sync throw fails at first\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n        \n           sync throw fails at second (*ms)\n            Error: thrown from subtest sync throw fails at second\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n        \n         subtest sync throw fails (*ms)\n         timed out async test (*ms)\n          'test timed out after *ms'\n        \n         timed out callback test (*ms)\n          'test timed out after *ms'\n        \n         large timeout async test is ok (*ms)\n         large timeout callback test is ok (*ms)\n         successful thenable (*ms)\n         rejected thenable (*ms)\n          'custom error'\n        \n         unfinished test with uncaughtException (*ms)\n          Error: foo\n              *\n              *\n              *\n        \n         unfinished test with unhandledRejection (*ms)\n          Error: bar\n              *\n              *\n              *\n        \n         assertion errors display actual and expected properly (*ms)\n          AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n          \n          {\n            bar: 1,\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            foo: 1\n          }\n          \n          should loosely deep-equal\n          \n          {\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            circular: <ref *1> {\n              bar: 2,\n              c: [Circular *1]\n            }\n          }\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: { foo: 1, bar: 1, boo: [ 1 ], baz: { date: 1970-01-01T00:00:00.000Z, null: null, number: 1, string: 'Hello', undefined: undefined } },\n            expected: { boo: [ 1 ], baz: { date: 1970-01-01T00:00:00.000Z, null: null, number: 1, string: 'Hello', undefined: undefined }, circular: <ref *1> { bar: 2, c: [Circular *1] } },\n            operator: 'deepEqual'\n          }\n        \n         invalid subtest fail (*ms)\n          'test could not be started because its parent finished'\n        \n         Error: Test \"unhandled rejection - passes but warns\" at test\\fixtures\\test-runner\\output\\output.js:72:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\n         Error: Test \"async unhandled rejection - passes but warns\" at test\\fixtures\\test-runner\\output\\output.js:76:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from async unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\n         Error: A resource generated asynchronous activity after the test ended. This activity created the error \"Error: uncaught from outside of a test\" which triggered an uncaughtException event, caught by the test runner.\n         Error: Test \"immediate throw - passes but warns\" at test\\fixtures\\test-runner\\output\\output.js:80:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from immediate throw fail\" and would have caused the test to fail, but instead triggered an uncaughtException event.\n         Error: Test \"immediate reject - passes but warns\" at test\\fixtures\\test-runner\\output\\output.js:86:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from immediate reject fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\n         Error: Test \"callback called twice in different ticks\" at test\\fixtures\\test-runner\\output\\output.js:251:1 generated asynchronous activity after the test ended. This activity created the error \"Error [ERR_TEST_FAILURE]: callback invoked multiple times\" and would have caused the test to fail, but instead triggered an uncaughtException event.\n         Error: Test \"callback async throw after done\" at test\\fixtures\\test-runner\\output\\output.js:269:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from callback async throw after done\" and would have caused the test to fail, but instead triggered an uncaughtException event.\n         tests 76\n         suites 0\n         pass 35\n         fail 25\n         cancelled 3\n         skipped 9\n         todo 4\n         duration_ms *\n        \n         failing tests:\n        \n        *\n         sync fail todo (*ms) # TODO\n          Error: thrown from sync fail todo\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         sync fail todo with message (*ms) # this is a failing todo\n          Error: thrown from sync fail todo with message\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         sync throw fail (*ms)\n          Error: thrown from sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         async throw fail (*ms)\n          Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         async skip fail (*ms) # SKIP\n          Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         async assertion fail (*ms)\n          AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n          \n          true !== false\n          \n              *\n              *\n              *\n              *\n              *\n              *\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: true,\n            expected: false,\n            operator: 'strictEqual'\n          }\n        \n        *\n         reject fail (*ms)\n          Error: rejected from reject fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         +sync throw fail (*ms)\n          Error: thrown from subtest sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         sync throw non-error fail (*ms)\n          Symbol(thrown symbol from sync throw non-error fail)\n        \n        *\n         +long running (*ms)\n          'test did not finish before its parent and was cancelled'\n        \n        *\n         sync skip option is false fail (*ms)\n          Error: this should be executed\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         callback fail (*ms)\n          Error: callback failure\n              *\n              *\n        \n        *\n         callback also returns a Promise (*ms)\n          'passed a callback but also returned a Promise'\n        \n        *\n         callback throw (*ms)\n          Error: thrown from callback throw\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         callback called twice (*ms)\n          'callback invoked multiple times'\n        \n        *\n         callback called twice in future tick (*ms)\n          Error [ERR_TEST_FAILURE]: callback invoked multiple times\n              * {\n            code: 'ERR_TEST_FAILURE',\n            failureType: 'multipleCallbackInvocations',\n            cause: 'callback invoked multiple times'\n          }\n        \n        *\n         callback async throw (*ms)\n          Error: thrown from callback async throw\n              *\n              *\n        \n        *\n         custom inspect symbol fail (*ms)\n          customized\n        \n        *\n         custom inspect symbol that throws fail (*ms)\n          { foo: 1 }\n        \n        *\n         sync throw fails at first (*ms)\n          Error: thrown from subtest sync throw fails at first\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         sync throw fails at second (*ms)\n          Error: thrown from subtest sync throw fails at second\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         timed out async test (*ms)\n          'test timed out after *ms'\n        \n        *\n         timed out callback test (*ms)\n          'test timed out after *ms'\n        \n        *\n         rejected thenable (*ms)\n          'custom error'\n        \n        *\n         unfinished test with uncaughtException (*ms)\n          Error: foo\n              *\n              *\n              *\n        \n        *\n         unfinished test with unhandledRejection (*ms)\n          Error: bar\n              *\n              *\n              *\n        \n        *\n         assertion errors display actual and expected properly (*ms)\n          AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n          \n          {\n            bar: 1,\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            foo: 1\n          }\n          \n          should loosely deep-equal\n          \n          {\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            circular: <ref *1> {\n              bar: 2,\n              c: [Circular *1]\n            }\n          }\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: { foo: 1, bar: 1, boo: [ 1 ], baz: { date: 1970-01-01T00:00:00.000Z, null: null, number: 1, string: 'Hello', undefined: undefined } },\n            expected: { boo: [ 1 ], baz: { date: 1970-01-01T00:00:00.000Z, null: null, number: 1, string: 'Hello', undefined: undefined }, circular: <ref *1> { bar: 2, c: [Circular *1] } },\n            operator: 'deepEqual'\n          }\n        \n        *\n         invalid subtest fail (*ms)\n          'test could not be started because its parent finished'\n        \n      operator: 'strictEqual'\n      stack: |-\n        assertSnapshot (d:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:56:12)\n        async Module.spawnAndAssert (d:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:84:3)\n        async TestContext.<anonymous> (file:///d:/workspace/node-test-binary-windows-js-suites/node/test/parallel/test-runner-output.mjs:145:5)\n        async Test.run (node:internal/test_runner/test:736:9)\n        async Promise.all (index 26)\n        async Suite.run (node:internal/test_runner/test:1091:7)\n        async Test.processPendingSubtests (node:internal/test_runner/test:449:7)\n      ...\n    # Subtest: test-runner/output/source_mapped_locations.mjs\n    ok 28 - test-runner/output/source_mapped_locations.mjs\n      ---\n      duration_ms: 1963.7703\n      ...\n    # Subtest: test-runner/output/lcov_reporter.js\n    ok 29 - test-runner/output/lcov_reporter.js\n      ---\n      duration_ms: 3676.6123\n      ...\n    # Subtest: test-runner/output/output.js\n    ok 30 - test-runner/output/output.js\n      ---\n      duration_ms: 2115.4254\n      ...\n    # Subtest: test-runner/output/output_cli.js\n    ok 31 - test-runner/output/output_cli.js\n      ---\n      duration_ms: 4268.8295\n      ...\n    # Subtest: test-runner/output/name_pattern.js\n    ok 32 - test-runner/output/name_pattern.js\n      ---\n      duration_ms: 2078.4262\n      ...\n    # Subtest: test-runner/output/name_pattern_with_only.js\n    ok 33 - test-runner/output/name_pattern_with_only.js\n      ---\n      duration_ms: 1738.9138\n      ...\n    # Subtest: test-runner/output/unfinished-suite-async-error.js\n    ok 34 - test-runner/output/unfinished-suite-async-error.js\n      ---\n      duration_ms: 2545.5616\n      ...\n    # Subtest: test-runner/output/unresolved_promise.js\n    ok 35 - test-runner/output/unresolved_promise.js\n      ---\n      duration_ms: 1556.9058\n      ...\n    # Subtest: test-runner/output/default_output.js\n        # Subtest: <anonymous>\n        ok 1 - <anonymous> # SKIP Skipping pseudo-tty tests, as pseudo terminals are not available on Windows.\n          ---\n          duration_ms: 49.027\n          ...\n        1..1\n    ok 36 - test-runner/output/default_output.js\n      ---\n      duration_ms: 49.9395\n      ...\n    # Subtest: test-runner/output/arbitrary-output.js\n    ok 37 - test-runner/output/arbitrary-output.js\n      ---\n      duration_ms: 3201.6672\n      ...\n    # Subtest: test-runner/output/async-test-scheduling.mjs\n    ok 38 - test-runner/output/async-test-scheduling.mjs\n      ---\n      duration_ms: 3139.0457\n      ...\n    # Subtest: test-runner/output/arbitrary-output-colored.js\n        # Subtest: <anonymous>\n        ok 1 - <anonymous> # SKIP Skipping pseudo-tty tests, as pseudo terminals are not available on Windows.\n          ---\n          duration_ms: 25.1503\n          ...\n        1..1\n    ok 39 - test-runner/output/arbitrary-output-colored.js\n      ---\n      duration_ms: 25.6579\n      ...\n    # Subtest: test-runner/output/dot_output_custom_columns.js\n        # Subtest: <anonymous>\n        ok 1 - <anonymous> # SKIP Skipping pseudo-tty tests, as pseudo terminals are not available on Windows.\n          ---\n          duration_ms: 25.028\n          ...\n        1..1\n    ok 40 - test-runner/output/dot_output_custom_columns.js\n      ---\n      duration_ms: 25.4238\n      ...\n    # Subtest: test-runner/output/tap_escape.js\n    ok 41 - test-runner/output/tap_escape.js\n      ---\n      duration_ms: 2378.6706\n      ...\n    # Subtest: test-runner/output/coverage_failure.js\n    ok 42 - test-runner/output/coverage_failure.js\n      ---\n      duration_ms: 2061.4813\n      ...\n    1..42\nnot ok 1 - test runner output\n  ---\n  duration_ms: 4743.7081\n  type: 'suite'\n  location: 'd:\\\\workspace\\\\node-test-binary-windows-js-suites\\\\node\\\\test\\\\parallel\\\\test-runner-output.mjs:149:1'\n  failureType: 'subtestsFailed'\n  error: '3 subtests failed'\n  code: 'ERR_TEST_FAILURE'\n  ...\n1..1\n# tests 45\n# suites 1\n# pass 39\n# fail 3\n# cancelled 0\n# skipped 3\n# todo 0\n# duration_ms 4764.731"},"time":5327.973,"fullname":"parallel/test-runner-output","closingTestPoint":false}},{"testName":"parallel/test-runner-output","timestamp":1712793616158,"status":"FAILED","jobName":"node-test-binary-windows-js-suites","config":"node-test-binary-windows-js-suites Â» 0,win2019-COMPILED_BY-vs2022 #27039","buildUrl":"https://ci.nodejs.org/job/node-test-binary-windows-js-suites/RUN_SUBSET=0,nodes=win2019-COMPILED_BY-vs2022/27039/","buildNumber":27039,"builtOn":"test-rackspace-win2019_vs2019-x64-2","nodeVersion":"22.0.0","commitHash":"4e15a4373cf4bd852ed72dbc423c653f08640dba","callStack":[{"upstreamBuild":62036,"upstreamProject":"node-test-commit-windows-fanned","upstreamUrl":"job/node-test-commit-windows-fanned/"},{"upstreamBuild":69709,"upstreamProject":"node-test-commit","upstreamUrl":"job/node-test-commit/"},{"upstreamBuild":58241,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"prId":"52401"}],"tap":{"ok":false,"name":"parallel/test-runner-output","id":679,"buffered":false,"tapError":null,"skip":false,"todo":false,"previous":null,"plan":null,"diag":{"severity":"fail","exitcode":1,"stack":"TAP version 13\n# Subtest: test runner output\n    # Subtest: test-runner/output/abort.js\n    ok 1 - test-runner/output/abort.js\n      ---\n      duration_ms: 3583.9739\n      ...\n    # Subtest: test-runner/output/abort_suite.js\n    ok 2 - test-runner/output/abort_suite.js\n      ---\n      duration_ms: 3551.351\n      ...\n    # Subtest: test-runner/output/abort_hooks.js\n    ok 3 - test-runner/output/abort_hooks.js\n      ---\n      duration_ms: 3526.3604\n      ...\n    # Subtest: test-runner/output/describe_it.js\n    ok 4 - test-runner/output/describe_it.js\n      ---\n      duration_ms: 3425.5734\n      ...\n    # Subtest: test-runner/output/describe_nested.js\n    ok 5 - test-runner/output/describe_nested.js\n      ---\n      duration_ms: 3479.9833\n      ...\n    # Subtest: test-runner/output/eval_dot.js\n    ok 6 - test-runner/output/eval_dot.js\n      ---\n      duration_ms: 3234.6044\n      ...\n    # Subtest: test-runner/output/eval_spec.js\n    ok 7 - test-runner/output/eval_spec.js\n      ---\n      duration_ms: 3193.073\n      ...\n    # Subtest: test-runner/output/eval_tap.js\n    ok 8 - test-runner/output/eval_tap.js\n      ---\n      duration_ms: 3154.6006\n      ...\n    # Subtest: test-runner/output/hooks.js\n    ok 9 - test-runner/output/hooks.js\n      ---\n      duration_ms: 2936.1992\n      ...\n    # Subtest: test-runner/output/hooks_spec_reporter.js\n    ok 10 - test-runner/output/hooks_spec_reporter.js\n      ---\n      duration_ms: 3890.8538\n      ...\n    # Subtest: test-runner/output/skip-each-hooks.js\n    ok 11 - test-runner/output/skip-each-hooks.js\n      ---\n      duration_ms: 2641.3011\n      ...\n    # Subtest: test-runner/output/suite-skip-hooks.js\n    ok 12 - test-runner/output/suite-skip-hooks.js\n      ---\n      duration_ms: 2588.9471\n      ...\n    # Subtest: test-runner/output/timeout_in_before_each_should_not_affect_further_tests.js\n    ok 13 - test-runner/output/timeout_in_before_each_should_not_affect_further_tests.js\n      ---\n      duration_ms: 3399.207\n      ...\n    # Subtest: test-runner/output/hooks-with-no-global-test.js\n    ok 14 - test-runner/output/hooks-with-no-global-test.js\n      ---\n      duration_ms: 2405.0205\n      ...\n    # Subtest: test-runner/output/global-hooks-with-no-tests.js\n    ok 15 - test-runner/output/global-hooks-with-no-tests.js\n      ---\n      duration_ms: 2353.9923\n      ...\n    # Subtest: test-runner/output/before-and-after-each-too-many-listeners.js\n    ok 16 - test-runner/output/before-and-after-each-too-many-listeners.js\n      ---\n      duration_ms: 2320.7969\n      ...\n    # Subtest: test-runner/output/before-and-after-each-with-timeout-too-many-listeners.js\n    ok 17 - test-runner/output/before-and-after-each-with-timeout-too-many-listeners.js\n      ---\n      duration_ms: 2256.9483\n      ...\n    # Subtest: test-runner/output/force_exit.js\n    ok 18 - test-runner/output/force_exit.js\n      ---\n      duration_ms: 2080.173\n      ...\n    # Subtest: test-runner/output/global_after_should_fail_the_test.js\n    ok 19 - test-runner/output/global_after_should_fail_the_test.js\n      ---\n      duration_ms: 2031.0244\n      ...\n    # Subtest: test-runner/output/no_refs.js\n    ok 20 - test-runner/output/no_refs.js\n      ---\n      duration_ms: 1952.0021\n      ...\n    # Subtest: test-runner/output/no_tests.js\n    ok 21 - test-runner/output/no_tests.js\n      ---\n      duration_ms: 1913.932\n      ...\n    # Subtest: test-runner/output/only_tests.js\n    ok 22 - test-runner/output/only_tests.js\n      ---\n      duration_ms: 1965.0907\n      ...\n    # Subtest: test-runner/output/dot_reporter.js\n    ok 23 - test-runner/output/dot_reporter.js\n      ---\n      duration_ms: 3272.008\n      ...\n    # Subtest: test-runner/output/junit_reporter.js\n    not ok 24 - test-runner/output/junit_reporter.js\n      ---\n      duration_ms: 3107.4839\n      location: 'C:\\\\workspace\\\\node-test-binary-windows-js-suites\\\\node\\\\test\\\\parallel\\\\test-runner-output.mjs:151:5'\n      failureType: 'testCodeFailure'\n      error: |-\n        Values have same structure but are not reference-equal:\n        \n        '<?xml version=\"1.0\" encoding=\"utf-8\"?>\\n' +\n          '<testsuites>\\n' +\n          '\\t<testcase name=\"sync pass todo\" time=\"*\" classname=\"test\">\\n' +\n          '\\t\\t<skipped type=\"todo\" message=\"true\"/>\\n' +\n          '\\t</testcase>\\n' +\n          '\\t<testcase name=\"sync pass todo with message\" time=\"*\" classname=\"test\">\\n' +\n          '\\t\\t<skipped type=\"todo\" message=\"this is a passing todo\"/>\\n' +\n          '\\t</testcase>\\n' +\n          '\\t<testcase name=\"sync fail todo\" time=\"*\" classname=\"test\" failure=\"thrown from sync fail todo\">\\n' +\n          '\\t\\t<skipped type=\"todo\" message=\"true\"/>\\n' +\n          '\\t\\t<failure type=\"testCodeFailure\" message=\"thrown from sync fail todo\">\\n' +\n          '[Error [ERR_TEST_FAILURE]: thrown from sync fail todo] {\\n' +\n          \"  code: 'ERR_TEST_FAILURE',\\n\" +\n          \"  failureType: 'testCodeFailure',\\n\" +\n          '  cause: Error: thrown from sync fail todo\\n' +\n          '      *\\n' +\n          '      *\\n' +\n          '      *\\n' +\n          '      *\\n' +\n          '      *\\n' +\n          '      *\\n' +\n          '      *\\n' +\n          '}\\n' +\n          '\\t\\t</failure>\\n' +\n          '\\t</testcase>\\n' +\n          '\\t<testcase name=\"sync fail todo with message\" time=\"*\" classname=\"test\" failure=\"thrown from sync fail todo with message\">\\n' +\n          '\\t\\t<skipped type=\"todo\" message=\"this is a failing todo\"/>\\n' +\n          '\\t\\t<failure type=\"testCodeFailure\" message=\"thrown from sync fail todo with message\">\\n' +\n          '[Error [ERR_TEST_FAILURE]: thrown from sync fail todo with message] {\\n' +\n          \"  code: 'ERR_TEST_FAILURE',\\n\" +\n          \"  failureType: 'testCodeFailure',\\n\" +\n          '  cause: Error: thrown from sync fail todo with message\\n' +\n          '      *\\n' +\n          '      *\\n' +\n          '      *\\n' +\n          '      *\\n' +\n          '      *\\n' +\n          '      *\\n' +\n          '      *\\n' +\n          '}\\n' +\n          '\\t\\t</failure>\\n' +\n          '\\t</testcase>\\n' +\n          '\\t<testcase name=\"sync skip pass\" time=\"*\" classname=\"test\">\\n' +\n          '\\t\\t<skipped type=\"skipped\" message=\"true\"/>\\n' +\n          '\\t</testcase>\\n' +\n          '\\t<testcase name=\"sync skip pass with message\" time=\"*\" classname=\"test\">\\n' +\n        ...\n        \n      code: 'ERR_ASSERTION'\n      name: 'AssertionError'\n      expected: |-\n        <?xml version=\"1.0\" encoding=\"utf-8\"?>\n        <testsuites>\n        \t<testcase name=\"sync pass todo\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"todo\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync pass todo with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"todo\" message=\"this is a passing todo\"/>\n        \t</testcase>\n        \t<testcase name=\"sync fail todo\" time=\"*\" classname=\"test\" failure=\"thrown from sync fail todo\">\n        \t\t<skipped type=\"todo\" message=\"true\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync fail todo\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync fail todo] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync fail todo\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync fail todo with message\" time=\"*\" classname=\"test\" failure=\"thrown from sync fail todo with message\">\n        \t\t<skipped type=\"todo\" message=\"this is a failing todo\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync fail todo with message\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync fail todo with message] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync fail todo with message\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync skip pass\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip pass with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"this is skipped\"/>\n        \t</testcase>\n        \t<testcase name=\"sync pass\" time=\"*\" classname=\"test\"/>\n        \t<!-- this test should pass -->\n        \t<testcase name=\"sync throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from sync throw fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async skip pass\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"async pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from async throw fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from async throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from async throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async skip fail\" time=\"*\" classname=\"test\" failure=\"thrown from async throw fail\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from async throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from async throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async assertion fail\" time=\"*\" classname=\"test\" failure=\"Expected values to be strictly equal:true !== false\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Expected values to be strictly equal:true !== false\">\n        [Error [ERR_TEST_FAILURE]: Expected values to be strictly equal:\n        \n        true !== false\n        ] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n          \n          true !== false\n          \n              *\n              *\n              *\n              *\n              *\n              *\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: true,\n            expected: false,\n            operator: 'strictEqual'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"resolve pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"reject fail\" time=\"*\" classname=\"test\" failure=\"rejected from reject fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"rejected from reject fail\">\n        [Error [ERR_TEST_FAILURE]: rejected from reject fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: rejected from reject fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unhandled rejection - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async unhandled rejection - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate throw - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate reject - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate resolve pass\" time=\"*\" classname=\"test\"/>\n        \t<testsuite name=\"subtest sync throw fail\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"1\" failures=\"1\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"+sync throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fail\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fail\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fail\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<!-- this subtest should make its parent test fail -->\n        \t</testsuite>\n        \t<testcase name=\"sync throw non-error fail\" time=\"*\" classname=\"test\" failure=\"Symbol(thrown symbol from sync throw non-error fail)\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Symbol(thrown symbol from sync throw non-error fail)\">\n        [Error [ERR_TEST_FAILURE]: Symbol(thrown symbol from sync throw non-error fail)] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: Symbol(thrown symbol from sync throw non-error fail) }\n        \t\t</failure>\n        \t</testcase>\n        \t<testsuite name=\"level 0a\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"4\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"level 1a\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1b\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1c\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1d\" time=\"*\" classname=\"test\"/>\n        \t</testsuite>\n        \t<testsuite name=\"top level\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"2\" failures=\"1\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"+long running\" time=\"*\" classname=\"test\" failure=\"test did not finish before its parent and was cancelled\">\n        \t\t\t<failure type=\"cancelledByParent\" message=\"test did not finish before its parent and was cancelled\">\n        [Error [ERR_TEST_FAILURE]: test did not finish before its parent and was cancelled] { code: 'ERR_TEST_FAILURE', failureType: 'cancelledByParent', cause: 'test did not finish before its parent and was cancelled' }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<testsuite name=\"+short running\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"1\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t\t<testcase name=\"++short running\" time=\"*\" classname=\"test\"/>\n        \t\t</testsuite>\n        \t</testsuite>\n        \t<testcase name=\"invalid subtest - pass but subtest fails\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"sync skip option\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip option with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"this is skipped\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip option is false fail\" time=\"*\" classname=\"test\" failure=\"this should be executed\">\n        \t\t<failure type=\"testCodeFailure\" message=\"this should be executed\">\n        [Error [ERR_TEST_FAILURE]: this should be executed] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: this should be executed\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"functionOnly\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"test with only a name provided\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"test with a name and options provided\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"functionAndOptions\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"callback pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback fail\" time=\"*\" classname=\"test\" failure=\"callback failure\">\n        \t\t<failure type=\"testCodeFailure\" message=\"callback failure\">\n        [Error [ERR_TEST_FAILURE]: callback failure] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: callback failure\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback also returns a Promise\" time=\"*\" classname=\"test\" failure=\"passed a callback but also returned a Promise\">\n        \t\t<failure type=\"callbackAndPromisePresent\" message=\"passed a callback but also returned a Promise\">\n        [Error [ERR_TEST_FAILURE]: passed a callback but also returned a Promise] { code: 'ERR_TEST_FAILURE', failureType: 'callbackAndPromisePresent', cause: 'passed a callback but also returned a Promise' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback throw\" time=\"*\" classname=\"test\" failure=\"thrown from callback throw\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from callback throw\">\n        [Error [ERR_TEST_FAILURE]: thrown from callback throw] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from callback throw\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback called twice\" time=\"*\" classname=\"test\" failure=\"callback invoked multiple times\">\n        \t\t<failure type=\"multipleCallbackInvocations\" message=\"callback invoked multiple times\">\n        Error [ERR_TEST_FAILURE]: callback invoked multiple times\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'multipleCallbackInvocations',\n          cause: 'callback invoked multiple times'\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback called twice in different ticks\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback called twice in future tick\" time=\"*\" classname=\"test\" failure=\"callback invoked multiple times\">\n        \t\t<failure type=\"uncaughtException\" message=\"callback invoked multiple times\">\n        Error [ERR_TEST_FAILURE]: callback invoked multiple times\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error [ERR_TEST_FAILURE]: callback invoked multiple times\n              * {\n            code: 'ERR_TEST_FAILURE',\n            failureType: 'multipleCallbackInvocations',\n            cause: 'callback invoked multiple times'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback async throw\" time=\"*\" classname=\"test\" failure=\"thrown from callback async throw\">\n        \t\t<failure type=\"uncaughtException\" message=\"thrown from callback async throw\">\n        Error [ERR_TEST_FAILURE]: thrown from callback async throw\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error: thrown from callback async throw\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback async throw after done\" time=\"*\" classname=\"test\"/>\n        \t<testsuite name=\"only is set but not in only mode\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"4\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"running subtest 1\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"running subtest 2\" time=\"*\" classname=\"test\"/>\n        \t\t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t\t<testcase name=\"running subtest 3\" time=\"*\" classname=\"test\"/>\n        \t\t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t\t<testcase name=\"running subtest 4\" time=\"*\" classname=\"test\"/>\n        \t</testsuite>\n        \t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t<testcase name=\"custom inspect symbol fail\" time=\"*\" classname=\"test\" failure=\"customized\">\n        \t\t<failure type=\"testCodeFailure\" message=\"customized\">\n        [Error [ERR_TEST_FAILURE]: customized] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: customized }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"custom inspect symbol that throws fail\" time=\"*\" classname=\"test\" failure=\"{  foo: 1,  [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]}\">\n        \t\t<failure type=\"testCodeFailure\" message=\"{  foo: 1,  [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]}\">\n        [Error [ERR_TEST_FAILURE]: {\n          foo: 1,\n          [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]\n        }] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: { foo: 1, [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]] }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testsuite name=\"subtest sync throw fails\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"2\" failures=\"2\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"sync throw fails at first\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fails at first\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fails at first\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fails at first\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fails at first\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<testcase name=\"sync throw fails at second\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fails at second\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fails at second\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fails at second\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fails at second\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t</testsuite>\n        \t<testcase name=\"timed out async test\" time=\"*\" classname=\"test\" failure=\"test timed out after 5ms\">\n        \t\t<failure type=\"testTimeoutFailure\" message=\"test timed out after 5ms\">\n        [Error [ERR_TEST_FAILURE]: test timed out after 5ms] { code: 'ERR_TEST_FAILURE', failureType: 'testTimeoutFailure', cause: 'test timed out after 5ms' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"timed out callback test\" time=\"*\" classname=\"test\" failure=\"test timed out after 5ms\">\n        \t\t<failure type=\"testTimeoutFailure\" message=\"test timed out after 5ms\">\n        [Error [ERR_TEST_FAILURE]: test timed out after 5ms] { code: 'ERR_TEST_FAILURE', failureType: 'testTimeoutFailure', cause: 'test timed out after 5ms' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"large timeout async test is ok\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"large timeout callback test is ok\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"successful thenable\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"rejected thenable\" time=\"*\" classname=\"test\" failure=\"custom error\">\n        \t\t<failure type=\"testCodeFailure\" message=\"custom error\">\n        [Error [ERR_TEST_FAILURE]: custom error] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: 'custom error' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unfinished test with uncaughtException\" time=\"*\" classname=\"test\" failure=\"foo\">\n        \t\t<failure type=\"uncaughtException\" message=\"foo\">\n        Error [ERR_TEST_FAILURE]: foo\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error: foo\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unfinished test with unhandledRejection\" time=\"*\" classname=\"test\" failure=\"bar\">\n        \t\t<failure type=\"unhandledRejection\" message=\"bar\">\n        Error [ERR_TEST_FAILURE]: bar\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'unhandledRejection',\n          cause: Error: bar\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"assertion errors display actual and expected properly\" time=\"*\" classname=\"test\" failure=\"Expected values to be loosely deep-equal:{  bar: 1,  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  foo: 1}should loosely deep-equal{  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  circular: &lt;ref *1> {    bar: 2,    c: [Circular *1]  }}\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Expected values to be loosely deep-equal:{  bar: 1,  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  foo: 1}should loosely deep-equal{  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  circular: &lt;ref *1> {    bar: 2,    c: [Circular *1]  }}\">\n        [Error [ERR_TEST_FAILURE]: Expected values to be loosely deep-equal:\n        \n        {\n          bar: 1,\n          baz: {\n            date: 1970-01-01T00:00:00.000Z,\n            null: null,\n            number: 1,\n            string: 'Hello',\n            undefined: undefined\n          },\n          boo: [\n            1\n          ],\n          foo: 1\n        }\n        \n        should loosely deep-equal\n        \n        {\n          baz: {\n            date: 1970-01-01T00:00:00.000Z,\n            null: null,\n            number: 1,\n            string: 'Hello',\n            undefined: undefined\n          },\n          boo: [\n            1\n          ],\n          circular: &lt;ref *1> {\n            bar: 2,\n            c: [Circular *1]\n          }\n        }] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n          \n          {\n            bar: 1,\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            foo: 1\n          }\n          \n          should loosely deep-equal\n          \n          {\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            circular: &lt;ref *1> {\n              bar: 2,\n              c: [Circular *1]\n            }\n          }\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: [Object],\n            expected: [Object],\n            operator: 'deepEqual'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"invalid subtest fail\" time=\"*\" classname=\"test\" failure=\"test could not be started because its parent finished\">\n        \t\t<failure type=\"parentAlreadyFinished\" message=\"test could not be started because its parent finished\">\n        Error [ERR_TEST_FAILURE]: test could not be started because its parent finished\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'parentAlreadyFinished',\n          cause: 'test could not be started because its parent finished'\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<!-- Error: Test \"unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:72:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: Test \"async unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:76:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from async unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: A resource generated asynchronous activity after the test ended. This activity created the error \"Error: uncaught from outside of a test\" which triggered an uncaughtException event, caught by the test runner. -->\n        \t<!-- Error: Test \"immediate throw - passes but warns\" at test/fixtures/test-runner/output/output.js:80:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from immediate throw fail\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- Error: Test \"immediate reject - passes but warns\" at test/fixtures/test-runner/output/output.js:86:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from immediate reject fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: Test \"callback called twice in different ticks\" at test/fixtures/test-runner/output/output.js:251:1 generated asynchronous activity after the test ended. This activity created the error \"Error [ERR_TEST_FAILURE]: callback invoked multiple times\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- Error: Test \"callback async throw after done\" at test/fixtures/test-runner/output/output.js:269:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from callback async throw after done\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- tests 76 -->\n        \t<!-- suites 0 -->\n        \t<!-- pass 35 -->\n        \t<!-- fail 25 -->\n        \t<!-- cancelled 3 -->\n        \t<!-- skipped 9 -->\n        \t<!-- todo 4 -->\n        \t<!-- duration_ms * -->\n        </testsuites>\n        \n      actual: |-\n        <?xml version=\"1.0\" encoding=\"utf-8\"?>\n        <testsuites>\n        \t<testcase name=\"sync pass todo\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"todo\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync pass todo with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"todo\" message=\"this is a passing todo\"/>\n        \t</testcase>\n        \t<testcase name=\"sync fail todo\" time=\"*\" classname=\"test\" failure=\"thrown from sync fail todo\">\n        \t\t<skipped type=\"todo\" message=\"true\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync fail todo\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync fail todo] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync fail todo\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync fail todo with message\" time=\"*\" classname=\"test\" failure=\"thrown from sync fail todo with message\">\n        \t\t<skipped type=\"todo\" message=\"this is a failing todo\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync fail todo with message\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync fail todo with message] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync fail todo with message\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync skip pass\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip pass with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"this is skipped\"/>\n        \t</testcase>\n        \t<testcase name=\"sync pass\" time=\"*\" classname=\"test\"/>\n        \t<!-- this test should pass -->\n        \t<testcase name=\"sync throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from sync throw fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async skip pass\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"async pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from async throw fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from async throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from async throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async skip fail\" time=\"*\" classname=\"test\" failure=\"thrown from async throw fail\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from async throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from async throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async assertion fail\" time=\"*\" classname=\"test\" failure=\"Expected values to be strictly equal:true !== false\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Expected values to be strictly equal:true !== false\">\n        [Error [ERR_TEST_FAILURE]: Expected values to be strictly equal:\n        \n        true !== false\n        ] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n          \n          true !== false\n          \n              *\n              *\n              *\n              *\n              *\n              *\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: true,\n            expected: false,\n            operator: 'strictEqual'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"resolve pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"reject fail\" time=\"*\" classname=\"test\" failure=\"rejected from reject fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"rejected from reject fail\">\n        [Error [ERR_TEST_FAILURE]: rejected from reject fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: rejected from reject fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unhandled rejection - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async unhandled rejection - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate throw - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate reject - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate resolve pass\" time=\"*\" classname=\"test\"/>\n        \t<testsuite name=\"subtest sync throw fail\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"1\" failures=\"1\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"+sync throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fail\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fail\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fail\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<!-- this subtest should make its parent test fail -->\n        \t</testsuite>\n        \t<testcase name=\"sync throw non-error fail\" time=\"*\" classname=\"test\" failure=\"Symbol(thrown symbol from sync throw non-error fail)\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Symbol(thrown symbol from sync throw non-error fail)\">\n        [Error [ERR_TEST_FAILURE]: Symbol(thrown symbol from sync throw non-error fail)] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: Symbol(thrown symbol from sync throw non-error fail) }\n        \t\t</failure>\n        \t</testcase>\n        \t<testsuite name=\"level 0a\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"4\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"level 1a\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1b\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1c\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1d\" time=\"*\" classname=\"test\"/>\n        \t</testsuite>\n        \t<testsuite name=\"top level\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"2\" failures=\"1\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"+long running\" time=\"*\" classname=\"test\" failure=\"test did not finish before its parent and was cancelled\">\n        \t\t\t<failure type=\"cancelledByParent\" message=\"test did not finish before its parent and was cancelled\">\n        [Error [ERR_TEST_FAILURE]: test did not finish before its parent and was cancelled] { code: 'ERR_TEST_FAILURE', failureType: 'cancelledByParent', cause: 'test did not finish before its parent and was cancelled' }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<testsuite name=\"+short running\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"1\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t\t<testcase name=\"++short running\" time=\"*\" classname=\"test\"/>\n        \t\t</testsuite>\n        \t</testsuite>\n        \t<testcase name=\"invalid subtest - pass but subtest fails\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"sync skip option\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip option with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"this is skipped\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip option is false fail\" time=\"*\" classname=\"test\" failure=\"this should be executed\">\n        \t\t<failure type=\"testCodeFailure\" message=\"this should be executed\">\n        [Error [ERR_TEST_FAILURE]: this should be executed] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: this should be executed\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"functionOnly\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"test with only a name provided\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"test with a name and options provided\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"functionAndOptions\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"callback pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback fail\" time=\"*\" classname=\"test\" failure=\"callback failure\">\n        \t\t<failure type=\"testCodeFailure\" message=\"callback failure\">\n        [Error [ERR_TEST_FAILURE]: callback failure] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: callback failure\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback also returns a Promise\" time=\"*\" classname=\"test\" failure=\"passed a callback but also returned a Promise\">\n        \t\t<failure type=\"callbackAndPromisePresent\" message=\"passed a callback but also returned a Promise\">\n        [Error [ERR_TEST_FAILURE]: passed a callback but also returned a Promise] { code: 'ERR_TEST_FAILURE', failureType: 'callbackAndPromisePresent', cause: 'passed a callback but also returned a Promise' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback throw\" time=\"*\" classname=\"test\" failure=\"thrown from callback throw\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from callback throw\">\n        [Error [ERR_TEST_FAILURE]: thrown from callback throw] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from callback throw\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback called twice\" time=\"*\" classname=\"test\" failure=\"callback invoked multiple times\">\n        \t\t<failure type=\"multipleCallbackInvocations\" message=\"callback invoked multiple times\">\n        Error [ERR_TEST_FAILURE]: callback invoked multiple times\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'multipleCallbackInvocations',\n          cause: 'callback invoked multiple times'\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback called twice in different ticks\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback called twice in future tick\" time=\"*\" classname=\"test\" failure=\"callback invoked multiple times\">\n        \t\t<failure type=\"uncaughtException\" message=\"callback invoked multiple times\">\n        Error [ERR_TEST_FAILURE]: callback invoked multiple times\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error [ERR_TEST_FAILURE]: callback invoked multiple times\n              * {\n            code: 'ERR_TEST_FAILURE',\n            failureType: 'multipleCallbackInvocations',\n            cause: 'callback invoked multiple times'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback async throw\" time=\"*\" classname=\"test\" failure=\"thrown from callback async throw\">\n        \t\t<failure type=\"uncaughtException\" message=\"thrown from callback async throw\">\n        Error [ERR_TEST_FAILURE]: thrown from callback async throw\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error: thrown from callback async throw\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback async throw after done\" time=\"*\" classname=\"test\"/>\n        \t<testsuite name=\"only is set but not in only mode\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"4\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"running subtest 1\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"running subtest 2\" time=\"*\" classname=\"test\"/>\n        \t\t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t\t<testcase name=\"running subtest 3\" time=\"*\" classname=\"test\"/>\n        \t\t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t\t<testcase name=\"running subtest 4\" time=\"*\" classname=\"test\"/>\n        \t</testsuite>\n        \t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t<testcase name=\"custom inspect symbol fail\" time=\"*\" classname=\"test\" failure=\"customized\">\n        \t\t<failure type=\"testCodeFailure\" message=\"customized\">\n        [Error [ERR_TEST_FAILURE]: customized] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: customized }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"custom inspect symbol that throws fail\" time=\"*\" classname=\"test\" failure=\"{  foo: 1,  [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]}\">\n        \t\t<failure type=\"testCodeFailure\" message=\"{  foo: 1,  [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]}\">\n        [Error [ERR_TEST_FAILURE]: {\n          foo: 1,\n          [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]\n        }] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: { foo: 1, [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]] }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testsuite name=\"subtest sync throw fails\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"2\" failures=\"2\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"sync throw fails at first\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fails at first\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fails at first\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fails at first\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fails at first\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<testcase name=\"sync throw fails at second\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fails at second\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fails at second\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fails at second\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fails at second\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t</testsuite>\n        \t<testcase name=\"timed out async test\" time=\"*\" classname=\"test\" failure=\"test timed out after 5ms\">\n        \t\t<failure type=\"testTimeoutFailure\" message=\"test timed out after 5ms\">\n        [Error [ERR_TEST_FAILURE]: test timed out after 5ms] { code: 'ERR_TEST_FAILURE', failureType: 'testTimeoutFailure', cause: 'test timed out after 5ms' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"timed out callback test\" time=\"*\" classname=\"test\" failure=\"test timed out after 5ms\">\n        \t\t<failure type=\"testTimeoutFailure\" message=\"test timed out after 5ms\">\n        [Error [ERR_TEST_FAILURE]: test timed out after 5ms] { code: 'ERR_TEST_FAILURE', failureType: 'testTimeoutFailure', cause: 'test timed out after 5ms' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"large timeout async test is ok\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"large timeout callback test is ok\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"successful thenable\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"rejected thenable\" time=\"*\" classname=\"test\" failure=\"custom error\">\n        \t\t<failure type=\"testCodeFailure\" message=\"custom error\">\n        [Error [ERR_TEST_FAILURE]: custom error] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: 'custom error' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unfinished test with uncaughtException\" time=\"*\" classname=\"test\" failure=\"foo\">\n        \t\t<failure type=\"uncaughtException\" message=\"foo\">\n        Error [ERR_TEST_FAILURE]: foo\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error: foo\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unfinished test with unhandledRejection\" time=\"*\" classname=\"test\" failure=\"bar\">\n        \t\t<failure type=\"unhandledRejection\" message=\"bar\">\n        Error [ERR_TEST_FAILURE]: bar\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'unhandledRejection',\n          cause: Error: bar\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"assertion errors display actual and expected properly\" time=\"*\" classname=\"test\" failure=\"Expected values to be loosely deep-equal:{  bar: 1,  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  foo: 1}should loosely deep-equal{  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  circular: &lt;ref *1> {    bar: 2,    c: [Circular *1]  }}\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Expected values to be loosely deep-equal:{  bar: 1,  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  foo: 1}should loosely deep-equal{  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  circular: &lt;ref *1> {    bar: 2,    c: [Circular *1]  }}\">\n        [Error [ERR_TEST_FAILURE]: Expected values to be loosely deep-equal:\n        \n        {\n          bar: 1,\n          baz: {\n            date: 1970-01-01T00:00:00.000Z,\n            null: null,\n            number: 1,\n            string: 'Hello',\n            undefined: undefined\n          },\n          boo: [\n            1\n          ],\n          foo: 1\n        }\n        \n        should loosely deep-equal\n        \n        {\n          baz: {\n            date: 1970-01-01T00:00:00.000Z,\n            null: null,\n            number: 1,\n            string: 'Hello',\n            undefined: undefined\n          },\n          boo: [\n            1\n          ],\n          circular: &lt;ref *1> {\n            bar: 2,\n            c: [Circular *1]\n          }\n        }] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n          \n          {\n            bar: 1,\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            foo: 1\n          }\n          \n          should loosely deep-equal\n          \n          {\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            circular: &lt;ref *1> {\n              bar: 2,\n              c: [Circular *1]\n            }\n          }\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: [Object],\n            expected: [Object],\n            operator: 'deepEqual'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"invalid subtest fail\" time=\"*\" classname=\"test\" failure=\"test could not be started because its parent finished\">\n        \t\t<failure type=\"parentAlreadyFinished\" message=\"test could not be started because its parent finished\">\n        Error [ERR_TEST_FAILURE]: test could not be started because its parent finished\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'parentAlreadyFinished',\n          cause: 'test could not be started because its parent finished'\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<!-- Error: Test \"unhandled rejection - passes but warns\" at test\\fixtures\\test-runner\\output\\output.js:72:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: Test \"async unhandled rejection - passes but warns\" at test\\fixtures\\test-runner\\output\\output.js:76:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from async unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: A resource generated asynchronous activity after the test ended. This activity created the error \"Error: uncaught from outside of a test\" which triggered an uncaughtException event, caught by the test runner. -->\n        \t<!-- Error: Test \"immediate throw - passes but warns\" at test\\fixtures\\test-runner\\output\\output.js:80:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from immediate throw fail\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- Error: Test \"immediate reject - passes but warns\" at test\\fixtures\\test-runner\\output\\output.js:86:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from immediate reject fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: Test \"callback called twice in different ticks\" at test\\fixtures\\test-runner\\output\\output.js:251:1 generated asynchronous activity after the test ended. This activity created the error \"Error [ERR_TEST_FAILURE]: callback invoked multiple times\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- Error: Test \"callback async throw after done\" at test\\fixtures\\test-runner\\output\\output.js:269:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from callback async throw after done\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- tests 76 -->\n        \t<!-- suites 0 -->\n        \t<!-- pass 35 -->\n        \t<!-- fail 25 -->\n        \t<!-- cancelled 3 -->\n        \t<!-- skipped 9 -->\n        \t<!-- todo 4 -->\n        \t<!-- duration_ms * -->\n        </testsuites>\n        \n      operator: 'strictEqual'\n      stack: |-\n        assertSnapshot (C:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:56:12)\n        async Module.spawnAndAssert (C:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:84:3)\n        async TestContext.<anonymous> (file:///C:/workspace/node-test-binary-windows-js-suites/node/test/parallel/test-runner-output.mjs:145:5)\n        async Test.run (node:internal/test_runner/test:736:9)\n        async Promise.all (index 23)\n        async Suite.run (node:internal/test_runner/test:1091:7)\n        async Test.processPendingSubtests (node:internal/test_runner/test:449:7)\n      ...\n    # Subtest: test-runner/output/spec_reporter_successful.js\n    ok 25 - test-runner/output/spec_reporter_successful.js\n      ---\n      duration_ms: 1411.8907\n      ...\n    # Subtest: test-runner/output/spec_reporter.js\n    not ok 26 - test-runner/output/spec_reporter.js\n      ---\n      duration_ms: 3108.9304\n      location: 'C:\\\\workspace\\\\node-test-binary-windows-js-suites\\\\node\\\\test\\\\parallel\\\\test-runner-output.mjs:151:5'\n      failureType: 'testCodeFailure'\n      error: |-\n        Expected values to be strictly equal:\n        + actual - expected ... Lines skipped\n        \n          ' sync pass todo (*ms) # TODO\\n' +\n            ' sync pass todo with message (*ms) # this is a passing todo\\n' +\n        ...\n            \"  'test could not be started because its parent finished'\\n\" +\n            '\\n' +\n        +   ' Error: Test \"unhandled rejection - passes but warns\" at test\\\\fixtures\\\\test-runner\\\\output\\\\output.js:72:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\\n' +\n        +   ' Error: Test \"async unhandled rejection - passes but warns\" at test\\\\fixtures\\\\test-runner\\\\output\\\\output.js:76:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from async unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\\n' +\n        -   ' Error: Test \"unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:72:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\\n' +\n        -   ' Error: Test \"async unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:76:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from async unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\\n' +\n            ' Error: A resource generated asynchronous activity after the test ended. This activity created the error \"Error: uncaught from outside of a test\" which triggered an uncaughtException event, caught by the test runner.\\n' +\n        +   ' Error: Test \"immediate throw - passes but warns\" at test\\\\fixtures\\\\test-runner\\\\output\\\\output.js:80:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from immediate throw fail\" and would have caused the test to fail, but instead triggered an uncaughtException event.\\n' +\n        +   ' Error: Test \"immediate reject - passes but warns\" at test\\\\fixtures\\\\test-runner\\\\output\\\\output.js:86:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from immediate reject fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\\n' +\n        +   ' Error: Test \"callback called twice in different ticks\" at test\\\\fixtures\\\\test-runner\\\\output\\\\output.js:251:1 generated asynchronous activity after the test ended. This activity created the error \"Error [ERR_TEST_FAILURE]: callback invoked multiple times\" and would have caused the test to fail, but instead triggered an uncaughtException event.\\n' +\n        +   ' Error: Test \"callback async throw after done\" at test\\\\fixtures\\\\test-runner\\\\output\\\\output.js:269:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from callback async throw after done\" and would have caused the test to fail, but instead triggered an uncaughtException event.\\n' +\n        -   ' Error: Test \"immediate throw - passes but warns\" at test/fixtures/test-runner/output/output.js:80:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from immediate throw fail\" and would have caused the test to fail, but instead triggered an uncaughtException event.\\n' +\n        -   ' Error: Test \"immediate reject - passes but warns\" at test/fixtures/test-runner/output/output.js:86:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from immediate reject fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\\n' +\n        -   ' Error: Test \"callback called twice in different ticks\" at test/fixtures/test-runner/output/output.js:251:1 generated asynchronous activity after the test ended. This activity created the error \"Error [ERR_TEST_FAILURE]: callback invoked multiple times\" and would have caused the test to fail, but instead triggered an uncaughtException event.\\n' +\n        -   ' Error: Test \"callback async throw after done\" at test/fixtures/test-runner/output/output.js:269:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from callback async throw after done\" and would have caused the test to fail, but instead triggered an uncaughtException event.\\n' +\n            ' tests 76\\n' +\n        ...\n            '*\\n' +\n            ' callback called twice (*ms)\\n' +\n            '  '... 2076 more characters\n      code: 'ERR_ASSERTION'\n      name: 'AssertionError'\n      expected: |-\n         sync pass todo (*ms) # TODO\n         sync pass todo with message (*ms) # this is a passing todo\n         sync fail todo (*ms) # TODO\n          Error: thrown from sync fail todo\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         sync fail todo with message (*ms) # this is a failing todo\n          Error: thrown from sync fail todo with message\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         sync skip pass (*ms) # SKIP\n         sync skip pass with message (*ms) # this is skipped\n         sync pass (*ms)\n         this test should pass\n         sync throw fail (*ms)\n          Error: thrown from sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         async skip pass (*ms) # SKIP\n         async pass (*ms)\n         async throw fail (*ms)\n          Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         async skip fail (*ms) # SKIP\n          Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         async assertion fail (*ms)\n          AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n          \n          true !== false\n          \n              *\n              *\n              *\n              *\n              *\n              *\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: true,\n            expected: false,\n            operator: 'strictEqual'\n          }\n        \n         resolve pass (*ms)\n         reject fail (*ms)\n          Error: rejected from reject fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         unhandled rejection - passes but warns (*ms)\n         async unhandled rejection - passes but warns (*ms)\n         immediate throw - passes but warns (*ms)\n         immediate reject - passes but warns (*ms)\n         immediate resolve pass (*ms)\n         subtest sync throw fail\n           +sync throw fail (*ms)\n            Error: thrown from subtest sync throw fail\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n        \n           this subtest should make its parent test fail\n         subtest sync throw fail (*ms)\n         sync throw non-error fail (*ms)\n          Symbol(thrown symbol from sync throw non-error fail)\n        \n         level 0a\n           level 1a (*ms)\n           level 1b (*ms)\n           level 1c (*ms)\n           level 1d (*ms)\n         level 0a (*ms)\n         top level\n           +long running (*ms)\n            'test did not finish before its parent and was cancelled'\n        \n           +short running\n             ++short running (*ms)\n           +short running (*ms)\n         top level (*ms)\n         invalid subtest - pass but subtest fails (*ms)\n         sync skip option (*ms) # SKIP\n         sync skip option with message (*ms) # this is skipped\n         sync skip option is false fail (*ms)\n          Error: this should be executed\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         <anonymous> (*ms)\n         functionOnly (*ms)\n         <anonymous> (*ms)\n         test with only a name provided (*ms)\n         <anonymous> (*ms)\n         <anonymous> (*ms) # SKIP\n         test with a name and options provided (*ms) # SKIP\n         functionAndOptions (*ms) # SKIP\n         callback pass (*ms)\n         callback fail (*ms)\n          Error: callback failure\n              *\n              *\n        \n         sync t is this in test (*ms)\n         async t is this in test (*ms)\n         callback t is this in test (*ms)\n         callback also returns a Promise (*ms)\n          'passed a callback but also returned a Promise'\n        \n         callback throw (*ms)\n          Error: thrown from callback throw\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         callback called twice (*ms)\n          'callback invoked multiple times'\n        \n         callback called twice in different ticks (*ms)\n         callback called twice in future tick (*ms)\n          Error [ERR_TEST_FAILURE]: callback invoked multiple times\n              * {\n            code: 'ERR_TEST_FAILURE',\n            failureType: 'multipleCallbackInvocations',\n            cause: 'callback invoked multiple times'\n          }\n        \n         callback async throw (*ms)\n          Error: thrown from callback async throw\n              *\n              *\n        \n         callback async throw after done (*ms)\n         only is set but not in only mode\n           running subtest 1 (*ms)\n           running subtest 2 (*ms)\n           'only' and 'runOnly' require the --test-only command-line option.\n           running subtest 3 (*ms)\n           'only' and 'runOnly' require the --test-only command-line option.\n           running subtest 4 (*ms)\n         only is set but not in only mode (*ms)\n         'only' and 'runOnly' require the --test-only command-line option.\n         custom inspect symbol fail (*ms)\n          customized\n        \n         custom inspect symbol that throws fail (*ms)\n          { foo: 1, [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]] }\n        \n         subtest sync throw fails\n           sync throw fails at first (*ms)\n            Error: thrown from subtest sync throw fails at first\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n        \n           sync throw fails at second (*ms)\n            Error: thrown from subtest sync throw fails at second\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n        \n         subtest sync throw fails (*ms)\n         timed out async test (*ms)\n          'test timed out after *ms'\n        \n         timed out callback test (*ms)\n          'test timed out after *ms'\n        \n         large timeout async test is ok (*ms)\n         large timeout callback test is ok (*ms)\n         successful thenable (*ms)\n         rejected thenable (*ms)\n          'custom error'\n        \n         unfinished test with uncaughtException (*ms)\n          Error: foo\n              *\n              *\n              *\n        \n         unfinished test with unhandledRejection (*ms)\n          Error: bar\n              *\n              *\n              *\n        \n         assertion errors display actual and expected properly (*ms)\n          AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n          \n          {\n            bar: 1,\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            foo: 1\n          }\n          \n          should loosely deep-equal\n          \n          {\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            circular: <ref *1> {\n              bar: 2,\n              c: [Circular *1]\n            }\n          }\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: [Object],\n            expected: [Object],\n            operator: 'deepEqual'\n          }\n        \n         invalid subtest fail (*ms)\n          'test could not be started because its parent finished'\n        \n         Error: Test \"unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:72:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\n         Error: Test \"async unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:76:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from async unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\n         Error: A resource generated asynchronous activity after the test ended. This activity created the error \"Error: uncaught from outside of a test\" which triggered an uncaughtException event, caught by the test runner.\n         Error: Test \"immediate throw - passes but warns\" at test/fixtures/test-runner/output/output.js:80:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from immediate throw fail\" and would have caused the test to fail, but instead triggered an uncaughtException event.\n         Error: Test \"immediate reject - passes but warns\" at test/fixtures/test-runner/output/output.js:86:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from immediate reject fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\n         Error: Test \"callback called twice in different ticks\" at test/fixtures/test-runner/output/output.js:251:1 generated asynchronous activity after the test ended. This activity created the error \"Error [ERR_TEST_FAILURE]: callback invoked multiple times\" and would have caused the test to fail, but instead triggered an uncaughtException event.\n         Error: Test \"callback async throw after done\" at test/fixtures/test-runner/output/output.js:269:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from callback async throw after done\" and would have caused the test to fail, but instead triggered an uncaughtException event.\n         tests 76\n         suites 0\n         pass 35\n         fail 25\n         cancelled 3\n         skipped 9\n         todo 4\n         duration_ms *\n        \n         failing tests:\n        \n        *\n         sync fail todo (*ms) # TODO\n          Error: thrown from sync fail todo\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         sync fail todo with message (*ms) # this is a failing todo\n          Error: thrown from sync fail todo with message\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         sync throw fail (*ms)\n          Error: thrown from sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         async throw fail (*ms)\n          Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         async skip fail (*ms) # SKIP\n          Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         async assertion fail (*ms)\n          AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n          \n          true !== false\n          \n              *\n              *\n              *\n              *\n              *\n              *\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: true,\n            expected: false,\n            operator: 'strictEqual'\n          }\n        \n        *\n         reject fail (*ms)\n          Error: rejected from reject fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         +sync throw fail (*ms)\n          Error: thrown from subtest sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         sync throw non-error fail (*ms)\n          Symbol(thrown symbol from sync throw non-error fail)\n        \n        *\n         +long running (*ms)\n          'test did not finish before its parent and was cancelled'\n        \n        *\n         sync skip option is false fail (*ms)\n          Error: this should be executed\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         callback fail (*ms)\n          Error: callback failure\n              *\n              *\n        \n        *\n         callback also returns a Promise (*ms)\n          'passed a callback but also returned a Promise'\n        \n        *\n         callback throw (*ms)\n          Error: thrown from callback throw\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         callback called twice (*ms)\n          'callback invoked multiple times'\n        \n        *\n         callback called twice in future tick (*ms)\n          Error [ERR_TEST_FAILURE]: callback invoked multiple times\n              * {\n            code: 'ERR_TEST_FAILURE',\n            failureType: 'multipleCallbackInvocations',\n            cause: 'callback invoked multiple times'\n          }\n        \n        *\n         callback async throw (*ms)\n          Error: thrown from callback async throw\n              *\n              *\n        \n        *\n         custom inspect symbol fail (*ms)\n          customized\n        \n        *\n         custom inspect symbol that throws fail (*ms)\n          { foo: 1, [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]] }\n        \n        *\n         sync throw fails at first (*ms)\n          Error: thrown from subtest sync throw fails at first\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         sync throw fails at second (*ms)\n          Error: thrown from subtest sync throw fails at second\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         timed out async test (*ms)\n          'test timed out after *ms'\n        \n        *\n         timed out callback test (*ms)\n          'test timed out after *ms'\n        \n        *\n         rejected thenable (*ms)\n          'custom error'\n        \n        *\n         unfinished test with uncaughtException (*ms)\n          Error: foo\n              *\n              *\n              *\n        \n        *\n         unfinished test with unhandledRejection (*ms)\n          Error: bar\n              *\n              *\n              *\n        \n        *\n         assertion errors display actual and expected properly (*ms)\n          AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n          \n          {\n            bar: 1,\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            foo: 1\n          }\n          \n          should loosely deep-equal\n          \n          {\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            circular: <ref *1> {\n              bar: 2,\n              c: [Circular *1]\n            }\n          }\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: [Object],\n            expected: [Object],\n            operator: 'deepEqual'\n          }\n        \n        *\n         invalid subtest fail (*ms)\n          'test could not be started because its parent finished'\n        \n      actual: |-\n         sync pass todo (*ms) # TODO\n         sync pass todo with message (*ms) # this is a passing todo\n         sync fail todo (*ms) # TODO\n          Error: thrown from sync fail todo\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         sync fail todo with message (*ms) # this is a failing todo\n          Error: thrown from sync fail todo with message\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         sync skip pass (*ms) # SKIP\n         sync skip pass with message (*ms) # this is skipped\n         sync pass (*ms)\n         this test should pass\n         sync throw fail (*ms)\n          Error: thrown from sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         async skip pass (*ms) # SKIP\n         async pass (*ms)\n         async throw fail (*ms)\n          Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         async skip fail (*ms) # SKIP\n          Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         async assertion fail (*ms)\n          AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n          \n          true !== false\n          \n              *\n              *\n              *\n              *\n              *\n              *\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: true,\n            expected: false,\n            operator: 'strictEqual'\n          }\n        \n         resolve pass (*ms)\n         reject fail (*ms)\n          Error: rejected from reject fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         unhandled rejection - passes but warns (*ms)\n         async unhandled rejection - passes but warns (*ms)\n         immediate throw - passes but warns (*ms)\n         immediate reject - passes but warns (*ms)\n         immediate resolve pass (*ms)\n         subtest sync throw fail\n           +sync throw fail (*ms)\n            Error: thrown from subtest sync throw fail\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n        \n           this subtest should make its parent test fail\n         subtest sync throw fail (*ms)\n         sync throw non-error fail (*ms)\n          Symbol(thrown symbol from sync throw non-error fail)\n        \n         level 0a\n           level 1a (*ms)\n           level 1b (*ms)\n           level 1c (*ms)\n           level 1d (*ms)\n         level 0a (*ms)\n         top level\n           +long running (*ms)\n            'test did not finish before its parent and was cancelled'\n        \n           +short running\n             ++short running (*ms)\n           +short running (*ms)\n         top level (*ms)\n         invalid subtest - pass but subtest fails (*ms)\n         sync skip option (*ms) # SKIP\n         sync skip option with message (*ms) # this is skipped\n         sync skip option is false fail (*ms)\n          Error: this should be executed\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         <anonymous> (*ms)\n         functionOnly (*ms)\n         <anonymous> (*ms)\n         test with only a name provided (*ms)\n         <anonymous> (*ms)\n         <anonymous> (*ms) # SKIP\n         test with a name and options provided (*ms) # SKIP\n         functionAndOptions (*ms) # SKIP\n         callback pass (*ms)\n         callback fail (*ms)\n          Error: callback failure\n              *\n              *\n        \n         sync t is this in test (*ms)\n         async t is this in test (*ms)\n         callback t is this in test (*ms)\n         callback also returns a Promise (*ms)\n          'passed a callback but also returned a Promise'\n        \n         callback throw (*ms)\n          Error: thrown from callback throw\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         callback called twice (*ms)\n          'callback invoked multiple times'\n        \n         callback called twice in different ticks (*ms)\n         callback called twice in future tick (*ms)\n          Error [ERR_TEST_FAILURE]: callback invoked multiple times\n              * {\n            code: 'ERR_TEST_FAILURE',\n            failureType: 'multipleCallbackInvocations',\n            cause: 'callback invoked multiple times'\n          }\n        \n         callback async throw (*ms)\n          Error: thrown from callback async throw\n              *\n              *\n        \n         callback async throw after done (*ms)\n         only is set but not in only mode\n           running subtest 1 (*ms)\n           running subtest 2 (*ms)\n           'only' and 'runOnly' require the --test-only command-line option.\n           running subtest 3 (*ms)\n           'only' and 'runOnly' require the --test-only command-line option.\n           running subtest 4 (*ms)\n         only is set but not in only mode (*ms)\n         'only' and 'runOnly' require the --test-only command-line option.\n         custom inspect symbol fail (*ms)\n          customized\n        \n         custom inspect symbol that throws fail (*ms)\n          { foo: 1, [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]] }\n        \n         subtest sync throw fails\n           sync throw fails at first (*ms)\n            Error: thrown from subtest sync throw fails at first\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n        \n           sync throw fails at second (*ms)\n            Error: thrown from subtest sync throw fails at second\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n        \n         subtest sync throw fails (*ms)\n         timed out async test (*ms)\n          'test timed out after *ms'\n        \n         timed out callback test (*ms)\n          'test timed out after *ms'\n        \n         large timeout async test is ok (*ms)\n         large timeout callback test is ok (*ms)\n         successful thenable (*ms)\n         rejected thenable (*ms)\n          'custom error'\n        \n         unfinished test with uncaughtException (*ms)\n          Error: foo\n              *\n              *\n              *\n        \n         unfinished test with unhandledRejection (*ms)\n          Error: bar\n              *\n              *\n              *\n        \n         assertion errors display actual and expected properly (*ms)\n          AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n          \n          {\n            bar: 1,\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            foo: 1\n          }\n          \n          should loosely deep-equal\n          \n          {\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            circular: <ref *1> {\n              bar: 2,\n              c: [Circular *1]\n            }\n          }\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: [Object],\n            expected: [Object],\n            operator: 'deepEqual'\n          }\n        \n         invalid subtest fail (*ms)\n          'test could not be started because its parent finished'\n        \n         Error: Test \"unhandled rejection - passes but warns\" at test\\fixtures\\test-runner\\output\\output.js:72:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\n         Error: Test \"async unhandled rejection - passes but warns\" at test\\fixtures\\test-runner\\output\\output.js:76:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from async unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\n         Error: A resource generated asynchronous activity after the test ended. This activity created the error \"Error: uncaught from outside of a test\" which triggered an uncaughtException event, caught by the test runner.\n         Error: Test \"immediate throw - passes but warns\" at test\\fixtures\\test-runner\\output\\output.js:80:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from immediate throw fail\" and would have caused the test to fail, but instead triggered an uncaughtException event.\n         Error: Test \"immediate reject - passes but warns\" at test\\fixtures\\test-runner\\output\\output.js:86:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from immediate reject fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\n         Error: Test \"callback called twice in different ticks\" at test\\fixtures\\test-runner\\output\\output.js:251:1 generated asynchronous activity after the test ended. This activity created the error \"Error [ERR_TEST_FAILURE]: callback invoked multiple times\" and would have caused the test to fail, but instead triggered an uncaughtException event.\n         Error: Test \"callback async throw after done\" at test\\fixtures\\test-runner\\output\\output.js:269:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from callback async throw after done\" and would have caused the test to fail, but instead triggered an uncaughtException event.\n         tests 76\n         suites 0\n         pass 35\n         fail 25\n         cancelled 3\n         skipped 9\n         todo 4\n         duration_ms *\n        \n         failing tests:\n        \n        *\n         sync fail todo (*ms) # TODO\n          Error: thrown from sync fail todo\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         sync fail todo with message (*ms) # this is a failing todo\n          Error: thrown from sync fail todo with message\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         sync throw fail (*ms)\n          Error: thrown from sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         async throw fail (*ms)\n          Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         async skip fail (*ms) # SKIP\n          Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         async assertion fail (*ms)\n          AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n          \n          true !== false\n          \n              *\n              *\n              *\n              *\n              *\n              *\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: true,\n            expected: false,\n            operator: 'strictEqual'\n          }\n        \n        *\n         reject fail (*ms)\n          Error: rejected from reject fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         +sync throw fail (*ms)\n          Error: thrown from subtest sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         sync throw non-error fail (*ms)\n          Symbol(thrown symbol from sync throw non-error fail)\n        \n        *\n         +long running (*ms)\n          'test did not finish before its parent and was cancelled'\n        \n        *\n         sync skip option is false fail (*ms)\n          Error: this should be executed\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         callback fail (*ms)\n          Error: callback failure\n              *\n              *\n        \n        *\n         callback also returns a Promise (*ms)\n          'passed a callback but also returned a Promise'\n        \n        *\n         callback throw (*ms)\n          Error: thrown from callback throw\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         callback called twice (*ms)\n          'callback invoked multiple times'\n        \n        *\n         callback called twice in future tick (*ms)\n          Error [ERR_TEST_FAILURE]: callback invoked multiple times\n              * {\n            code: 'ERR_TEST_FAILURE',\n            failureType: 'multipleCallbackInvocations',\n            cause: 'callback invoked multiple times'\n          }\n        \n        *\n         callback async throw (*ms)\n          Error: thrown from callback async throw\n              *\n              *\n        \n        *\n         custom inspect symbol fail (*ms)\n          customized\n        \n        *\n         custom inspect symbol that throws fail (*ms)\n          { foo: 1, [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]] }\n        \n        *\n         sync throw fails at first (*ms)\n          Error: thrown from subtest sync throw fails at first\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         sync throw fails at second (*ms)\n          Error: thrown from subtest sync throw fails at second\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         timed out async test (*ms)\n          'test timed out after *ms'\n        \n        *\n         timed out callback test (*ms)\n          'test timed out after *ms'\n        \n        *\n         rejected thenable (*ms)\n          'custom error'\n        \n        *\n         unfinished test with uncaughtException (*ms)\n          Error: foo\n              *\n              *\n              *\n        \n        *\n         unfinished test with unhandledRejection (*ms)\n          Error: bar\n              *\n              *\n              *\n        \n        *\n         assertion errors display actual and expected properly (*ms)\n          AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n          \n          {\n            bar: 1,\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            foo: 1\n          }\n          \n          should loosely deep-equal\n          \n          {\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            circular: <ref *1> {\n              bar: 2,\n              c: [Circular *1]\n            }\n          }\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: [Object],\n            expected: [Object],\n            operator: 'deepEqual'\n          }\n        \n        *\n         invalid subtest fail (*ms)\n          'test could not be started because its parent finished'\n        \n      operator: 'strictEqual'\n      stack: |-\n        assertSnapshot (C:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:56:12)\n        async Module.spawnAndAssert (C:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:84:3)\n        async TestContext.<anonymous> (file:///C:/workspace/node-test-binary-windows-js-suites/node/test/parallel/test-runner-output.mjs:145:5)\n        async Test.run (node:internal/test_runner/test:736:9)\n        async Promise.all (index 25)\n        async Suite.run (node:internal/test_runner/test:1091:7)\n        async Test.processPendingSubtests (node:internal/test_runner/test:449:7)\n      ...\n    # Subtest: test-runner/output/spec_reporter_cli.js\n    not ok 27 - test-runner/output/spec_reporter_cli.js\n      ---\n      duration_ms: 3409.2724\n      location: 'C:\\\\workspace\\\\node-test-binary-windows-js-suites\\\\node\\\\test\\\\parallel\\\\test-runner-output.mjs:151:5'\n      failureType: 'testCodeFailure'\n      error: |-\n        Expected values to be strictly equal:\n        + actual - expected ... Lines skipped\n        \n          ' sync pass todo (*ms) # TODO\\n' +\n            ' sync pass todo with message (*ms) # this is a passing todo\\n' +\n        ...\n            \"  'test could not be started because its parent finished'\\n\" +\n            '\\n' +\n        +   ' Error: Test \"unhandled rejection - passes but warns\" at test\\\\fixtures\\\\test-runner\\\\output\\\\output.js:72:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\\n' +\n        +   ' Error: Test \"async unhandled rejection - passes but warns\" at test\\\\fixtures\\\\test-runner\\\\output\\\\output.js:76:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from async unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\\n' +\n        -   ' Error: Test \"unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:72:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\\n' +\n        -   ' Error: Test \"async unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:76:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from async unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\\n' +\n            ' Error: A resource generated asynchronous activity after the test ended. This activity created the error \"Error: uncaught from outside of a test\" which triggered an uncaughtException event, caught by the test runner.\\n' +\n        +   ' Error: Test \"immediate throw - passes but warns\" at test\\\\fixtures\\\\test-runner\\\\output\\\\output.js:80:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from immediate throw fail\" and would have caused the test to fail, but instead triggered an uncaughtException event.\\n' +\n        +   ' Error: Test \"immediate reject - passes but warns\" at test\\\\fixtures\\\\test-runner\\\\output\\\\output.js:86:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from immediate reject fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\\n' +\n        +   ' Error: Test \"callback called twice in different ticks\" at test\\\\fixtures\\\\test-runner\\\\output\\\\output.js:251:1 generated asynchronous activity after the test ended. This activity created the error \"Error [ERR_TEST_FAILURE]: callback invoked multiple times\" and would have caused the test to fail, but instead triggered an uncaughtException event.\\n' +\n        +   ' Error: Test \"callback async throw after done\" at test\\\\fixtures\\\\test-runner\\\\output\\\\output.js:269:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from callback async throw after done\" and would have caused the test to fail, but instead triggered an uncaughtException event.\\n' +\n        -   ' Error: Test \"immediate throw - passes but warns\" at test/fixtures/test-runner/output/output.js:80:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from immediate throw fail\" and would have caused the test to fail, but instead triggered an uncaughtException event.\\n' +\n        -   ' Error: Test \"immediate reject - passes but warns\" at test/fixtures/test-runner/output/output.js:86:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from immediate reject fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\\n' +\n        -   ' Error: Test \"callback called twice in different ticks\" at test/fixtures/test-runner/output/output.js:251:1 generated asynchronous activity after the test ended. This activity created the error \"Error [ERR_TEST_FAILURE]: callback invoked multiple times\" and would have caused the test to fail, but instead triggered an uncaughtException event.\\n' +\n        -   ' Error: Test \"callback async throw after done\" at test/fixtures/test-runner/output/output.js:269:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from callback async throw after done\" and would have caused the test to fail, but instead triggered an uncaughtException event.\\n' +\n            ' tests 76\\n' +\n        ...\n            '\\n' +\n            '*\\n' +\n            ' callback also returns a Promise (*ms'... 2482 more characters\n      code: 'ERR_ASSERTION'\n      name: 'AssertionError'\n      expected: |-\n         sync pass todo (*ms) # TODO\n         sync pass todo with message (*ms) # this is a passing todo\n         sync fail todo (*ms) # TODO\n          Error: thrown from sync fail todo\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         sync fail todo with message (*ms) # this is a failing todo\n          Error: thrown from sync fail todo with message\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         sync skip pass (*ms) # SKIP\n         sync skip pass with message (*ms) # this is skipped\n         sync pass (*ms)\n         this test should pass\n         sync throw fail (*ms)\n          Error: thrown from sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         async skip pass (*ms) # SKIP\n         async pass (*ms)\n         async throw fail (*ms)\n          Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         async skip fail (*ms) # SKIP\n          Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         async assertion fail (*ms)\n          AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n          \n          true !== false\n          \n              *\n              *\n              *\n              *\n              *\n              *\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: true,\n            expected: false,\n            operator: 'strictEqual'\n          }\n        \n         resolve pass (*ms)\n         reject fail (*ms)\n          Error: rejected from reject fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         unhandled rejection - passes but warns (*ms)\n         async unhandled rejection - passes but warns (*ms)\n         immediate throw - passes but warns (*ms)\n         immediate reject - passes but warns (*ms)\n         immediate resolve pass (*ms)\n         subtest sync throw fail\n           +sync throw fail (*ms)\n            Error: thrown from subtest sync throw fail\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n        \n           this subtest should make its parent test fail\n         subtest sync throw fail (*ms)\n         sync throw non-error fail (*ms)\n          Symbol(thrown symbol from sync throw non-error fail)\n        \n         level 0a\n           level 1a (*ms)\n           level 1b (*ms)\n           level 1c (*ms)\n           level 1d (*ms)\n         level 0a (*ms)\n         top level\n           +long running (*ms)\n            'test did not finish before its parent and was cancelled'\n        \n           +short running\n             ++short running (*ms)\n           +short running (*ms)\n         top level (*ms)\n         invalid subtest - pass but subtest fails (*ms)\n         sync skip option (*ms) # SKIP\n         sync skip option with message (*ms) # this is skipped\n         sync skip option is false fail (*ms)\n          Error: this should be executed\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         <anonymous> (*ms)\n         functionOnly (*ms)\n         <anonymous> (*ms)\n         test with only a name provided (*ms)\n         <anonymous> (*ms)\n         <anonymous> (*ms) # SKIP\n         test with a name and options provided (*ms) # SKIP\n         functionAndOptions (*ms) # SKIP\n         callback pass (*ms)\n         callback fail (*ms)\n          Error: callback failure\n              *\n              *\n        \n         sync t is this in test (*ms)\n         async t is this in test (*ms)\n         callback t is this in test (*ms)\n         callback also returns a Promise (*ms)\n          'passed a callback but also returned a Promise'\n        \n         callback throw (*ms)\n          Error: thrown from callback throw\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         callback called twice (*ms)\n          'callback invoked multiple times'\n        \n         callback called twice in different ticks (*ms)\n         callback called twice in future tick (*ms)\n          Error [ERR_TEST_FAILURE]: callback invoked multiple times\n              * {\n            code: 'ERR_TEST_FAILURE',\n            failureType: 'multipleCallbackInvocations',\n            cause: 'callback invoked multiple times'\n          }\n        \n         callback async throw (*ms)\n          Error: thrown from callback async throw\n              *\n              *\n        \n         callback async throw after done (*ms)\n         only is set but not in only mode\n           running subtest 1 (*ms)\n           running subtest 2 (*ms)\n           'only' and 'runOnly' require the --test-only command-line option.\n           running subtest 3 (*ms)\n           'only' and 'runOnly' require the --test-only command-line option.\n           running subtest 4 (*ms)\n         only is set but not in only mode (*ms)\n         'only' and 'runOnly' require the --test-only command-line option.\n         custom inspect symbol fail (*ms)\n          customized\n        \n         custom inspect symbol that throws fail (*ms)\n          { foo: 1 }\n        \n         subtest sync throw fails\n           sync throw fails at first (*ms)\n            Error: thrown from subtest sync throw fails at first\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n        \n           sync throw fails at second (*ms)\n            Error: thrown from subtest sync throw fails at second\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n        \n         subtest sync throw fails (*ms)\n         timed out async test (*ms)\n          'test timed out after *ms'\n        \n         timed out callback test (*ms)\n          'test timed out after *ms'\n        \n         large timeout async test is ok (*ms)\n         large timeout callback test is ok (*ms)\n         successful thenable (*ms)\n         rejected thenable (*ms)\n          'custom error'\n        \n         unfinished test with uncaughtException (*ms)\n          Error: foo\n              *\n              *\n              *\n        \n         unfinished test with unhandledRejection (*ms)\n          Error: bar\n              *\n              *\n              *\n        \n         assertion errors display actual and expected properly (*ms)\n          AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n          \n          {\n            bar: 1,\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            foo: 1\n          }\n          \n          should loosely deep-equal\n          \n          {\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            circular: <ref *1> {\n              bar: 2,\n              c: [Circular *1]\n            }\n          }\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: { foo: 1, bar: 1, boo: [ 1 ], baz: { date: 1970-01-01T00:00:00.000Z, null: null, number: 1, string: 'Hello', undefined: undefined } },\n            expected: { boo: [ 1 ], baz: { date: 1970-01-01T00:00:00.000Z, null: null, number: 1, string: 'Hello', undefined: undefined }, circular: <ref *1> { bar: 2, c: [Circular *1] } },\n            operator: 'deepEqual'\n          }\n        \n         invalid subtest fail (*ms)\n          'test could not be started because its parent finished'\n        \n         Error: Test \"unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:72:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\n         Error: Test \"async unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:76:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from async unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\n         Error: A resource generated asynchronous activity after the test ended. This activity created the error \"Error: uncaught from outside of a test\" which triggered an uncaughtException event, caught by the test runner.\n         Error: Test \"immediate throw - passes but warns\" at test/fixtures/test-runner/output/output.js:80:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from immediate throw fail\" and would have caused the test to fail, but instead triggered an uncaughtException event.\n         Error: Test \"immediate reject - passes but warns\" at test/fixtures/test-runner/output/output.js:86:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from immediate reject fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\n         Error: Test \"callback called twice in different ticks\" at test/fixtures/test-runner/output/output.js:251:1 generated asynchronous activity after the test ended. This activity created the error \"Error [ERR_TEST_FAILURE]: callback invoked multiple times\" and would have caused the test to fail, but instead triggered an uncaughtException event.\n         Error: Test \"callback async throw after done\" at test/fixtures/test-runner/output/output.js:269:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from callback async throw after done\" and would have caused the test to fail, but instead triggered an uncaughtException event.\n         tests 76\n         suites 0\n         pass 35\n         fail 25\n         cancelled 3\n         skipped 9\n         todo 4\n         duration_ms *\n        \n         failing tests:\n        \n        *\n         sync fail todo (*ms) # TODO\n          Error: thrown from sync fail todo\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         sync fail todo with message (*ms) # this is a failing todo\n          Error: thrown from sync fail todo with message\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         sync throw fail (*ms)\n          Error: thrown from sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         async throw fail (*ms)\n          Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         async skip fail (*ms) # SKIP\n          Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         async assertion fail (*ms)\n          AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n          \n          true !== false\n          \n              *\n              *\n              *\n              *\n              *\n              *\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: true,\n            expected: false,\n            operator: 'strictEqual'\n          }\n        \n        *\n         reject fail (*ms)\n          Error: rejected from reject fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         +sync throw fail (*ms)\n          Error: thrown from subtest sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         sync throw non-error fail (*ms)\n          Symbol(thrown symbol from sync throw non-error fail)\n        \n        *\n         +long running (*ms)\n          'test did not finish before its parent and was cancelled'\n        \n        *\n         sync skip option is false fail (*ms)\n          Error: this should be executed\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         callback fail (*ms)\n          Error: callback failure\n              *\n              *\n        \n        *\n         callback also returns a Promise (*ms)\n          'passed a callback but also returned a Promise'\n        \n        *\n         callback throw (*ms)\n          Error: thrown from callback throw\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         callback called twice (*ms)\n          'callback invoked multiple times'\n        \n        *\n         callback called twice in future tick (*ms)\n          Error [ERR_TEST_FAILURE]: callback invoked multiple times\n              * {\n            code: 'ERR_TEST_FAILURE',\n            failureType: 'multipleCallbackInvocations',\n            cause: 'callback invoked multiple times'\n          }\n        \n        *\n         callback async throw (*ms)\n          Error: thrown from callback async throw\n              *\n              *\n        \n        *\n         custom inspect symbol fail (*ms)\n          customized\n        \n        *\n         custom inspect symbol that throws fail (*ms)\n          { foo: 1 }\n        \n        *\n         sync throw fails at first (*ms)\n          Error: thrown from subtest sync throw fails at first\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         sync throw fails at second (*ms)\n          Error: thrown from subtest sync throw fails at second\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         timed out async test (*ms)\n          'test timed out after *ms'\n        \n        *\n         timed out callback test (*ms)\n          'test timed out after *ms'\n        \n        *\n         rejected thenable (*ms)\n          'custom error'\n        \n        *\n         unfinished test with uncaughtException (*ms)\n          Error: foo\n              *\n              *\n              *\n        \n        *\n         unfinished test with unhandledRejection (*ms)\n          Error: bar\n              *\n              *\n              *\n        \n        *\n         assertion errors display actual and expected properly (*ms)\n          AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n          \n          {\n            bar: 1,\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            foo: 1\n          }\n          \n          should loosely deep-equal\n          \n          {\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            circular: <ref *1> {\n              bar: 2,\n              c: [Circular *1]\n            }\n          }\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: { foo: 1, bar: 1, boo: [ 1 ], baz: { date: 1970-01-01T00:00:00.000Z, null: null, number: 1, string: 'Hello', undefined: undefined } },\n            expected: { boo: [ 1 ], baz: { date: 1970-01-01T00:00:00.000Z, null: null, number: 1, string: 'Hello', undefined: undefined }, circular: <ref *1> { bar: 2, c: [Circular *1] } },\n            operator: 'deepEqual'\n          }\n        \n        *\n         invalid subtest fail (*ms)\n          'test could not be started because its parent finished'\n        \n      actual: |-\n         sync pass todo (*ms) # TODO\n         sync pass todo with message (*ms) # this is a passing todo\n         sync fail todo (*ms) # TODO\n          Error: thrown from sync fail todo\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         sync fail todo with message (*ms) # this is a failing todo\n          Error: thrown from sync fail todo with message\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         sync skip pass (*ms) # SKIP\n         sync skip pass with message (*ms) # this is skipped\n         sync pass (*ms)\n         this test should pass\n         sync throw fail (*ms)\n          Error: thrown from sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         async skip pass (*ms) # SKIP\n         async pass (*ms)\n         async throw fail (*ms)\n          Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         async skip fail (*ms) # SKIP\n          Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         async assertion fail (*ms)\n          AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n          \n          true !== false\n          \n              *\n              *\n              *\n              *\n              *\n              *\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: true,\n            expected: false,\n            operator: 'strictEqual'\n          }\n        \n         resolve pass (*ms)\n         reject fail (*ms)\n          Error: rejected from reject fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         unhandled rejection - passes but warns (*ms)\n         async unhandled rejection - passes but warns (*ms)\n         immediate throw - passes but warns (*ms)\n         immediate reject - passes but warns (*ms)\n         immediate resolve pass (*ms)\n         subtest sync throw fail\n           +sync throw fail (*ms)\n            Error: thrown from subtest sync throw fail\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n        \n           this subtest should make its parent test fail\n         subtest sync throw fail (*ms)\n         sync throw non-error fail (*ms)\n          Symbol(thrown symbol from sync throw non-error fail)\n        \n         level 0a\n           level 1a (*ms)\n           level 1b (*ms)\n           level 1c (*ms)\n           level 1d (*ms)\n         level 0a (*ms)\n         top level\n           +long running (*ms)\n            'test did not finish before its parent and was cancelled'\n        \n           +short running\n             ++short running (*ms)\n           +short running (*ms)\n         top level (*ms)\n         invalid subtest - pass but subtest fails (*ms)\n         sync skip option (*ms) # SKIP\n         sync skip option with message (*ms) # this is skipped\n         sync skip option is false fail (*ms)\n          Error: this should be executed\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         <anonymous> (*ms)\n         functionOnly (*ms)\n         <anonymous> (*ms)\n         test with only a name provided (*ms)\n         <anonymous> (*ms)\n         <anonymous> (*ms) # SKIP\n         test with a name and options provided (*ms) # SKIP\n         functionAndOptions (*ms) # SKIP\n         callback pass (*ms)\n         callback fail (*ms)\n          Error: callback failure\n              *\n              *\n        \n         sync t is this in test (*ms)\n         async t is this in test (*ms)\n         callback t is this in test (*ms)\n         callback also returns a Promise (*ms)\n          'passed a callback but also returned a Promise'\n        \n         callback throw (*ms)\n          Error: thrown from callback throw\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         callback called twice (*ms)\n          'callback invoked multiple times'\n        \n         callback called twice in different ticks (*ms)\n         callback called twice in future tick (*ms)\n          Error [ERR_TEST_FAILURE]: callback invoked multiple times\n              * {\n            code: 'ERR_TEST_FAILURE',\n            failureType: 'multipleCallbackInvocations',\n            cause: 'callback invoked multiple times'\n          }\n        \n         callback async throw (*ms)\n          Error: thrown from callback async throw\n              *\n              *\n        \n         callback async throw after done (*ms)\n         only is set but not in only mode\n           running subtest 1 (*ms)\n           running subtest 2 (*ms)\n           'only' and 'runOnly' require the --test-only command-line option.\n           running subtest 3 (*ms)\n           'only' and 'runOnly' require the --test-only command-line option.\n           running subtest 4 (*ms)\n         only is set but not in only mode (*ms)\n         'only' and 'runOnly' require the --test-only command-line option.\n         custom inspect symbol fail (*ms)\n          customized\n        \n         custom inspect symbol that throws fail (*ms)\n          { foo: 1 }\n        \n         subtest sync throw fails\n           sync throw fails at first (*ms)\n            Error: thrown from subtest sync throw fails at first\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n        \n           sync throw fails at second (*ms)\n            Error: thrown from subtest sync throw fails at second\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n        \n         subtest sync throw fails (*ms)\n         timed out async test (*ms)\n          'test timed out after *ms'\n        \n         timed out callback test (*ms)\n          'test timed out after *ms'\n        \n         large timeout async test is ok (*ms)\n         large timeout callback test is ok (*ms)\n         successful thenable (*ms)\n         rejected thenable (*ms)\n          'custom error'\n        \n         unfinished test with uncaughtException (*ms)\n          Error: foo\n              *\n              *\n              *\n        \n         unfinished test with unhandledRejection (*ms)\n          Error: bar\n              *\n              *\n              *\n        \n         assertion errors display actual and expected properly (*ms)\n          AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n          \n          {\n            bar: 1,\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            foo: 1\n          }\n          \n          should loosely deep-equal\n          \n          {\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            circular: <ref *1> {\n              bar: 2,\n              c: [Circular *1]\n            }\n          }\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: { foo: 1, bar: 1, boo: [ 1 ], baz: { date: 1970-01-01T00:00:00.000Z, null: null, number: 1, string: 'Hello', undefined: undefined } },\n            expected: { boo: [ 1 ], baz: { date: 1970-01-01T00:00:00.000Z, null: null, number: 1, string: 'Hello', undefined: undefined }, circular: <ref *1> { bar: 2, c: [Circular *1] } },\n            operator: 'deepEqual'\n          }\n        \n         invalid subtest fail (*ms)\n          'test could not be started because its parent finished'\n        \n         Error: Test \"unhandled rejection - passes but warns\" at test\\fixtures\\test-runner\\output\\output.js:72:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\n         Error: Test \"async unhandled rejection - passes but warns\" at test\\fixtures\\test-runner\\output\\output.js:76:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from async unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\n         Error: A resource generated asynchronous activity after the test ended. This activity created the error \"Error: uncaught from outside of a test\" which triggered an uncaughtException event, caught by the test runner.\n         Error: Test \"immediate throw - passes but warns\" at test\\fixtures\\test-runner\\output\\output.js:80:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from immediate throw fail\" and would have caused the test to fail, but instead triggered an uncaughtException event.\n         Error: Test \"immediate reject - passes but warns\" at test\\fixtures\\test-runner\\output\\output.js:86:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from immediate reject fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\n         Error: Test \"callback called twice in different ticks\" at test\\fixtures\\test-runner\\output\\output.js:251:1 generated asynchronous activity after the test ended. This activity created the error \"Error [ERR_TEST_FAILURE]: callback invoked multiple times\" and would have caused the test to fail, but instead triggered an uncaughtException event.\n         Error: Test \"callback async throw after done\" at test\\fixtures\\test-runner\\output\\output.js:269:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from callback async throw after done\" and would have caused the test to fail, but instead triggered an uncaughtException event.\n         tests 76\n         suites 0\n         pass 35\n         fail 25\n         cancelled 3\n         skipped 9\n         todo 4\n         duration_ms *\n        \n         failing tests:\n        \n        *\n         sync fail todo (*ms) # TODO\n          Error: thrown from sync fail todo\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         sync fail todo with message (*ms) # this is a failing todo\n          Error: thrown from sync fail todo with message\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         sync throw fail (*ms)\n          Error: thrown from sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         async throw fail (*ms)\n          Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         async skip fail (*ms) # SKIP\n          Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         async assertion fail (*ms)\n          AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n          \n          true !== false\n          \n              *\n              *\n              *\n              *\n              *\n              *\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: true,\n            expected: false,\n            operator: 'strictEqual'\n          }\n        \n        *\n         reject fail (*ms)\n          Error: rejected from reject fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         +sync throw fail (*ms)\n          Error: thrown from subtest sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         sync throw non-error fail (*ms)\n          Symbol(thrown symbol from sync throw non-error fail)\n        \n        *\n         +long running (*ms)\n          'test did not finish before its parent and was cancelled'\n        \n        *\n         sync skip option is false fail (*ms)\n          Error: this should be executed\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         callback fail (*ms)\n          Error: callback failure\n              *\n              *\n        \n        *\n         callback also returns a Promise (*ms)\n          'passed a callback but also returned a Promise'\n        \n        *\n         callback throw (*ms)\n          Error: thrown from callback throw\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         callback called twice (*ms)\n          'callback invoked multiple times'\n        \n        *\n         callback called twice in future tick (*ms)\n          Error [ERR_TEST_FAILURE]: callback invoked multiple times\n              * {\n            code: 'ERR_TEST_FAILURE',\n            failureType: 'multipleCallbackInvocations',\n            cause: 'callback invoked multiple times'\n          }\n        \n        *\n         callback async throw (*ms)\n          Error: thrown from callback async throw\n              *\n              *\n        \n        *\n         custom inspect symbol fail (*ms)\n          customized\n        \n        *\n         custom inspect symbol that throws fail (*ms)\n          { foo: 1 }\n        \n        *\n         sync throw fails at first (*ms)\n          Error: thrown from subtest sync throw fails at first\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         sync throw fails at second (*ms)\n          Error: thrown from subtest sync throw fails at second\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         timed out async test (*ms)\n          'test timed out after *ms'\n        \n        *\n         timed out callback test (*ms)\n          'test timed out after *ms'\n        \n        *\n         rejected thenable (*ms)\n          'custom error'\n        \n        *\n         unfinished test with uncaughtException (*ms)\n          Error: foo\n              *\n              *\n              *\n        \n        *\n         unfinished test with unhandledRejection (*ms)\n          Error: bar\n              *\n              *\n              *\n        \n        *\n         assertion errors display actual and expected properly (*ms)\n          AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n          \n          {\n            bar: 1,\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            foo: 1\n          }\n          \n          should loosely deep-equal\n          \n          {\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            circular: <ref *1> {\n              bar: 2,\n              c: [Circular *1]\n            }\n          }\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: { foo: 1, bar: 1, boo: [ 1 ], baz: { date: 1970-01-01T00:00:00.000Z, null: null, number: 1, string: 'Hello', undefined: undefined } },\n            expected: { boo: [ 1 ], baz: { date: 1970-01-01T00:00:00.000Z, null: null, number: 1, string: 'Hello', undefined: undefined }, circular: <ref *1> { bar: 2, c: [Circular *1] } },\n            operator: 'deepEqual'\n          }\n        \n        *\n         invalid subtest fail (*ms)\n          'test could not be started because its parent finished'\n        \n      operator: 'strictEqual'\n      stack: |-\n        assertSnapshot (C:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:56:12)\n        async Module.spawnAndAssert (C:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:84:3)\n        async TestContext.<anonymous> (file:///C:/workspace/node-test-binary-windows-js-suites/node/test/parallel/test-runner-output.mjs:145:5)\n        async Test.run (node:internal/test_runner/test:736:9)\n        async Promise.all (index 26)\n        async Suite.run (node:internal/test_runner/test:1091:7)\n        async Test.processPendingSubtests (node:internal/test_runner/test:449:7)\n      ...\n    # Subtest: test-runner/output/source_mapped_locations.mjs\n    ok 28 - test-runner/output/source_mapped_locations.mjs\n      ---\n      duration_ms: 1608.6201\n      ...\n    # Subtest: test-runner/output/lcov_reporter.js\n    ok 29 - test-runner/output/lcov_reporter.js\n      ---\n      duration_ms: 2810.1814\n      ...\n    # Subtest: test-runner/output/output.js\n    ok 30 - test-runner/output/output.js\n      ---\n      duration_ms: 2157.9373\n      ...\n    # Subtest: test-runner/output/output_cli.js\n    ok 31 - test-runner/output/output_cli.js\n      ---\n      duration_ms: 3042.8735\n      ...\n    # Subtest: test-runner/output/name_pattern.js\n    ok 32 - test-runner/output/name_pattern.js\n      ---\n      duration_ms: 1396.7795\n      ...\n    # Subtest: test-runner/output/name_pattern_with_only.js\n    ok 33 - test-runner/output/name_pattern_with_only.js\n      ---\n      duration_ms: 1530.8887\n      ...\n    # Subtest: test-runner/output/unfinished-suite-async-error.js\n    ok 34 - test-runner/output/unfinished-suite-async-error.js\n      ---\n      duration_ms: 1282.9584\n      ...\n    # Subtest: test-runner/output/unresolved_promise.js\n    ok 35 - test-runner/output/unresolved_promise.js\n      ---\n      duration_ms: 1212.9867\n      ...\n    # Subtest: test-runner/output/default_output.js\n        # Subtest: <anonymous>\n        ok 1 - <anonymous> # SKIP Skipping pseudo-tty tests, as pseudo terminals are not available on Windows.\n          ---\n          duration_ms: 204.5485\n          ...\n        1..1\n    ok 36 - test-runner/output/default_output.js\n      ---\n      duration_ms: 205.8264\n      ...\n    # Subtest: test-runner/output/arbitrary-output.js\n    ok 37 - test-runner/output/arbitrary-output.js\n      ---\n      duration_ms: 1901.3183\n      ...\n    # Subtest: test-runner/output/async-test-scheduling.mjs\n    ok 38 - test-runner/output/async-test-scheduling.mjs\n      ---\n      duration_ms: 1669.3716\n      ...\n    # Subtest: test-runner/output/arbitrary-output-colored.js\n        # Subtest: <anonymous>\n        ok 1 - <anonymous> # SKIP Skipping pseudo-tty tests, as pseudo terminals are not available on Windows.\n          ---\n          duration_ms: 106.1862\n          ...\n        1..1\n    ok 39 - test-runner/output/arbitrary-output-colored.js\n      ---\n      duration_ms: 107.0909\n      ...\n    # Subtest: test-runner/output/dot_output_custom_columns.js\n        # Subtest: <anonymous>\n        ok 1 - <anonymous> # SKIP Skipping pseudo-tty tests, as pseudo terminals are not available on Windows.\n          ---\n          duration_ms: 105.7506\n          ...\n        1..1\n    ok 40 - test-runner/output/dot_output_custom_columns.js\n      ---\n      duration_ms: 106.536\n      ...\n    # Subtest: test-runner/output/tap_escape.js\n    ok 41 - test-runner/output/tap_escape.js\n      ---\n      duration_ms: 1322.0335\n      ...\n    # Subtest: test-runner/output/coverage_failure.js\n    ok 42 - test-runner/output/coverage_failure.js\n      ---\n      duration_ms: 1518.7285\n      ...\n    1..42\nnot ok 1 - test runner output\n  ---\n  duration_ms: 5924.074\n  type: 'suite'\n  location: 'C:\\\\workspace\\\\node-test-binary-windows-js-suites\\\\node\\\\test\\\\parallel\\\\test-runner-output.mjs:149:1'\n  failureType: 'subtestsFailed'\n  error: '3 subtests failed'\n  code: 'ERR_TEST_FAILURE'\n  ...\n1..1\n# tests 45\n# suites 1\n# pass 39\n# fail 3\n# cancelled 0\n# skipped 3\n# todo 0\n# duration_ms 5966.988"},"time":6488.036,"fullname":"parallel/test-runner-output","closingTestPoint":false}},{"testName":"sequential/test-http2-large-file","timestamp":1712793616158,"status":"FAILED","jobName":"node-test-binary-windows-js-suites","config":"node-test-binary-windows-js-suites Â» 3,win10-COMPILED_BY-vs2022 #27039","buildUrl":"https://ci.nodejs.org/job/node-test-binary-windows-js-suites/RUN_SUBSET=3,nodes=win10-COMPILED_BY-vs2022/27039/","buildNumber":27039,"builtOn":"test-azure_msft-win10_vs2019-x64-1","nodeVersion":"22.0.0","commitHash":"4e15a4373cf4bd852ed72dbc423c653f08640dba","callStack":[{"upstreamBuild":62036,"upstreamProject":"node-test-commit-windows-fanned","upstreamUrl":"job/node-test-commit-windows-fanned/"},{"upstreamBuild":69709,"upstreamProject":"node-test-commit","upstreamUrl":"job/node-test-commit/"},{"upstreamBuild":58241,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"prId":"52401"}],"tap":{"ok":false,"name":"sequential/test-http2-large-file","id":966,"buffered":false,"tapError":null,"skip":false,"todo":": Fix flaky test","previous":null,"plan":null,"diag":{"severity":"fail","exitcode":1,"stack":"timeout"},"time":120289.445,"fullname":"sequential/test-http2-large-file","closingTestPoint":false}},{"testName":"parallel/test-runner-output","timestamp":1712793616158,"status":"FAILED","jobName":"node-test-binary-windows-js-suites","config":"node-test-binary-windows-js-suites Â» 0,win10-COMPILED_BY-vs2022 #27039","buildUrl":"https://ci.nodejs.org/job/node-test-binary-windows-js-suites/RUN_SUBSET=0,nodes=win10-COMPILED_BY-vs2022/27039/","buildNumber":27039,"builtOn":"test-azure_msft-win10_vs2019-x64-4","nodeVersion":"22.0.0","commitHash":"4e15a4373cf4bd852ed72dbc423c653f08640dba","callStack":[{"upstreamBuild":62036,"upstreamProject":"node-test-commit-windows-fanned","upstreamUrl":"job/node-test-commit-windows-fanned/"},{"upstreamBuild":69709,"upstreamProject":"node-test-commit","upstreamUrl":"job/node-test-commit/"},{"upstreamBuild":58241,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"prId":"52401"}],"tap":{"ok":false,"name":"parallel/test-runner-output","id":671,"buffered":false,"tapError":null,"skip":false,"todo":false,"previous":null,"plan":null,"diag":{"severity":"fail","exitcode":1,"stack":"TAP version 13\n# Subtest: test runner output\n    # Subtest: test-runner/output/abort.js\n    ok 1 - test-runner/output/abort.js\n      ---\n      duration_ms: 1744.2379\n      ...\n    # Subtest: test-runner/output/abort_suite.js\n    ok 2 - test-runner/output/abort_suite.js\n      ---\n      duration_ms: 1863.6761\n      ...\n    # Subtest: test-runner/output/abort_hooks.js\n    ok 3 - test-runner/output/abort_hooks.js\n      ---\n      duration_ms: 627.2425\n      ...\n    # Subtest: test-runner/output/describe_it.js\n    ok 4 - test-runner/output/describe_it.js\n      ---\n      duration_ms: 1728.1563\n      ...\n    # Subtest: test-runner/output/describe_nested.js\n    ok 5 - test-runner/output/describe_nested.js\n      ---\n      duration_ms: 656.8252\n      ...\n    # Subtest: test-runner/output/eval_dot.js\n    ok 6 - test-runner/output/eval_dot.js\n      ---\n      duration_ms: 548.2152\n      ...\n    # Subtest: test-runner/output/eval_spec.js\n    ok 7 - test-runner/output/eval_spec.js\n      ---\n      duration_ms: 789.1787\n      ...\n    # Subtest: test-runner/output/eval_tap.js\n    ok 8 - test-runner/output/eval_tap.js\n      ---\n      duration_ms: 698.7162\n      ...\n    # Subtest: test-runner/output/hooks.js\n    ok 9 - test-runner/output/hooks.js\n      ---\n      duration_ms: 692.7406\n      ...\n    # Subtest: test-runner/output/hooks_spec_reporter.js\n    ok 10 - test-runner/output/hooks_spec_reporter.js\n      ---\n      duration_ms: 2369.7883\n      ...\n    # Subtest: test-runner/output/skip-each-hooks.js\n    ok 11 - test-runner/output/skip-each-hooks.js\n      ---\n      duration_ms: 703.6116\n      ...\n    # Subtest: test-runner/output/suite-skip-hooks.js\n    ok 12 - test-runner/output/suite-skip-hooks.js\n      ---\n      duration_ms: 793.6166\n      ...\n    # Subtest: test-runner/output/timeout_in_before_each_should_not_affect_further_tests.js\n    ok 13 - test-runner/output/timeout_in_before_each_should_not_affect_further_tests.js\n      ---\n      duration_ms: 2338.9015\n      ...\n    # Subtest: test-runner/output/hooks-with-no-global-test.js\n    ok 14 - test-runner/output/hooks-with-no-global-test.js\n      ---\n      duration_ms: 778.0522\n      ...\n    # Subtest: test-runner/output/global-hooks-with-no-tests.js\n    ok 15 - test-runner/output/global-hooks-with-no-tests.js\n      ---\n      duration_ms: 1304.8074\n      ...\n    # Subtest: test-runner/output/before-and-after-each-too-many-listeners.js\n    ok 16 - test-runner/output/before-and-after-each-too-many-listeners.js\n      ---\n      duration_ms: 1140.7102\n      ...\n    # Subtest: test-runner/output/before-and-after-each-with-timeout-too-many-listeners.js\n    ok 17 - test-runner/output/before-and-after-each-with-timeout-too-many-listeners.js\n      ---\n      duration_ms: 1270.5737\n      ...\n    # Subtest: test-runner/output/force_exit.js\n    ok 18 - test-runner/output/force_exit.js\n      ---\n      duration_ms: 1452.4231\n      ...\n    # Subtest: test-runner/output/global_after_should_fail_the_test.js\n    ok 19 - test-runner/output/global_after_should_fail_the_test.js\n      ---\n      duration_ms: 1067.3939\n      ...\n    # Subtest: test-runner/output/no_refs.js\n    ok 20 - test-runner/output/no_refs.js\n      ---\n      duration_ms: 1528.203\n      ...\n    # Subtest: test-runner/output/no_tests.js\n    ok 21 - test-runner/output/no_tests.js\n      ---\n      duration_ms: 1378.205\n      ...\n    # Subtest: test-runner/output/only_tests.js\n    ok 22 - test-runner/output/only_tests.js\n      ---\n      duration_ms: 1640.329\n      ...\n    # Subtest: test-runner/output/dot_reporter.js\n    ok 23 - test-runner/output/dot_reporter.js\n      ---\n      duration_ms: 3081.1717\n      ...\n    # Subtest: test-runner/output/junit_reporter.js\n    not ok 24 - test-runner/output/junit_reporter.js\n      ---\n      duration_ms: 3451.0806\n      location: 'c:\\\\workspace\\\\node-test-binary-windows-js-suites\\\\node\\\\test\\\\parallel\\\\test-runner-output.mjs:151:5'\n      failureType: 'testCodeFailure'\n      error: |-\n        Values have same structure but are not reference-equal:\n        \n        '<?xml version=\"1.0\" encoding=\"utf-8\"?>\\n' +\n          '<testsuites>\\n' +\n          '\\t<testcase name=\"sync pass todo\" time=\"*\" classname=\"test\">\\n' +\n          '\\t\\t<skipped type=\"todo\" message=\"true\"/>\\n' +\n          '\\t</testcase>\\n' +\n          '\\t<testcase name=\"sync pass todo with message\" time=\"*\" classname=\"test\">\\n' +\n          '\\t\\t<skipped type=\"todo\" message=\"this is a passing todo\"/>\\n' +\n          '\\t</testcase>\\n' +\n          '\\t<testcase name=\"sync fail todo\" time=\"*\" classname=\"test\" failure=\"thrown from sync fail todo\">\\n' +\n          '\\t\\t<skipped type=\"todo\" message=\"true\"/>\\n' +\n          '\\t\\t<failure type=\"testCodeFailure\" message=\"thrown from sync fail todo\">\\n' +\n          '[Error [ERR_TEST_FAILURE]: thrown from sync fail todo] {\\n' +\n          \"  code: 'ERR_TEST_FAILURE',\\n\" +\n          \"  failureType: 'testCodeFailure',\\n\" +\n          '  cause: Error: thrown from sync fail todo\\n' +\n          '      *\\n' +\n          '      *\\n' +\n          '      *\\n' +\n          '      *\\n' +\n          '      *\\n' +\n          '      *\\n' +\n          '      *\\n' +\n          '}\\n' +\n          '\\t\\t</failure>\\n' +\n          '\\t</testcase>\\n' +\n          '\\t<testcase name=\"sync fail todo with message\" time=\"*\" classname=\"test\" failure=\"thrown from sync fail todo with message\">\\n' +\n          '\\t\\t<skipped type=\"todo\" message=\"this is a failing todo\"/>\\n' +\n          '\\t\\t<failure type=\"testCodeFailure\" message=\"thrown from sync fail todo with message\">\\n' +\n          '[Error [ERR_TEST_FAILURE]: thrown from sync fail todo with message] {\\n' +\n          \"  code: 'ERR_TEST_FAILURE',\\n\" +\n          \"  failureType: 'testCodeFailure',\\n\" +\n          '  cause: Error: thrown from sync fail todo with message\\n' +\n          '      *\\n' +\n          '      *\\n' +\n          '      *\\n' +\n          '      *\\n' +\n          '      *\\n' +\n          '      *\\n' +\n          '      *\\n' +\n          '}\\n' +\n          '\\t\\t</failure>\\n' +\n          '\\t</testcase>\\n' +\n          '\\t<testcase name=\"sync skip pass\" time=\"*\" classname=\"test\">\\n' +\n          '\\t\\t<skipped type=\"skipped\" message=\"true\"/>\\n' +\n          '\\t</testcase>\\n' +\n          '\\t<testcase name=\"sync skip pass with message\" time=\"*\" classname=\"test\">\\n' +\n        ...\n        \n      code: 'ERR_ASSERTION'\n      name: 'AssertionError'\n      expected: |-\n        <?xml version=\"1.0\" encoding=\"utf-8\"?>\n        <testsuites>\n        \t<testcase name=\"sync pass todo\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"todo\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync pass todo with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"todo\" message=\"this is a passing todo\"/>\n        \t</testcase>\n        \t<testcase name=\"sync fail todo\" time=\"*\" classname=\"test\" failure=\"thrown from sync fail todo\">\n        \t\t<skipped type=\"todo\" message=\"true\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync fail todo\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync fail todo] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync fail todo\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync fail todo with message\" time=\"*\" classname=\"test\" failure=\"thrown from sync fail todo with message\">\n        \t\t<skipped type=\"todo\" message=\"this is a failing todo\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync fail todo with message\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync fail todo with message] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync fail todo with message\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync skip pass\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip pass with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"this is skipped\"/>\n        \t</testcase>\n        \t<testcase name=\"sync pass\" time=\"*\" classname=\"test\"/>\n        \t<!-- this test should pass -->\n        \t<testcase name=\"sync throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from sync throw fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async skip pass\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"async pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from async throw fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from async throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from async throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async skip fail\" time=\"*\" classname=\"test\" failure=\"thrown from async throw fail\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from async throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from async throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async assertion fail\" time=\"*\" classname=\"test\" failure=\"Expected values to be strictly equal:true !== false\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Expected values to be strictly equal:true !== false\">\n        [Error [ERR_TEST_FAILURE]: Expected values to be strictly equal:\n        \n        true !== false\n        ] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n          \n          true !== false\n          \n              *\n              *\n              *\n              *\n              *\n              *\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: true,\n            expected: false,\n            operator: 'strictEqual'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"resolve pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"reject fail\" time=\"*\" classname=\"test\" failure=\"rejected from reject fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"rejected from reject fail\">\n        [Error [ERR_TEST_FAILURE]: rejected from reject fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: rejected from reject fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unhandled rejection - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async unhandled rejection - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate throw - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate reject - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate resolve pass\" time=\"*\" classname=\"test\"/>\n        \t<testsuite name=\"subtest sync throw fail\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"1\" failures=\"1\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"+sync throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fail\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fail\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fail\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<!-- this subtest should make its parent test fail -->\n        \t</testsuite>\n        \t<testcase name=\"sync throw non-error fail\" time=\"*\" classname=\"test\" failure=\"Symbol(thrown symbol from sync throw non-error fail)\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Symbol(thrown symbol from sync throw non-error fail)\">\n        [Error [ERR_TEST_FAILURE]: Symbol(thrown symbol from sync throw non-error fail)] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: Symbol(thrown symbol from sync throw non-error fail) }\n        \t\t</failure>\n        \t</testcase>\n        \t<testsuite name=\"level 0a\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"4\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"level 1a\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1b\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1c\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1d\" time=\"*\" classname=\"test\"/>\n        \t</testsuite>\n        \t<testsuite name=\"top level\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"2\" failures=\"1\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"+long running\" time=\"*\" classname=\"test\" failure=\"test did not finish before its parent and was cancelled\">\n        \t\t\t<failure type=\"cancelledByParent\" message=\"test did not finish before its parent and was cancelled\">\n        [Error [ERR_TEST_FAILURE]: test did not finish before its parent and was cancelled] { code: 'ERR_TEST_FAILURE', failureType: 'cancelledByParent', cause: 'test did not finish before its parent and was cancelled' }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<testsuite name=\"+short running\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"1\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t\t<testcase name=\"++short running\" time=\"*\" classname=\"test\"/>\n        \t\t</testsuite>\n        \t</testsuite>\n        \t<testcase name=\"invalid subtest - pass but subtest fails\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"sync skip option\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip option with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"this is skipped\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip option is false fail\" time=\"*\" classname=\"test\" failure=\"this should be executed\">\n        \t\t<failure type=\"testCodeFailure\" message=\"this should be executed\">\n        [Error [ERR_TEST_FAILURE]: this should be executed] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: this should be executed\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"functionOnly\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"test with only a name provided\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"test with a name and options provided\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"functionAndOptions\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"callback pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback fail\" time=\"*\" classname=\"test\" failure=\"callback failure\">\n        \t\t<failure type=\"testCodeFailure\" message=\"callback failure\">\n        [Error [ERR_TEST_FAILURE]: callback failure] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: callback failure\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback also returns a Promise\" time=\"*\" classname=\"test\" failure=\"passed a callback but also returned a Promise\">\n        \t\t<failure type=\"callbackAndPromisePresent\" message=\"passed a callback but also returned a Promise\">\n        [Error [ERR_TEST_FAILURE]: passed a callback but also returned a Promise] { code: 'ERR_TEST_FAILURE', failureType: 'callbackAndPromisePresent', cause: 'passed a callback but also returned a Promise' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback throw\" time=\"*\" classname=\"test\" failure=\"thrown from callback throw\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from callback throw\">\n        [Error [ERR_TEST_FAILURE]: thrown from callback throw] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from callback throw\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback called twice\" time=\"*\" classname=\"test\" failure=\"callback invoked multiple times\">\n        \t\t<failure type=\"multipleCallbackInvocations\" message=\"callback invoked multiple times\">\n        Error [ERR_TEST_FAILURE]: callback invoked multiple times\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'multipleCallbackInvocations',\n          cause: 'callback invoked multiple times'\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback called twice in different ticks\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback called twice in future tick\" time=\"*\" classname=\"test\" failure=\"callback invoked multiple times\">\n        \t\t<failure type=\"uncaughtException\" message=\"callback invoked multiple times\">\n        Error [ERR_TEST_FAILURE]: callback invoked multiple times\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error [ERR_TEST_FAILURE]: callback invoked multiple times\n              * {\n            code: 'ERR_TEST_FAILURE',\n            failureType: 'multipleCallbackInvocations',\n            cause: 'callback invoked multiple times'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback async throw\" time=\"*\" classname=\"test\" failure=\"thrown from callback async throw\">\n        \t\t<failure type=\"uncaughtException\" message=\"thrown from callback async throw\">\n        Error [ERR_TEST_FAILURE]: thrown from callback async throw\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error: thrown from callback async throw\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback async throw after done\" time=\"*\" classname=\"test\"/>\n        \t<testsuite name=\"only is set but not in only mode\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"4\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"running subtest 1\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"running subtest 2\" time=\"*\" classname=\"test\"/>\n        \t\t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t\t<testcase name=\"running subtest 3\" time=\"*\" classname=\"test\"/>\n        \t\t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t\t<testcase name=\"running subtest 4\" time=\"*\" classname=\"test\"/>\n        \t</testsuite>\n        \t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t<testcase name=\"custom inspect symbol fail\" time=\"*\" classname=\"test\" failure=\"customized\">\n        \t\t<failure type=\"testCodeFailure\" message=\"customized\">\n        [Error [ERR_TEST_FAILURE]: customized] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: customized }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"custom inspect symbol that throws fail\" time=\"*\" classname=\"test\" failure=\"{  foo: 1,  [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]}\">\n        \t\t<failure type=\"testCodeFailure\" message=\"{  foo: 1,  [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]}\">\n        [Error [ERR_TEST_FAILURE]: {\n          foo: 1,\n          [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]\n        }] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: { foo: 1, [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]] }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testsuite name=\"subtest sync throw fails\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"2\" failures=\"2\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"sync throw fails at first\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fails at first\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fails at first\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fails at first\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fails at first\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<testcase name=\"sync throw fails at second\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fails at second\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fails at second\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fails at second\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fails at second\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t</testsuite>\n        \t<testcase name=\"timed out async test\" time=\"*\" classname=\"test\" failure=\"test timed out after 5ms\">\n        \t\t<failure type=\"testTimeoutFailure\" message=\"test timed out after 5ms\">\n        [Error [ERR_TEST_FAILURE]: test timed out after 5ms] { code: 'ERR_TEST_FAILURE', failureType: 'testTimeoutFailure', cause: 'test timed out after 5ms' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"timed out callback test\" time=\"*\" classname=\"test\" failure=\"test timed out after 5ms\">\n        \t\t<failure type=\"testTimeoutFailure\" message=\"test timed out after 5ms\">\n        [Error [ERR_TEST_FAILURE]: test timed out after 5ms] { code: 'ERR_TEST_FAILURE', failureType: 'testTimeoutFailure', cause: 'test timed out after 5ms' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"large timeout async test is ok\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"large timeout callback test is ok\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"successful thenable\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"rejected thenable\" time=\"*\" classname=\"test\" failure=\"custom error\">\n        \t\t<failure type=\"testCodeFailure\" message=\"custom error\">\n        [Error [ERR_TEST_FAILURE]: custom error] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: 'custom error' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unfinished test with uncaughtException\" time=\"*\" classname=\"test\" failure=\"foo\">\n        \t\t<failure type=\"uncaughtException\" message=\"foo\">\n        Error [ERR_TEST_FAILURE]: foo\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error: foo\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unfinished test with unhandledRejection\" time=\"*\" classname=\"test\" failure=\"bar\">\n        \t\t<failure type=\"unhandledRejection\" message=\"bar\">\n        Error [ERR_TEST_FAILURE]: bar\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'unhandledRejection',\n          cause: Error: bar\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"assertion errors display actual and expected properly\" time=\"*\" classname=\"test\" failure=\"Expected values to be loosely deep-equal:{  bar: 1,  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  foo: 1}should loosely deep-equal{  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  circular: &lt;ref *1> {    bar: 2,    c: [Circular *1]  }}\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Expected values to be loosely deep-equal:{  bar: 1,  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  foo: 1}should loosely deep-equal{  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  circular: &lt;ref *1> {    bar: 2,    c: [Circular *1]  }}\">\n        [Error [ERR_TEST_FAILURE]: Expected values to be loosely deep-equal:\n        \n        {\n          bar: 1,\n          baz: {\n            date: 1970-01-01T00:00:00.000Z,\n            null: null,\n            number: 1,\n            string: 'Hello',\n            undefined: undefined\n          },\n          boo: [\n            1\n          ],\n          foo: 1\n        }\n        \n        should loosely deep-equal\n        \n        {\n          baz: {\n            date: 1970-01-01T00:00:00.000Z,\n            null: null,\n            number: 1,\n            string: 'Hello',\n            undefined: undefined\n          },\n          boo: [\n            1\n          ],\n          circular: &lt;ref *1> {\n            bar: 2,\n            c: [Circular *1]\n          }\n        }] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n          \n          {\n            bar: 1,\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            foo: 1\n          }\n          \n          should loosely deep-equal\n          \n          {\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            circular: &lt;ref *1> {\n              bar: 2,\n              c: [Circular *1]\n            }\n          }\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: [Object],\n            expected: [Object],\n            operator: 'deepEqual'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"invalid subtest fail\" time=\"*\" classname=\"test\" failure=\"test could not be started because its parent finished\">\n        \t\t<failure type=\"parentAlreadyFinished\" message=\"test could not be started because its parent finished\">\n        Error [ERR_TEST_FAILURE]: test could not be started because its parent finished\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'parentAlreadyFinished',\n          cause: 'test could not be started because its parent finished'\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<!-- Error: Test \"unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:72:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: Test \"async unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:76:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from async unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: A resource generated asynchronous activity after the test ended. This activity created the error \"Error: uncaught from outside of a test\" which triggered an uncaughtException event, caught by the test runner. -->\n        \t<!-- Error: Test \"immediate throw - passes but warns\" at test/fixtures/test-runner/output/output.js:80:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from immediate throw fail\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- Error: Test \"immediate reject - passes but warns\" at test/fixtures/test-runner/output/output.js:86:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from immediate reject fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: Test \"callback called twice in different ticks\" at test/fixtures/test-runner/output/output.js:251:1 generated asynchronous activity after the test ended. This activity created the error \"Error [ERR_TEST_FAILURE]: callback invoked multiple times\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- Error: Test \"callback async throw after done\" at test/fixtures/test-runner/output/output.js:269:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from callback async throw after done\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- tests 76 -->\n        \t<!-- suites 0 -->\n        \t<!-- pass 35 -->\n        \t<!-- fail 25 -->\n        \t<!-- cancelled 3 -->\n        \t<!-- skipped 9 -->\n        \t<!-- todo 4 -->\n        \t<!-- duration_ms * -->\n        </testsuites>\n        \n      actual: |-\n        <?xml version=\"1.0\" encoding=\"utf-8\"?>\n        <testsuites>\n        \t<testcase name=\"sync pass todo\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"todo\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync pass todo with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"todo\" message=\"this is a passing todo\"/>\n        \t</testcase>\n        \t<testcase name=\"sync fail todo\" time=\"*\" classname=\"test\" failure=\"thrown from sync fail todo\">\n        \t\t<skipped type=\"todo\" message=\"true\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync fail todo\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync fail todo] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync fail todo\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync fail todo with message\" time=\"*\" classname=\"test\" failure=\"thrown from sync fail todo with message\">\n        \t\t<skipped type=\"todo\" message=\"this is a failing todo\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync fail todo with message\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync fail todo with message] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync fail todo with message\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync skip pass\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip pass with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"this is skipped\"/>\n        \t</testcase>\n        \t<testcase name=\"sync pass\" time=\"*\" classname=\"test\"/>\n        \t<!-- this test should pass -->\n        \t<testcase name=\"sync throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from sync throw fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async skip pass\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"async pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from async throw fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from async throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from async throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async skip fail\" time=\"*\" classname=\"test\" failure=\"thrown from async throw fail\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from async throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from async throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async assertion fail\" time=\"*\" classname=\"test\" failure=\"Expected values to be strictly equal:true !== false\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Expected values to be strictly equal:true !== false\">\n        [Error [ERR_TEST_FAILURE]: Expected values to be strictly equal:\n        \n        true !== false\n        ] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n          \n          true !== false\n          \n              *\n              *\n              *\n              *\n              *\n              *\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: true,\n            expected: false,\n            operator: 'strictEqual'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"resolve pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"reject fail\" time=\"*\" classname=\"test\" failure=\"rejected from reject fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"rejected from reject fail\">\n        [Error [ERR_TEST_FAILURE]: rejected from reject fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: rejected from reject fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unhandled rejection - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async unhandled rejection - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate throw - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate reject - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate resolve pass\" time=\"*\" classname=\"test\"/>\n        \t<testsuite name=\"subtest sync throw fail\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"1\" failures=\"1\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"+sync throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fail\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fail\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fail\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<!-- this subtest should make its parent test fail -->\n        \t</testsuite>\n        \t<testcase name=\"sync throw non-error fail\" time=\"*\" classname=\"test\" failure=\"Symbol(thrown symbol from sync throw non-error fail)\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Symbol(thrown symbol from sync throw non-error fail)\">\n        [Error [ERR_TEST_FAILURE]: Symbol(thrown symbol from sync throw non-error fail)] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: Symbol(thrown symbol from sync throw non-error fail) }\n        \t\t</failure>\n        \t</testcase>\n        \t<testsuite name=\"level 0a\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"4\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"level 1a\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1b\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1c\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1d\" time=\"*\" classname=\"test\"/>\n        \t</testsuite>\n        \t<testsuite name=\"top level\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"2\" failures=\"1\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"+long running\" time=\"*\" classname=\"test\" failure=\"test did not finish before its parent and was cancelled\">\n        \t\t\t<failure type=\"cancelledByParent\" message=\"test did not finish before its parent and was cancelled\">\n        [Error [ERR_TEST_FAILURE]: test did not finish before its parent and was cancelled] { code: 'ERR_TEST_FAILURE', failureType: 'cancelledByParent', cause: 'test did not finish before its parent and was cancelled' }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<testsuite name=\"+short running\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"1\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t\t<testcase name=\"++short running\" time=\"*\" classname=\"test\"/>\n        \t\t</testsuite>\n        \t</testsuite>\n        \t<testcase name=\"invalid subtest - pass but subtest fails\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"sync skip option\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip option with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"this is skipped\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip option is false fail\" time=\"*\" classname=\"test\" failure=\"this should be executed\">\n        \t\t<failure type=\"testCodeFailure\" message=\"this should be executed\">\n        [Error [ERR_TEST_FAILURE]: this should be executed] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: this should be executed\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"functionOnly\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"test with only a name provided\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"test with a name and options provided\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"functionAndOptions\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"callback pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback fail\" time=\"*\" classname=\"test\" failure=\"callback failure\">\n        \t\t<failure type=\"testCodeFailure\" message=\"callback failure\">\n        [Error [ERR_TEST_FAILURE]: callback failure] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: callback failure\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback also returns a Promise\" time=\"*\" classname=\"test\" failure=\"passed a callback but also returned a Promise\">\n        \t\t<failure type=\"callbackAndPromisePresent\" message=\"passed a callback but also returned a Promise\">\n        [Error [ERR_TEST_FAILURE]: passed a callback but also returned a Promise] { code: 'ERR_TEST_FAILURE', failureType: 'callbackAndPromisePresent', cause: 'passed a callback but also returned a Promise' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback throw\" time=\"*\" classname=\"test\" failure=\"thrown from callback throw\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from callback throw\">\n        [Error [ERR_TEST_FAILURE]: thrown from callback throw] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from callback throw\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback called twice\" time=\"*\" classname=\"test\" failure=\"callback invoked multiple times\">\n        \t\t<failure type=\"multipleCallbackInvocations\" message=\"callback invoked multiple times\">\n        Error [ERR_TEST_FAILURE]: callback invoked multiple times\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'multipleCallbackInvocations',\n          cause: 'callback invoked multiple times'\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback called twice in different ticks\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback called twice in future tick\" time=\"*\" classname=\"test\" failure=\"callback invoked multiple times\">\n        \t\t<failure type=\"uncaughtException\" message=\"callback invoked multiple times\">\n        Error [ERR_TEST_FAILURE]: callback invoked multiple times\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error [ERR_TEST_FAILURE]: callback invoked multiple times\n              * {\n            code: 'ERR_TEST_FAILURE',\n            failureType: 'multipleCallbackInvocations',\n            cause: 'callback invoked multiple times'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback async throw\" time=\"*\" classname=\"test\" failure=\"thrown from callback async throw\">\n        \t\t<failure type=\"uncaughtException\" message=\"thrown from callback async throw\">\n        Error [ERR_TEST_FAILURE]: thrown from callback async throw\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error: thrown from callback async throw\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback async throw after done\" time=\"*\" classname=\"test\"/>\n        \t<testsuite name=\"only is set but not in only mode\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"4\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"running subtest 1\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"running subtest 2\" time=\"*\" classname=\"test\"/>\n        \t\t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t\t<testcase name=\"running subtest 3\" time=\"*\" classname=\"test\"/>\n        \t\t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t\t<testcase name=\"running subtest 4\" time=\"*\" classname=\"test\"/>\n        \t</testsuite>\n        \t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t<testcase name=\"custom inspect symbol fail\" time=\"*\" classname=\"test\" failure=\"customized\">\n        \t\t<failure type=\"testCodeFailure\" message=\"customized\">\n        [Error [ERR_TEST_FAILURE]: customized] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: customized }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"custom inspect symbol that throws fail\" time=\"*\" classname=\"test\" failure=\"{  foo: 1,  [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]}\">\n        \t\t<failure type=\"testCodeFailure\" message=\"{  foo: 1,  [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]}\">\n        [Error [ERR_TEST_FAILURE]: {\n          foo: 1,\n          [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]\n        }] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: { foo: 1, [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]] }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testsuite name=\"subtest sync throw fails\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"2\" failures=\"2\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"sync throw fails at first\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fails at first\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fails at first\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fails at first\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fails at first\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<testcase name=\"sync throw fails at second\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fails at second\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fails at second\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fails at second\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fails at second\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t</testsuite>\n        \t<testcase name=\"timed out async test\" time=\"*\" classname=\"test\" failure=\"test timed out after 5ms\">\n        \t\t<failure type=\"testTimeoutFailure\" message=\"test timed out after 5ms\">\n        [Error [ERR_TEST_FAILURE]: test timed out after 5ms] { code: 'ERR_TEST_FAILURE', failureType: 'testTimeoutFailure', cause: 'test timed out after 5ms' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"timed out callback test\" time=\"*\" classname=\"test\" failure=\"test timed out after 5ms\">\n        \t\t<failure type=\"testTimeoutFailure\" message=\"test timed out after 5ms\">\n        [Error [ERR_TEST_FAILURE]: test timed out after 5ms] { code: 'ERR_TEST_FAILURE', failureType: 'testTimeoutFailure', cause: 'test timed out after 5ms' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"large timeout async test is ok\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"large timeout callback test is ok\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"successful thenable\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"rejected thenable\" time=\"*\" classname=\"test\" failure=\"custom error\">\n        \t\t<failure type=\"testCodeFailure\" message=\"custom error\">\n        [Error [ERR_TEST_FAILURE]: custom error] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: 'custom error' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unfinished test with uncaughtException\" time=\"*\" classname=\"test\" failure=\"foo\">\n        \t\t<failure type=\"uncaughtException\" message=\"foo\">\n        Error [ERR_TEST_FAILURE]: foo\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error: foo\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unfinished test with unhandledRejection\" time=\"*\" classname=\"test\" failure=\"bar\">\n        \t\t<failure type=\"unhandledRejection\" message=\"bar\">\n        Error [ERR_TEST_FAILURE]: bar\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'unhandledRejection',\n          cause: Error: bar\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"assertion errors display actual and expected properly\" time=\"*\" classname=\"test\" failure=\"Expected values to be loosely deep-equal:{  bar: 1,  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  foo: 1}should loosely deep-equal{  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  circular: &lt;ref *1> {    bar: 2,    c: [Circular *1]  }}\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Expected values to be loosely deep-equal:{  bar: 1,  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  foo: 1}should loosely deep-equal{  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  circular: &lt;ref *1> {    bar: 2,    c: [Circular *1]  }}\">\n        [Error [ERR_TEST_FAILURE]: Expected values to be loosely deep-equal:\n        \n        {\n          bar: 1,\n          baz: {\n            date: 1970-01-01T00:00:00.000Z,\n            null: null,\n            number: 1,\n            string: 'Hello',\n            undefined: undefined\n          },\n          boo: [\n            1\n          ],\n          foo: 1\n        }\n        \n        should loosely deep-equal\n        \n        {\n          baz: {\n            date: 1970-01-01T00:00:00.000Z,\n            null: null,\n            number: 1,\n            string: 'Hello',\n            undefined: undefined\n          },\n          boo: [\n            1\n          ],\n          circular: &lt;ref *1> {\n            bar: 2,\n            c: [Circular *1]\n          }\n        }] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n          \n          {\n            bar: 1,\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            foo: 1\n          }\n          \n          should loosely deep-equal\n          \n          {\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            circular: &lt;ref *1> {\n              bar: 2,\n              c: [Circular *1]\n            }\n          }\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: [Object],\n            expected: [Object],\n            operator: 'deepEqual'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"invalid subtest fail\" time=\"*\" classname=\"test\" failure=\"test could not be started because its parent finished\">\n        \t\t<failure type=\"parentAlreadyFinished\" message=\"test could not be started because its parent finished\">\n        Error [ERR_TEST_FAILURE]: test could not be started because its parent finished\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'parentAlreadyFinished',\n          cause: 'test could not be started because its parent finished'\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<!-- Error: Test \"unhandled rejection - passes but warns\" at test\\fixtures\\test-runner\\output\\output.js:72:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: Test \"async unhandled rejection - passes but warns\" at test\\fixtures\\test-runner\\output\\output.js:76:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from async unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: A resource generated asynchronous activity after the test ended. This activity created the error \"Error: uncaught from outside of a test\" which triggered an uncaughtException event, caught by the test runner. -->\n        \t<!-- Error: Test \"immediate throw - passes but warns\" at test\\fixtures\\test-runner\\output\\output.js:80:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from immediate throw fail\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- Error: Test \"immediate reject - passes but warns\" at test\\fixtures\\test-runner\\output\\output.js:86:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from immediate reject fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: Test \"callback called twice in different ticks\" at test\\fixtures\\test-runner\\output\\output.js:251:1 generated asynchronous activity after the test ended. This activity created the error \"Error [ERR_TEST_FAILURE]: callback invoked multiple times\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- Error: Test \"callback async throw after done\" at test\\fixtures\\test-runner\\output\\output.js:269:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from callback async throw after done\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- tests 76 -->\n        \t<!-- suites 0 -->\n        \t<!-- pass 35 -->\n        \t<!-- fail 25 -->\n        \t<!-- cancelled 3 -->\n        \t<!-- skipped 9 -->\n        \t<!-- todo 4 -->\n        \t<!-- duration_ms * -->\n        </testsuites>\n        \n      operator: 'strictEqual'\n      stack: |-\n        assertSnapshot (c:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:56:12)\n        async Module.spawnAndAssert (c:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:84:3)\n        async TestContext.<anonymous> (file:///c:/workspace/node-test-binary-windows-js-suites/node/test/parallel/test-runner-output.mjs:145:5)\n        async Test.run (node:internal/test_runner/test:736:9)\n        async Promise.all (index 23)\n        async Suite.run (node:internal/test_runner/test:1091:7)\n        async Test.processPendingSubtests (node:internal/test_runner/test:449:7)\n      ...\n    # Subtest: test-runner/output/spec_reporter_successful.js\n    ok 25 - test-runner/output/spec_reporter_successful.js\n      ---\n      duration_ms: 1692.3981\n      ...\n    # Subtest: test-runner/output/spec_reporter.js\n    not ok 26 - test-runner/output/spec_reporter.js\n      ---\n      duration_ms: 3410.8554\n      location: 'c:\\\\workspace\\\\node-test-binary-windows-js-suites\\\\node\\\\test\\\\parallel\\\\test-runner-output.mjs:151:5'\n      failureType: 'testCodeFailure'\n      error: |-\n        Expected values to be strictly equal:\n        + actual - expected ... Lines skipped\n        \n          ' sync pass todo (*ms) # TODO\\n' +\n            ' sync pass todo with message (*ms) # this is a passing todo\\n' +\n        ...\n            \"  'test could not be started because its parent finished'\\n\" +\n            '\\n' +\n        +   ' Error: Test \"unhandled rejection - passes but warns\" at test\\\\fixtures\\\\test-runner\\\\output\\\\output.js:72:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\\n' +\n        +   ' Error: Test \"async unhandled rejection - passes but warns\" at test\\\\fixtures\\\\test-runner\\\\output\\\\output.js:76:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from async unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\\n' +\n        -   ' Error: Test \"unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:72:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\\n' +\n        -   ' Error: Test \"async unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:76:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from async unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\\n' +\n            ' Error: A resource generated asynchronous activity after the test ended. This activity created the error \"Error: uncaught from outside of a test\" which triggered an uncaughtException event, caught by the test runner.\\n' +\n        +   ' Error: Test \"immediate throw - passes but warns\" at test\\\\fixtures\\\\test-runner\\\\output\\\\output.js:80:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from immediate throw fail\" and would have caused the test to fail, but instead triggered an uncaughtException event.\\n' +\n        +   ' Error: Test \"immediate reject - passes but warns\" at test\\\\fixtures\\\\test-runner\\\\output\\\\output.js:86:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from immediate reject fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\\n' +\n        +   ' Error: Test \"callback called twice in different ticks\" at test\\\\fixtures\\\\test-runner\\\\output\\\\output.js:251:1 generated asynchronous activity after the test ended. This activity created the error \"Error [ERR_TEST_FAILURE]: callback invoked multiple times\" and would have caused the test to fail, but instead triggered an uncaughtException event.\\n' +\n        +   ' Error: Test \"callback async throw after done\" at test\\\\fixtures\\\\test-runner\\\\output\\\\output.js:269:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from callback async throw after done\" and would have caused the test to fail, but instead triggered an uncaughtException event.\\n' +\n        -   ' Error: Test \"immediate throw - passes but warns\" at test/fixtures/test-runner/output/output.js:80:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from immediate throw fail\" and would have caused the test to fail, but instead triggered an uncaughtException event.\\n' +\n        -   ' Error: Test \"immediate reject - passes but warns\" at test/fixtures/test-runner/output/output.js:86:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from immediate reject fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\\n' +\n        -   ' Error: Test \"callback called twice in different ticks\" at test/fixtures/test-runner/output/output.js:251:1 generated asynchronous activity after the test ended. This activity created the error \"Error [ERR_TEST_FAILURE]: callback invoked multiple times\" and would have caused the test to fail, but instead triggered an uncaughtException event.\\n' +\n        -   ' Error: Test \"callback async throw after done\" at test/fixtures/test-runner/output/output.js:269:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from callback async throw after done\" and would have caused the test to fail, but instead triggered an uncaughtException event.\\n' +\n            ' tests 76\\n' +\n        ...\n            '*\\n' +\n            ' callback called twice (*ms)\\n' +\n            '  '... 2076 more characters\n      code: 'ERR_ASSERTION'\n      name: 'AssertionError'\n      expected: |-\n         sync pass todo (*ms) # TODO\n         sync pass todo with message (*ms) # this is a passing todo\n         sync fail todo (*ms) # TODO\n          Error: thrown from sync fail todo\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         sync fail todo with message (*ms) # this is a failing todo\n          Error: thrown from sync fail todo with message\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         sync skip pass (*ms) # SKIP\n         sync skip pass with message (*ms) # this is skipped\n         sync pass (*ms)\n         this test should pass\n         sync throw fail (*ms)\n          Error: thrown from sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         async skip pass (*ms) # SKIP\n         async pass (*ms)\n         async throw fail (*ms)\n          Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         async skip fail (*ms) # SKIP\n          Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         async assertion fail (*ms)\n          AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n          \n          true !== false\n          \n              *\n              *\n              *\n              *\n              *\n              *\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: true,\n            expected: false,\n            operator: 'strictEqual'\n          }\n        \n         resolve pass (*ms)\n         reject fail (*ms)\n          Error: rejected from reject fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         unhandled rejection - passes but warns (*ms)\n         async unhandled rejection - passes but warns (*ms)\n         immediate throw - passes but warns (*ms)\n         immediate reject - passes but warns (*ms)\n         immediate resolve pass (*ms)\n         subtest sync throw fail\n           +sync throw fail (*ms)\n            Error: thrown from subtest sync throw fail\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n        \n           this subtest should make its parent test fail\n         subtest sync throw fail (*ms)\n         sync throw non-error fail (*ms)\n          Symbol(thrown symbol from sync throw non-error fail)\n        \n         level 0a\n           level 1a (*ms)\n           level 1b (*ms)\n           level 1c (*ms)\n           level 1d (*ms)\n         level 0a (*ms)\n         top level\n           +long running (*ms)\n            'test did not finish before its parent and was cancelled'\n        \n           +short running\n             ++short running (*ms)\n           +short running (*ms)\n         top level (*ms)\n         invalid subtest - pass but subtest fails (*ms)\n         sync skip option (*ms) # SKIP\n         sync skip option with message (*ms) # this is skipped\n         sync skip option is false fail (*ms)\n          Error: this should be executed\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         <anonymous> (*ms)\n         functionOnly (*ms)\n         <anonymous> (*ms)\n         test with only a name provided (*ms)\n         <anonymous> (*ms)\n         <anonymous> (*ms) # SKIP\n         test with a name and options provided (*ms) # SKIP\n         functionAndOptions (*ms) # SKIP\n         callback pass (*ms)\n         callback fail (*ms)\n          Error: callback failure\n              *\n              *\n        \n         sync t is this in test (*ms)\n         async t is this in test (*ms)\n         callback t is this in test (*ms)\n         callback also returns a Promise (*ms)\n          'passed a callback but also returned a Promise'\n        \n         callback throw (*ms)\n          Error: thrown from callback throw\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         callback called twice (*ms)\n          'callback invoked multiple times'\n        \n         callback called twice in different ticks (*ms)\n         callback called twice in future tick (*ms)\n          Error [ERR_TEST_FAILURE]: callback invoked multiple times\n              * {\n            code: 'ERR_TEST_FAILURE',\n            failureType: 'multipleCallbackInvocations',\n            cause: 'callback invoked multiple times'\n          }\n        \n         callback async throw (*ms)\n          Error: thrown from callback async throw\n              *\n              *\n        \n         callback async throw after done (*ms)\n         only is set but not in only mode\n           running subtest 1 (*ms)\n           running subtest 2 (*ms)\n           'only' and 'runOnly' require the --test-only command-line option.\n           running subtest 3 (*ms)\n           'only' and 'runOnly' require the --test-only command-line option.\n           running subtest 4 (*ms)\n         only is set but not in only mode (*ms)\n         'only' and 'runOnly' require the --test-only command-line option.\n         custom inspect symbol fail (*ms)\n          customized\n        \n         custom inspect symbol that throws fail (*ms)\n          { foo: 1, [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]] }\n        \n         subtest sync throw fails\n           sync throw fails at first (*ms)\n            Error: thrown from subtest sync throw fails at first\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n        \n           sync throw fails at second (*ms)\n            Error: thrown from subtest sync throw fails at second\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n        \n         subtest sync throw fails (*ms)\n         timed out async test (*ms)\n          'test timed out after *ms'\n        \n         timed out callback test (*ms)\n          'test timed out after *ms'\n        \n         large timeout async test is ok (*ms)\n         large timeout callback test is ok (*ms)\n         successful thenable (*ms)\n         rejected thenable (*ms)\n          'custom error'\n        \n         unfinished test with uncaughtException (*ms)\n          Error: foo\n              *\n              *\n              *\n        \n         unfinished test with unhandledRejection (*ms)\n          Error: bar\n              *\n              *\n              *\n        \n         assertion errors display actual and expected properly (*ms)\n          AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n          \n          {\n            bar: 1,\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            foo: 1\n          }\n          \n          should loosely deep-equal\n          \n          {\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            circular: <ref *1> {\n              bar: 2,\n              c: [Circular *1]\n            }\n          }\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: [Object],\n            expected: [Object],\n            operator: 'deepEqual'\n          }\n        \n         invalid subtest fail (*ms)\n          'test could not be started because its parent finished'\n        \n         Error: Test \"unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:72:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\n         Error: Test \"async unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:76:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from async unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\n         Error: A resource generated asynchronous activity after the test ended. This activity created the error \"Error: uncaught from outside of a test\" which triggered an uncaughtException event, caught by the test runner.\n         Error: Test \"immediate throw - passes but warns\" at test/fixtures/test-runner/output/output.js:80:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from immediate throw fail\" and would have caused the test to fail, but instead triggered an uncaughtException event.\n         Error: Test \"immediate reject - passes but warns\" at test/fixtures/test-runner/output/output.js:86:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from immediate reject fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\n         Error: Test \"callback called twice in different ticks\" at test/fixtures/test-runner/output/output.js:251:1 generated asynchronous activity after the test ended. This activity created the error \"Error [ERR_TEST_FAILURE]: callback invoked multiple times\" and would have caused the test to fail, but instead triggered an uncaughtException event.\n         Error: Test \"callback async throw after done\" at test/fixtures/test-runner/output/output.js:269:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from callback async throw after done\" and would have caused the test to fail, but instead triggered an uncaughtException event.\n         tests 76\n         suites 0\n         pass 35\n         fail 25\n         cancelled 3\n         skipped 9\n         todo 4\n         duration_ms *\n        \n         failing tests:\n        \n        *\n         sync fail todo (*ms) # TODO\n          Error: thrown from sync fail todo\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         sync fail todo with message (*ms) # this is a failing todo\n          Error: thrown from sync fail todo with message\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         sync throw fail (*ms)\n          Error: thrown from sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         async throw fail (*ms)\n          Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         async skip fail (*ms) # SKIP\n          Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         async assertion fail (*ms)\n          AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n          \n          true !== false\n          \n              *\n              *\n              *\n              *\n              *\n              *\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: true,\n            expected: false,\n            operator: 'strictEqual'\n          }\n        \n        *\n         reject fail (*ms)\n          Error: rejected from reject fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         +sync throw fail (*ms)\n          Error: thrown from subtest sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         sync throw non-error fail (*ms)\n          Symbol(thrown symbol from sync throw non-error fail)\n        \n        *\n         +long running (*ms)\n          'test did not finish before its parent and was cancelled'\n        \n        *\n         sync skip option is false fail (*ms)\n          Error: this should be executed\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         callback fail (*ms)\n          Error: callback failure\n              *\n              *\n        \n        *\n         callback also returns a Promise (*ms)\n          'passed a callback but also returned a Promise'\n        \n        *\n         callback throw (*ms)\n          Error: thrown from callback throw\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         callback called twice (*ms)\n          'callback invoked multiple times'\n        \n        *\n         callback called twice in future tick (*ms)\n          Error [ERR_TEST_FAILURE]: callback invoked multiple times\n              * {\n            code: 'ERR_TEST_FAILURE',\n            failureType: 'multipleCallbackInvocations',\n            cause: 'callback invoked multiple times'\n          }\n        \n        *\n         callback async throw (*ms)\n          Error: thrown from callback async throw\n              *\n              *\n        \n        *\n         custom inspect symbol fail (*ms)\n          customized\n        \n        *\n         custom inspect symbol that throws fail (*ms)\n          { foo: 1, [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]] }\n        \n        *\n         sync throw fails at first (*ms)\n          Error: thrown from subtest sync throw fails at first\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         sync throw fails at second (*ms)\n          Error: thrown from subtest sync throw fails at second\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         timed out async test (*ms)\n          'test timed out after *ms'\n        \n        *\n         timed out callback test (*ms)\n          'test timed out after *ms'\n        \n        *\n         rejected thenable (*ms)\n          'custom error'\n        \n        *\n         unfinished test with uncaughtException (*ms)\n          Error: foo\n              *\n              *\n              *\n        \n        *\n         unfinished test with unhandledRejection (*ms)\n          Error: bar\n              *\n              *\n              *\n        \n        *\n         assertion errors display actual and expected properly (*ms)\n          AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n          \n          {\n            bar: 1,\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            foo: 1\n          }\n          \n          should loosely deep-equal\n          \n          {\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            circular: <ref *1> {\n              bar: 2,\n              c: [Circular *1]\n            }\n          }\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: [Object],\n            expected: [Object],\n            operator: 'deepEqual'\n          }\n        \n        *\n         invalid subtest fail (*ms)\n          'test could not be started because its parent finished'\n        \n      actual: |-\n         sync pass todo (*ms) # TODO\n         sync pass todo with message (*ms) # this is a passing todo\n         sync fail todo (*ms) # TODO\n          Error: thrown from sync fail todo\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         sync fail todo with message (*ms) # this is a failing todo\n          Error: thrown from sync fail todo with message\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         sync skip pass (*ms) # SKIP\n         sync skip pass with message (*ms) # this is skipped\n         sync pass (*ms)\n         this test should pass\n         sync throw fail (*ms)\n          Error: thrown from sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         async skip pass (*ms) # SKIP\n         async pass (*ms)\n         async throw fail (*ms)\n          Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         async skip fail (*ms) # SKIP\n          Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         async assertion fail (*ms)\n          AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n          \n          true !== false\n          \n              *\n              *\n              *\n              *\n              *\n              *\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: true,\n            expected: false,\n            operator: 'strictEqual'\n          }\n        \n         resolve pass (*ms)\n         reject fail (*ms)\n          Error: rejected from reject fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         unhandled rejection - passes but warns (*ms)\n         async unhandled rejection - passes but warns (*ms)\n         immediate throw - passes but warns (*ms)\n         immediate reject - passes but warns (*ms)\n         immediate resolve pass (*ms)\n         subtest sync throw fail\n           +sync throw fail (*ms)\n            Error: thrown from subtest sync throw fail\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n        \n           this subtest should make its parent test fail\n         subtest sync throw fail (*ms)\n         sync throw non-error fail (*ms)\n          Symbol(thrown symbol from sync throw non-error fail)\n        \n         level 0a\n           level 1a (*ms)\n           level 1b (*ms)\n           level 1c (*ms)\n           level 1d (*ms)\n         level 0a (*ms)\n         top level\n           +long running (*ms)\n            'test did not finish before its parent and was cancelled'\n        \n           +short running\n             ++short running (*ms)\n           +short running (*ms)\n         top level (*ms)\n         invalid subtest - pass but subtest fails (*ms)\n         sync skip option (*ms) # SKIP\n         sync skip option with message (*ms) # this is skipped\n         sync skip option is false fail (*ms)\n          Error: this should be executed\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         <anonymous> (*ms)\n         functionOnly (*ms)\n         <anonymous> (*ms)\n         test with only a name provided (*ms)\n         <anonymous> (*ms)\n         <anonymous> (*ms) # SKIP\n         test with a name and options provided (*ms) # SKIP\n         functionAndOptions (*ms) # SKIP\n         callback pass (*ms)\n         callback fail (*ms)\n          Error: callback failure\n              *\n              *\n        \n         sync t is this in test (*ms)\n         async t is this in test (*ms)\n         callback t is this in test (*ms)\n         callback also returns a Promise (*ms)\n          'passed a callback but also returned a Promise'\n        \n         callback throw (*ms)\n          Error: thrown from callback throw\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         callback called twice (*ms)\n          'callback invoked multiple times'\n        \n         callback called twice in different ticks (*ms)\n         callback called twice in future tick (*ms)\n          Error [ERR_TEST_FAILURE]: callback invoked multiple times\n              * {\n            code: 'ERR_TEST_FAILURE',\n            failureType: 'multipleCallbackInvocations',\n            cause: 'callback invoked multiple times'\n          }\n        \n         callback async throw (*ms)\n          Error: thrown from callback async throw\n              *\n              *\n        \n         callback async throw after done (*ms)\n         only is set but not in only mode\n           running subtest 1 (*ms)\n           running subtest 2 (*ms)\n           'only' and 'runOnly' require the --test-only command-line option.\n           running subtest 3 (*ms)\n           'only' and 'runOnly' require the --test-only command-line option.\n           running subtest 4 (*ms)\n         only is set but not in only mode (*ms)\n         'only' and 'runOnly' require the --test-only command-line option.\n         custom inspect symbol fail (*ms)\n          customized\n        \n         custom inspect symbol that throws fail (*ms)\n          { foo: 1, [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]] }\n        \n         subtest sync throw fails\n           sync throw fails at first (*ms)\n            Error: thrown from subtest sync throw fails at first\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n        \n           sync throw fails at second (*ms)\n            Error: thrown from subtest sync throw fails at second\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n        \n         subtest sync throw fails (*ms)\n         timed out async test (*ms)\n          'test timed out after *ms'\n        \n         timed out callback test (*ms)\n          'test timed out after *ms'\n        \n         large timeout async test is ok (*ms)\n         large timeout callback test is ok (*ms)\n         successful thenable (*ms)\n         rejected thenable (*ms)\n          'custom error'\n        \n         unfinished test with uncaughtException (*ms)\n          Error: foo\n              *\n              *\n              *\n        \n         unfinished test with unhandledRejection (*ms)\n          Error: bar\n              *\n              *\n              *\n        \n         assertion errors display actual and expected properly (*ms)\n          AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n          \n          {\n            bar: 1,\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            foo: 1\n          }\n          \n          should loosely deep-equal\n          \n          {\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            circular: <ref *1> {\n              bar: 2,\n              c: [Circular *1]\n            }\n          }\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: [Object],\n            expected: [Object],\n            operator: 'deepEqual'\n          }\n        \n         invalid subtest fail (*ms)\n          'test could not be started because its parent finished'\n        \n         Error: Test \"unhandled rejection - passes but warns\" at test\\fixtures\\test-runner\\output\\output.js:72:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\n         Error: Test \"async unhandled rejection - passes but warns\" at test\\fixtures\\test-runner\\output\\output.js:76:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from async unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\n         Error: A resource generated asynchronous activity after the test ended. This activity created the error \"Error: uncaught from outside of a test\" which triggered an uncaughtException event, caught by the test runner.\n         Error: Test \"immediate throw - passes but warns\" at test\\fixtures\\test-runner\\output\\output.js:80:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from immediate throw fail\" and would have caused the test to fail, but instead triggered an uncaughtException event.\n         Error: Test \"immediate reject - passes but warns\" at test\\fixtures\\test-runner\\output\\output.js:86:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from immediate reject fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\n         Error: Test \"callback called twice in different ticks\" at test\\fixtures\\test-runner\\output\\output.js:251:1 generated asynchronous activity after the test ended. This activity created the error \"Error [ERR_TEST_FAILURE]: callback invoked multiple times\" and would have caused the test to fail, but instead triggered an uncaughtException event.\n         Error: Test \"callback async throw after done\" at test\\fixtures\\test-runner\\output\\output.js:269:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from callback async throw after done\" and would have caused the test to fail, but instead triggered an uncaughtException event.\n         tests 76\n         suites 0\n         pass 35\n         fail 25\n         cancelled 3\n         skipped 9\n         todo 4\n         duration_ms *\n        \n         failing tests:\n        \n        *\n         sync fail todo (*ms) # TODO\n          Error: thrown from sync fail todo\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         sync fail todo with message (*ms) # this is a failing todo\n          Error: thrown from sync fail todo with message\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         sync throw fail (*ms)\n          Error: thrown from sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         async throw fail (*ms)\n          Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         async skip fail (*ms) # SKIP\n          Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         async assertion fail (*ms)\n          AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n          \n          true !== false\n          \n              *\n              *\n              *\n              *\n              *\n              *\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: true,\n            expected: false,\n            operator: 'strictEqual'\n          }\n        \n        *\n         reject fail (*ms)\n          Error: rejected from reject fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         +sync throw fail (*ms)\n          Error: thrown from subtest sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         sync throw non-error fail (*ms)\n          Symbol(thrown symbol from sync throw non-error fail)\n        \n        *\n         +long running (*ms)\n          'test did not finish before its parent and was cancelled'\n        \n        *\n         sync skip option is false fail (*ms)\n          Error: this should be executed\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         callback fail (*ms)\n          Error: callback failure\n              *\n              *\n        \n        *\n         callback also returns a Promise (*ms)\n          'passed a callback but also returned a Promise'\n        \n        *\n         callback throw (*ms)\n          Error: thrown from callback throw\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         callback called twice (*ms)\n          'callback invoked multiple times'\n        \n        *\n         callback called twice in future tick (*ms)\n          Error [ERR_TEST_FAILURE]: callback invoked multiple times\n              * {\n            code: 'ERR_TEST_FAILURE',\n            failureType: 'multipleCallbackInvocations',\n            cause: 'callback invoked multiple times'\n          }\n        \n        *\n         callback async throw (*ms)\n          Error: thrown from callback async throw\n              *\n              *\n        \n        *\n         custom inspect symbol fail (*ms)\n          customized\n        \n        *\n         custom inspect symbol that throws fail (*ms)\n          { foo: 1, [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]] }\n        \n        *\n         sync throw fails at first (*ms)\n          Error: thrown from subtest sync throw fails at first\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         sync throw fails at second (*ms)\n          Error: thrown from subtest sync throw fails at second\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         timed out async test (*ms)\n          'test timed out after *ms'\n        \n        *\n         timed out callback test (*ms)\n          'test timed out after *ms'\n        \n        *\n         rejected thenable (*ms)\n          'custom error'\n        \n        *\n         unfinished test with uncaughtException (*ms)\n          Error: foo\n              *\n              *\n              *\n        \n        *\n         unfinished test with unhandledRejection (*ms)\n          Error: bar\n              *\n              *\n              *\n        \n        *\n         assertion errors display actual and expected properly (*ms)\n          AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n          \n          {\n            bar: 1,\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            foo: 1\n          }\n          \n          should loosely deep-equal\n          \n          {\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            circular: <ref *1> {\n              bar: 2,\n              c: [Circular *1]\n            }\n          }\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: [Object],\n            expected: [Object],\n            operator: 'deepEqual'\n          }\n        \n        *\n         invalid subtest fail (*ms)\n          'test could not be started because its parent finished'\n        \n      operator: 'strictEqual'\n      stack: |-\n        assertSnapshot (c:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:56:12)\n        async Module.spawnAndAssert (c:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:84:3)\n        async TestContext.<anonymous> (file:///c:/workspace/node-test-binary-windows-js-suites/node/test/parallel/test-runner-output.mjs:145:5)\n        async Test.run (node:internal/test_runner/test:736:9)\n        async Promise.all (index 25)\n        async Suite.run (node:internal/test_runner/test:1091:7)\n        async Test.processPendingSubtests (node:internal/test_runner/test:449:7)\n      ...\n    # Subtest: test-runner/output/spec_reporter_cli.js\n    not ok 27 - test-runner/output/spec_reporter_cli.js\n      ---\n      duration_ms: 3734.8947\n      location: 'c:\\\\workspace\\\\node-test-binary-windows-js-suites\\\\node\\\\test\\\\parallel\\\\test-runner-output.mjs:151:5'\n      failureType: 'testCodeFailure'\n      error: |-\n        Expected values to be strictly equal:\n        + actual - expected ... Lines skipped\n        \n          ' sync pass todo (*ms) # TODO\\n' +\n            ' sync pass todo with message (*ms) # this is a passing todo\\n' +\n        ...\n            \"  'test could not be started because its parent finished'\\n\" +\n            '\\n' +\n        +   ' Error: Test \"unhandled rejection - passes but warns\" at test\\\\fixtures\\\\test-runner\\\\output\\\\output.js:72:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\\n' +\n        +   ' Error: Test \"async unhandled rejection - passes but warns\" at test\\\\fixtures\\\\test-runner\\\\output\\\\output.js:76:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from async unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\\n' +\n        -   ' Error: Test \"unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:72:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\\n' +\n        -   ' Error: Test \"async unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:76:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from async unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\\n' +\n            ' Error: A resource generated asynchronous activity after the test ended. This activity created the error \"Error: uncaught from outside of a test\" which triggered an uncaughtException event, caught by the test runner.\\n' +\n        +   ' Error: Test \"immediate throw - passes but warns\" at test\\\\fixtures\\\\test-runner\\\\output\\\\output.js:80:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from immediate throw fail\" and would have caused the test to fail, but instead triggered an uncaughtException event.\\n' +\n        +   ' Error: Test \"immediate reject - passes but warns\" at test\\\\fixtures\\\\test-runner\\\\output\\\\output.js:86:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from immediate reject fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\\n' +\n        +   ' Error: Test \"callback called twice in different ticks\" at test\\\\fixtures\\\\test-runner\\\\output\\\\output.js:251:1 generated asynchronous activity after the test ended. This activity created the error \"Error [ERR_TEST_FAILURE]: callback invoked multiple times\" and would have caused the test to fail, but instead triggered an uncaughtException event.\\n' +\n        +   ' Error: Test \"callback async throw after done\" at test\\\\fixtures\\\\test-runner\\\\output\\\\output.js:269:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from callback async throw after done\" and would have caused the test to fail, but instead triggered an uncaughtException event.\\n' +\n        -   ' Error: Test \"immediate throw - passes but warns\" at test/fixtures/test-runner/output/output.js:80:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from immediate throw fail\" and would have caused the test to fail, but instead triggered an uncaughtException event.\\n' +\n        -   ' Error: Test \"immediate reject - passes but warns\" at test/fixtures/test-runner/output/output.js:86:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from immediate reject fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\\n' +\n        -   ' Error: Test \"callback called twice in different ticks\" at test/fixtures/test-runner/output/output.js:251:1 generated asynchronous activity after the test ended. This activity created the error \"Error [ERR_TEST_FAILURE]: callback invoked multiple times\" and would have caused the test to fail, but instead triggered an uncaughtException event.\\n' +\n        -   ' Error: Test \"callback async throw after done\" at test/fixtures/test-runner/output/output.js:269:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from callback async throw after done\" and would have caused the test to fail, but instead triggered an uncaughtException event.\\n' +\n            ' tests 76\\n' +\n        ...\n            '\\n' +\n            '*\\n' +\n            ' callback also returns a Promise (*ms'... 2482 more characters\n      code: 'ERR_ASSERTION'\n      name: 'AssertionError'\n      expected: |-\n         sync pass todo (*ms) # TODO\n         sync pass todo with message (*ms) # this is a passing todo\n         sync fail todo (*ms) # TODO\n          Error: thrown from sync fail todo\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         sync fail todo with message (*ms) # this is a failing todo\n          Error: thrown from sync fail todo with message\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         sync skip pass (*ms) # SKIP\n         sync skip pass with message (*ms) # this is skipped\n         sync pass (*ms)\n         this test should pass\n         sync throw fail (*ms)\n          Error: thrown from sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         async skip pass (*ms) # SKIP\n         async pass (*ms)\n         async throw fail (*ms)\n          Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         async skip fail (*ms) # SKIP\n          Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         async assertion fail (*ms)\n          AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n          \n          true !== false\n          \n              *\n              *\n              *\n              *\n              *\n              *\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: true,\n            expected: false,\n            operator: 'strictEqual'\n          }\n        \n         resolve pass (*ms)\n         reject fail (*ms)\n          Error: rejected from reject fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         unhandled rejection - passes but warns (*ms)\n         async unhandled rejection - passes but warns (*ms)\n         immediate throw - passes but warns (*ms)\n         immediate reject - passes but warns (*ms)\n         immediate resolve pass (*ms)\n         subtest sync throw fail\n           +sync throw fail (*ms)\n            Error: thrown from subtest sync throw fail\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n        \n           this subtest should make its parent test fail\n         subtest sync throw fail (*ms)\n         sync throw non-error fail (*ms)\n          Symbol(thrown symbol from sync throw non-error fail)\n        \n         level 0a\n           level 1a (*ms)\n           level 1b (*ms)\n           level 1c (*ms)\n           level 1d (*ms)\n         level 0a (*ms)\n         top level\n           +long running (*ms)\n            'test did not finish before its parent and was cancelled'\n        \n           +short running\n             ++short running (*ms)\n           +short running (*ms)\n         top level (*ms)\n         invalid subtest - pass but subtest fails (*ms)\n         sync skip option (*ms) # SKIP\n         sync skip option with message (*ms) # this is skipped\n         sync skip option is false fail (*ms)\n          Error: this should be executed\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         <anonymous> (*ms)\n         functionOnly (*ms)\n         <anonymous> (*ms)\n         test with only a name provided (*ms)\n         <anonymous> (*ms)\n         <anonymous> (*ms) # SKIP\n         test with a name and options provided (*ms) # SKIP\n         functionAndOptions (*ms) # SKIP\n         callback pass (*ms)\n         callback fail (*ms)\n          Error: callback failure\n              *\n              *\n        \n         sync t is this in test (*ms)\n         async t is this in test (*ms)\n         callback t is this in test (*ms)\n         callback also returns a Promise (*ms)\n          'passed a callback but also returned a Promise'\n        \n         callback throw (*ms)\n          Error: thrown from callback throw\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         callback called twice (*ms)\n          'callback invoked multiple times'\n        \n         callback called twice in different ticks (*ms)\n         callback called twice in future tick (*ms)\n          Error [ERR_TEST_FAILURE]: callback invoked multiple times\n              * {\n            code: 'ERR_TEST_FAILURE',\n            failureType: 'multipleCallbackInvocations',\n            cause: 'callback invoked multiple times'\n          }\n        \n         callback async throw (*ms)\n          Error: thrown from callback async throw\n              *\n              *\n        \n         callback async throw after done (*ms)\n         only is set but not in only mode\n           running subtest 1 (*ms)\n           running subtest 2 (*ms)\n           'only' and 'runOnly' require the --test-only command-line option.\n           running subtest 3 (*ms)\n           'only' and 'runOnly' require the --test-only command-line option.\n           running subtest 4 (*ms)\n         only is set but not in only mode (*ms)\n         'only' and 'runOnly' require the --test-only command-line option.\n         custom inspect symbol fail (*ms)\n          customized\n        \n         custom inspect symbol that throws fail (*ms)\n          { foo: 1 }\n        \n         subtest sync throw fails\n           sync throw fails at first (*ms)\n            Error: thrown from subtest sync throw fails at first\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n        \n           sync throw fails at second (*ms)\n            Error: thrown from subtest sync throw fails at second\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n        \n         subtest sync throw fails (*ms)\n         timed out async test (*ms)\n          'test timed out after *ms'\n        \n         timed out callback test (*ms)\n          'test timed out after *ms'\n        \n         large timeout async test is ok (*ms)\n         large timeout callback test is ok (*ms)\n         successful thenable (*ms)\n         rejected thenable (*ms)\n          'custom error'\n        \n         unfinished test with uncaughtException (*ms)\n          Error: foo\n              *\n              *\n              *\n        \n         unfinished test with unhandledRejection (*ms)\n          Error: bar\n              *\n              *\n              *\n        \n         assertion errors display actual and expected properly (*ms)\n          AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n          \n          {\n            bar: 1,\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            foo: 1\n          }\n          \n          should loosely deep-equal\n          \n          {\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            circular: <ref *1> {\n              bar: 2,\n              c: [Circular *1]\n            }\n          }\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: { foo: 1, bar: 1, boo: [ 1 ], baz: { date: 1970-01-01T00:00:00.000Z, null: null, number: 1, string: 'Hello', undefined: undefined } },\n            expected: { boo: [ 1 ], baz: { date: 1970-01-01T00:00:00.000Z, null: null, number: 1, string: 'Hello', undefined: undefined }, circular: <ref *1> { bar: 2, c: [Circular *1] } },\n            operator: 'deepEqual'\n          }\n        \n         invalid subtest fail (*ms)\n          'test could not be started because its parent finished'\n        \n         Error: Test \"unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:72:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\n         Error: Test \"async unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:76:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from async unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\n         Error: A resource generated asynchronous activity after the test ended. This activity created the error \"Error: uncaught from outside of a test\" which triggered an uncaughtException event, caught by the test runner.\n         Error: Test \"immediate throw - passes but warns\" at test/fixtures/test-runner/output/output.js:80:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from immediate throw fail\" and would have caused the test to fail, but instead triggered an uncaughtException event.\n         Error: Test \"immediate reject - passes but warns\" at test/fixtures/test-runner/output/output.js:86:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from immediate reject fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\n         Error: Test \"callback called twice in different ticks\" at test/fixtures/test-runner/output/output.js:251:1 generated asynchronous activity after the test ended. This activity created the error \"Error [ERR_TEST_FAILURE]: callback invoked multiple times\" and would have caused the test to fail, but instead triggered an uncaughtException event.\n         Error: Test \"callback async throw after done\" at test/fixtures/test-runner/output/output.js:269:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from callback async throw after done\" and would have caused the test to fail, but instead triggered an uncaughtException event.\n         tests 76\n         suites 0\n         pass 35\n         fail 25\n         cancelled 3\n         skipped 9\n         todo 4\n         duration_ms *\n        \n         failing tests:\n        \n        *\n         sync fail todo (*ms) # TODO\n          Error: thrown from sync fail todo\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         sync fail todo with message (*ms) # this is a failing todo\n          Error: thrown from sync fail todo with message\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         sync throw fail (*ms)\n          Error: thrown from sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         async throw fail (*ms)\n          Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         async skip fail (*ms) # SKIP\n          Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         async assertion fail (*ms)\n          AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n          \n          true !== false\n          \n              *\n              *\n              *\n              *\n              *\n              *\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: true,\n            expected: false,\n            operator: 'strictEqual'\n          }\n        \n        *\n         reject fail (*ms)\n          Error: rejected from reject fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         +sync throw fail (*ms)\n          Error: thrown from subtest sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         sync throw non-error fail (*ms)\n          Symbol(thrown symbol from sync throw non-error fail)\n        \n        *\n         +long running (*ms)\n          'test did not finish before its parent and was cancelled'\n        \n        *\n         sync skip option is false fail (*ms)\n          Error: this should be executed\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         callback fail (*ms)\n          Error: callback failure\n              *\n              *\n        \n        *\n         callback also returns a Promise (*ms)\n          'passed a callback but also returned a Promise'\n        \n        *\n         callback throw (*ms)\n          Error: thrown from callback throw\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         callback called twice (*ms)\n          'callback invoked multiple times'\n        \n        *\n         callback called twice in future tick (*ms)\n          Error [ERR_TEST_FAILURE]: callback invoked multiple times\n              * {\n            code: 'ERR_TEST_FAILURE',\n            failureType: 'multipleCallbackInvocations',\n            cause: 'callback invoked multiple times'\n          }\n        \n        *\n         callback async throw (*ms)\n          Error: thrown from callback async throw\n              *\n              *\n        \n        *\n         custom inspect symbol fail (*ms)\n          customized\n        \n        *\n         custom inspect symbol that throws fail (*ms)\n          { foo: 1 }\n        \n        *\n         sync throw fails at first (*ms)\n          Error: thrown from subtest sync throw fails at first\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         sync throw fails at second (*ms)\n          Error: thrown from subtest sync throw fails at second\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         timed out async test (*ms)\n          'test timed out after *ms'\n        \n        *\n         timed out callback test (*ms)\n          'test timed out after *ms'\n        \n        *\n         rejected thenable (*ms)\n          'custom error'\n        \n        *\n         unfinished test with uncaughtException (*ms)\n          Error: foo\n              *\n              *\n              *\n        \n        *\n         unfinished test with unhandledRejection (*ms)\n          Error: bar\n              *\n              *\n              *\n        \n        *\n         assertion errors display actual and expected properly (*ms)\n          AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n          \n          {\n            bar: 1,\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            foo: 1\n          }\n          \n          should loosely deep-equal\n          \n          {\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            circular: <ref *1> {\n              bar: 2,\n              c: [Circular *1]\n            }\n          }\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: { foo: 1, bar: 1, boo: [ 1 ], baz: { date: 1970-01-01T00:00:00.000Z, null: null, number: 1, string: 'Hello', undefined: undefined } },\n            expected: { boo: [ 1 ], baz: { date: 1970-01-01T00:00:00.000Z, null: null, number: 1, string: 'Hello', undefined: undefined }, circular: <ref *1> { bar: 2, c: [Circular *1] } },\n            operator: 'deepEqual'\n          }\n        \n        *\n         invalid subtest fail (*ms)\n          'test could not be started because its parent finished'\n        \n      actual: |-\n         sync pass todo (*ms) # TODO\n         sync pass todo with message (*ms) # this is a passing todo\n         sync fail todo (*ms) # TODO\n          Error: thrown from sync fail todo\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         sync fail todo with message (*ms) # this is a failing todo\n          Error: thrown from sync fail todo with message\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         sync skip pass (*ms) # SKIP\n         sync skip pass with message (*ms) # this is skipped\n         sync pass (*ms)\n         this test should pass\n         sync throw fail (*ms)\n          Error: thrown from sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         async skip pass (*ms) # SKIP\n         async pass (*ms)\n         async throw fail (*ms)\n          Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         async skip fail (*ms) # SKIP\n          Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         async assertion fail (*ms)\n          AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n          \n          true !== false\n          \n              *\n              *\n              *\n              *\n              *\n              *\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: true,\n            expected: false,\n            operator: 'strictEqual'\n          }\n        \n         resolve pass (*ms)\n         reject fail (*ms)\n          Error: rejected from reject fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         unhandled rejection - passes but warns (*ms)\n         async unhandled rejection - passes but warns (*ms)\n         immediate throw - passes but warns (*ms)\n         immediate reject - passes but warns (*ms)\n         immediate resolve pass (*ms)\n         subtest sync throw fail\n           +sync throw fail (*ms)\n            Error: thrown from subtest sync throw fail\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n        \n           this subtest should make its parent test fail\n         subtest sync throw fail (*ms)\n         sync throw non-error fail (*ms)\n          Symbol(thrown symbol from sync throw non-error fail)\n        \n         level 0a\n           level 1a (*ms)\n           level 1b (*ms)\n           level 1c (*ms)\n           level 1d (*ms)\n         level 0a (*ms)\n         top level\n           +long running (*ms)\n            'test did not finish before its parent and was cancelled'\n        \n           +short running\n             ++short running (*ms)\n           +short running (*ms)\n         top level (*ms)\n         invalid subtest - pass but subtest fails (*ms)\n         sync skip option (*ms) # SKIP\n         sync skip option with message (*ms) # this is skipped\n         sync skip option is false fail (*ms)\n          Error: this should be executed\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         <anonymous> (*ms)\n         functionOnly (*ms)\n         <anonymous> (*ms)\n         test with only a name provided (*ms)\n         <anonymous> (*ms)\n         <anonymous> (*ms) # SKIP\n         test with a name and options provided (*ms) # SKIP\n         functionAndOptions (*ms) # SKIP\n         callback pass (*ms)\n         callback fail (*ms)\n          Error: callback failure\n              *\n              *\n        \n         sync t is this in test (*ms)\n         async t is this in test (*ms)\n         callback t is this in test (*ms)\n         callback also returns a Promise (*ms)\n          'passed a callback but also returned a Promise'\n        \n         callback throw (*ms)\n          Error: thrown from callback throw\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n         callback called twice (*ms)\n          'callback invoked multiple times'\n        \n         callback called twice in different ticks (*ms)\n         callback called twice in future tick (*ms)\n          Error [ERR_TEST_FAILURE]: callback invoked multiple times\n              * {\n            code: 'ERR_TEST_FAILURE',\n            failureType: 'multipleCallbackInvocations',\n            cause: 'callback invoked multiple times'\n          }\n        \n         callback async throw (*ms)\n          Error: thrown from callback async throw\n              *\n              *\n        \n         callback async throw after done (*ms)\n         only is set but not in only mode\n           running subtest 1 (*ms)\n           running subtest 2 (*ms)\n           'only' and 'runOnly' require the --test-only command-line option.\n           running subtest 3 (*ms)\n           'only' and 'runOnly' require the --test-only command-line option.\n           running subtest 4 (*ms)\n         only is set but not in only mode (*ms)\n         'only' and 'runOnly' require the --test-only command-line option.\n         custom inspect symbol fail (*ms)\n          customized\n        \n         custom inspect symbol that throws fail (*ms)\n          { foo: 1 }\n        \n         subtest sync throw fails\n           sync throw fails at first (*ms)\n            Error: thrown from subtest sync throw fails at first\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n        \n           sync throw fails at second (*ms)\n            Error: thrown from subtest sync throw fails at second\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n                *\n        \n         subtest sync throw fails (*ms)\n         timed out async test (*ms)\n          'test timed out after *ms'\n        \n         timed out callback test (*ms)\n          'test timed out after *ms'\n        \n         large timeout async test is ok (*ms)\n         large timeout callback test is ok (*ms)\n         successful thenable (*ms)\n         rejected thenable (*ms)\n          'custom error'\n        \n         unfinished test with uncaughtException (*ms)\n          Error: foo\n              *\n              *\n              *\n        \n         unfinished test with unhandledRejection (*ms)\n          Error: bar\n              *\n              *\n              *\n        \n         assertion errors display actual and expected properly (*ms)\n          AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n          \n          {\n            bar: 1,\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            foo: 1\n          }\n          \n          should loosely deep-equal\n          \n          {\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            circular: <ref *1> {\n              bar: 2,\n              c: [Circular *1]\n            }\n          }\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: { foo: 1, bar: 1, boo: [ 1 ], baz: { date: 1970-01-01T00:00:00.000Z, null: null, number: 1, string: 'Hello', undefined: undefined } },\n            expected: { boo: [ 1 ], baz: { date: 1970-01-01T00:00:00.000Z, null: null, number: 1, string: 'Hello', undefined: undefined }, circular: <ref *1> { bar: 2, c: [Circular *1] } },\n            operator: 'deepEqual'\n          }\n        \n         invalid subtest fail (*ms)\n          'test could not be started because its parent finished'\n        \n         Error: Test \"unhandled rejection - passes but warns\" at test\\fixtures\\test-runner\\output\\output.js:72:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\n         Error: Test \"async unhandled rejection - passes but warns\" at test\\fixtures\\test-runner\\output\\output.js:76:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from async unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\n         Error: A resource generated asynchronous activity after the test ended. This activity created the error \"Error: uncaught from outside of a test\" which triggered an uncaughtException event, caught by the test runner.\n         Error: Test \"immediate throw - passes but warns\" at test\\fixtures\\test-runner\\output\\output.js:80:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from immediate throw fail\" and would have caused the test to fail, but instead triggered an uncaughtException event.\n         Error: Test \"immediate reject - passes but warns\" at test\\fixtures\\test-runner\\output\\output.js:86:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from immediate reject fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event.\n         Error: Test \"callback called twice in different ticks\" at test\\fixtures\\test-runner\\output\\output.js:251:1 generated asynchronous activity after the test ended. This activity created the error \"Error [ERR_TEST_FAILURE]: callback invoked multiple times\" and would have caused the test to fail, but instead triggered an uncaughtException event.\n         Error: Test \"callback async throw after done\" at test\\fixtures\\test-runner\\output\\output.js:269:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from callback async throw after done\" and would have caused the test to fail, but instead triggered an uncaughtException event.\n         tests 76\n         suites 0\n         pass 35\n         fail 25\n         cancelled 3\n         skipped 9\n         todo 4\n         duration_ms *\n        \n         failing tests:\n        \n        *\n         sync fail todo (*ms) # TODO\n          Error: thrown from sync fail todo\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         sync fail todo with message (*ms) # this is a failing todo\n          Error: thrown from sync fail todo with message\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         sync throw fail (*ms)\n          Error: thrown from sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         async throw fail (*ms)\n          Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         async skip fail (*ms) # SKIP\n          Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         async assertion fail (*ms)\n          AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n          \n          true !== false\n          \n              *\n              *\n              *\n              *\n              *\n              *\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: true,\n            expected: false,\n            operator: 'strictEqual'\n          }\n        \n        *\n         reject fail (*ms)\n          Error: rejected from reject fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         +sync throw fail (*ms)\n          Error: thrown from subtest sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         sync throw non-error fail (*ms)\n          Symbol(thrown symbol from sync throw non-error fail)\n        \n        *\n         +long running (*ms)\n          'test did not finish before its parent and was cancelled'\n        \n        *\n         sync skip option is false fail (*ms)\n          Error: this should be executed\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         callback fail (*ms)\n          Error: callback failure\n              *\n              *\n        \n        *\n         callback also returns a Promise (*ms)\n          'passed a callback but also returned a Promise'\n        \n        *\n         callback throw (*ms)\n          Error: thrown from callback throw\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         callback called twice (*ms)\n          'callback invoked multiple times'\n        \n        *\n         callback called twice in future tick (*ms)\n          Error [ERR_TEST_FAILURE]: callback invoked multiple times\n              * {\n            code: 'ERR_TEST_FAILURE',\n            failureType: 'multipleCallbackInvocations',\n            cause: 'callback invoked multiple times'\n          }\n        \n        *\n         callback async throw (*ms)\n          Error: thrown from callback async throw\n              *\n              *\n        \n        *\n         custom inspect symbol fail (*ms)\n          customized\n        \n        *\n         custom inspect symbol that throws fail (*ms)\n          { foo: 1 }\n        \n        *\n         sync throw fails at first (*ms)\n          Error: thrown from subtest sync throw fails at first\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         sync throw fails at second (*ms)\n          Error: thrown from subtest sync throw fails at second\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        \n        *\n         timed out async test (*ms)\n          'test timed out after *ms'\n        \n        *\n         timed out callback test (*ms)\n          'test timed out after *ms'\n        \n        *\n         rejected thenable (*ms)\n          'custom error'\n        \n        *\n         unfinished test with uncaughtException (*ms)\n          Error: foo\n              *\n              *\n              *\n        \n        *\n         unfinished test with unhandledRejection (*ms)\n          Error: bar\n              *\n              *\n              *\n        \n        *\n         assertion errors display actual and expected properly (*ms)\n          AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n          \n          {\n            bar: 1,\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            foo: 1\n          }\n          \n          should loosely deep-equal\n          \n          {\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            circular: <ref *1> {\n              bar: 2,\n              c: [Circular *1]\n            }\n          }\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: { foo: 1, bar: 1, boo: [ 1 ], baz: { date: 1970-01-01T00:00:00.000Z, null: null, number: 1, string: 'Hello', undefined: undefined } },\n            expected: { boo: [ 1 ], baz: { date: 1970-01-01T00:00:00.000Z, null: null, number: 1, string: 'Hello', undefined: undefined }, circular: <ref *1> { bar: 2, c: [Circular *1] } },\n            operator: 'deepEqual'\n          }\n        \n        *\n         invalid subtest fail (*ms)\n          'test could not be started because its parent finished'\n        \n      operator: 'strictEqual'\n      stack: |-\n        assertSnapshot (c:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:56:12)\n        async Module.spawnAndAssert (c:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:84:3)\n        async TestContext.<anonymous> (file:///c:/workspace/node-test-binary-windows-js-suites/node/test/parallel/test-runner-output.mjs:145:5)\n        async Test.run (node:internal/test_runner/test:736:9)\n        async Promise.all (index 26)\n        async Suite.run (node:internal/test_runner/test:1091:7)\n        async Test.processPendingSubtests (node:internal/test_runner/test:449:7)\n      ...\n    # Subtest: test-runner/output/source_mapped_locations.mjs\n    ok 28 - test-runner/output/source_mapped_locations.mjs\n      ---\n      duration_ms: 1852.8516\n      ...\n    # Subtest: test-runner/output/lcov_reporter.js\n    ok 29 - test-runner/output/lcov_reporter.js\n      ---\n      duration_ms: 3374.2711\n      ...\n    # Subtest: test-runner/output/output.js\n    ok 30 - test-runner/output/output.js\n      ---\n      duration_ms: 2378.3902\n      ...\n    # Subtest: test-runner/output/output_cli.js\n    ok 31 - test-runner/output/output_cli.js\n      ---\n      duration_ms: 3636.9056\n      ...\n    # Subtest: test-runner/output/name_pattern.js\n    ok 32 - test-runner/output/name_pattern.js\n      ---\n      duration_ms: 1776.0806\n      ...\n    # Subtest: test-runner/output/name_pattern_with_only.js\n    ok 33 - test-runner/output/name_pattern_with_only.js\n      ---\n      duration_ms: 1660.2287\n      ...\n    # Subtest: test-runner/output/unfinished-suite-async-error.js\n    ok 34 - test-runner/output/unfinished-suite-async-error.js\n      ---\n      duration_ms: 1652.7462\n      ...\n    # Subtest: test-runner/output/unresolved_promise.js\n    ok 35 - test-runner/output/unresolved_promise.js\n      ---\n      duration_ms: 1645.1739\n      ...\n    # Subtest: test-runner/output/default_output.js\n        # Subtest: <anonymous>\n        ok 1 - <anonymous> # SKIP Skipping pseudo-tty tests, as pseudo terminals are not available on Windows.\n          ---\n          duration_ms: 32.1367\n          ...\n        1..1\n    ok 36 - test-runner/output/default_output.js\n      ---\n      duration_ms: 32.6833\n      ...\n    # Subtest: test-runner/output/arbitrary-output.js\n    ok 37 - test-runner/output/arbitrary-output.js\n      ---\n      duration_ms: 2512.2132\n      ...\n    # Subtest: test-runner/output/async-test-scheduling.mjs\n    ok 38 - test-runner/output/async-test-scheduling.mjs\n      ---\n      duration_ms: 2275.1422\n      ...\n    # Subtest: test-runner/output/arbitrary-output-colored.js\n        # Subtest: <anonymous>\n        ok 1 - <anonymous> # SKIP Skipping pseudo-tty tests, as pseudo terminals are not available on Windows.\n          ---\n          duration_ms: 17.5245\n          ...\n        1..1\n    ok 39 - test-runner/output/arbitrary-output-colored.js\n      ---\n      duration_ms: 17.8562\n      ...\n    # Subtest: test-runner/output/dot_output_custom_columns.js\n        # Subtest: <anonymous>\n        ok 1 - <anonymous> # SKIP Skipping pseudo-tty tests, as pseudo terminals are not available on Windows.\n          ---\n          duration_ms: 17.4517\n          ...\n        1..1\n    ok 40 - test-runner/output/dot_output_custom_columns.js\n      ---\n      duration_ms: 17.7218\n      ...\n    # Subtest: test-runner/output/tap_escape.js\n    ok 41 - test-runner/output/tap_escape.js\n      ---\n      duration_ms: 1019.6234\n      ...\n    # Subtest: test-runner/output/coverage_failure.js\n    ok 42 - test-runner/output/coverage_failure.js\n      ---\n      duration_ms: 1722.8893\n      ...\n    1..42\nnot ok 1 - test runner output\n  ---\n  duration_ms: 4001.9515\n  type: 'suite'\n  location: 'c:\\\\workspace\\\\node-test-binary-windows-js-suites\\\\node\\\\test\\\\parallel\\\\test-runner-output.mjs:149:1'\n  failureType: 'subtestsFailed'\n  error: '3 subtests failed'\n  code: 'ERR_TEST_FAILURE'\n  ...\n1..1\n# tests 45\n# suites 1\n# pass 39\n# fail 3\n# cancelled 0\n# skipped 3\n# todo 0\n# duration_ms 4015.2137"},"time":4371.014,"fullname":"parallel/test-runner-output","closingTestPoint":false}}]}