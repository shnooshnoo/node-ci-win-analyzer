{"failedTests":[{"testName":"wpt/test-webcrypto","timestamp":1722332738559,"status":"REGRESSION","jobName":"node-test-binary-windows-js-suites","config":"node-test-binary-windows-js-suites Â» 3,win2019-COMPILED_BY-vs2022 #28983","buildUrl":"https://ci.nodejs.org/job/node-test-binary-windows-js-suites/RUN_SUBSET=3,nodes=win2019-COMPILED_BY-vs2022/28983/","buildNumber":28983,"builtOn":"test-rackspace-win2019_vs2019-x64-3","nodeVersion":"23.0.0","commitHash":"f52ef5ff9a0789c063c818e2e8278bd4524129de","callStack":[{"upstreamBuild":64438,"upstreamProject":"node-test-commit-windows-fanned","upstreamUrl":"job/node-test-commit-windows-fanned/"},{"upstreamBuild":72610,"upstreamProject":"node-test-commit","upstreamUrl":"job/node-test-commit/"},{"upstreamBuild":60740,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"prId":"54115"}],"tap":{"ok":false,"name":"wpt/test-webcrypto","id":1004,"buffered":false,"tapError":null,"skip":false,"todo":false,"previous":null,"plan":null,"diag":{"severity":"crashed","exitcode":3221225477,"stack":"[SKIPPED] algorithm-discards-context.https.window.js: Not relevant in Node.js context\n[SKIPPED] historical.any.js: Not relevant in Node.js context\n[PASS] setup - define tests\n[PASS] P-521 good parameters\n[PASS] P-521 mixed case parameters\n[PASS] P-521 missing public curve\n[PASS] P-521 public property of algorithm is not a CryptoKey\n[PASS] P-521 mismatched curves\n[PASS] P-521 public property of algorithm is not an ECDSA public key\n[PASS] P-521 no deriveKey usage for base key\n[PASS] P-521 base key is not a private key\n[PASS] P-521 public property value is a private key\n[PASS] P-521 public property value is a secret key\n[PASS] P-256 good parameters\n[PASS] P-256 mixed case parameters\n[PASS] P-256 missing public curve\n[PASS] P-256 public property of algorithm is not a CryptoKey\n[PASS] P-256 mismatched curves\n[PASS] P-256 public property of algorithm is not an ECDSA public key\n[PASS] P-256 no deriveKey usage for base key\n[PASS] P-256 base key is not a private key\n[PASS] P-256 public property value is a private key\n[PASS] P-256 public property value is a secret key\n[PASS] P-384 good parameters\n[PASS] P-384 mixed case parameters\n[PASS] P-384 missing public curve\n[PASS] P-384 public property of algorithm is not a CryptoKey\n[PASS] P-384 mismatched curves\n[PASS] P-384 public property of algorithm is not an ECDSA public key\n[PASS] P-384 no deriveKey usage for base key\n[PASS] P-384 base key is not a private key\n[PASS] P-384 public property value is a private key\n[PASS] P-384 public property value is a secret key\n[PASS] setup - define tests\n[PASS] P-521 good parameters\n[PASS] P-521 mixed case parameters\n[PASS] P-521 with null length\n[PASS] P-521 short result\n[PASS] P-521 non-multiple of 8 bits\n[PASS] P-521 missing public curve\n[PASS] P-521 public property of algorithm is not a CryptoKey\n[PASS] P-521 mismatched curves\n[PASS] P-521 public property of algorithm is not an ECDSA public key\n[PASS] P-521 no deriveBits usage for base key\n[PASS] P-521 base key is not a private key\n[PASS] P-521 public property value is a private key\n[PASS] P-521 public property value is a secret key\n[PASS] P-521 asking for too many bits\n[PASS] P-256 good parameters\n[PASS] P-256 mixed case parameters\n[PASS] P-256 with null length\n[PASS] P-256 short result\n[PASS] P-256 non-multiple of 8 bits\n[PASS] P-256 missing public curve\n[PASS] P-256 public property of algorithm is not a CryptoKey\n[PASS] P-256 mismatched curves\n[PASS] P-256 public property of algorithm is not an ECDSA public key\n[PASS] P-256 no deriveBits usage for base key\n[PASS] P-256 base key is not a private key\n[PASS] P-256 public property value is a private key\n[PASS] P-256 public property value is a secret key\n[PASS] P-256 asking for too many bits\n[PASS] P-384 good parameters\n[PASS] P-384 mixed case parameters\n[PASS] P-384 with null length\n[PASS] P-384 short result\n[PASS] P-384 non-multiple of 8 bits\n[PASS] P-384 missing public curve\n[PASS] P-384 public property of algorithm is not a CryptoKey\n[PASS] P-384 mismatched curves\n[PASS] P-384 public property of algorithm is not an ECDSA public key\n[PASS] P-384 no deriveBits usage for base key\n[PASS] P-384 base key is not a private key\n[PASS] P-384 public property value is a private key\n[PASS] P-384 public property value is a secret key\n[PASS] P-384 asking for too many bits\n[PASS] setup - define tests\n[PASS] short derivedKey, normal salt, SHA-384, with normal info\n[PASS] short derivedKey, normal salt, SHA-384, with normal info with 0 length\n[PASS] Derived key of type name: AES-CBC length: 128  using short derivedKey, normal salt, SHA-384, with normal info\n[PASS] Derived key of type name: AES-CBC length: 128  using short derivedKey, normal salt, SHA-384, with normal info with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 128  using short derivedKey, normal salt, SHA-384, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using short derivedKey, normal salt, SHA-384, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using short derivedKey, normal salt, SHA-384, with normal info\n[PASS] Derived key of type name: AES-CBC length: 192  using short derivedKey, normal salt, SHA-384, with normal info with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 192  using short derivedKey, normal salt, SHA-384, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using short derivedKey, normal salt, SHA-384, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using short derivedKey, normal salt, SHA-384, with normal info\n[PASS] Derived key of type name: AES-CBC length: 256  using short derivedKey, normal salt, SHA-384, with normal info with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 256  using short derivedKey, normal salt, SHA-384, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using short derivedKey, normal salt, SHA-384, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using short derivedKey, normal salt, SHA-384, with normal info\n[PASS] Derived key of type name: AES-CTR length: 128  using short derivedKey, normal salt, SHA-384, with normal info with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 128  using short derivedKey, normal salt, SHA-384, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using short derivedKey, normal salt, SHA-384, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using short derivedKey, normal salt, SHA-384, with normal info\n[PASS] Derived key of type name: AES-CTR length: 192  using short derivedKey, normal salt, SHA-384, with normal info with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 192  using short derivedKey, normal salt, SHA-384, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using short derivedKey, normal salt, SHA-384, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using short derivedKey, normal salt, SHA-384, with normal info\n[PASS] Derived key of type name: AES-CTR length: 256  using short derivedKey, normal salt, SHA-384, with normal info with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 256  using short derivedKey, normal salt, SHA-384, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using short derivedKey, normal salt, SHA-384, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using short derivedKey, normal salt, SHA-384, with normal info\n[PASS] Derived key of type name: AES-GCM length: 128  using short derivedKey, normal salt, SHA-384, with normal info with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 128  using short derivedKey, normal salt, SHA-384, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using short derivedKey, normal salt, SHA-384, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using short derivedKey, normal salt, SHA-384, with normal info\n[PASS] Derived key of type name: AES-GCM length: 192  using short derivedKey, normal salt, SHA-384, with normal info with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 192  using short derivedKey, normal salt, SHA-384, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using short derivedKey, normal salt, SHA-384, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using short derivedKey, normal salt, SHA-384, with normal info\n[PASS] Derived key of type name: AES-GCM length: 256  using short derivedKey, normal salt, SHA-384, with normal info with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 256  using short derivedKey, normal salt, SHA-384, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using short derivedKey, normal salt, SHA-384, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using short derivedKey, normal salt, SHA-384, with normal info\n[PASS] Derived key of type name: AES-KW length: 128  using short derivedKey, normal salt, SHA-384, with normal info with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 128  using short derivedKey, normal salt, SHA-384, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using short derivedKey, normal salt, SHA-384, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using short derivedKey, normal salt, SHA-384, with normal info\n[PASS] Derived key of type name: AES-KW length: 192  using short derivedKey, normal salt, SHA-384, with normal info with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 192  using short derivedKey, normal salt, SHA-384, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using short derivedKey, normal salt, SHA-384, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using short derivedKey, normal salt, SHA-384, with normal info\n[PASS] Derived key of type name: AES-KW length: 256  using short derivedKey, normal salt, SHA-384, with normal info with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 256  using short derivedKey, normal salt, SHA-384, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using short derivedKey, normal salt, SHA-384, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short derivedKey, normal salt, SHA-384, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short derivedKey, normal salt, SHA-384, with normal info with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short derivedKey, normal salt, SHA-384, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short derivedKey, normal salt, SHA-384, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short derivedKey, normal salt, SHA-384, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short derivedKey, normal salt, SHA-384, with normal info with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short derivedKey, normal salt, SHA-384, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short derivedKey, normal salt, SHA-384, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short derivedKey, normal salt, SHA-384, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short derivedKey, normal salt, SHA-384, with normal info with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short derivedKey, normal salt, SHA-384, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short derivedKey, normal salt, SHA-384, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short derivedKey, normal salt, SHA-384, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short derivedKey, normal salt, SHA-384, with normal info with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short derivedKey, normal salt, SHA-384, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short derivedKey, normal salt, SHA-384, with normal info with wrong (ECDH) key\n[PASS] short derivedKey, normal salt, SHA-384, with normal info with missing salt\n[PASS] short derivedKey, normal salt, SHA-384, with normal info with missing info\n[PASS] short derivedKey, normal salt, SHA-384, with normal info with null length\n[PASS] short derivedKey, normal salt, SHA-384, with normal info with non-multiple of 8 length\n[PASS] short derivedKey, normal salt, SHA-384, with normal info with bad hash name SHA384\n[PASS] short derivedKey, normal salt, SHA-384, with normal info with missing deriveBits usage\n[PASS] short derivedKey, normal salt, SHA-384, with normal info with wrong (ECDH) key\n[PASS] short derivedKey, normal salt, SHA-384, with empty info\n[PASS] short derivedKey, normal salt, SHA-384, with empty info with 0 length\n[PASS] Derived key of type name: AES-CBC length: 128  using short derivedKey, normal salt, SHA-384, with empty info\n[PASS] Derived key of type name: AES-CBC length: 128  using short derivedKey, normal salt, SHA-384, with empty info with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 128  using short derivedKey, normal salt, SHA-384, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using short derivedKey, normal salt, SHA-384, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using short derivedKey, normal salt, SHA-384, with empty info\n[PASS] Derived key of type name: AES-CBC length: 192  using short derivedKey, normal salt, SHA-384, with empty info with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 192  using short derivedKey, normal salt, SHA-384, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using short derivedKey, normal salt, SHA-384, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using short derivedKey, normal salt, SHA-384, with empty info\n[PASS] Derived key of type name: AES-CBC length: 256  using short derivedKey, normal salt, SHA-384, with empty info with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 256  using short derivedKey, normal salt, SHA-384, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using short derivedKey, normal salt, SHA-384, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using short derivedKey, normal salt, SHA-384, with empty info\n[PASS] Derived key of type name: AES-CTR length: 128  using short derivedKey, normal salt, SHA-384, with empty info with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 128  using short derivedKey, normal salt, SHA-384, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using short derivedKey, normal salt, SHA-384, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using short derivedKey, normal salt, SHA-384, with empty info\n[PASS] Derived key of type name: AES-CTR length: 192  using short derivedKey, normal salt, SHA-384, with empty info with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 192  using short derivedKey, normal salt, SHA-384, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using short derivedKey, normal salt, SHA-384, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using short derivedKey, normal salt, SHA-384, with empty info\n[PASS] Derived key of type name: AES-CTR length: 256  using short derivedKey, normal salt, SHA-384, with empty info with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 256  using short derivedKey, normal salt, SHA-384, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using short derivedKey, normal salt, SHA-384, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using short derivedKey, normal salt, SHA-384, with empty info\n[PASS] Derived key of type name: AES-GCM length: 128  using short derivedKey, normal salt, SHA-384, with empty info with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 128  using short derivedKey, normal salt, SHA-384, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using short derivedKey, normal salt, SHA-384, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using short derivedKey, normal salt, SHA-384, with empty info\n[PASS] Derived key of type name: AES-GCM length: 192  using short derivedKey, normal salt, SHA-384, with empty info with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 192  using short derivedKey, normal salt, SHA-384, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using short derivedKey, normal salt, SHA-384, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using short derivedKey, normal salt, SHA-384, with empty info\n[PASS] Derived key of type name: AES-GCM length: 256  using short derivedKey, normal salt, SHA-384, with empty info with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 256  using short derivedKey, normal salt, SHA-384, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using short derivedKey, normal salt, SHA-384, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using short derivedKey, normal salt, SHA-384, with empty info\n[PASS] Derived key of type name: AES-KW length: 128  using short derivedKey, normal salt, SHA-384, with empty info with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 128  using short derivedKey, normal salt, SHA-384, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using short derivedKey, normal salt, SHA-384, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using short derivedKey, normal salt, SHA-384, with empty info\n[PASS] Derived key of type name: AES-KW length: 192  using short derivedKey, normal salt, SHA-384, with empty info with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 192  using short derivedKey, normal salt, SHA-384, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using short derivedKey, normal salt, SHA-384, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using short derivedKey, normal salt, SHA-384, with empty info\n[PASS] Derived key of type name: AES-KW length: 256  using short derivedKey, normal salt, SHA-384, with empty info with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 256  using short derivedKey, normal salt, SHA-384, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using short derivedKey, normal salt, SHA-384, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short derivedKey, normal salt, SHA-384, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short derivedKey, normal salt, SHA-384, with empty info with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short derivedKey, normal salt, SHA-384, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short derivedKey, normal salt, SHA-384, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short derivedKey, normal salt, SHA-384, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short derivedKey, normal salt, SHA-384, with empty info with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short derivedKey, normal salt, SHA-384, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short derivedKey, normal salt, SHA-384, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short derivedKey, normal salt, SHA-384, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short derivedKey, normal salt, SHA-384, with empty info with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short derivedKey, normal salt, SHA-384, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short derivedKey, normal salt, SHA-384, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short derivedKey, normal salt, SHA-384, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short derivedKey, normal salt, SHA-384, with empty info with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short derivedKey, normal salt, SHA-384, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short derivedKey, normal salt, SHA-384, with empty info with wrong (ECDH) key\n[PASS] short derivedKey, normal salt, SHA-384, with empty info with missing salt\n[PASS] short derivedKey, normal salt, SHA-384, with empty info with missing info\n[PASS] short derivedKey, normal salt, SHA-384, with empty info with null length\n[PASS] short derivedKey, normal salt, SHA-384, with empty info with non-multiple of 8 length\n[PASS] short derivedKey, normal salt, SHA-384, with empty info with bad hash name SHA384\n[PASS] short derivedKey, normal salt, SHA-384, with empty info with missing deriveBits usage\n[PASS] short derivedKey, normal salt, SHA-384, with empty info with wrong (ECDH) key\n[PASS] short derivedKey, normal salt, SHA-512, with normal info\n[PASS] short derivedKey, normal salt, SHA-512, with normal info with 0 length\n[PASS] Derived key of type name: AES-CBC length: 128  using short derivedKey, normal salt, SHA-512, with normal info\n[PASS] Derived key of type name: AES-CBC length: 128  using short derivedKey, normal salt, SHA-512, with normal info with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 128  using short derivedKey, normal salt, SHA-512, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using short derivedKey, normal salt, SHA-512, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using short derivedKey, normal salt, SHA-512, with normal info\n[PASS] Derived key of type name: AES-CBC length: 192  using short derivedKey, normal salt, SHA-512, with normal info with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 192  using short derivedKey, normal salt, SHA-512, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using short derivedKey, normal salt, SHA-512, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using short derivedKey, normal salt, SHA-512, with normal info\n[PASS] Derived key of type name: AES-CBC length: 256  using short derivedKey, normal salt, SHA-512, with normal info with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 256  using short derivedKey, normal salt, SHA-512, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using short derivedKey, normal salt, SHA-512, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using short derivedKey, normal salt, SHA-512, with normal info\n[PASS] Derived key of type name: AES-CTR length: 128  using short derivedKey, normal salt, SHA-512, with normal info with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 128  using short derivedKey, normal salt, SHA-512, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using short derivedKey, normal salt, SHA-512, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using short derivedKey, normal salt, SHA-512, with normal info\n[PASS] Derived key of type name: AES-CTR length: 192  using short derivedKey, normal salt, SHA-512, with normal info with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 192  using short derivedKey, normal salt, SHA-512, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using short derivedKey, normal salt, SHA-512, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using short derivedKey, normal salt, SHA-512, with normal info\n[PASS] Derived key of type name: AES-CTR length: 256  using short derivedKey, normal salt, SHA-512, with normal info with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 256  using short derivedKey, normal salt, SHA-512, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using short derivedKey, normal salt, SHA-512, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using short derivedKey, normal salt, SHA-512, with normal info\n[PASS] Derived key of type name: AES-GCM length: 128  using short derivedKey, normal salt, SHA-512, with normal info with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 128  using short derivedKey, normal salt, SHA-512, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using short derivedKey, normal salt, SHA-512, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using short derivedKey, normal salt, SHA-512, with normal info\n[PASS] Derived key of type name: AES-GCM length: 192  using short derivedKey, normal salt, SHA-512, with normal info with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 192  using short derivedKey, normal salt, SHA-512, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using short derivedKey, normal salt, SHA-512, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using short derivedKey, normal salt, SHA-512, with normal info\n[PASS] Derived key of type name: AES-GCM length: 256  using short derivedKey, normal salt, SHA-512, with normal info with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 256  using short derivedKey, normal salt, SHA-512, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using short derivedKey, normal salt, SHA-512, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using short derivedKey, normal salt, SHA-512, with normal info\n[PASS] Derived key of type name: AES-KW length: 128  using short derivedKey, normal salt, SHA-512, with normal info with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 128  using short derivedKey, normal salt, SHA-512, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using short derivedKey, normal salt, SHA-512, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using short derivedKey, normal salt, SHA-512, with normal info\n[PASS] Derived key of type name: AES-KW length: 192  using short derivedKey, normal salt, SHA-512, with normal info with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 192  using short derivedKey, normal salt, SHA-512, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using short derivedKey, normal salt, SHA-512, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using short derivedKey, normal salt, SHA-512, with normal info\n[PASS] Derived key of type name: AES-KW length: 256  using short derivedKey, normal salt, SHA-512, with normal info with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 256  using short derivedKey, normal salt, SHA-512, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using short derivedKey, normal salt, SHA-512, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short derivedKey, normal salt, SHA-512, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short derivedKey, normal salt, SHA-512, with normal info with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short derivedKey, normal salt, SHA-512, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short derivedKey, normal salt, SHA-512, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short derivedKey, normal salt, SHA-512, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short derivedKey, normal salt, SHA-512, with normal info with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short derivedKey, normal salt, SHA-512, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short derivedKey, normal salt, SHA-512, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short derivedKey, normal salt, SHA-512, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short derivedKey, normal salt, SHA-512, with normal info with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short derivedKey, normal salt, SHA-512, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short derivedKey, normal salt, SHA-512, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short derivedKey, normal salt, SHA-512, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short derivedKey, normal salt, SHA-512, with normal info with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short derivedKey, normal salt, SHA-512, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short derivedKey, normal salt, SHA-512, with normal info with wrong (ECDH) key\n[PASS] short derivedKey, normal salt, SHA-512, with normal info with missing salt\n[PASS] short derivedKey, normal salt, SHA-512, with normal info with missing info\n[PASS] short derivedKey, normal salt, SHA-512, with normal info with null length\n[PASS] short derivedKey, normal salt, SHA-512, with normal info with non-multiple of 8 length\n[PASS] short derivedKey, normal salt, SHA-512, with normal info with bad hash name SHA512\n[PASS] short derivedKey, normal salt, SHA-512, with normal info with missing deriveBits usage\n[PASS] short derivedKey, normal salt, SHA-512, with normal info with wrong (ECDH) key\n[PASS] short derivedKey, normal salt, SHA-512, with empty info\n[PASS] short derivedKey, normal salt, SHA-512, with empty info with 0 length\n[PASS] Derived key of type name: AES-CBC length: 128  using short derivedKey, normal salt, SHA-512, with empty info\n[PASS] Derived key of type name: AES-CBC length: 128  using short derivedKey, normal salt, SHA-512, with empty info with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 128  using short derivedKey, normal salt, SHA-512, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using short derivedKey, normal salt, SHA-512, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using short derivedKey, normal salt, SHA-512, with empty info\n[PASS] Derived key of type name: AES-CBC length: 192  using short derivedKey, normal salt, SHA-512, with empty info with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 192  using short derivedKey, normal salt, SHA-512, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using short derivedKey, normal salt, SHA-512, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using short derivedKey, normal salt, SHA-512, with empty info\n[PASS] Derived key of type name: AES-CBC length: 256  using short derivedKey, normal salt, SHA-512, with empty info with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 256  using short derivedKey, normal salt, SHA-512, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using short derivedKey, normal salt, SHA-512, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using short derivedKey, normal salt, SHA-512, with empty info\n[PASS] Derived key of type name: AES-CTR length: 128  using short derivedKey, normal salt, SHA-512, with empty info with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 128  using short derivedKey, normal salt, SHA-512, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using short derivedKey, normal salt, SHA-512, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using short derivedKey, normal salt, SHA-512, with empty info\n[PASS] Derived key of type name: AES-CTR length: 192  using short derivedKey, normal salt, SHA-512, with empty info with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 192  using short derivedKey, normal salt, SHA-512, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using short derivedKey, normal salt, SHA-512, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using short derivedKey, normal salt, SHA-512, with empty info\n[PASS] Derived key of type name: AES-CTR length: 256  using short derivedKey, normal salt, SHA-512, with empty info with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 256  using short derivedKey, normal salt, SHA-512, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using short derivedKey, normal salt, SHA-512, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using short derivedKey, normal salt, SHA-512, with empty info\n[PASS] Derived key of type name: AES-GCM length: 128  using short derivedKey, normal salt, SHA-512, with empty info with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 128  using short derivedKey, normal salt, SHA-512, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using short derivedKey, normal salt, SHA-512, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using short derivedKey, normal salt, SHA-512, with empty info\n[PASS] Derived key of type name: AES-GCM length: 192  using short derivedKey, normal salt, SHA-512, with empty info with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 192  using short derivedKey, normal salt, SHA-512, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using short derivedKey, normal salt, SHA-512, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using short derivedKey, normal salt, SHA-512, with empty info\n[PASS] Derived key of type name: AES-GCM length: 256  using short derivedKey, normal salt, SHA-512, with empty info with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 256  using short derivedKey, normal salt, SHA-512, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using short derivedKey, normal salt, SHA-512, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using short derivedKey, normal salt, SHA-512, with empty info\n[PASS] Derived key of type name: AES-KW length: 128  using short derivedKey, normal salt, SHA-512, with empty info with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 128  using short derivedKey, normal salt, SHA-512, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using short derivedKey, normal salt, SHA-512, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using short derivedKey, normal salt, SHA-512, with empty info\n[PASS] Derived key of type name: AES-KW length: 192  using short derivedKey, normal salt, SHA-512, with empty info with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 192  using short derivedKey, normal salt, SHA-512, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using short derivedKey, normal salt, SHA-512, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using short derivedKey, normal salt, SHA-512, with empty info\n[PASS] Derived key of type name: AES-KW length: 256  using short derivedKey, normal salt, SHA-512, with empty info with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 256  using short derivedKey, normal salt, SHA-512, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using short derivedKey, normal salt, SHA-512, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short derivedKey, normal salt, SHA-512, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short derivedKey, normal salt, SHA-512, with empty info with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short derivedKey, normal salt, SHA-512, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short derivedKey, normal salt, SHA-512, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short derivedKey, normal salt, SHA-512, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short derivedKey, normal salt, SHA-512, with empty info with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short derivedKey, normal salt, SHA-512, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short derivedKey, normal salt, SHA-512, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short derivedKey, normal salt, SHA-512, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short derivedKey, normal salt, SHA-512, with empty info with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short derivedKey, normal salt, SHA-512, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short derivedKey, normal salt, SHA-512, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short derivedKey, normal salt, SHA-512, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short derivedKey, normal salt, SHA-512, with empty info with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short derivedKey, normal salt, SHA-512, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short derivedKey, normal salt, SHA-512, with empty info with wrong (ECDH) key\n[PASS] short derivedKey, normal salt, SHA-512, with empty info with missing salt\n[PASS] short derivedKey, normal salt, SHA-512, with empty info with missing info\n[PASS] short derivedKey, normal salt, SHA-512, with empty info with null length\n[PASS] short derivedKey, normal salt, SHA-512, with empty info with non-multiple of 8 length\n[PASS] short derivedKey, normal salt, SHA-512, with empty info with bad hash name SHA512\n[PASS] short derivedKey, normal salt, SHA-512, with empty info with missing deriveBits usage\n[PASS] short derivedKey, normal salt, SHA-512, with empty info with wrong (ECDH) key\n[PASS] short derivedKey, normal salt, SHA-1, with normal info\n[PASS] short derivedKey, normal salt, SHA-1, with normal info with 0 length\n[PASS] Derived key of type name: AES-CBC length: 128  using short derivedKey, normal salt, SHA-1, with normal info\n[PASS] Derived key of type name: AES-CBC length: 128  using short derivedKey, normal salt, SHA-1, with normal info with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 128  using short derivedKey, normal salt, SHA-1, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using short derivedKey, normal salt, SHA-1, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using short derivedKey, normal salt, SHA-1, with normal info\n[PASS] Derived key of type name: AES-CBC length: 192  using short derivedKey, normal salt, SHA-1, with normal info with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 192  using short derivedKey, normal salt, SHA-1, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using short derivedKey, normal salt, SHA-1, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using short derivedKey, normal salt, SHA-1, with normal info\n[PASS] Derived key of type name: AES-CBC length: 256  using short derivedKey, normal salt, SHA-1, with normal info with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 256  using short derivedKey, normal salt, SHA-1, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using short derivedKey, normal salt, SHA-1, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using short derivedKey, normal salt, SHA-1, with normal info\n[PASS] Derived key of type name: AES-CTR length: 128  using short derivedKey, normal salt, SHA-1, with normal info with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 128  using short derivedKey, normal salt, SHA-1, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using short derivedKey, normal salt, SHA-1, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using short derivedKey, normal salt, SHA-1, with normal info\n[PASS] Derived key of type name: AES-CTR length: 192  using short derivedKey, normal salt, SHA-1, with normal info with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 192  using short derivedKey, normal salt, SHA-1, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using short derivedKey, normal salt, SHA-1, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using short derivedKey, normal salt, SHA-1, with normal info\n[PASS] Derived key of type name: AES-CTR length: 256  using short derivedKey, normal salt, SHA-1, with normal info with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 256  using short derivedKey, normal salt, SHA-1, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using short derivedKey, normal salt, SHA-1, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using short derivedKey, normal salt, SHA-1, with normal info\n[PASS] Derived key of type name: AES-GCM length: 128  using short derivedKey, normal salt, SHA-1, with normal info with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 128  using short derivedKey, normal salt, SHA-1, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using short derivedKey, normal salt, SHA-1, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using short derivedKey, normal salt, SHA-1, with normal info\n[PASS] Derived key of type name: AES-GCM length: 192  using short derivedKey, normal salt, SHA-1, with normal info with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 192  using short derivedKey, normal salt, SHA-1, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using short derivedKey, normal salt, SHA-1, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using short derivedKey, normal salt, SHA-1, with normal info\n[PASS] Derived key of type name: AES-GCM length: 256  using short derivedKey, normal salt, SHA-1, with normal info with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 256  using short derivedKey, normal salt, SHA-1, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using short derivedKey, normal salt, SHA-1, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using short derivedKey, normal salt, SHA-1, with normal info\n[PASS] Derived key of type name: AES-KW length: 128  using short derivedKey, normal salt, SHA-1, with normal info with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 128  using short derivedKey, normal salt, SHA-1, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using short derivedKey, normal salt, SHA-1, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using short derivedKey, normal salt, SHA-1, with normal info\n[PASS] Derived key of type name: AES-KW length: 192  using short derivedKey, normal salt, SHA-1, with normal info with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 192  using short derivedKey, normal salt, SHA-1, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using short derivedKey, normal salt, SHA-1, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using short derivedKey, normal salt, SHA-1, with normal info\n[PASS] Derived key of type name: AES-KW length: 256  using short derivedKey, normal salt, SHA-1, with normal info with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 256  using short derivedKey, normal salt, SHA-1, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using short derivedKey, normal salt, SHA-1, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short derivedKey, normal salt, SHA-1, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short derivedKey, normal salt, SHA-1, with normal info with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short derivedKey, normal salt, SHA-1, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short derivedKey, normal salt, SHA-1, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short derivedKey, normal salt, SHA-1, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short derivedKey, normal salt, SHA-1, with normal info with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short derivedKey, normal salt, SHA-1, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short derivedKey, normal salt, SHA-1, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short derivedKey, normal salt, SHA-1, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short derivedKey, normal salt, SHA-1, with normal info with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short derivedKey, normal salt, SHA-1, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short derivedKey, normal salt, SHA-1, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short derivedKey, normal salt, SHA-1, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short derivedKey, normal salt, SHA-1, with normal info with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short derivedKey, normal salt, SHA-1, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short derivedKey, normal salt, SHA-1, with normal info with wrong (ECDH) key\n[PASS] short derivedKey, normal salt, SHA-1, with normal info with missing salt\n[PASS] short derivedKey, normal salt, SHA-1, with normal info with missing info\n[PASS] short derivedKey, normal salt, SHA-1, with normal info with null length\n[PASS] short derivedKey, normal salt, SHA-1, with normal info with non-multiple of 8 length\n[PASS] short derivedKey, normal salt, SHA-1, with normal info with bad hash name SHA1\n[PASS] short derivedKey, normal salt, SHA-1, with normal info with missing deriveBits usage\n[PASS] short derivedKey, normal salt, SHA-1, with normal info with wrong (ECDH) key\n[PASS] short derivedKey, normal salt, SHA-1, with empty info\n[PASS] short derivedKey, normal salt, SHA-1, with empty info with 0 length\n[PASS] Derived key of type name: AES-CBC length: 128  using short derivedKey, normal salt, SHA-1, with empty info\n[PASS] Derived key of type name: AES-CBC length: 128  using short derivedKey, normal salt, SHA-1, with empty info with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 128  using short derivedKey, normal salt, SHA-1, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using short derivedKey, normal salt, SHA-1, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using short derivedKey, normal salt, SHA-1, with empty info\n[PASS] Derived key of type name: AES-CBC length: 192  using short derivedKey, normal salt, SHA-1, with empty info with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 192  using short derivedKey, normal salt, SHA-1, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using short derivedKey, normal salt, SHA-1, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using short derivedKey, normal salt, SHA-1, with empty info\n[PASS] Derived key of type name: AES-CBC length: 256  using short derivedKey, normal salt, SHA-1, with empty info with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 256  using short derivedKey, normal salt, SHA-1, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using short derivedKey, normal salt, SHA-1, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using short derivedKey, normal salt, SHA-1, with empty info\n[PASS] Derived key of type name: AES-CTR length: 128  using short derivedKey, normal salt, SHA-1, with empty info with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 128  using short derivedKey, normal salt, SHA-1, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using short derivedKey, normal salt, SHA-1, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using short derivedKey, normal salt, SHA-1, with empty info\n[PASS] Derived key of type name: AES-CTR length: 192  using short derivedKey, normal salt, SHA-1, with empty info with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 192  using short derivedKey, normal salt, SHA-1, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using short derivedKey, normal salt, SHA-1, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using short derivedKey, normal salt, SHA-1, with empty info\n[PASS] Derived key of type name: AES-CTR length: 256  using short derivedKey, normal salt, SHA-1, with empty info with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 256  using short derivedKey, normal salt, SHA-1, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using short derivedKey, normal salt, SHA-1, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using short derivedKey, normal salt, SHA-1, with empty info\n[PASS] Derived key of type name: AES-GCM length: 128  using short derivedKey, normal salt, SHA-1, with empty info with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 128  using short derivedKey, normal salt, SHA-1, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using short derivedKey, normal salt, SHA-1, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using short derivedKey, normal salt, SHA-1, with empty info\n[PASS] Derived key of type name: AES-GCM length: 192  using short derivedKey, normal salt, SHA-1, with empty info with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 192  using short derivedKey, normal salt, SHA-1, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using short derivedKey, normal salt, SHA-1, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using short derivedKey, normal salt, SHA-1, with empty info\n[PASS] Derived key of type name: AES-GCM length: 256  using short derivedKey, normal salt, SHA-1, with empty info with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 256  using short derivedKey, normal salt, SHA-1, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using short derivedKey, normal salt, SHA-1, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using short derivedKey, normal salt, SHA-1, with empty info\n[PASS] Derived key of type name: AES-KW length: 128  using short derivedKey, normal salt, SHA-1, with empty info with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 128  using short derivedKey, normal salt, SHA-1, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using short derivedKey, normal salt, SHA-1, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using short derivedKey, normal salt, SHA-1, with empty info\n[PASS] Derived key of type name: AES-KW length: 192  using short derivedKey, normal salt, SHA-1, with empty info with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 192  using short derivedKey, normal salt, SHA-1, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using short derivedKey, normal salt, SHA-1, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using short derivedKey, normal salt, SHA-1, with empty info\n[PASS] Derived key of type name: AES-KW length: 256  using short derivedKey, normal salt, SHA-1, with empty info with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 256  using short derivedKey, normal salt, SHA-1, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using short derivedKey, normal salt, SHA-1, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short derivedKey, normal salt, SHA-1, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short derivedKey, normal salt, SHA-1, with empty info with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short derivedKey, normal salt, SHA-1, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short derivedKey, normal salt, SHA-1, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short derivedKey, normal salt, SHA-1, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short derivedKey, normal salt, SHA-1, with empty info with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short derivedKey, normal salt, SHA-1, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short derivedKey, normal salt, SHA-1, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short derivedKey, normal salt, SHA-1, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short derivedKey, normal salt, SHA-1, with empty info with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short derivedKey, normal salt, SHA-1, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short derivedKey, normal salt, SHA-1, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short derivedKey, normal salt, SHA-1, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short derivedKey, normal salt, SHA-1, with empty info with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short derivedKey, normal salt, SHA-1, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short derivedKey, normal salt, SHA-1, with empty info with wrong (ECDH) key\n[PASS] short derivedKey, normal salt, SHA-1, with empty info with missing salt\n[PASS] short derivedKey, normal salt, SHA-1, with empty info with missing info\n[PASS] short derivedKey, normal salt, SHA-1, with empty info with null length\n[PASS] short derivedKey, normal salt, SHA-1, with empty info with non-multiple of 8 length\n[PASS] short derivedKey, normal salt, SHA-1, with empty info with bad hash name SHA1\n[PASS] short derivedKey, normal salt, SHA-1, with empty info with missing deriveBits usage\n[PASS] short derivedKey, normal salt, SHA-1, with empty info with wrong (ECDH) key\n[PASS] short derivedKey, normal salt, SHA-256, with normal info\n[PASS] short derivedKey, normal salt, SHA-256, with normal info with 0 length\n[PASS] Derived key of type name: AES-CBC length: 128  using short derivedKey, normal salt, SHA-256, with normal info\n[PASS] Derived key of type name: AES-CBC length: 128  using short derivedKey, normal salt, SHA-256, with normal info with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 128  using short derivedKey, normal salt, SHA-256, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using short derivedKey, normal salt, SHA-256, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using short derivedKey, normal salt, SHA-256, with normal info\n[PASS] Derived key of type name: AES-CBC length: 192  using short derivedKey, normal salt, SHA-256, with normal info with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 192  using short derivedKey, normal salt, SHA-256, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using short derivedKey, normal salt, SHA-256, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using short derivedKey, normal salt, SHA-256, with normal info\n[PASS] Derived key of type name: AES-CBC length: 256  using short derivedKey, normal salt, SHA-256, with normal info with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 256  using short derivedKey, normal salt, SHA-256, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using short derivedKey, normal salt, SHA-256, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using short derivedKey, normal salt, SHA-256, with normal info\n[PASS] Derived key of type name: AES-CTR length: 128  using short derivedKey, normal salt, SHA-256, with normal info with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 128  using short derivedKey, normal salt, SHA-256, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using short derivedKey, normal salt, SHA-256, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using short derivedKey, normal salt, SHA-256, with normal info\n[PASS] Derived key of type name: AES-CTR length: 192  using short derivedKey, normal salt, SHA-256, with normal info with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 192  using short derivedKey, normal salt, SHA-256, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using short derivedKey, normal salt, SHA-256, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using short derivedKey, normal salt, SHA-256, with normal info\n[PASS] Derived key of type name: AES-CTR length: 256  using short derivedKey, normal salt, SHA-256, with normal info with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 256  using short derivedKey, normal salt, SHA-256, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using short derivedKey, normal salt, SHA-256, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using short derivedKey, normal salt, SHA-256, with normal info\n[PASS] Derived key of type name: AES-GCM length: 128  using short derivedKey, normal salt, SHA-256, with normal info with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 128  using short derivedKey, normal salt, SHA-256, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using short derivedKey, normal salt, SHA-256, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using short derivedKey, normal salt, SHA-256, with normal info\n[PASS] Derived key of type name: AES-GCM length: 192  using short derivedKey, normal salt, SHA-256, with normal info with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 192  using short derivedKey, normal salt, SHA-256, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using short derivedKey, normal salt, SHA-256, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using short derivedKey, normal salt, SHA-256, with normal info\n[PASS] Derived key of type name: AES-GCM length: 256  using short derivedKey, normal salt, SHA-256, with normal info with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 256  using short derivedKey, normal salt, SHA-256, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using short derivedKey, normal salt, SHA-256, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using short derivedKey, normal salt, SHA-256, with normal info\n[PASS] Derived key of type name: AES-KW length: 128  using short derivedKey, normal salt, SHA-256, with normal info with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 128  using short derivedKey, normal salt, SHA-256, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using short derivedKey, normal salt, SHA-256, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using short derivedKey, normal salt, SHA-256, with normal info\n[PASS] Derived key of type name: AES-KW length: 192  using short derivedKey, normal salt, SHA-256, with normal info with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 192  using short derivedKey, normal salt, SHA-256, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using short derivedKey, normal salt, SHA-256, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using short derivedKey, normal salt, SHA-256, with normal info\n[PASS] Derived key of type name: AES-KW length: 256  using short derivedKey, normal salt, SHA-256, with normal info with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 256  using short derivedKey, normal salt, SHA-256, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using short derivedKey, normal salt, SHA-256, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short derivedKey, normal salt, SHA-256, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short derivedKey, normal salt, SHA-256, with normal info with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short derivedKey, normal salt, SHA-256, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short derivedKey, normal salt, SHA-256, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short derivedKey, normal salt, SHA-256, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short derivedKey, normal salt, SHA-256, with normal info with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short derivedKey, normal salt, SHA-256, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short derivedKey, normal salt, SHA-256, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short derivedKey, normal salt, SHA-256, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short derivedKey, normal salt, SHA-256, with normal info with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short derivedKey, normal salt, SHA-256, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short derivedKey, normal salt, SHA-256, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short derivedKey, normal salt, SHA-256, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short derivedKey, normal salt, SHA-256, with normal info with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short derivedKey, normal salt, SHA-256, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short derivedKey, normal salt, SHA-256, with normal info with wrong (ECDH) key\n[PASS] short derivedKey, normal salt, SHA-256, with normal info with missing salt\n[PASS] short derivedKey, normal salt, SHA-256, with normal info with missing info\n[PASS] short derivedKey, normal salt, SHA-256, with normal info with null length\n[PASS] short derivedKey, normal salt, SHA-256, with normal info with non-multiple of 8 length\n[PASS] short derivedKey, normal salt, SHA-256, with normal info with bad hash name SHA256\n[PASS] short derivedKey, normal salt, SHA-256, with normal info with missing deriveBits usage\n[PASS] short derivedKey, normal salt, SHA-256, with normal info with wrong (ECDH) key\n[PASS] short derivedKey, normal salt, SHA-256, with empty info\n[PASS] short derivedKey, normal salt, SHA-256, with empty info with 0 length\n[PASS] Derived key of type name: AES-CBC length: 128  using short derivedKey, normal salt, SHA-256, with empty info\n[PASS] Derived key of type name: AES-CBC length: 128  using short derivedKey, normal salt, SHA-256, with empty info with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 128  using short derivedKey, normal salt, SHA-256, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using short derivedKey, normal salt, SHA-256, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using short derivedKey, normal salt, SHA-256, with empty info\n[PASS] Derived key of type name: AES-CBC length: 192  using short derivedKey, normal salt, SHA-256, with empty info with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 192  using short derivedKey, normal salt, SHA-256, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using short derivedKey, normal salt, SHA-256, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using short derivedKey, normal salt, SHA-256, with empty info\n[PASS] Derived key of type name: AES-CBC length: 256  using short derivedKey, normal salt, SHA-256, with empty info with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 256  using short derivedKey, normal salt, SHA-256, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using short derivedKey, normal salt, SHA-256, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using short derivedKey, normal salt, SHA-256, with empty info\n[PASS] Derived key of type name: AES-CTR length: 128  using short derivedKey, normal salt, SHA-256, with empty info with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 128  using short derivedKey, normal salt, SHA-256, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using short derivedKey, normal salt, SHA-256, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using short derivedKey, normal salt, SHA-256, with empty info\n[PASS] Derived key of type name: AES-CTR length: 192  using short derivedKey, normal salt, SHA-256, with empty info with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 192  using short derivedKey, normal salt, SHA-256, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using short derivedKey, normal salt, SHA-256, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using short derivedKey, normal salt, SHA-256, with empty info\n[PASS] Derived key of type name: AES-CTR length: 256  using short derivedKey, normal salt, SHA-256, with empty info with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 256  using short derivedKey, normal salt, SHA-256, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using short derivedKey, normal salt, SHA-256, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using short derivedKey, normal salt, SHA-256, with empty info\n[PASS] Derived key of type name: AES-GCM length: 128  using short derivedKey, normal salt, SHA-256, with empty info with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 128  using short derivedKey, normal salt, SHA-256, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using short derivedKey, normal salt, SHA-256, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using short derivedKey, normal salt, SHA-256, with empty info\n[PASS] Derived key of type name: AES-GCM length: 192  using short derivedKey, normal salt, SHA-256, with empty info with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 192  using short derivedKey, normal salt, SHA-256, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using short derivedKey, normal salt, SHA-256, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using short derivedKey, normal salt, SHA-256, with empty info\n[PASS] Derived key of type name: AES-GCM length: 256  using short derivedKey, normal salt, SHA-256, with empty info with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 256  using short derivedKey, normal salt, SHA-256, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using short derivedKey, normal salt, SHA-256, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using short derivedKey, normal salt, SHA-256, with empty info\n[PASS] Derived key of type name: AES-KW length: 128  using short derivedKey, normal salt, SHA-256, with empty info with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 128  using short derivedKey, normal salt, SHA-256, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using short derivedKey, normal salt, SHA-256, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using short derivedKey, normal salt, SHA-256, with empty info\n[PASS] Derived key of type name: AES-KW length: 192  using short derivedKey, normal salt, SHA-256, with empty info with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 192  using short derivedKey, normal salt, SHA-256, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using short derivedKey, normal salt, SHA-256, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using short derivedKey, normal salt, SHA-256, with empty info\n[PASS] Derived key of type name: AES-KW length: 256  using short derivedKey, normal salt, SHA-256, with empty info with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 256  using short derivedKey, normal salt, SHA-256, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using short derivedKey, normal salt, SHA-256, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short derivedKey, normal salt, SHA-256, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short derivedKey, normal salt, SHA-256, with empty info with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short derivedKey, normal salt, SHA-256, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short derivedKey, normal salt, SHA-256, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short derivedKey, normal salt, SHA-256, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short derivedKey, normal salt, SHA-256, with empty info with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short derivedKey, normal salt, SHA-256, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short derivedKey, normal salt, SHA-256, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short derivedKey, normal salt, SHA-256, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short derivedKey, normal salt, SHA-256, with empty info with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short derivedKey, normal salt, SHA-256, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short derivedKey, normal salt, SHA-256, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short derivedKey, normal salt, SHA-256, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short derivedKey, normal salt, SHA-256, with empty info with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short derivedKey, normal salt, SHA-256, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short derivedKey, normal salt, SHA-256, with empty info with wrong (ECDH) key\n[PASS] short derivedKey, normal salt, SHA-256, with empty info with missing salt\n[PASS] short derivedKey, normal salt, SHA-256, with empty info with missing info\n[PASS] short derivedKey, normal salt, SHA-256, with empty info with null length\n[PASS] short derivedKey, normal salt, SHA-256, with empty info with non-multiple of 8 length\n[PASS] short derivedKey, normal salt, SHA-256, with empty info with bad hash name SHA256\n[PASS] short derivedKey, normal salt, SHA-256, with empty info with missing deriveBits usage\n[PASS] short derivedKey, normal salt, SHA-256, with empty info with wrong (ECDH) key\n[PASS] short derivedKey, normal salt, PBKDF2, with normal info with non-digest algorithm PBKDF2\n[PASS] Derived key of type name: AES-CBC length: 128  using short derivedKey, normal salt, PBKDF2, with normal info\n[PASS] Derived key of type name: AES-CBC length: 192  using short derivedKey, normal salt, PBKDF2, with normal info\n[PASS] Derived key of type name: AES-CBC length: 256  using short derivedKey, normal salt, PBKDF2, with normal info\n[PASS] Derived key of type name: AES-CTR length: 128  using short derivedKey, normal salt, PBKDF2, with normal info\n[PASS] Derived key of type name: AES-CTR length: 192  using short derivedKey, normal salt, PBKDF2, with normal info\n[PASS] Derived key of type name: AES-CTR length: 256  using short derivedKey, normal salt, PBKDF2, with normal info\n[PASS] Derived key of type name: AES-GCM length: 128  using short derivedKey, normal salt, PBKDF2, with normal info\n[PASS] Derived key of type name: AES-GCM length: 192  using short derivedKey, normal salt, PBKDF2, with normal info\n[PASS] Derived key of type name: AES-GCM length: 256  using short derivedKey, normal salt, PBKDF2, with normal info\n[PASS] Derived key of type name: AES-KW length: 128  using short derivedKey, normal salt, PBKDF2, with normal info\n[PASS] Derived key of type name: AES-KW length: 192  using short derivedKey, normal salt, PBKDF2, with normal info\n[PASS] Derived key of type name: AES-KW length: 256  using short derivedKey, normal salt, PBKDF2, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short derivedKey, normal salt, PBKDF2, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short derivedKey, normal salt, PBKDF2, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short derivedKey, normal salt, PBKDF2, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short derivedKey, normal salt, PBKDF2, with normal info\n[PASS] short derivedKey, normal salt, PBKDF2, with empty info with non-digest algorithm PBKDF2\n[PASS] Derived key of type name: AES-CBC length: 128  using short derivedKey, normal salt, PBKDF2, with empty info\n[PASS] Derived key of type name: AES-CBC length: 192  using short derivedKey, normal salt, PBKDF2, with empty info\n[PASS] Derived key of type name: AES-CBC length: 256  using short derivedKey, normal salt, PBKDF2, with empty info\n[PASS] Derived key of type name: AES-CTR length: 128  using short derivedKey, normal salt, PBKDF2, with empty info\n[PASS] Derived key of type name: AES-CTR length: 192  using short derivedKey, normal salt, PBKDF2, with empty info\n[PASS] Derived key of type name: AES-CTR length: 256  using short derivedKey, normal salt, PBKDF2, with empty info\n[PASS] Derived key of type name: AES-GCM length: 128  using short derivedKey, normal salt, PBKDF2, with empty info\n[PASS] Derived key of type name: AES-GCM length: 192  using short derivedKey, normal salt, PBKDF2, with empty info\n[PASS] Derived key of type name: AES-GCM length: 256  using short derivedKey, normal salt, PBKDF2, with empty info\n[PASS] Derived key of type name: AES-KW length: 128  using short derivedKey, normal salt, PBKDF2, with empty info\n[PASS] Derived key of type name: AES-KW length: 192  using short derivedKey, normal salt, PBKDF2, with empty info\n[PASS] Derived key of type name: AES-KW length: 256  using short derivedKey, normal salt, PBKDF2, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short derivedKey, normal salt, PBKDF2, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short derivedKey, normal salt, PBKDF2, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short derivedKey, normal salt, PBKDF2, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short derivedKey, normal salt, PBKDF2, with empty info\n[PASS] short derivedKey, empty salt, SHA-384, with normal info\n[PASS] short derivedKey, empty salt, SHA-384, with normal info with 0 length\n[PASS] Derived key of type name: AES-CBC length: 128  using short derivedKey, empty salt, SHA-384, with normal info\n[PASS] Derived key of type name: AES-CBC length: 128  using short derivedKey, empty salt, SHA-384, with normal info with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 128  using short derivedKey, empty salt, SHA-384, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using short derivedKey, empty salt, SHA-384, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using short derivedKey, empty salt, SHA-384, with normal info\n[PASS] Derived key of type name: AES-CBC length: 192  using short derivedKey, empty salt, SHA-384, with normal info with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 192  using short derivedKey, empty salt, SHA-384, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using short derivedKey, empty salt, SHA-384, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using short derivedKey, empty salt, SHA-384, with normal info\n[PASS] Derived key of type name: AES-CBC length: 256  using short derivedKey, empty salt, SHA-384, with normal info with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 256  using short derivedKey, empty salt, SHA-384, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using short derivedKey, empty salt, SHA-384, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using short derivedKey, empty salt, SHA-384, with normal info\n[PASS] Derived key of type name: AES-CTR length: 128  using short derivedKey, empty salt, SHA-384, with normal info with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 128  using short derivedKey, empty salt, SHA-384, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using short derivedKey, empty salt, SHA-384, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using short derivedKey, empty salt, SHA-384, with normal info\n[PASS] Derived key of type name: AES-CTR length: 192  using short derivedKey, empty salt, SHA-384, with normal info with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 192  using short derivedKey, empty salt, SHA-384, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using short derivedKey, empty salt, SHA-384, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using short derivedKey, empty salt, SHA-384, with normal info\n[PASS] Derived key of type name: AES-CTR length: 256  using short derivedKey, empty salt, SHA-384, with normal info with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 256  using short derivedKey, empty salt, SHA-384, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using short derivedKey, empty salt, SHA-384, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using short derivedKey, empty salt, SHA-384, with normal info\n[PASS] Derived key of type name: AES-GCM length: 128  using short derivedKey, empty salt, SHA-384, with normal info with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 128  using short derivedKey, empty salt, SHA-384, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using short derivedKey, empty salt, SHA-384, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using short derivedKey, empty salt, SHA-384, with normal info\n[PASS] Derived key of type name: AES-GCM length: 192  using short derivedKey, empty salt, SHA-384, with normal info with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 192  using short derivedKey, empty salt, SHA-384, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using short derivedKey, empty salt, SHA-384, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using short derivedKey, empty salt, SHA-384, with normal info\n[PASS] Derived key of type name: AES-GCM length: 256  using short derivedKey, empty salt, SHA-384, with normal info with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 256  using short derivedKey, empty salt, SHA-384, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using short derivedKey, empty salt, SHA-384, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using short derivedKey, empty salt, SHA-384, with normal info\n[PASS] Derived key of type name: AES-KW length: 128  using short derivedKey, empty salt, SHA-384, with normal info with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 128  using short derivedKey, empty salt, SHA-384, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using short derivedKey, empty salt, SHA-384, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using short derivedKey, empty salt, SHA-384, with normal info\n[PASS] Derived key of type name: AES-KW length: 192  using short derivedKey, empty salt, SHA-384, with normal info with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 192  using short derivedKey, empty salt, SHA-384, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using short derivedKey, empty salt, SHA-384, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using short derivedKey, empty salt, SHA-384, with normal info\n[PASS] Derived key of type name: AES-KW length: 256  using short derivedKey, empty salt, SHA-384, with normal info with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 256  using short derivedKey, empty salt, SHA-384, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using short derivedKey, empty salt, SHA-384, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short derivedKey, empty salt, SHA-384, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short derivedKey, empty salt, SHA-384, with normal info with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short derivedKey, empty salt, SHA-384, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short derivedKey, empty salt, SHA-384, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short derivedKey, empty salt, SHA-384, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short derivedKey, empty salt, SHA-384, with normal info with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short derivedKey, empty salt, SHA-384, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short derivedKey, empty salt, SHA-384, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short derivedKey, empty salt, SHA-384, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short derivedKey, empty salt, SHA-384, with normal info with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short derivedKey, empty salt, SHA-384, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short derivedKey, empty salt, SHA-384, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short derivedKey, empty salt, SHA-384, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short derivedKey, empty salt, SHA-384, with normal info with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short derivedKey, empty salt, SHA-384, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short derivedKey, empty salt, SHA-384, with normal info with wrong (ECDH) key\n[PASS] short derivedKey, empty salt, SHA-384, with normal info with missing salt\n[PASS] short derivedKey, empty salt, SHA-384, with normal info with missing info\n[PASS] short derivedKey, empty salt, SHA-384, with normal info with null length\n[PASS] short derivedKey, empty salt, SHA-384, with normal info with non-multiple of 8 length\n[PASS] short derivedKey, empty salt, SHA-384, with normal info with bad hash name SHA384\n[PASS] short derivedKey, empty salt, SHA-384, with normal info with missing deriveBits usage\n[PASS] short derivedKey, empty salt, SHA-384, with normal info with wrong (ECDH) key\n[PASS] short derivedKey, empty salt, SHA-384, with empty info\n[PASS] short derivedKey, empty salt, SHA-384, with empty info with 0 length\n[PASS] Derived key of type name: AES-CBC length: 128  using short derivedKey, empty salt, SHA-384, with empty info\n[PASS] Derived key of type name: AES-CBC length: 128  using short derivedKey, empty salt, SHA-384, with empty info with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 128  using short derivedKey, empty salt, SHA-384, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using short derivedKey, empty salt, SHA-384, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using short derivedKey, empty salt, SHA-384, with empty info\n[PASS] Derived key of type name: AES-CBC length: 192  using short derivedKey, empty salt, SHA-384, with empty info with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 192  using short derivedKey, empty salt, SHA-384, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using short derivedKey, empty salt, SHA-384, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using short derivedKey, empty salt, SHA-384, with empty info\n[PASS] Derived key of type name: AES-CBC length: 256  using short derivedKey, empty salt, SHA-384, with empty info with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 256  using short derivedKey, empty salt, SHA-384, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using short derivedKey, empty salt, SHA-384, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using short derivedKey, empty salt, SHA-384, with empty info\n[PASS] Derived key of type name: AES-CTR length: 128  using short derivedKey, empty salt, SHA-384, with empty info with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 128  using short derivedKey, empty salt, SHA-384, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using short derivedKey, empty salt, SHA-384, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using short derivedKey, empty salt, SHA-384, with empty info\n[PASS] Derived key of type name: AES-CTR length: 192  using short derivedKey, empty salt, SHA-384, with empty info with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 192  using short derivedKey, empty salt, SHA-384, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using short derivedKey, empty salt, SHA-384, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using short derivedKey, empty salt, SHA-384, with empty info\n[PASS] Derived key of type name: AES-CTR length: 256  using short derivedKey, empty salt, SHA-384, with empty info with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 256  using short derivedKey, empty salt, SHA-384, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using short derivedKey, empty salt, SHA-384, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using short derivedKey, empty salt, SHA-384, with empty info\n[PASS] Derived key of type name: AES-GCM length: 128  using short derivedKey, empty salt, SHA-384, with empty info with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 128  using short derivedKey, empty salt, SHA-384, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using short derivedKey, empty salt, SHA-384, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using short derivedKey, empty salt, SHA-384, with empty info\n[PASS] Derived key of type name: AES-GCM length: 192  using short derivedKey, empty salt, SHA-384, with empty info with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 192  using short derivedKey, empty salt, SHA-384, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using short derivedKey, empty salt, SHA-384, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using short derivedKey, empty salt, SHA-384, with empty info\n[PASS] Derived key of type name: AES-GCM length: 256  using short derivedKey, empty salt, SHA-384, with empty info with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 256  using short derivedKey, empty salt, SHA-384, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using short derivedKey, empty salt, SHA-384, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using short derivedKey, empty salt, SHA-384, with empty info\n[PASS] Derived key of type name: AES-KW length: 128  using short derivedKey, empty salt, SHA-384, with empty info with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 128  using short derivedKey, empty salt, SHA-384, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using short derivedKey, empty salt, SHA-384, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using short derivedKey, empty salt, SHA-384, with empty info\n[PASS] Derived key of type name: AES-KW length: 192  using short derivedKey, empty salt, SHA-384, with empty info with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 192  using short derivedKey, empty salt, SHA-384, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using short derivedKey, empty salt, SHA-384, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using short derivedKey, empty salt, SHA-384, with empty info\n[PASS] Derived key of type name: AES-KW length: 256  using short derivedKey, empty salt, SHA-384, with empty info with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 256  using short derivedKey, empty salt, SHA-384, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using short derivedKey, empty salt, SHA-384, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short derivedKey, empty salt, SHA-384, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short derivedKey, empty salt, SHA-384, with empty info with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short derivedKey, empty salt, SHA-384, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short derivedKey, empty salt, SHA-384, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short derivedKey, empty salt, SHA-384, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short derivedKey, empty salt, SHA-384, with empty info with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short derivedKey, empty salt, SHA-384, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short derivedKey, empty salt, SHA-384, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short derivedKey, empty salt, SHA-384, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short derivedKey, empty salt, SHA-384, with empty info with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short derivedKey, empty salt, SHA-384, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short derivedKey, empty salt, SHA-384, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short derivedKey, empty salt, SHA-384, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short derivedKey, empty salt, SHA-384, with empty info with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short derivedKey, empty salt, SHA-384, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short derivedKey, empty salt, SHA-384, with empty info with wrong (ECDH) key\n[PASS] short derivedKey, empty salt, SHA-384, with empty info with missing salt\n[PASS] short derivedKey, empty salt, SHA-384, with empty info with missing info\n[PASS] short derivedKey, empty salt, SHA-384, with empty info with null length\n[PASS] short derivedKey, empty salt, SHA-384, with empty info with non-multiple of 8 length\n[PASS] short derivedKey, empty salt, SHA-384, with empty info with bad hash name SHA384\n[PASS] short derivedKey, empty salt, SHA-384, with empty info with missing deriveBits usage\n[PASS] short derivedKey, empty salt, SHA-384, with empty info with wrong (ECDH) key\n[PASS] short derivedKey, empty salt, SHA-512, with normal info\n[PASS] short derivedKey, empty salt, SHA-512, with normal info with 0 length\n[PASS] Derived key of type name: AES-CBC length: 128  using short derivedKey, empty salt, SHA-512, with normal info\n[PASS] Derived key of type name: AES-CBC length: 128  using short derivedKey, empty salt, SHA-512, with normal info with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 128  using short derivedKey, empty salt, SHA-512, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using short derivedKey, empty salt, SHA-512, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using short derivedKey, empty salt, SHA-512, with normal info\n[PASS] Derived key of type name: AES-CBC length: 192  using short derivedKey, empty salt, SHA-512, with normal info with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 192  using short derivedKey, empty salt, SHA-512, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using short derivedKey, empty salt, SHA-512, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using short derivedKey, empty salt, SHA-512, with normal info\n[PASS] Derived key of type name: AES-CBC length: 256  using short derivedKey, empty salt, SHA-512, with normal info with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 256  using short derivedKey, empty salt, SHA-512, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using short derivedKey, empty salt, SHA-512, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using short derivedKey, empty salt, SHA-512, with normal info\n[PASS] Derived key of type name: AES-CTR length: 128  using short derivedKey, empty salt, SHA-512, with normal info with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 128  using short derivedKey, empty salt, SHA-512, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using short derivedKey, empty salt, SHA-512, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using short derivedKey, empty salt, SHA-512, with normal info\n[PASS] Derived key of type name: AES-CTR length: 192  using short derivedKey, empty salt, SHA-512, with normal info with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 192  using short derivedKey, empty salt, SHA-512, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using short derivedKey, empty salt, SHA-512, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using short derivedKey, empty salt, SHA-512, with normal info\n[PASS] Derived key of type name: AES-CTR length: 256  using short derivedKey, empty salt, SHA-512, with normal info with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 256  using short derivedKey, empty salt, SHA-512, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using short derivedKey, empty salt, SHA-512, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using short derivedKey, empty salt, SHA-512, with normal info\n[PASS] Derived key of type name: AES-GCM length: 128  using short derivedKey, empty salt, SHA-512, with normal info with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 128  using short derivedKey, empty salt, SHA-512, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using short derivedKey, empty salt, SHA-512, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using short derivedKey, empty salt, SHA-512, with normal info\n[PASS] Derived key of type name: AES-GCM length: 192  using short derivedKey, empty salt, SHA-512, with normal info with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 192  using short derivedKey, empty salt, SHA-512, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using short derivedKey, empty salt, SHA-512, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using short derivedKey, empty salt, SHA-512, with normal info\n[PASS] Derived key of type name: AES-GCM length: 256  using short derivedKey, empty salt, SHA-512, with normal info with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 256  using short derivedKey, empty salt, SHA-512, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using short derivedKey, empty salt, SHA-512, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using short derivedKey, empty salt, SHA-512, with normal info\n[PASS] Derived key of type name: AES-KW length: 128  using short derivedKey, empty salt, SHA-512, with normal info with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 128  using short derivedKey, empty salt, SHA-512, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using short derivedKey, empty salt, SHA-512, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using short derivedKey, empty salt, SHA-512, with normal info\n[PASS] Derived key of type name: AES-KW length: 192  using short derivedKey, empty salt, SHA-512, with normal info with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 192  using short derivedKey, empty salt, SHA-512, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using short derivedKey, empty salt, SHA-512, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using short derivedKey, empty salt, SHA-512, with normal info\n[PASS] Derived key of type name: AES-KW length: 256  using short derivedKey, empty salt, SHA-512, with normal info with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 256  using short derivedKey, empty salt, SHA-512, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using short derivedKey, empty salt, SHA-512, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short derivedKey, empty salt, SHA-512, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short derivedKey, empty salt, SHA-512, with normal info with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short derivedKey, empty salt, SHA-512, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short derivedKey, empty salt, SHA-512, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short derivedKey, empty salt, SHA-512, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short derivedKey, empty salt, SHA-512, with normal info with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short derivedKey, empty salt, SHA-512, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short derivedKey, empty salt, SHA-512, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short derivedKey, empty salt, SHA-512, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short derivedKey, empty salt, SHA-512, with normal info with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short derivedKey, empty salt, SHA-512, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short derivedKey, empty salt, SHA-512, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short derivedKey, empty salt, SHA-512, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short derivedKey, empty salt, SHA-512, with normal info with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short derivedKey, empty salt, SHA-512, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short derivedKey, empty salt, SHA-512, with normal info with wrong (ECDH) key\n[PASS] short derivedKey, empty salt, SHA-512, with normal info with missing salt\n[PASS] short derivedKey, empty salt, SHA-512, with normal info with missing info\n[PASS] short derivedKey, empty salt, SHA-512, with normal info with null length\n[PASS] short derivedKey, empty salt, SHA-512, with normal info with non-multiple of 8 length\n[PASS] short derivedKey, empty salt, SHA-512, with normal info with bad hash name SHA512\n[PASS] short derivedKey, empty salt, SHA-512, with normal info with missing deriveBits usage\n[PASS] short derivedKey, empty salt, SHA-512, with normal info with wrong (ECDH) key\n[PASS] short derivedKey, empty salt, SHA-512, with empty info\n[PASS] short derivedKey, empty salt, SHA-512, with empty info with 0 length\n[PASS] Derived key of type name: AES-CBC length: 128  using short derivedKey, empty salt, SHA-512, with empty info\n[PASS] Derived key of type name: AES-CBC length: 128  using short derivedKey, empty salt, SHA-512, with empty info with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 128  using short derivedKey, empty salt, SHA-512, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using short derivedKey, empty salt, SHA-512, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using short derivedKey, empty salt, SHA-512, with empty info\n[PASS] Derived key of type name: AES-CBC length: 192  using short derivedKey, empty salt, SHA-512, with empty info with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 192  using short derivedKey, empty salt, SHA-512, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using short derivedKey, empty salt, SHA-512, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using short derivedKey, empty salt, SHA-512, with empty info\n[PASS] Derived key of type name: AES-CBC length: 256  using short derivedKey, empty salt, SHA-512, with empty info with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 256  using short derivedKey, empty salt, SHA-512, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using short derivedKey, empty salt, SHA-512, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using short derivedKey, empty salt, SHA-512, with empty info\n[PASS] Derived key of type name: AES-CTR length: 128  using short derivedKey, empty salt, SHA-512, with empty info with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 128  using short derivedKey, empty salt, SHA-512, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using short derivedKey, empty salt, SHA-512, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using short derivedKey, empty salt, SHA-512, with empty info\n[PASS] Derived key of type name: AES-CTR length: 192  using short derivedKey, empty salt, SHA-512, with empty info with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 192  using short derivedKey, empty salt, SHA-512, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using short derivedKey, empty salt, SHA-512, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using short derivedKey, empty salt, SHA-512, with empty info\n[PASS] Derived key of type name: AES-CTR length: 256  using short derivedKey, empty salt, SHA-512, with empty info with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 256  using short derivedKey, empty salt, SHA-512, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using short derivedKey, empty salt, SHA-512, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using short derivedKey, empty salt, SHA-512, with empty info\n[PASS] Derived key of type name: AES-GCM length: 128  using short derivedKey, empty salt, SHA-512, with empty info with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 128  using short derivedKey, empty salt, SHA-512, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using short derivedKey, empty salt, SHA-512, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using short derivedKey, empty salt, SHA-512, with empty info\n[PASS] Derived key of type name: AES-GCM length: 192  using short derivedKey, empty salt, SHA-512, with empty info with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 192  using short derivedKey, empty salt, SHA-512, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using short derivedKey, empty salt, SHA-512, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using short derivedKey, empty salt, SHA-512, with empty info\n[PASS] Derived key of type name: AES-GCM length: 256  using short derivedKey, empty salt, SHA-512, with empty info with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 256  using short derivedKey, empty salt, SHA-512, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using short derivedKey, empty salt, SHA-512, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using short derivedKey, empty salt, SHA-512, with empty info\n[PASS] Derived key of type name: AES-KW length: 128  using short derivedKey, empty salt, SHA-512, with empty info with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 128  using short derivedKey, empty salt, SHA-512, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using short derivedKey, empty salt, SHA-512, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using short derivedKey, empty salt, SHA-512, with empty info\n[PASS] Derived key of type name: AES-KW length: 192  using short derivedKey, empty salt, SHA-512, with empty info with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 192  using short derivedKey, empty salt, SHA-512, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using short derivedKey, empty salt, SHA-512, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using short derivedKey, empty salt, SHA-512, with empty info\n[PASS] Derived key of type name: AES-KW length: 256  using short derivedKey, empty salt, SHA-512, with empty info with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 256  using short derivedKey, empty salt, SHA-512, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using short derivedKey, empty salt, SHA-512, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short derivedKey, empty salt, SHA-512, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short derivedKey, empty salt, SHA-512, with empty info with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short derivedKey, empty salt, SHA-512, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short derivedKey, empty salt, SHA-512, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short derivedKey, empty salt, SHA-512, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short derivedKey, empty salt, SHA-512, with empty info with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short derivedKey, empty salt, SHA-512, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short derivedKey, empty salt, SHA-512, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short derivedKey, empty salt, SHA-512, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short derivedKey, empty salt, SHA-512, with empty info with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short derivedKey, empty salt, SHA-512, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short derivedKey, empty salt, SHA-512, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short derivedKey, empty salt, SHA-512, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short derivedKey, empty salt, SHA-512, with empty info with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short derivedKey, empty salt, SHA-512, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short derivedKey, empty salt, SHA-512, with empty info with wrong (ECDH) key\n[PASS] short derivedKey, empty salt, SHA-512, with empty info with missing salt\n[PASS] short derivedKey, empty salt, SHA-512, with empty info with missing info\n[PASS] short derivedKey, empty salt, SHA-512, with empty info with null length\n[PASS] short derivedKey, empty salt, SHA-512, with empty info with non-multiple of 8 length\n[PASS] short derivedKey, empty salt, SHA-512, with empty info with bad hash name SHA512\n[PASS] short derivedKey, empty salt, SHA-512, with empty info with missing deriveBits usage\n[PASS] short derivedKey, empty salt, SHA-512, with empty info with wrong (ECDH) key\n[PASS] short derivedKey, empty salt, SHA-1, with normal info\n[PASS] short derivedKey, empty salt, SHA-1, with normal info with 0 length\n[PASS] Derived key of type name: AES-CBC length: 128  using short derivedKey, empty salt, SHA-1, with normal info\n[PASS] Derived key of type name: AES-CBC length: 128  using short derivedKey, empty salt, SHA-1, with normal info with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 128  using short derivedKey, empty salt, SHA-1, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using short derivedKey, empty salt, SHA-1, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using short derivedKey, empty salt, SHA-1, with normal info\n[PASS] Derived key of type name: AES-CBC length: 192  using short derivedKey, empty salt, SHA-1, with normal info with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 192  using short derivedKey, empty salt, SHA-1, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using short derivedKey, empty salt, SHA-1, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using short derivedKey, empty salt, SHA-1, with normal info\n[PASS] Derived key of type name: AES-CBC length: 256  using short derivedKey, empty salt, SHA-1, with normal info with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 256  using short derivedKey, empty salt, SHA-1, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using short derivedKey, empty salt, SHA-1, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using short derivedKey, empty salt, SHA-1, with normal info\n[PASS] Derived key of type name: AES-CTR length: 128  using short derivedKey, empty salt, SHA-1, with normal info with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 128  using short derivedKey, empty salt, SHA-1, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using short derivedKey, empty salt, SHA-1, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using short derivedKey, empty salt, SHA-1, with normal info\n[PASS] Derived key of type name: AES-CTR length: 192  using short derivedKey, empty salt, SHA-1, with normal info with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 192  using short derivedKey, empty salt, SHA-1, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using short derivedKey, empty salt, SHA-1, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using short derivedKey, empty salt, SHA-1, with normal info\n[PASS] Derived key of type name: AES-CTR length: 256  using short derivedKey, empty salt, SHA-1, with normal info with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 256  using short derivedKey, empty salt, SHA-1, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using short derivedKey, empty salt, SHA-1, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using short derivedKey, empty salt, SHA-1, with normal info\n[PASS] Derived key of type name: AES-GCM length: 128  using short derivedKey, empty salt, SHA-1, with normal info with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 128  using short derivedKey, empty salt, SHA-1, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using short derivedKey, empty salt, SHA-1, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using short derivedKey, empty salt, SHA-1, with normal info\n[PASS] Derived key of type name: AES-GCM length: 192  using short derivedKey, empty salt, SHA-1, with normal info with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 192  using short derivedKey, empty salt, SHA-1, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using short derivedKey, empty salt, SHA-1, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using short derivedKey, empty salt, SHA-1, with normal info\n[PASS] Derived key of type name: AES-GCM length: 256  using short derivedKey, empty salt, SHA-1, with normal info with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 256  using short derivedKey, empty salt, SHA-1, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using short derivedKey, empty salt, SHA-1, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using short derivedKey, empty salt, SHA-1, with normal info\n[PASS] Derived key of type name: AES-KW length: 128  using short derivedKey, empty salt, SHA-1, with normal info with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 128  using short derivedKey, empty salt, SHA-1, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using short derivedKey, empty salt, SHA-1, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using short derivedKey, empty salt, SHA-1, with normal info\n[PASS] Derived key of type name: AES-KW length: 192  using short derivedKey, empty salt, SHA-1, with normal info with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 192  using short derivedKey, empty salt, SHA-1, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using short derivedKey, empty salt, SHA-1, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using short derivedKey, empty salt, SHA-1, with normal info\n[PASS] Derived key of type name: AES-KW length: 256  using short derivedKey, empty salt, SHA-1, with normal info with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 256  using short derivedKey, empty salt, SHA-1, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using short derivedKey, empty salt, SHA-1, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short derivedKey, empty salt, SHA-1, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short derivedKey, empty salt, SHA-1, with normal info with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short derivedKey, empty salt, SHA-1, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short derivedKey, empty salt, SHA-1, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short derivedKey, empty salt, SHA-1, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short derivedKey, empty salt, SHA-1, with normal info with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short derivedKey, empty salt, SHA-1, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short derivedKey, empty salt, SHA-1, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short derivedKey, empty salt, SHA-1, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short derivedKey, empty salt, SHA-1, with normal info with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short derivedKey, empty salt, SHA-1, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short derivedKey, empty salt, SHA-1, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short derivedKey, empty salt, SHA-1, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short derivedKey, empty salt, SHA-1, with normal info with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short derivedKey, empty salt, SHA-1, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short derivedKey, empty salt, SHA-1, with normal info with wrong (ECDH) key\n[PASS] short derivedKey, empty salt, SHA-1, with normal info with missing salt\n[PASS] short derivedKey, empty salt, SHA-1, with normal info with missing info\n[PASS] short derivedKey, empty salt, SHA-1, with normal info with null length\n[PASS] short derivedKey, empty salt, SHA-1, with normal info with non-multiple of 8 length\n[PASS] short derivedKey, empty salt, SHA-1, with normal info with bad hash name SHA1\n[PASS] short derivedKey, empty salt, SHA-1, with normal info with missing deriveBits usage\n[PASS] short derivedKey, empty salt, SHA-1, with normal info with wrong (ECDH) key\n[PASS] short derivedKey, empty salt, SHA-1, with empty info\n[PASS] short derivedKey, empty salt, SHA-1, with empty info with 0 length\n[PASS] Derived key of type name: AES-CBC length: 128  using short derivedKey, empty salt, SHA-1, with empty info\n[PASS] Derived key of type name: AES-CBC length: 128  using short derivedKey, empty salt, SHA-1, with empty info with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 128  using short derivedKey, empty salt, SHA-1, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using short derivedKey, empty salt, SHA-1, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using short derivedKey, empty salt, SHA-1, with empty info\n[PASS] Derived key of type name: AES-CBC length: 192  using short derivedKey, empty salt, SHA-1, with empty info with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 192  using short derivedKey, empty salt, SHA-1, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using short derivedKey, empty salt, SHA-1, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using short derivedKey, empty salt, SHA-1, with empty info\n[PASS] Derived key of type name: AES-CBC length: 256  using short derivedKey, empty salt, SHA-1, with empty info with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 256  using short derivedKey, empty salt, SHA-1, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using short derivedKey, empty salt, SHA-1, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using short derivedKey, empty salt, SHA-1, with empty info\n[PASS] Derived key of type name: AES-CTR length: 128  using short derivedKey, empty salt, SHA-1, with empty info with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 128  using short derivedKey, empty salt, SHA-1, with empty info with missing deriveKey usage\n[PASS] setup - define tests\n[PASS] Derived key of type name: AES-CTR length: 128  using short derivedKey, empty salt, SHA-1, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using short derivedKey, empty salt, SHA-1, with empty info\n[PASS] Derived key of type name: AES-CTR length: 192  using short derivedKey, empty salt, SHA-1, with empty info with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 192  using short derivedKey, empty salt, SHA-1, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using short derivedKey, empty salt, SHA-1, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using short derivedKey, empty salt, SHA-1, with empty info\n[PASS] Derived key of type name: AES-CTR length: 256  using short derivedKey, empty salt, SHA-1, with empty info with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 256  using short derivedKey, empty salt, SHA-1, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using short derivedKey, empty salt, SHA-1, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using short derivedKey, empty salt, SHA-1, with empty info\n[PASS] Derived key of type name: AES-GCM length: 128  using short derivedKey, empty salt, SHA-1, with empty info with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 128  using short derivedKey, empty salt, SHA-1, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using short derivedKey, empty salt, SHA-1, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using short derivedKey, empty salt, SHA-1, with empty info\n[PASS] Derived key of type name: AES-GCM length: 192  using short derivedKey, empty salt, SHA-1, with empty info with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 192  using short derivedKey, empty salt, SHA-1, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using short derivedKey, empty salt, SHA-1, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using short derivedKey, empty salt, SHA-1, with empty info\n[PASS] Derived key of type name: AES-GCM length: 256  using short derivedKey, empty salt, SHA-1, with empty info with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 256  using short derivedKey, empty salt, SHA-1, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using short derivedKey, empty salt, SHA-1, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using short derivedKey, empty salt, SHA-1, with empty info\n[PASS] Derived key of type name: AES-KW length: 128  using short derivedKey, empty salt, SHA-1, with empty info with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 128  using short derivedKey, empty salt, SHA-1, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using short derivedKey, empty salt, SHA-1, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using short derivedKey, empty salt, SHA-1, with empty info\n[PASS] Derived key of type name: AES-KW length: 192  using short derivedKey, empty salt, SHA-1, with empty info with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 192  using short derivedKey, empty salt, SHA-1, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using short derivedKey, empty salt, SHA-1, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using short derivedKey, empty salt, SHA-1, with empty info\n[PASS] Derived key of type name: AES-KW length: 256  using short derivedKey, empty salt, SHA-1, with empty info with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 256  using short derivedKey, empty salt, SHA-1, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using short derivedKey, empty salt, SHA-1, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short derivedKey, empty salt, SHA-1, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short derivedKey, empty salt, SHA-1, with empty info with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short derivedKey, empty salt, SHA-1, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short derivedKey, empty salt, SHA-1, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short derivedKey, empty salt, SHA-1, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short derivedKey, empty salt, SHA-1, with empty info with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short derivedKey, empty salt, SHA-1, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short derivedKey, empty salt, SHA-1, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short derivedKey, empty salt, SHA-1, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short derivedKey, empty salt, SHA-1, with empty info with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short derivedKey, empty salt, SHA-1, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short derivedKey, empty salt, SHA-1, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short derivedKey, empty salt, SHA-1, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short derivedKey, empty salt, SHA-1, with empty info with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short derivedKey, empty salt, SHA-1, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short derivedKey, empty salt, SHA-1, with empty info with wrong (ECDH) key\n[PASS] short derivedKey, empty salt, SHA-1, with empty info with missing salt\n[PASS] short derivedKey, empty salt, SHA-1, with empty info with missing info\n[PASS] short derivedKey, empty salt, SHA-1, with empty info with null length\n[PASS] short derivedKey, empty salt, SHA-1, with empty info with non-multiple of 8 length\n[PASS] short derivedKey, empty salt, SHA-1, with empty info with bad hash name SHA1\n[PASS] short derivedKey, empty salt, SHA-1, with empty info with missing deriveBits usage\n[PASS] short derivedKey, empty salt, SHA-1, with empty info with wrong (ECDH) key\n[PASS] short derivedKey, empty salt, SHA-256, with normal info\n[PASS] short derivedKey, empty salt, SHA-256, with normal info with 0 length\n[PASS] Derived key of type name: AES-CBC length: 128  using short derivedKey, empty salt, SHA-256, with normal info\n[PASS] Derived key of type name: AES-CBC length: 128  using short derivedKey, empty salt, SHA-256, with normal info with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 128  using short derivedKey, empty salt, SHA-256, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using short derivedKey, empty salt, SHA-256, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using short derivedKey, empty salt, SHA-256, with normal info\n[PASS] Derived key of type name: AES-CBC length: 192  using short derivedKey, empty salt, SHA-256, with normal info with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 192  using short derivedKey, empty salt, SHA-256, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using short derivedKey, empty salt, SHA-256, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using short derivedKey, empty salt, SHA-256, with normal info\n[PASS] Derived key of type name: AES-CBC length: 256  using short derivedKey, empty salt, SHA-256, with normal info with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 256  using short derivedKey, empty salt, SHA-256, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using short derivedKey, empty salt, SHA-256, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using short derivedKey, empty salt, SHA-256, with normal info\n[PASS] Derived key of type name: AES-CTR length: 128  using short derivedKey, empty salt, SHA-256, with normal info with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 128  using short derivedKey, empty salt, SHA-256, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using short derivedKey, empty salt, SHA-256, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using short derivedKey, empty salt, SHA-256, with normal info\n[PASS] Derived key of type name: AES-CTR length: 192  using short derivedKey, empty salt, SHA-256, with normal info with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 192  using short derivedKey, empty salt, SHA-256, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using short derivedKey, empty salt, SHA-256, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using short derivedKey, empty salt, SHA-256, with normal info\n[PASS] Derived key of type name: AES-CTR length: 256  using short derivedKey, empty salt, SHA-256, with normal info with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 256  using short derivedKey, empty salt, SHA-256, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using short derivedKey, empty salt, SHA-256, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using short derivedKey, empty salt, SHA-256, with normal info\n[PASS] Derived key of type name: AES-GCM length: 128  using short derivedKey, empty salt, SHA-256, with normal info with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 128  using short derivedKey, empty salt, SHA-256, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using short derivedKey, empty salt, SHA-256, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using short derivedKey, empty salt, SHA-256, with normal info\n[PASS] Derived key of type name: AES-GCM length: 192  using short derivedKey, empty salt, SHA-256, with normal info with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 192  using short derivedKey, empty salt, SHA-256, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using short derivedKey, empty salt, SHA-256, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using short derivedKey, empty salt, SHA-256, with normal info\n[PASS] Derived key of type name: AES-GCM length: 256  using short derivedKey, empty salt, SHA-256, with normal info with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 256  using short derivedKey, empty salt, SHA-256, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using short derivedKey, empty salt, SHA-256, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using short derivedKey, empty salt, SHA-256, with normal info\n[PASS] Derived key of type name: AES-KW length: 128  using short derivedKey, empty salt, SHA-256, with normal info with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 128  using short derivedKey, empty salt, SHA-256, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using short derivedKey, empty salt, SHA-256, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using short derivedKey, empty salt, SHA-256, with normal info\n[PASS] Derived key of type name: AES-KW length: 192  using short derivedKey, empty salt, SHA-256, with normal info with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 192  using short derivedKey, empty salt, SHA-256, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using short derivedKey, empty salt, SHA-256, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using short derivedKey, empty salt, SHA-256, with normal info\n[PASS] Derived key of type name: AES-KW length: 256  using short derivedKey, empty salt, SHA-256, with normal info with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 256  using short derivedKey, empty salt, SHA-256, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using short derivedKey, empty salt, SHA-256, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short derivedKey, empty salt, SHA-256, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short derivedKey, empty salt, SHA-256, with normal info with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short derivedKey, empty salt, SHA-256, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short derivedKey, empty salt, SHA-256, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short derivedKey, empty salt, SHA-256, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short derivedKey, empty salt, SHA-256, with normal info with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short derivedKey, empty salt, SHA-256, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short derivedKey, empty salt, SHA-256, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short derivedKey, empty salt, SHA-256, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short derivedKey, empty salt, SHA-256, with normal info with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short derivedKey, empty salt, SHA-256, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short derivedKey, empty salt, SHA-256, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short derivedKey, empty salt, SHA-256, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short derivedKey, empty salt, SHA-256, with normal info with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short derivedKey, empty salt, SHA-256, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short derivedKey, empty salt, SHA-256, with normal info with wrong (ECDH) key\n[PASS] short derivedKey, empty salt, SHA-256, with normal info with missing salt\n[PASS] short derivedKey, empty salt, SHA-256, with normal info with missing info\n[PASS] short derivedKey, empty salt, SHA-256, with normal info with null length\n[PASS] short derivedKey, empty salt, SHA-256, with normal info with non-multiple of 8 length\n[PASS] short derivedKey, empty salt, SHA-256, with normal info with bad hash name SHA256\n[PASS] short derivedKey, empty salt, SHA-256, with normal info with missing deriveBits usage\n[PASS] short derivedKey, empty salt, SHA-256, with normal info with wrong (ECDH) key\n[PASS] short derivedKey, empty salt, SHA-256, with empty info\n[PASS] short derivedKey, empty salt, SHA-256, with empty info with 0 length\n[PASS] Derived key of type name: AES-CBC length: 128  using short derivedKey, empty salt, SHA-256, with empty info\n[PASS] Derived key of type name: AES-CBC length: 128  using short derivedKey, empty salt, SHA-256, with empty info with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 128  using short derivedKey, empty salt, SHA-256, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using short derivedKey, empty salt, SHA-256, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using short derivedKey, empty salt, SHA-256, with empty info\n[PASS] Derived key of type name: AES-CBC length: 192  using short derivedKey, empty salt, SHA-256, with empty info with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 192  using short derivedKey, empty salt, SHA-256, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using short derivedKey, empty salt, SHA-256, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using short derivedKey, empty salt, SHA-256, with empty info\n[PASS] Derived key of type name: AES-CBC length: 256  using short derivedKey, empty salt, SHA-256, with empty info with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 256  using short derivedKey, empty salt, SHA-256, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using short derivedKey, empty salt, SHA-256, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using short derivedKey, empty salt, SHA-256, with empty info\n[PASS] Derived key of type name: AES-CTR length: 128  using short derivedKey, empty salt, SHA-256, with empty info with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 128  using short derivedKey, empty salt, SHA-256, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using short derivedKey, empty salt, SHA-256, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using short derivedKey, empty salt, SHA-256, with empty info\n[PASS] Derived key of type name: AES-CTR length: 192  using short derivedKey, empty salt, SHA-256, with empty info with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 192  using short derivedKey, empty salt, SHA-256, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using short derivedKey, empty salt, SHA-256, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using short derivedKey, empty salt, SHA-256, with empty info\n[PASS] Derived key of type name: AES-CTR length: 256  using short derivedKey, empty salt, SHA-256, with empty info with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 256  using short derivedKey, empty salt, SHA-256, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using short derivedKey, empty salt, SHA-256, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using short derivedKey, empty salt, SHA-256, with empty info\n[PASS] Derived key of type name: AES-GCM length: 128  using short derivedKey, empty salt, SHA-256, with empty info with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 128  using short derivedKey, empty salt, SHA-256, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using short derivedKey, empty salt, SHA-256, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using short derivedKey, empty salt, SHA-256, with empty info\n[PASS] Derived key of type name: AES-GCM length: 192  using short derivedKey, empty salt, SHA-256, with empty info with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 192  using short derivedKey, empty salt, SHA-256, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using short derivedKey, empty salt, SHA-256, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using short derivedKey, empty salt, SHA-256, with empty info\n[PASS] Derived key of type name: AES-GCM length: 256  using short derivedKey, empty salt, SHA-256, with empty info with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 256  using short derivedKey, empty salt, SHA-256, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using short derivedKey, empty salt, SHA-256, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using short derivedKey, empty salt, SHA-256, with empty info\n[PASS] Derived key of type name: AES-KW length: 128  using short derivedKey, empty salt, SHA-256, with empty info with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 128  using short derivedKey, empty salt, SHA-256, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using short derivedKey, empty salt, SHA-256, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using short derivedKey, empty salt, SHA-256, with empty info\n[PASS] Derived key of type name: AES-KW length: 192  using short derivedKey, empty salt, SHA-256, with empty info with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 192  using short derivedKey, empty salt, SHA-256, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using short derivedKey, empty salt, SHA-256, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using short derivedKey, empty salt, SHA-256, with empty info\n[PASS] Derived key of type name: AES-KW length: 256  using short derivedKey, empty salt, SHA-256, with empty info with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 256  using short derivedKey, empty salt, SHA-256, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using short derivedKey, empty salt, SHA-256, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short derivedKey, empty salt, SHA-256, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short derivedKey, empty salt, SHA-256, with empty info with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short derivedKey, empty salt, SHA-256, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short derivedKey, empty salt, SHA-256, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short derivedKey, empty salt, SHA-256, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short derivedKey, empty salt, SHA-256, with empty info with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short derivedKey, empty salt, SHA-256, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short derivedKey, empty salt, SHA-256, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short derivedKey, empty salt, SHA-256, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short derivedKey, empty salt, SHA-256, with empty info with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short derivedKey, empty salt, SHA-256, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short derivedKey, empty salt, SHA-256, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short derivedKey, empty salt, SHA-256, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short derivedKey, empty salt, SHA-256, with empty info with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short derivedKey, empty salt, SHA-256, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short derivedKey, empty salt, SHA-256, with empty info with wrong (ECDH) key\n[PASS] short derivedKey, empty salt, SHA-256, with empty info with missing salt\n[PASS] short derivedKey, empty salt, SHA-256, with empty info with missing info\n[PASS] short derivedKey, empty salt, SHA-256, with empty info with null length\n[PASS] short derivedKey, empty salt, SHA-256, with empty info with non-multiple of 8 length\n[PASS] short derivedKey, empty salt, SHA-256, with empty info with bad hash name SHA256\n[PASS] short derivedKey, empty salt, SHA-256, with empty info with missing deriveBits usage\n[PASS] short derivedKey, empty salt, SHA-256, with empty info with wrong (ECDH) key\n[PASS] short derivedKey, empty salt, PBKDF2, with normal info with non-digest algorithm PBKDF2\n[PASS] Derived key of type name: AES-CBC length: 128  using short derivedKey, empty salt, PBKDF2, with normal info\n[PASS] Derived key of type name: AES-CBC length: 192  using short derivedKey, empty salt, PBKDF2, with normal info\n[PASS] Derived key of type name: AES-CBC length: 256  using short derivedKey, empty salt, PBKDF2, with normal info\n[PASS] Derived key of type name: AES-CTR length: 128  using short derivedKey, empty salt, PBKDF2, with normal info\n[PASS] Derived key of type name: AES-CTR length: 192  using short derivedKey, empty salt, PBKDF2, with normal info\n[PASS] Derived key of type name: AES-CTR length: 256  using short derivedKey, empty salt, PBKDF2, with normal info\n[PASS] Derived key of type name: AES-GCM length: 128  using short derivedKey, empty salt, PBKDF2, with normal info\n[PASS] Derived key of type name: AES-GCM length: 192  using short derivedKey, empty salt, PBKDF2, with normal info\n[PASS] Derived key of type name: AES-GCM length: 256  using short derivedKey, empty salt, PBKDF2, with normal info\n[PASS] Derived key of type name: AES-KW length: 128  using short derivedKey, empty salt, PBKDF2, with normal info\n[PASS] Derived key of type name: AES-KW length: 192  using short derivedKey, empty salt, PBKDF2, with normal info\n[PASS] Derived key of type name: AES-KW length: 256  using short derivedKey, empty salt, PBKDF2, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short derivedKey, empty salt, PBKDF2, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short derivedKey, empty salt, PBKDF2, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short derivedKey, empty salt, PBKDF2, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short derivedKey, empty salt, PBKDF2, with normal info\n[PASS] short derivedKey, empty salt, PBKDF2, with empty info with non-digest algorithm PBKDF2\n[PASS] Derived key of type name: AES-CBC length: 128  using short derivedKey, empty salt, PBKDF2, with empty info\n[PASS] Derived key of type name: AES-CBC length: 192  using short derivedKey, empty salt, PBKDF2, with empty info\n[PASS] Derived key of type name: AES-CBC length: 256  using short derivedKey, empty salt, PBKDF2, with empty info\n[PASS] Derived key of type name: AES-CTR length: 128  using short derivedKey, empty salt, PBKDF2, with empty info\n[PASS] Derived key of type name: AES-CTR length: 192  using short derivedKey, empty salt, PBKDF2, with empty info\n[PASS] Derived key of type name: AES-CTR length: 256  using short derivedKey, empty salt, PBKDF2, with empty info\n[PASS] Derived key of type name: AES-GCM length: 128  using short derivedKey, empty salt, PBKDF2, with empty info\n[PASS] Derived key of type name: AES-GCM length: 192  using short derivedKey, empty salt, PBKDF2, with empty info\n[PASS] Derived key of type name: AES-GCM length: 256  using short derivedKey, empty salt, PBKDF2, with empty info\n[PASS] Derived key of type name: AES-KW length: 128  using short derivedKey, empty salt, PBKDF2, with empty info\n[PASS] Derived key of type name: AES-KW length: 192  using short derivedKey, empty salt, PBKDF2, with empty info\n[PASS] Derived key of type name: AES-KW length: 256  using short derivedKey, empty salt, PBKDF2, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short derivedKey, empty salt, PBKDF2, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short derivedKey, empty salt, PBKDF2, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short derivedKey, empty salt, PBKDF2, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short derivedKey, empty salt, PBKDF2, with empty info\n[PASS] long derivedKey, normal salt, SHA-384, with normal info\n[PASS] long derivedKey, normal salt, SHA-384, with normal info with 0 length\n[PASS] Derived key of type name: AES-CBC length: 128  using long derivedKey, normal salt, SHA-384, with normal info\n[PASS] Derived key of type name: AES-CBC length: 128  using long derivedKey, normal salt, SHA-384, with normal info with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 128  using long derivedKey, normal salt, SHA-384, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using long derivedKey, normal salt, SHA-384, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using long derivedKey, normal salt, SHA-384, with normal info\n[PASS] Derived key of type name: AES-CBC length: 192  using long derivedKey, normal salt, SHA-384, with normal info with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 192  using long derivedKey, normal salt, SHA-384, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using long derivedKey, normal salt, SHA-384, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using long derivedKey, normal salt, SHA-384, with normal info\n[PASS] Derived key of type name: AES-CBC length: 256  using long derivedKey, normal salt, SHA-384, with normal info with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 256  using long derivedKey, normal salt, SHA-384, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using long derivedKey, normal salt, SHA-384, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using long derivedKey, normal salt, SHA-384, with normal info\n[PASS] Derived key of type name: AES-CTR length: 128  using long derivedKey, normal salt, SHA-384, with normal info with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 128  using long derivedKey, normal salt, SHA-384, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using long derivedKey, normal salt, SHA-384, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using long derivedKey, normal salt, SHA-384, with normal info\n[PASS] Derived key of type name: AES-CTR length: 192  using long derivedKey, normal salt, SHA-384, with normal info with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 192  using long derivedKey, normal salt, SHA-384, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using long derivedKey, normal salt, SHA-384, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using long derivedKey, normal salt, SHA-384, with normal info\n[PASS] Derived key of type name: AES-CTR length: 256  using long derivedKey, normal salt, SHA-384, with normal info with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 256  using long derivedKey, normal salt, SHA-384, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using long derivedKey, normal salt, SHA-384, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using long derivedKey, normal salt, SHA-384, with normal info\n[PASS] Derived key of type name: AES-GCM length: 128  using long derivedKey, normal salt, SHA-384, with normal info with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 128  using long derivedKey, normal salt, SHA-384, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using long derivedKey, normal salt, SHA-384, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using long derivedKey, normal salt, SHA-384, with normal info\n[PASS] Derived key of type name: AES-GCM length: 192  using long derivedKey, normal salt, SHA-384, with normal info with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 192  using long derivedKey, normal salt, SHA-384, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using long derivedKey, normal salt, SHA-384, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using long derivedKey, normal salt, SHA-384, with normal info\n[PASS] Derived key of type name: AES-GCM length: 256  using long derivedKey, normal salt, SHA-384, with normal info with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 256  using long derivedKey, normal salt, SHA-384, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using long derivedKey, normal salt, SHA-384, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using long derivedKey, normal salt, SHA-384, with normal info\n[PASS] Derived key of type name: AES-KW length: 128  using long derivedKey, normal salt, SHA-384, with normal info with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 128  using long derivedKey, normal salt, SHA-384, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using long derivedKey, normal salt, SHA-384, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using long derivedKey, normal salt, SHA-384, with normal info\n[PASS] Derived key of type name: AES-KW length: 192  using long derivedKey, normal salt, SHA-384, with normal info with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 192  using long derivedKey, normal salt, SHA-384, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using long derivedKey, normal salt, SHA-384, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using long derivedKey, normal salt, SHA-384, with normal info\n[PASS] Derived key of type name: AES-KW length: 256  using long derivedKey, normal salt, SHA-384, with normal info with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 256  using long derivedKey, normal salt, SHA-384, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using long derivedKey, normal salt, SHA-384, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long derivedKey, normal salt, SHA-384, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long derivedKey, normal salt, SHA-384, with normal info with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long derivedKey, normal salt, SHA-384, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long derivedKey, normal salt, SHA-384, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long derivedKey, normal salt, SHA-384, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long derivedKey, normal salt, SHA-384, with normal info with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long derivedKey, normal salt, SHA-384, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long derivedKey, normal salt, SHA-384, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long derivedKey, normal salt, SHA-384, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long derivedKey, normal salt, SHA-384, with normal info with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long derivedKey, normal salt, SHA-384, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long derivedKey, normal salt, SHA-384, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long derivedKey, normal salt, SHA-384, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long derivedKey, normal salt, SHA-384, with normal info with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long derivedKey, normal salt, SHA-384, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long derivedKey, normal salt, SHA-384, with normal info with wrong (ECDH) key\n[PASS] long derivedKey, normal salt, SHA-384, with normal info with missing salt\n[PASS] long derivedKey, normal salt, SHA-384, with normal info with missing info\n[PASS] long derivedKey, normal salt, SHA-384, with normal info with null length\n[PASS] long derivedKey, normal salt, SHA-384, with normal info with non-multiple of 8 length\n[PASS] long derivedKey, normal salt, SHA-384, with normal info with bad hash name SHA384\n[PASS] long derivedKey, normal salt, SHA-384, with normal info with missing deriveBits usage\n[PASS] long derivedKey, normal salt, SHA-384, with normal info with wrong (ECDH) key\n[PASS] long derivedKey, normal salt, SHA-384, with empty info\n[PASS] long derivedKey, normal salt, SHA-384, with empty info with 0 length\n[PASS] Derived key of type name: AES-CBC length: 128  using long derivedKey, normal salt, SHA-384, with empty info\n[PASS] Derived key of type name: AES-CBC length: 128  using long derivedKey, normal salt, SHA-384, with empty info with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 128  using long derivedKey, normal salt, SHA-384, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using long derivedKey, normal salt, SHA-384, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using long derivedKey, normal salt, SHA-384, with empty info\n[PASS] Derived key of type name: AES-CBC length: 192  using long derivedKey, normal salt, SHA-384, with empty info with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 192  using long derivedKey, normal salt, SHA-384, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using long derivedKey, normal salt, SHA-384, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using long derivedKey, normal salt, SHA-384, with empty info\n[PASS] Derived key of type name: AES-CBC length: 256  using long derivedKey, normal salt, SHA-384, with empty info with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 256  using long derivedKey, normal salt, SHA-384, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using long derivedKey, normal salt, SHA-384, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using long derivedKey, normal salt, SHA-384, with empty info\n[PASS] Derived key of type name: AES-CTR length: 128  using long derivedKey, normal salt, SHA-384, with empty info with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 128  using long derivedKey, normal salt, SHA-384, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using long derivedKey, normal salt, SHA-384, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using long derivedKey, normal salt, SHA-384, with empty info\n[PASS] Derived key of type name: AES-CTR length: 192  using long derivedKey, normal salt, SHA-384, with empty info with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 192  using long derivedKey, normal salt, SHA-384, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using long derivedKey, normal salt, SHA-384, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using long derivedKey, normal salt, SHA-384, with empty info\n[PASS] Derived key of type name: AES-CTR length: 256  using long derivedKey, normal salt, SHA-384, with empty info with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 256  using long derivedKey, normal salt, SHA-384, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using long derivedKey, normal salt, SHA-384, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using long derivedKey, normal salt, SHA-384, with empty info\n[PASS] Derived key of type name: AES-GCM length: 128  using long derivedKey, normal salt, SHA-384, with empty info with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 128  using long derivedKey, normal salt, SHA-384, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using long derivedKey, normal salt, SHA-384, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using long derivedKey, normal salt, SHA-384, with empty info\n[PASS] Derived key of type name: AES-GCM length: 192  using long derivedKey, normal salt, SHA-384, with empty info with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 192  using long derivedKey, normal salt, SHA-384, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using long derivedKey, normal salt, SHA-384, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using long derivedKey, normal salt, SHA-384, with empty info\n[PASS] Derived key of type name: AES-GCM length: 256  using long derivedKey, normal salt, SHA-384, with empty info with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 256  using long derivedKey, normal salt, SHA-384, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using long derivedKey, normal salt, SHA-384, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using long derivedKey, normal salt, SHA-384, with empty info\n[PASS] Derived key of type name: AES-KW length: 128  using long derivedKey, normal salt, SHA-384, with empty info with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 128  using long derivedKey, normal salt, SHA-384, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using long derivedKey, normal salt, SHA-384, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using long derivedKey, normal salt, SHA-384, with empty info\n[PASS] Derived key of type name: AES-KW length: 192  using long derivedKey, normal salt, SHA-384, with empty info with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 192  using long derivedKey, normal salt, SHA-384, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using long derivedKey, normal salt, SHA-384, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using long derivedKey, normal salt, SHA-384, with empty info\n[PASS] Derived key of type name: AES-KW length: 256  using long derivedKey, normal salt, SHA-384, with empty info with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 256  using long derivedKey, normal salt, SHA-384, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using long derivedKey, normal salt, SHA-384, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long derivedKey, normal salt, SHA-384, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long derivedKey, normal salt, SHA-384, with empty info with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long derivedKey, normal salt, SHA-384, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long derivedKey, normal salt, SHA-384, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long derivedKey, normal salt, SHA-384, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long derivedKey, normal salt, SHA-384, with empty info with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long derivedKey, normal salt, SHA-384, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long derivedKey, normal salt, SHA-384, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long derivedKey, normal salt, SHA-384, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long derivedKey, normal salt, SHA-384, with empty info with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long derivedKey, normal salt, SHA-384, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long derivedKey, normal salt, SHA-384, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long derivedKey, normal salt, SHA-384, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long derivedKey, normal salt, SHA-384, with empty info with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long derivedKey, normal salt, SHA-384, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long derivedKey, normal salt, SHA-384, with empty info with wrong (ECDH) key\n[PASS] long derivedKey, normal salt, SHA-384, with empty info with missing salt\n[PASS] long derivedKey, normal salt, SHA-384, with empty info with missing info\n[PASS] long derivedKey, normal salt, SHA-384, with empty info with null length\n[PASS] long derivedKey, normal salt, SHA-384, with empty info with non-multiple of 8 length\n[PASS] long derivedKey, normal salt, SHA-384, with empty info with bad hash name SHA384\n[PASS] long derivedKey, normal salt, SHA-384, with empty info with missing deriveBits usage\n[PASS] long derivedKey, normal salt, SHA-384, with empty info with wrong (ECDH) key\n[PASS] long derivedKey, normal salt, SHA-512, with normal info\n[PASS] long derivedKey, normal salt, SHA-512, with normal info with 0 length\n[PASS] Derived key of type name: AES-CBC length: 128  using long derivedKey, normal salt, SHA-512, with normal info\n[PASS] Derived key of type name: AES-CBC length: 128  using long derivedKey, normal salt, SHA-512, with normal info with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 128  using long derivedKey, normal salt, SHA-512, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using long derivedKey, normal salt, SHA-512, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using long derivedKey, normal salt, SHA-512, with normal info\n[PASS] Derived key of type name: AES-CBC length: 192  using long derivedKey, normal salt, SHA-512, with normal info with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 192  using long derivedKey, normal salt, SHA-512, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using long derivedKey, normal salt, SHA-512, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using long derivedKey, normal salt, SHA-512, with normal info\n[PASS] Derived key of type name: AES-CBC length: 256  using long derivedKey, normal salt, SHA-512, with normal info with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 256  using long derivedKey, normal salt, SHA-512, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using long derivedKey, normal salt, SHA-512, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using long derivedKey, normal salt, SHA-512, with normal info\n[PASS] Derived key of type name: AES-CTR length: 128  using long derivedKey, normal salt, SHA-512, with normal info with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 128  using long derivedKey, normal salt, SHA-512, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using long derivedKey, normal salt, SHA-512, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using long derivedKey, normal salt, SHA-512, with normal info\n[PASS] Derived key of type name: AES-CTR length: 192  using long derivedKey, normal salt, SHA-512, with normal info with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 192  using long derivedKey, normal salt, SHA-512, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using long derivedKey, normal salt, SHA-512, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using long derivedKey, normal salt, SHA-512, with normal info\n[PASS] Derived key of type name: AES-CTR length: 256  using long derivedKey, normal salt, SHA-512, with normal info with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 256  using long derivedKey, normal salt, SHA-512, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using long derivedKey, normal salt, SHA-512, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using long derivedKey, normal salt, SHA-512, with normal info\n[PASS] Derived key of type name: AES-GCM length: 128  using long derivedKey, normal salt, SHA-512, with normal info with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 128  using long derivedKey, normal salt, SHA-512, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using long derivedKey, normal salt, SHA-512, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using long derivedKey, normal salt, SHA-512, with normal info\n[PASS] Derived key of type name: AES-GCM length: 192  using long derivedKey, normal salt, SHA-512, with normal info with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 192  using long derivedKey, normal salt, SHA-512, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using long derivedKey, normal salt, SHA-512, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using long derivedKey, normal salt, SHA-512, with normal info\n[PASS] Derived key of type name: AES-GCM length: 256  using long derivedKey, normal salt, SHA-512, with normal info with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 256  using long derivedKey, normal salt, SHA-512, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using long derivedKey, normal salt, SHA-512, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using long derivedKey, normal salt, SHA-512, with normal info\n[PASS] Derived key of type name: AES-KW length: 128  using long derivedKey, normal salt, SHA-512, with normal info with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 128  using long derivedKey, normal salt, SHA-512, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using long derivedKey, normal salt, SHA-512, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using long derivedKey, normal salt, SHA-512, with normal info\n[PASS] Derived key of type name: AES-KW length: 192  using long derivedKey, normal salt, SHA-512, with normal info with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 192  using long derivedKey, normal salt, SHA-512, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using long derivedKey, normal salt, SHA-512, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using long derivedKey, normal salt, SHA-512, with normal info\n[PASS] Derived key of type name: AES-KW length: 256  using long derivedKey, normal salt, SHA-512, with normal info with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 256  using long derivedKey, normal salt, SHA-512, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using long derivedKey, normal salt, SHA-512, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long derivedKey, normal salt, SHA-512, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long derivedKey, normal salt, SHA-512, with normal info with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long derivedKey, normal salt, SHA-512, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long derivedKey, normal salt, SHA-512, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long derivedKey, normal salt, SHA-512, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long derivedKey, normal salt, SHA-512, with normal info with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long derivedKey, normal salt, SHA-512, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long derivedKey, normal salt, SHA-512, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long derivedKey, normal salt, SHA-512, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long derivedKey, normal salt, SHA-512, with normal info with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long derivedKey, normal salt, SHA-512, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long derivedKey, normal salt, SHA-512, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long derivedKey, normal salt, SHA-512, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long derivedKey, normal salt, SHA-512, with normal info with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long derivedKey, normal salt, SHA-512, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long derivedKey, normal salt, SHA-512, with normal info with wrong (ECDH) key\n[PASS] long derivedKey, normal salt, SHA-512, with normal info with missing salt\n[PASS] long derivedKey, normal salt, SHA-512, with normal info with missing info\n[PASS] long derivedKey, normal salt, SHA-512, with normal info with null length\n[PASS] long derivedKey, normal salt, SHA-512, with normal info with non-multiple of 8 length\n[PASS] long derivedKey, normal salt, SHA-512, with normal info with bad hash name SHA512\n[PASS] long derivedKey, normal salt, SHA-512, with normal info with missing deriveBits usage\n[PASS] long derivedKey, normal salt, SHA-512, with normal info with wrong (ECDH) key\n[PASS] long derivedKey, normal salt, SHA-512, with empty info\n[PASS] long derivedKey, normal salt, SHA-512, with empty info with 0 length\n[PASS] Derived key of type name: AES-CBC length: 128  using long derivedKey, normal salt, SHA-512, with empty info\n[PASS] Derived key of type name: AES-CBC length: 128  using long derivedKey, normal salt, SHA-512, with empty info with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 128  using long derivedKey, normal salt, SHA-512, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using long derivedKey, normal salt, SHA-512, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using long derivedKey, normal salt, SHA-512, with empty info\n[PASS] Derived key of type name: AES-CBC length: 192  using long derivedKey, normal salt, SHA-512, with empty info with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 192  using long derivedKey, normal salt, SHA-512, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using long derivedKey, normal salt, SHA-512, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using long derivedKey, normal salt, SHA-512, with empty info\n[PASS] Derived key of type name: AES-CBC length: 256  using long derivedKey, normal salt, SHA-512, with empty info with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 256  using long derivedKey, normal salt, SHA-512, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using long derivedKey, normal salt, SHA-512, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using long derivedKey, normal salt, SHA-512, with empty info\n[PASS] Derived key of type name: AES-CTR length: 128  using long derivedKey, normal salt, SHA-512, with empty info with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 128  using long derivedKey, normal salt, SHA-512, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using long derivedKey, normal salt, SHA-512, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using long derivedKey, normal salt, SHA-512, with empty info\n[PASS] Derived key of type name: AES-CTR length: 192  using long derivedKey, normal salt, SHA-512, with empty info with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 192  using long derivedKey, normal salt, SHA-512, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using long derivedKey, normal salt, SHA-512, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using long derivedKey, normal salt, SHA-512, with empty info\n[PASS] Derived key of type name: AES-CTR length: 256  using long derivedKey, normal salt, SHA-512, with empty info with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 256  using long derivedKey, normal salt, SHA-512, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using long derivedKey, normal salt, SHA-512, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using long derivedKey, normal salt, SHA-512, with empty info\n[PASS] Derived key of type name: AES-GCM length: 128  using long derivedKey, normal salt, SHA-512, with empty info with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 128  using long derivedKey, normal salt, SHA-512, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using long derivedKey, normal salt, SHA-512, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using long derivedKey, normal salt, SHA-512, with empty info\n[PASS] Derived key of type name: AES-GCM length: 192  using long derivedKey, normal salt, SHA-512, with empty info with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 192  using long derivedKey, normal salt, SHA-512, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using long derivedKey, normal salt, SHA-512, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using long derivedKey, normal salt, SHA-512, with empty info\n[PASS] Derived key of type name: AES-GCM length: 256  using long derivedKey, normal salt, SHA-512, with empty info with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 256  using long derivedKey, normal salt, SHA-512, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using long derivedKey, normal salt, SHA-512, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using long derivedKey, normal salt, SHA-512, with empty info\n[PASS] Derived key of type name: AES-KW length: 128  using long derivedKey, normal salt, SHA-512, with empty info with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 128  using long derivedKey, normal salt, SHA-512, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using long derivedKey, normal salt, SHA-512, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using long derivedKey, normal salt, SHA-512, with empty info\n[PASS] Derived key of type name: AES-KW length: 192  using long derivedKey, normal salt, SHA-512, with empty info with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 192  using long derivedKey, normal salt, SHA-512, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using long derivedKey, normal salt, SHA-512, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using long derivedKey, normal salt, SHA-512, with empty info\n[PASS] Derived key of type name: AES-KW length: 256  using long derivedKey, normal salt, SHA-512, with empty info with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 256  using long derivedKey, normal salt, SHA-512, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using long derivedKey, normal salt, SHA-512, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long derivedKey, normal salt, SHA-512, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long derivedKey, normal salt, SHA-512, with empty info with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long derivedKey, normal salt, SHA-512, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long derivedKey, normal salt, SHA-512, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long derivedKey, normal salt, SHA-512, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long derivedKey, normal salt, SHA-512, with empty info with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long derivedKey, normal salt, SHA-512, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long derivedKey, normal salt, SHA-512, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long derivedKey, normal salt, SHA-512, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long derivedKey, normal salt, SHA-512, with empty info with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long derivedKey, normal salt, SHA-512, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long derivedKey, normal salt, SHA-512, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long derivedKey, normal salt, SHA-512, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long derivedKey, normal salt, SHA-512, with empty info with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long derivedKey, normal salt, SHA-512, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long derivedKey, normal salt, SHA-512, with empty info with wrong (ECDH) key\n[PASS] long derivedKey, normal salt, SHA-512, with empty info with missing salt\n[PASS] long derivedKey, normal salt, SHA-512, with empty info with missing info\n[PASS] long derivedKey, normal salt, SHA-512, with empty info with null length\n[PASS] long derivedKey, normal salt, SHA-512, with empty info with non-multiple of 8 length\n[PASS] long derivedKey, normal salt, SHA-512, with empty info with bad hash name SHA512\n[PASS] long derivedKey, normal salt, SHA-512, with empty info with missing deriveBits usage\n[PASS] long derivedKey, normal salt, SHA-512, with empty info with wrong (ECDH) key\n[PASS] long derivedKey, normal salt, SHA-1, with normal info\n[PASS] long derivedKey, normal salt, SHA-1, with normal info with 0 length\n[PASS] Derived key of type name: AES-CBC length: 128  using long derivedKey, normal salt, SHA-1, with normal info\n[PASS] Derived key of type name: AES-CBC length: 128  using long derivedKey, normal salt, SHA-1, with normal info with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 128  using long derivedKey, normal salt, SHA-1, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using long derivedKey, normal salt, SHA-1, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using long derivedKey, normal salt, SHA-1, with normal info\n[PASS] Derived key of type name: AES-CBC length: 192  using long derivedKey, normal salt, SHA-1, with normal info with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 192  using long derivedKey, normal salt, SHA-1, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using long derivedKey, normal salt, SHA-1, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using long derivedKey, normal salt, SHA-1, with normal info\n[PASS] Derived key of type name: AES-CBC length: 256  using long derivedKey, normal salt, SHA-1, with normal info with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 256  using long derivedKey, normal salt, SHA-1, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using long derivedKey, normal salt, SHA-1, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using long derivedKey, normal salt, SHA-1, with normal info\n[PASS] Derived key of type name: AES-CTR length: 128  using long derivedKey, normal salt, SHA-1, with normal info with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 128  using long derivedKey, normal salt, SHA-1, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using long derivedKey, normal salt, SHA-1, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using long derivedKey, normal salt, SHA-1, with normal info\n[PASS] Derived key of type name: AES-CTR length: 192  using long derivedKey, normal salt, SHA-1, with normal info with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 192  using long derivedKey, normal salt, SHA-1, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using long derivedKey, normal salt, SHA-1, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using long derivedKey, normal salt, SHA-1, with normal info\n[PASS] Derived key of type name: AES-CTR length: 256  using long derivedKey, normal salt, SHA-1, with normal info with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 256  using long derivedKey, normal salt, SHA-1, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using long derivedKey, normal salt, SHA-1, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using long derivedKey, normal salt, SHA-1, with normal info\n[PASS] Derived key of type name: AES-GCM length: 128  using long derivedKey, normal salt, SHA-1, with normal info with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 128  using long derivedKey, normal salt, SHA-1, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using long derivedKey, normal salt, SHA-1, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using long derivedKey, normal salt, SHA-1, with normal info\n[PASS] Derived key of type name: AES-GCM length: 192  using long derivedKey, normal salt, SHA-1, with normal info with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 192  using long derivedKey, normal salt, SHA-1, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using long derivedKey, normal salt, SHA-1, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using long derivedKey, normal salt, SHA-1, with normal info\n[PASS] Derived key of type name: AES-GCM length: 256  using long derivedKey, normal salt, SHA-1, with normal info with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 256  using long derivedKey, normal salt, SHA-1, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using long derivedKey, normal salt, SHA-1, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using long derivedKey, normal salt, SHA-1, with normal info\n[PASS] Derived key of type name: AES-KW length: 128  using long derivedKey, normal salt, SHA-1, with normal info with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 128  using long derivedKey, normal salt, SHA-1, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using long derivedKey, normal salt, SHA-1, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using long derivedKey, normal salt, SHA-1, with normal info\n[PASS] Derived key of type name: AES-KW length: 192  using long derivedKey, normal salt, SHA-1, with normal info with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 192  using long derivedKey, normal salt, SHA-1, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using long derivedKey, normal salt, SHA-1, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using long derivedKey, normal salt, SHA-1, with normal info\n[PASS] Derived key of type name: AES-KW length: 256  using long derivedKey, normal salt, SHA-1, with normal info with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 256  using long derivedKey, normal salt, SHA-1, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using long derivedKey, normal salt, SHA-1, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long derivedKey, normal salt, SHA-1, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long derivedKey, normal salt, SHA-1, with normal info with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long derivedKey, normal salt, SHA-1, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long derivedKey, normal salt, SHA-1, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long derivedKey, normal salt, SHA-1, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long derivedKey, normal salt, SHA-1, with normal info with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long derivedKey, normal salt, SHA-1, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long derivedKey, normal salt, SHA-1, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long derivedKey, normal salt, SHA-1, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long derivedKey, normal salt, SHA-1, with normal info with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long derivedKey, normal salt, SHA-1, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long derivedKey, normal salt, SHA-1, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long derivedKey, normal salt, SHA-1, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long derivedKey, normal salt, SHA-1, with normal info with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long derivedKey, normal salt, SHA-1, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long derivedKey, normal salt, SHA-1, with normal info with wrong (ECDH) key\n[PASS] long derivedKey, normal salt, SHA-1, with normal info with missing salt\n[PASS] long derivedKey, normal salt, SHA-1, with normal info with missing info\n[PASS] long derivedKey, normal salt, SHA-1, with normal info with null length\n[PASS] long derivedKey, normal salt, SHA-1, with normal info with non-multiple of 8 length\n[PASS] long derivedKey, normal salt, SHA-1, with normal info with bad hash name SHA1\n[PASS] long derivedKey, normal salt, SHA-1, with normal info with missing deriveBits usage\n[PASS] long derivedKey, normal salt, SHA-1, with normal info with wrong (ECDH) key\n[PASS] long derivedKey, normal salt, SHA-1, with empty info\n[PASS] long derivedKey, normal salt, SHA-1, with empty info with 0 length\n[PASS] Derived key of type name: AES-CBC length: 128  using long derivedKey, normal salt, SHA-1, with empty info\n[PASS] Derived key of type name: AES-CBC length: 128  using long derivedKey, normal salt, SHA-1, with empty info with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 128  using long derivedKey, normal salt, SHA-1, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using long derivedKey, normal salt, SHA-1, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using long derivedKey, normal salt, SHA-1, with empty info\n[PASS] Derived key of type name: AES-CBC length: 192  using long derivedKey, normal salt, SHA-1, with empty info with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 192  using long derivedKey, normal salt, SHA-1, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using long derivedKey, normal salt, SHA-1, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using long derivedKey, normal salt, SHA-1, with empty info\n[PASS] Derived key of type name: AES-CBC length: 256  using long derivedKey, normal salt, SHA-1, with empty info with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 256  using long derivedKey, normal salt, SHA-1, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using long derivedKey, normal salt, SHA-1, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using long derivedKey, normal salt, SHA-1, with empty info\n[PASS] Derived key of type name: AES-CTR length: 128  using long derivedKey, normal salt, SHA-1, with empty info with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 128  using long derivedKey, normal salt, SHA-1, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using long derivedKey, normal salt, SHA-1, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using long derivedKey, normal salt, SHA-1, with empty info\n[PASS] Derived key of type name: AES-CTR length: 192  using long derivedKey, normal salt, SHA-1, with empty info with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 192  using long derivedKey, normal salt, SHA-1, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using long derivedKey, normal salt, SHA-1, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using long derivedKey, normal salt, SHA-1, with empty info\n[PASS] Derived key of type name: AES-CTR length: 256  using long derivedKey, normal salt, SHA-1, with empty info with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 256  using long derivedKey, normal salt, SHA-1, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using long derivedKey, normal salt, SHA-1, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using long derivedKey, normal salt, SHA-1, with empty info\n[PASS] Derived key of type name: AES-GCM length: 128  using long derivedKey, normal salt, SHA-1, with empty info with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 128  using long derivedKey, normal salt, SHA-1, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using long derivedKey, normal salt, SHA-1, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using long derivedKey, normal salt, SHA-1, with empty info\n[PASS] Derived key of type name: AES-GCM length: 192  using long derivedKey, normal salt, SHA-1, with empty info with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 192  using long derivedKey, normal salt, SHA-1, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using long derivedKey, normal salt, SHA-1, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using long derivedKey, normal salt, SHA-1, with empty info\n[PASS] Derived key of type name: AES-GCM length: 256  using long derivedKey, normal salt, SHA-1, with empty info with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 256  using long derivedKey, normal salt, SHA-1, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using long derivedKey, normal salt, SHA-1, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using long derivedKey, normal salt, SHA-1, with empty info\n[PASS] Derived key of type name: AES-KW length: 128  using long derivedKey, normal salt, SHA-1, with empty info with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 128  using long derivedKey, normal salt, SHA-1, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using long derivedKey, normal salt, SHA-1, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using long derivedKey, normal salt, SHA-1, with empty info\n[PASS] Derived key of type name: AES-KW length: 192  using long derivedKey, normal salt, SHA-1, with empty info with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 192  using long derivedKey, normal salt, SHA-1, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using long derivedKey, normal salt, SHA-1, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using long derivedKey, normal salt, SHA-1, with empty info\n[PASS] Derived key of type name: AES-KW length: 256  using long derivedKey, normal salt, SHA-1, with empty info with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 256  using long derivedKey, normal salt, SHA-1, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using long derivedKey, normal salt, SHA-1, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long derivedKey, normal salt, SHA-1, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long derivedKey, normal salt, SHA-1, with empty info with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long derivedKey, normal salt, SHA-1, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long derivedKey, normal salt, SHA-1, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long derivedKey, normal salt, SHA-1, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long derivedKey, normal salt, SHA-1, with empty info with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long derivedKey, normal salt, SHA-1, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long derivedKey, normal salt, SHA-1, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long derivedKey, normal salt, SHA-1, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long derivedKey, normal salt, SHA-1, with empty info with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long derivedKey, normal salt, SHA-1, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long derivedKey, normal salt, SHA-1, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long derivedKey, normal salt, SHA-1, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long derivedKey, normal salt, SHA-1, with empty info with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long derivedKey, normal salt, SHA-1, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long derivedKey, normal salt, SHA-1, with empty info with wrong (ECDH) key\n[PASS] long derivedKey, normal salt, SHA-1, with empty info with missing salt\n[PASS] long derivedKey, normal salt, SHA-1, with empty info with missing info\n[PASS] long derivedKey, normal salt, SHA-1, with empty info with null length\n[PASS] long derivedKey, normal salt, SHA-1, with empty info with non-multiple of 8 length\n[PASS] long derivedKey, normal salt, SHA-1, with empty info with bad hash name SHA1\n[PASS] long derivedKey, normal salt, SHA-1, with empty info with missing deriveBits usage\n[PASS] long derivedKey, normal salt, SHA-1, with empty info with wrong (ECDH) key\n[PASS] long derivedKey, normal salt, SHA-256, with normal info\n[PASS] long derivedKey, normal salt, SHA-256, with normal info with 0 length\n[PASS] Derived key of type name: AES-CBC length: 128  using long derivedKey, normal salt, SHA-256, with normal info\n[PASS] Derived key of type name: AES-CBC length: 128  using long derivedKey, normal salt, SHA-256, with normal info with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 128  using long derivedKey, normal salt, SHA-256, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using long derivedKey, normal salt, SHA-256, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using long derivedKey, normal salt, SHA-256, with normal info\n[PASS] Derived key of type name: AES-CBC length: 192  using long derivedKey, normal salt, SHA-256, with normal info with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 192  using long derivedKey, normal salt, SHA-256, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using long derivedKey, normal salt, SHA-256, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using long derivedKey, normal salt, SHA-256, with normal info\n[PASS] Derived key of type name: AES-CBC length: 256  using long derivedKey, normal salt, SHA-256, with normal info with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 256  using long derivedKey, normal salt, SHA-256, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using long derivedKey, normal salt, SHA-256, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using long derivedKey, normal salt, SHA-256, with normal info\n[PASS] Derived key of type name: AES-CTR length: 128  using long derivedKey, normal salt, SHA-256, with normal info with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 128  using long derivedKey, normal salt, SHA-256, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using long derivedKey, normal salt, SHA-256, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using long derivedKey, normal salt, SHA-256, with normal info\n[PASS] Derived key of type name: AES-CTR length: 192  using long derivedKey, normal salt, SHA-256, with normal info with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 192  using long derivedKey, normal salt, SHA-256, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using long derivedKey, normal salt, SHA-256, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using long derivedKey, normal salt, SHA-256, with normal info\n[PASS] Derived key of type name: AES-CTR length: 256  using long derivedKey, normal salt, SHA-256, with normal info with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 256  using long derivedKey, normal salt, SHA-256, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using long derivedKey, normal salt, SHA-256, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using long derivedKey, normal salt, SHA-256, with normal info\n[PASS] Derived key of type name: AES-GCM length: 128  using long derivedKey, normal salt, SHA-256, with normal info with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 128  using long derivedKey, normal salt, SHA-256, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using long derivedKey, normal salt, SHA-256, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using long derivedKey, normal salt, SHA-256, with normal info\n[PASS] Derived key of type name: AES-GCM length: 192  using long derivedKey, normal salt, SHA-256, with normal info with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 192  using long derivedKey, normal salt, SHA-256, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using long derivedKey, normal salt, SHA-256, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using long derivedKey, normal salt, SHA-256, with normal info\n[PASS] Derived key of type name: AES-GCM length: 256  using long derivedKey, normal salt, SHA-256, with normal info with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 256  using long derivedKey, normal salt, SHA-256, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using long derivedKey, normal salt, SHA-256, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using long derivedKey, normal salt, SHA-256, with normal info\n[PASS] Derived key of type name: AES-KW length: 128  using long derivedKey, normal salt, SHA-256, with normal info with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 128  using long derivedKey, normal salt, SHA-256, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using long derivedKey, normal salt, SHA-256, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using long derivedKey, normal salt, SHA-256, with normal info\n[PASS] Derived key of type name: AES-KW length: 192  using long derivedKey, normal salt, SHA-256, with normal info with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 192  using long derivedKey, normal salt, SHA-256, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using long derivedKey, normal salt, SHA-256, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using long derivedKey, normal salt, SHA-256, with normal info\n[PASS] Derived key of type name: AES-KW length: 256  using long derivedKey, normal salt, SHA-256, with normal info with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 256  using long derivedKey, normal salt, SHA-256, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using long derivedKey, normal salt, SHA-256, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long derivedKey, normal salt, SHA-256, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long derivedKey, normal salt, SHA-256, with normal info with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long derivedKey, normal salt, SHA-256, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long derivedKey, normal salt, SHA-256, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long derivedKey, normal salt, SHA-256, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long derivedKey, normal salt, SHA-256, with normal info with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long derivedKey, normal salt, SHA-256, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long derivedKey, normal salt, SHA-256, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long derivedKey, normal salt, SHA-256, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long derivedKey, normal salt, SHA-256, with normal info with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long derivedKey, normal salt, SHA-256, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long derivedKey, normal salt, SHA-256, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long derivedKey, normal salt, SHA-256, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long derivedKey, normal salt, SHA-256, with normal info with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long derivedKey, normal salt, SHA-256, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long derivedKey, normal salt, SHA-256, with normal info with wrong (ECDH) key\n[PASS] long derivedKey, normal salt, SHA-256, with normal info with missing salt\n[PASS] long derivedKey, normal salt, SHA-256, with normal info with missing info\n[PASS] long derivedKey, normal salt, SHA-256, with normal info with null length\n[PASS] long derivedKey, normal salt, SHA-256, with normal info with non-multiple of 8 length\n[PASS] long derivedKey, normal salt, SHA-256, with normal info with bad hash name SHA256\n[PASS] long derivedKey, normal salt, SHA-256, with normal info with missing deriveBits usage\n[PASS] long derivedKey, normal salt, SHA-256, with normal info with wrong (ECDH) key\n[PASS] long derivedKey, normal salt, SHA-256, with empty info\n[PASS] long derivedKey, normal salt, SHA-256, with empty info with 0 length\n[PASS] Derived key of type name: AES-CBC length: 128  using long derivedKey, normal salt, SHA-256, with empty info\n[PASS] Derived key of type name: AES-CBC length: 128  using long derivedKey, normal salt, SHA-256, with empty info with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 128  using long derivedKey, normal salt, SHA-256, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using long derivedKey, normal salt, SHA-256, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using long derivedKey, normal salt, SHA-256, with empty info\n[PASS] Derived key of type name: AES-CBC length: 192  using long derivedKey, normal salt, SHA-256, with empty info with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 192  using long derivedKey, normal salt, SHA-256, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using long derivedKey, normal salt, SHA-256, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using long derivedKey, normal salt, SHA-256, with empty info\n[PASS] Derived key of type name: AES-CBC length: 256  using long derivedKey, normal salt, SHA-256, with empty info with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 256  using long derivedKey, normal salt, SHA-256, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using long derivedKey, normal salt, SHA-256, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using long derivedKey, normal salt, SHA-256, with empty info\n[PASS] Derived key of type name: AES-CTR length: 128  using long derivedKey, normal salt, SHA-256, with empty info with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 128  using long derivedKey, normal salt, SHA-256, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using long derivedKey, normal salt, SHA-256, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using long derivedKey, normal salt, SHA-256, with empty info\n[PASS] Derived key of type name: AES-CTR length: 192  using long derivedKey, normal salt, SHA-256, with empty info with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 192  using long derivedKey, normal salt, SHA-256, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using long derivedKey, normal salt, SHA-256, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using long derivedKey, normal salt, SHA-256, with empty info\n[PASS] Derived key of type name: AES-CTR length: 256  using long derivedKey, normal salt, SHA-256, with empty info with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 256  using long derivedKey, normal salt, SHA-256, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using long derivedKey, normal salt, SHA-256, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using long derivedKey, normal salt, SHA-256, with empty info\n[PASS] Derived key of type name: AES-GCM length: 128  using long derivedKey, normal salt, SHA-256, with empty info with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 128  using long derivedKey, normal salt, SHA-256, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using long derivedKey, normal salt, SHA-256, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using long derivedKey, normal salt, SHA-256, with empty info\n[PASS] Derived key of type name: AES-GCM length: 192  using long derivedKey, normal salt, SHA-256, with empty info with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 192  using long derivedKey, normal salt, SHA-256, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using long derivedKey, normal salt, SHA-256, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using long derivedKey, normal salt, SHA-256, with empty info\n[PASS] Derived key of type name: AES-GCM length: 256  using long derivedKey, normal salt, SHA-256, with empty info with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 256  using long derivedKey, normal salt, SHA-256, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using long derivedKey, normal salt, SHA-256, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using long derivedKey, normal salt, SHA-256, with empty info\n[PASS] Derived key of type name: AES-KW length: 128  using long derivedKey, normal salt, SHA-256, with empty info with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 128  using long derivedKey, normal salt, SHA-256, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using long derivedKey, normal salt, SHA-256, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using long derivedKey, normal salt, SHA-256, with empty info\n[PASS] Derived key of type name: AES-KW length: 192  using long derivedKey, normal salt, SHA-256, with empty info with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 192  using long derivedKey, normal salt, SHA-256, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using long derivedKey, normal salt, SHA-256, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using long derivedKey, normal salt, SHA-256, with empty info\n[PASS] Derived key of type name: AES-KW length: 256  using long derivedKey, normal salt, SHA-256, with empty info with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 256  using long derivedKey, normal salt, SHA-256, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using long derivedKey, normal salt, SHA-256, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long derivedKey, normal salt, SHA-256, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long derivedKey, normal salt, SHA-256, with empty info with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long derivedKey, normal salt, SHA-256, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long derivedKey, normal salt, SHA-256, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long derivedKey, normal salt, SHA-256, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long derivedKey, normal salt, SHA-256, with empty info with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long derivedKey, normal salt, SHA-256, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long derivedKey, normal salt, SHA-256, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long derivedKey, normal salt, SHA-256, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long derivedKey, normal salt, SHA-256, with empty info with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long derivedKey, normal salt, SHA-256, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long derivedKey, normal salt, SHA-256, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long derivedKey, normal salt, SHA-256, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long derivedKey, normal salt, SHA-256, with empty info with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long derivedKey, normal salt, SHA-256, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long derivedKey, normal salt, SHA-256, with empty info with wrong (ECDH) key\n[PASS] long derivedKey, normal salt, SHA-256, with empty info with missing salt\n[PASS] long derivedKey, normal salt, SHA-256, with empty info with missing info\n[PASS] long derivedKey, normal salt, SHA-256, with empty info with null length\n[PASS] long derivedKey, normal salt, SHA-256, with empty info with non-multiple of 8 length\n[PASS] long derivedKey, normal salt, SHA-256, with empty info with bad hash name SHA256\n[PASS] long derivedKey, normal salt, SHA-256, with empty info with missing deriveBits usage\n[PASS] long derivedKey, normal salt, SHA-256, with empty info with wrong (ECDH) key\n[PASS] long derivedKey, normal salt, PBKDF2, with normal info with non-digest algorithm PBKDF2\n[PASS] Derived key of type name: AES-CBC length: 128  using long derivedKey, normal salt, PBKDF2, with normal info\n[PASS] Derived key of type name: AES-CBC length: 192  using long derivedKey, normal salt, PBKDF2, with normal info\n[PASS] Derived key of type name: AES-CBC length: 256  using long derivedKey, normal salt, PBKDF2, with normal info\n[PASS] Derived key of type name: AES-CTR length: 128  using long derivedKey, normal salt, PBKDF2, with normal info\n[PASS] Derived key of type name: AES-CTR length: 192  using long derivedKey, normal salt, PBKDF2, with normal info\n[PASS] Derived key of type name: AES-CTR length: 256  using long derivedKey, normal salt, PBKDF2, with normal info\n[PASS] Derived key of type name: AES-GCM length: 128  using long derivedKey, normal salt, PBKDF2, with normal info\n[PASS] Derived key of type name: AES-GCM length: 192  using long derivedKey, normal salt, PBKDF2, with normal info\n[PASS] Derived key of type name: AES-GCM length: 256  using long derivedKey, normal salt, PBKDF2, with normal info\n[PASS] Derived key of type name: AES-KW length: 128  using long derivedKey, normal salt, PBKDF2, with normal info\n[PASS] Derived key of type name: AES-KW length: 192  using long derivedKey, normal salt, PBKDF2, with normal info\n[PASS] Derived key of type name: AES-KW length: 256  using long derivedKey, normal salt, PBKDF2, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long derivedKey, normal salt, PBKDF2, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long derivedKey, normal salt, PBKDF2, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long derivedKey, normal salt, PBKDF2, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long derivedKey, normal salt, PBKDF2, with normal info\n[PASS] long derivedKey, normal salt, PBKDF2, with empty info with non-digest algorithm PBKDF2\n[PASS] Derived key of type name: AES-CBC length: 128  using long derivedKey, normal salt, PBKDF2, with empty info\n[PASS] Derived key of type name: AES-CBC length: 192  using long derivedKey, normal salt, PBKDF2, with empty info\n[PASS] Derived key of type name: AES-CBC length: 256  using long derivedKey, normal salt, PBKDF2, with empty info\n[PASS] Derived key of type name: AES-CTR length: 128  using long derivedKey, normal salt, PBKDF2, with empty info\n[PASS] Derived key of type name: AES-CTR length: 192  using long derivedKey, normal salt, PBKDF2, with empty info\n[PASS] Derived key of type name: AES-CTR length: 256  using long derivedKey, normal salt, PBKDF2, with empty info\n[PASS] Derived key of type name: AES-GCM length: 128  using long derivedKey, normal salt, PBKDF2, with empty info\n[PASS] Derived key of type name: AES-GCM length: 192  using long derivedKey, normal salt, PBKDF2, with empty info\n[PASS] Derived key of type name: AES-GCM length: 256  using long derivedKey, normal salt, PBKDF2, with empty info\n[PASS] Derived key of type name: AES-KW length: 128  using long derivedKey, normal salt, PBKDF2, with empty info\n[PASS] Derived key of type name: AES-KW length: 192  using long derivedKey, normal salt, PBKDF2, with empty info\n[PASS] Derived key of type name: AES-KW length: 256  using long derivedKey, normal salt, PBKDF2, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long derivedKey, normal salt, PBKDF2, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long derivedKey, normal salt, PBKDF2, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long derivedKey, normal salt, PBKDF2, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long derivedKey, normal salt, PBKDF2, with empty info\n[PASS] long derivedKey, empty salt, SHA-384, with normal info\n[PASS] long derivedKey, empty salt, SHA-384, with normal info with 0 length\n[PASS] Derived key of type name: AES-CBC length: 128  using long derivedKey, empty salt, SHA-384, with normal info\n[PASS] Derived key of type name: AES-CBC length: 128  using long derivedKey, empty salt, SHA-384, with normal info with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 128  using long derivedKey, empty salt, SHA-384, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using long derivedKey, empty salt, SHA-384, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using long derivedKey, empty salt, SHA-384, with normal info\n[PASS] Derived key of type name: AES-CBC length: 192  using long derivedKey, empty salt, SHA-384, with normal info with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 192  using long derivedKey, empty salt, SHA-384, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using long derivedKey, empty salt, SHA-384, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using long derivedKey, empty salt, SHA-384, with normal info\n[PASS] Derived key of type name: AES-CBC length: 256  using long derivedKey, empty salt, SHA-384, with normal info with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 256  using long derivedKey, empty salt, SHA-384, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using long derivedKey, empty salt, SHA-384, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using long derivedKey, empty salt, SHA-384, with normal info\n[PASS] Derived key of type name: AES-CTR length: 128  using long derivedKey, empty salt, SHA-384, with normal info with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 128  using long derivedKey, empty salt, SHA-384, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using long derivedKey, empty salt, SHA-384, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using long derivedKey, empty salt, SHA-384, with normal info\n[PASS] Derived key of type name: AES-CTR length: 192  using long derivedKey, empty salt, SHA-384, with normal info with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 192  using long derivedKey, empty salt, SHA-384, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using long derivedKey, empty salt, SHA-384, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using long derivedKey, empty salt, SHA-384, with normal info\n[PASS] Derived key of type name: AES-CTR length: 256  using long derivedKey, empty salt, SHA-384, with normal info with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 256  using long derivedKey, empty salt, SHA-384, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using long derivedKey, empty salt, SHA-384, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using long derivedKey, empty salt, SHA-384, with normal info\n[PASS] Derived key of type name: AES-GCM length: 128  using long derivedKey, empty salt, SHA-384, with normal info with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 128  using long derivedKey, empty salt, SHA-384, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using long derivedKey, empty salt, SHA-384, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using long derivedKey, empty salt, SHA-384, with normal info\n[PASS] Derived key of type name: AES-GCM length: 192  using long derivedKey, empty salt, SHA-384, with normal info with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 192  using long derivedKey, empty salt, SHA-384, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using long derivedKey, empty salt, SHA-384, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using long derivedKey, empty salt, SHA-384, with normal info\n[PASS] Derived key of type name: AES-GCM length: 256  using long derivedKey, empty salt, SHA-384, with normal info with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 256  using long derivedKey, empty salt, SHA-384, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using long derivedKey, empty salt, SHA-384, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using long derivedKey, empty salt, SHA-384, with normal info\n[PASS] Derived key of type name: AES-KW length: 128  using long derivedKey, empty salt, SHA-384, with normal info with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 128  using long derivedKey, empty salt, SHA-384, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using long derivedKey, empty salt, SHA-384, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using long derivedKey, empty salt, SHA-384, with normal info\n[PASS] Derived key of type name: AES-KW length: 192  using long derivedKey, empty salt, SHA-384, with normal info with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 192  using long derivedKey, empty salt, SHA-384, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using long derivedKey, empty salt, SHA-384, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using long derivedKey, empty salt, SHA-384, with normal info\n[PASS] Derived key of type name: AES-KW length: 256  using long derivedKey, empty salt, SHA-384, with normal info with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 256  using long derivedKey, empty salt, SHA-384, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using long derivedKey, empty salt, SHA-384, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long derivedKey, empty salt, SHA-384, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long derivedKey, empty salt, SHA-384, with normal info with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long derivedKey, empty salt, SHA-384, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long derivedKey, empty salt, SHA-384, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long derivedKey, empty salt, SHA-384, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long derivedKey, empty salt, SHA-384, with normal info with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long derivedKey, empty salt, SHA-384, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long derivedKey, empty salt, SHA-384, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long derivedKey, empty salt, SHA-384, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long derivedKey, empty salt, SHA-384, with normal info with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long derivedKey, empty salt, SHA-384, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long derivedKey, empty salt, SHA-384, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long derivedKey, empty salt, SHA-384, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long derivedKey, empty salt, SHA-384, with normal info with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long derivedKey, empty salt, SHA-384, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long derivedKey, empty salt, SHA-384, with normal info with wrong (ECDH) key\n[PASS] long derivedKey, empty salt, SHA-384, with normal info with missing salt\n[PASS] long derivedKey, empty salt, SHA-384, with normal info with missing info\n[PASS] long derivedKey, empty salt, SHA-384, with normal info with null length\n[PASS] long derivedKey, empty salt, SHA-384, with normal info with non-multiple of 8 length\n[PASS] long derivedKey, empty salt, SHA-384, with normal info with bad hash name SHA384\n[PASS] long derivedKey, empty salt, SHA-384, with normal info with missing deriveBits usage\n[PASS] long derivedKey, empty salt, SHA-384, with normal info with wrong (ECDH) key\n[PASS] long derivedKey, empty salt, SHA-384, with empty info\n[PASS] long derivedKey, empty salt, SHA-384, with empty info with 0 length\n[PASS] Derived key of type name: AES-CBC length: 128  using long derivedKey, empty salt, SHA-384, with empty info\n[PASS] Derived key of type name: AES-CBC length: 128  using long derivedKey, empty salt, SHA-384, with empty info with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 128  using long derivedKey, empty salt, SHA-384, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using long derivedKey, empty salt, SHA-384, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using long derivedKey, empty salt, SHA-384, with empty info\n[PASS] Derived key of type name: AES-CBC length: 192  using long derivedKey, empty salt, SHA-384, with empty info with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 192  using long derivedKey, empty salt, SHA-384, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using long derivedKey, empty salt, SHA-384, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using long derivedKey, empty salt, SHA-384, with empty info\n[PASS] Derived key of type name: AES-CBC length: 256  using long derivedKey, empty salt, SHA-384, with empty info with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 256  using long derivedKey, empty salt, SHA-384, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using long derivedKey, empty salt, SHA-384, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using long derivedKey, empty salt, SHA-384, with empty info\n[PASS] Derived key of type name: AES-CTR length: 128  using long derivedKey, empty salt, SHA-384, with empty info with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 128  using long derivedKey, empty salt, SHA-384, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using long derivedKey, empty salt, SHA-384, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using long derivedKey, empty salt, SHA-384, with empty info\n[PASS] Derived key of type name: AES-CTR length: 192  using long derivedKey, empty salt, SHA-384, with empty info with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 192  using long derivedKey, empty salt, SHA-384, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using long derivedKey, empty salt, SHA-384, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using long derivedKey, empty salt, SHA-384, with empty info\n[PASS] Derived key of type name: AES-CTR length: 256  using long derivedKey, empty salt, SHA-384, with empty info with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 256  using long derivedKey, empty salt, SHA-384, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using long derivedKey, empty salt, SHA-384, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using long derivedKey, empty salt, SHA-384, with empty info\n[PASS] Derived key of type name: AES-GCM length: 128  using long derivedKey, empty salt, SHA-384, with empty info with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 128  using long derivedKey, empty salt, SHA-384, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using long derivedKey, empty salt, SHA-384, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using long derivedKey, empty salt, SHA-384, with empty info\n[PASS] Derived key of type name: AES-GCM length: 192  using long derivedKey, empty salt, SHA-384, with empty info with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 192  using long derivedKey, empty salt, SHA-384, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using long derivedKey, empty salt, SHA-384, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using long derivedKey, empty salt, SHA-384, with empty info\n[PASS] Derived key of type name: AES-GCM length: 256  using long derivedKey, empty salt, SHA-384, with empty info with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 256  using long derivedKey, empty salt, SHA-384, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using long derivedKey, empty salt, SHA-384, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using long derivedKey, empty salt, SHA-384, with empty info\n[PASS] Derived key of type name: AES-KW length: 128  using long derivedKey, empty salt, SHA-384, with empty info with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 128  using long derivedKey, empty salt, SHA-384, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using long derivedKey, empty salt, SHA-384, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using long derivedKey, empty salt, SHA-384, with empty info\n[PASS] Derived key of type name: AES-KW length: 192  using long derivedKey, empty salt, SHA-384, with empty info with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 192  using long derivedKey, empty salt, SHA-384, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using long derivedKey, empty salt, SHA-384, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using long derivedKey, empty salt, SHA-384, with empty info\n[PASS] Derived key of type name: AES-KW length: 256  using long derivedKey, empty salt, SHA-384, with empty info with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 256  using long derivedKey, empty salt, SHA-384, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using long derivedKey, empty salt, SHA-384, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long derivedKey, empty salt, SHA-384, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long derivedKey, empty salt, SHA-384, with empty info with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long derivedKey, empty salt, SHA-384, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long derivedKey, empty salt, SHA-384, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long derivedKey, empty salt, SHA-384, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long derivedKey, empty salt, SHA-384, with empty info with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long derivedKey, empty salt, SHA-384, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long derivedKey, empty salt, SHA-384, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long derivedKey, empty salt, SHA-384, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long derivedKey, empty salt, SHA-384, with empty info with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long derivedKey, empty salt, SHA-384, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long derivedKey, empty salt, SHA-384, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long derivedKey, empty salt, SHA-384, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long derivedKey, empty salt, SHA-384, with empty info with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long derivedKey, empty salt, SHA-384, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long derivedKey, empty salt, SHA-384, with empty info with wrong (ECDH) key\n[PASS] long derivedKey, empty salt, SHA-384, with empty info with missing salt\n[PASS] long derivedKey, empty salt, SHA-384, with empty info with missing info\n[PASS] long derivedKey, empty salt, SHA-384, with empty info with null length\n[PASS] long derivedKey, empty salt, SHA-384, with empty info with non-multiple of 8 length\n[PASS] long derivedKey, empty salt, SHA-384, with empty info with bad hash name SHA384\n[PASS] long derivedKey, empty salt, SHA-384, with empty info with missing deriveBits usage\n[PASS] long derivedKey, empty salt, SHA-384, with empty info with wrong (ECDH) key\n[PASS] setup - define tests\n[PASS] long derivedKey, empty salt, SHA-512, with normal info\n[PASS] long derivedKey, empty salt, SHA-512, with normal info with 0 length\n[PASS] Derived key of type name: AES-CBC length: 128  using long derivedKey, empty salt, SHA-512, with normal info\n[PASS] Derived key of type name: AES-CBC length: 128  using long derivedKey, empty salt, SHA-512, with normal info with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 128  using long derivedKey, empty salt, SHA-512, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using long derivedKey, empty salt, SHA-512, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using long derivedKey, empty salt, SHA-512, with normal info\n[PASS] Derived key of type name: AES-CBC length: 192  using long derivedKey, empty salt, SHA-512, with normal info with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 192  using long derivedKey, empty salt, SHA-512, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using long derivedKey, empty salt, SHA-512, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using long derivedKey, empty salt, SHA-512, with normal info\n[PASS] Derived key of type name: AES-CBC length: 256  using long derivedKey, empty salt, SHA-512, with normal info with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 256  using long derivedKey, empty salt, SHA-512, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using long derivedKey, empty salt, SHA-512, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using long derivedKey, empty salt, SHA-512, with normal info\n[PASS] Derived key of type name: AES-CTR length: 128  using long derivedKey, empty salt, SHA-512, with normal info with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 128  using long derivedKey, empty salt, SHA-512, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using long derivedKey, empty salt, SHA-512, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using long derivedKey, empty salt, SHA-512, with normal info\n[PASS] Derived key of type name: AES-CTR length: 192  using long derivedKey, empty salt, SHA-512, with normal info with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 192  using long derivedKey, empty salt, SHA-512, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using long derivedKey, empty salt, SHA-512, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using long derivedKey, empty salt, SHA-512, with normal info\n[PASS] Derived key of type name: AES-CTR length: 256  using long derivedKey, empty salt, SHA-512, with normal info with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 256  using long derivedKey, empty salt, SHA-512, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using long derivedKey, empty salt, SHA-512, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using long derivedKey, empty salt, SHA-512, with normal info\n[PASS] Derived key of type name: AES-GCM length: 128  using long derivedKey, empty salt, SHA-512, with normal info with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 128  using long derivedKey, empty salt, SHA-512, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using long derivedKey, empty salt, SHA-512, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using long derivedKey, empty salt, SHA-512, with normal info\n[PASS] Derived key of type name: AES-GCM length: 192  using long derivedKey, empty salt, SHA-512, with normal info with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 192  using long derivedKey, empty salt, SHA-512, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using long derivedKey, empty salt, SHA-512, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using long derivedKey, empty salt, SHA-512, with normal info\n[PASS] Derived key of type name: AES-GCM length: 256  using long derivedKey, empty salt, SHA-512, with normal info with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 256  using long derivedKey, empty salt, SHA-512, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using long derivedKey, empty salt, SHA-512, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using long derivedKey, empty salt, SHA-512, with normal info\n[PASS] Derived key of type name: AES-KW length: 128  using long derivedKey, empty salt, SHA-512, with normal info with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 128  using long derivedKey, empty salt, SHA-512, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using long derivedKey, empty salt, SHA-512, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using long derivedKey, empty salt, SHA-512, with normal info\n[PASS] Derived key of type name: AES-KW length: 192  using long derivedKey, empty salt, SHA-512, with normal info with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 192  using long derivedKey, empty salt, SHA-512, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using long derivedKey, empty salt, SHA-512, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using long derivedKey, empty salt, SHA-512, with normal info\n[PASS] Derived key of type name: AES-KW length: 256  using long derivedKey, empty salt, SHA-512, with normal info with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 256  using long derivedKey, empty salt, SHA-512, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using long derivedKey, empty salt, SHA-512, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long derivedKey, empty salt, SHA-512, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long derivedKey, empty salt, SHA-512, with normal info with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long derivedKey, empty salt, SHA-512, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long derivedKey, empty salt, SHA-512, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long derivedKey, empty salt, SHA-512, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long derivedKey, empty salt, SHA-512, with normal info with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long derivedKey, empty salt, SHA-512, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long derivedKey, empty salt, SHA-512, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long derivedKey, empty salt, SHA-512, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long derivedKey, empty salt, SHA-512, with normal info with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long derivedKey, empty salt, SHA-512, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long derivedKey, empty salt, SHA-512, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long derivedKey, empty salt, SHA-512, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long derivedKey, empty salt, SHA-512, with normal info with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long derivedKey, empty salt, SHA-512, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long derivedKey, empty salt, SHA-512, with normal info with wrong (ECDH) key\n[PASS] long derivedKey, empty salt, SHA-512, with normal info with missing salt\n[PASS] long derivedKey, empty salt, SHA-512, with normal info with missing info\n[PASS] long derivedKey, empty salt, SHA-512, with normal info with null length\n[PASS] long derivedKey, empty salt, SHA-512, with normal info with non-multiple of 8 length\n[PASS] long derivedKey, empty salt, SHA-512, with normal info with bad hash name SHA512\n[PASS] long derivedKey, empty salt, SHA-512, with normal info with missing deriveBits usage\n[PASS] long derivedKey, empty salt, SHA-512, with normal info with wrong (ECDH) key\n[PASS] long derivedKey, empty salt, SHA-512, with empty info\n[PASS] long derivedKey, empty salt, SHA-512, with empty info with 0 length\n[PASS] Derived key of type name: AES-CBC length: 128  using long derivedKey, empty salt, SHA-512, with empty info\n[PASS] Derived key of type name: AES-CBC length: 128  using long derivedKey, empty salt, SHA-512, with empty info with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 128  using long derivedKey, empty salt, SHA-512, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using long derivedKey, empty salt, SHA-512, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using long derivedKey, empty salt, SHA-512, with empty info\n[PASS] Derived key of type name: AES-CBC length: 192  using long derivedKey, empty salt, SHA-512, with empty info with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 192  using long derivedKey, empty salt, SHA-512, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using long derivedKey, empty salt, SHA-512, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using long derivedKey, empty salt, SHA-512, with empty info\n[PASS] Derived key of type name: AES-CBC length: 256  using long derivedKey, empty salt, SHA-512, with empty info with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 256  using long derivedKey, empty salt, SHA-512, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using long derivedKey, empty salt, SHA-512, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using long derivedKey, empty salt, SHA-512, with empty info\n[PASS] Derived key of type name: AES-CTR length: 128  using long derivedKey, empty salt, SHA-512, with empty info with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 128  using long derivedKey, empty salt, SHA-512, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using long derivedKey, empty salt, SHA-512, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using long derivedKey, empty salt, SHA-512, with empty info\n[PASS] Derived key of type name: AES-CTR length: 192  using long derivedKey, empty salt, SHA-512, with empty info with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 192  using long derivedKey, empty salt, SHA-512, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using long derivedKey, empty salt, SHA-512, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using long derivedKey, empty salt, SHA-512, with empty info\n[PASS] Derived key of type name: AES-CTR length: 256  using long derivedKey, empty salt, SHA-512, with empty info with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 256  using long derivedKey, empty salt, SHA-512, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using long derivedKey, empty salt, SHA-512, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using long derivedKey, empty salt, SHA-512, with empty info\n[PASS] Derived key of type name: AES-GCM length: 128  using long derivedKey, empty salt, SHA-512, with empty info with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 128  using long derivedKey, empty salt, SHA-512, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using long derivedKey, empty salt, SHA-512, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using long derivedKey, empty salt, SHA-512, with empty info\n[PASS] Derived key of type name: AES-GCM length: 192  using long derivedKey, empty salt, SHA-512, with empty info with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 192  using long derivedKey, empty salt, SHA-512, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using long derivedKey, empty salt, SHA-512, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using long derivedKey, empty salt, SHA-512, with empty info\n[PASS] Derived key of type name: AES-GCM length: 256  using long derivedKey, empty salt, SHA-512, with empty info with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 256  using long derivedKey, empty salt, SHA-512, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using long derivedKey, empty salt, SHA-512, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using long derivedKey, empty salt, SHA-512, with empty info\n[PASS] Derived key of type name: AES-KW length: 128  using long derivedKey, empty salt, SHA-512, with empty info with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 128  using long derivedKey, empty salt, SHA-512, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using long derivedKey, empty salt, SHA-512, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using long derivedKey, empty salt, SHA-512, with empty info\n[PASS] Derived key of type name: AES-KW length: 192  using long derivedKey, empty salt, SHA-512, with empty info with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 192  using long derivedKey, empty salt, SHA-512, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using long derivedKey, empty salt, SHA-512, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using long derivedKey, empty salt, SHA-512, with empty info\n[PASS] Derived key of type name: AES-KW length: 256  using long derivedKey, empty salt, SHA-512, with empty info with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 256  using long derivedKey, empty salt, SHA-512, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using long derivedKey, empty salt, SHA-512, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long derivedKey, empty salt, SHA-512, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long derivedKey, empty salt, SHA-512, with empty info with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long derivedKey, empty salt, SHA-512, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long derivedKey, empty salt, SHA-512, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long derivedKey, empty salt, SHA-512, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long derivedKey, empty salt, SHA-512, with empty info with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long derivedKey, empty salt, SHA-512, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long derivedKey, empty salt, SHA-512, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long derivedKey, empty salt, SHA-512, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long derivedKey, empty salt, SHA-512, with empty info with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long derivedKey, empty salt, SHA-512, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long derivedKey, empty salt, SHA-512, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long derivedKey, empty salt, SHA-512, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long derivedKey, empty salt, SHA-512, with empty info with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long derivedKey, empty salt, SHA-512, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long derivedKey, empty salt, SHA-512, with empty info with wrong (ECDH) key\n[PASS] long derivedKey, empty salt, SHA-512, with empty info with missing salt\n[PASS] long derivedKey, empty salt, SHA-512, with empty info with missing info\n[PASS] long derivedKey, empty salt, SHA-512, with empty info with null length\n[PASS] long derivedKey, empty salt, SHA-512, with empty info with non-multiple of 8 length\n[PASS] long derivedKey, empty salt, SHA-512, with empty info with bad hash name SHA512\n[PASS] long derivedKey, empty salt, SHA-512, with empty info with missing deriveBits usage\n[PASS] long derivedKey, empty salt, SHA-512, with empty info with wrong (ECDH) key\n[PASS] long derivedKey, empty salt, SHA-1, with normal info\n[PASS] long derivedKey, empty salt, SHA-1, with normal info with 0 length\n[PASS] Derived key of type name: AES-CBC length: 128  using long derivedKey, empty salt, SHA-1, with normal info\n[PASS] Derived key of type name: AES-CBC length: 128  using long derivedKey, empty salt, SHA-1, with normal info with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 128  using long derivedKey, empty salt, SHA-1, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using long derivedKey, empty salt, SHA-1, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using long derivedKey, empty salt, SHA-1, with normal info\n[PASS] Derived key of type name: AES-CBC length: 192  using long derivedKey, empty salt, SHA-1, with normal info with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 192  using long derivedKey, empty salt, SHA-1, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using long derivedKey, empty salt, SHA-1, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using long derivedKey, empty salt, SHA-1, with normal info\n[PASS] Derived key of type name: AES-CBC length: 256  using long derivedKey, empty salt, SHA-1, with normal info with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 256  using long derivedKey, empty salt, SHA-1, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using long derivedKey, empty salt, SHA-1, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using long derivedKey, empty salt, SHA-1, with normal info\n[PASS] Derived key of type name: AES-CTR length: 128  using long derivedKey, empty salt, SHA-1, with normal info with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 128  using long derivedKey, empty salt, SHA-1, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using long derivedKey, empty salt, SHA-1, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using long derivedKey, empty salt, SHA-1, with normal info\n[PASS] Derived key of type name: AES-CTR length: 192  using long derivedKey, empty salt, SHA-1, with normal info with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 192  using long derivedKey, empty salt, SHA-1, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using long derivedKey, empty salt, SHA-1, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using long derivedKey, empty salt, SHA-1, with normal info\n[PASS] Derived key of type name: AES-CTR length: 256  using long derivedKey, empty salt, SHA-1, with normal info with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 256  using long derivedKey, empty salt, SHA-1, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using long derivedKey, empty salt, SHA-1, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using long derivedKey, empty salt, SHA-1, with normal info\n[PASS] Derived key of type name: AES-GCM length: 128  using long derivedKey, empty salt, SHA-1, with normal info with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 128  using long derivedKey, empty salt, SHA-1, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using long derivedKey, empty salt, SHA-1, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using long derivedKey, empty salt, SHA-1, with normal info\n[PASS] Derived key of type name: AES-GCM length: 192  using long derivedKey, empty salt, SHA-1, with normal info with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 192  using long derivedKey, empty salt, SHA-1, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using long derivedKey, empty salt, SHA-1, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using long derivedKey, empty salt, SHA-1, with normal info\n[PASS] Derived key of type name: AES-GCM length: 256  using long derivedKey, empty salt, SHA-1, with normal info with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 256  using long derivedKey, empty salt, SHA-1, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using long derivedKey, empty salt, SHA-1, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using long derivedKey, empty salt, SHA-1, with normal info\n[PASS] Derived key of type name: AES-KW length: 128  using long derivedKey, empty salt, SHA-1, with normal info with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 128  using long derivedKey, empty salt, SHA-1, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using long derivedKey, empty salt, SHA-1, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using long derivedKey, empty salt, SHA-1, with normal info\n[PASS] Derived key of type name: AES-KW length: 192  using long derivedKey, empty salt, SHA-1, with normal info with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 192  using long derivedKey, empty salt, SHA-1, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using long derivedKey, empty salt, SHA-1, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using long derivedKey, empty salt, SHA-1, with normal info\n[PASS] Derived key of type name: AES-KW length: 256  using long derivedKey, empty salt, SHA-1, with normal info with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 256  using long derivedKey, empty salt, SHA-1, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using long derivedKey, empty salt, SHA-1, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long derivedKey, empty salt, SHA-1, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long derivedKey, empty salt, SHA-1, with normal info with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long derivedKey, empty salt, SHA-1, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long derivedKey, empty salt, SHA-1, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long derivedKey, empty salt, SHA-1, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long derivedKey, empty salt, SHA-1, with normal info with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long derivedKey, empty salt, SHA-1, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long derivedKey, empty salt, SHA-1, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long derivedKey, empty salt, SHA-1, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long derivedKey, empty salt, SHA-1, with normal info with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long derivedKey, empty salt, SHA-1, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long derivedKey, empty salt, SHA-1, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long derivedKey, empty salt, SHA-1, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long derivedKey, empty salt, SHA-1, with normal info with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long derivedKey, empty salt, SHA-1, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long derivedKey, empty salt, SHA-1, with normal info with wrong (ECDH) key\n[PASS] long derivedKey, empty salt, SHA-1, with normal info with missing salt\n[PASS] long derivedKey, empty salt, SHA-1, with normal info with missing info\n[PASS] long derivedKey, empty salt, SHA-1, with normal info with null length\n[PASS] long derivedKey, empty salt, SHA-1, with normal info with non-multiple of 8 length\n[PASS] long derivedKey, empty salt, SHA-1, with normal info with bad hash name SHA1\n[PASS] long derivedKey, empty salt, SHA-1, with normal info with missing deriveBits usage\n[PASS] long derivedKey, empty salt, SHA-1, with normal info with wrong (ECDH) key\n[PASS] long derivedKey, empty salt, SHA-1, with empty info\n[PASS] long derivedKey, empty salt, SHA-1, with empty info with 0 length\n[PASS] Derived key of type name: AES-CBC length: 128  using long derivedKey, empty salt, SHA-1, with empty info\n[PASS] Derived key of type name: AES-CBC length: 128  using long derivedKey, empty salt, SHA-1, with empty info with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 128  using long derivedKey, empty salt, SHA-1, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using long derivedKey, empty salt, SHA-1, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using long derivedKey, empty salt, SHA-1, with empty info\n[PASS] Derived key of type name: AES-CBC length: 192  using long derivedKey, empty salt, SHA-1, with empty info with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 192  using long derivedKey, empty salt, SHA-1, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using long derivedKey, empty salt, SHA-1, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using long derivedKey, empty salt, SHA-1, with empty info\n[PASS] Derived key of type name: AES-CBC length: 256  using long derivedKey, empty salt, SHA-1, with empty info with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 256  using long derivedKey, empty salt, SHA-1, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using long derivedKey, empty salt, SHA-1, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using long derivedKey, empty salt, SHA-1, with empty info\n[PASS] Derived key of type name: AES-CTR length: 128  using long derivedKey, empty salt, SHA-1, with empty info with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 128  using long derivedKey, empty salt, SHA-1, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using long derivedKey, empty salt, SHA-1, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using long derivedKey, empty salt, SHA-1, with empty info\n[PASS] Derived key of type name: AES-CTR length: 192  using long derivedKey, empty salt, SHA-1, with empty info with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 192  using long derivedKey, empty salt, SHA-1, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using long derivedKey, empty salt, SHA-1, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using long derivedKey, empty salt, SHA-1, with empty info\n[PASS] Derived key of type name: AES-CTR length: 256  using long derivedKey, empty salt, SHA-1, with empty info with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 256  using long derivedKey, empty salt, SHA-1, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using long derivedKey, empty salt, SHA-1, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using long derivedKey, empty salt, SHA-1, with empty info\n[PASS] Derived key of type name: AES-GCM length: 128  using long derivedKey, empty salt, SHA-1, with empty info with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 128  using long derivedKey, empty salt, SHA-1, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using long derivedKey, empty salt, SHA-1, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using long derivedKey, empty salt, SHA-1, with empty info\n[PASS] Derived key of type name: AES-GCM length: 192  using long derivedKey, empty salt, SHA-1, with empty info with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 192  using long derivedKey, empty salt, SHA-1, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using long derivedKey, empty salt, SHA-1, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using long derivedKey, empty salt, SHA-1, with empty info\n[PASS] Derived key of type name: AES-GCM length: 256  using long derivedKey, empty salt, SHA-1, with empty info with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 256  using long derivedKey, empty salt, SHA-1, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using long derivedKey, empty salt, SHA-1, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using long derivedKey, empty salt, SHA-1, with empty info\n[PASS] Derived key of type name: AES-KW length: 128  using long derivedKey, empty salt, SHA-1, with empty info with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 128  using long derivedKey, empty salt, SHA-1, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using long derivedKey, empty salt, SHA-1, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using long derivedKey, empty salt, SHA-1, with empty info\n[PASS] Derived key of type name: AES-KW length: 192  using long derivedKey, empty salt, SHA-1, with empty info with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 192  using long derivedKey, empty salt, SHA-1, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using long derivedKey, empty salt, SHA-1, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using long derivedKey, empty salt, SHA-1, with empty info\n[PASS] Derived key of type name: AES-KW length: 256  using long derivedKey, empty salt, SHA-1, with empty info with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 256  using long derivedKey, empty salt, SHA-1, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using long derivedKey, empty salt, SHA-1, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long derivedKey, empty salt, SHA-1, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long derivedKey, empty salt, SHA-1, with empty info with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long derivedKey, empty salt, SHA-1, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long derivedKey, empty salt, SHA-1, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long derivedKey, empty salt, SHA-1, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long derivedKey, empty salt, SHA-1, with empty info with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long derivedKey, empty salt, SHA-1, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long derivedKey, empty salt, SHA-1, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long derivedKey, empty salt, SHA-1, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long derivedKey, empty salt, SHA-1, with empty info with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long derivedKey, empty salt, SHA-1, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long derivedKey, empty salt, SHA-1, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long derivedKey, empty salt, SHA-1, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long derivedKey, empty salt, SHA-1, with empty info with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long derivedKey, empty salt, SHA-1, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long derivedKey, empty salt, SHA-1, with empty info with wrong (ECDH) key\n[PASS] long derivedKey, empty salt, SHA-1, with empty info with missing salt\n[PASS] long derivedKey, empty salt, SHA-1, with empty info with missing info\n[PASS] long derivedKey, empty salt, SHA-1, with empty info with null length\n[PASS] long derivedKey, empty salt, SHA-1, with empty info with non-multiple of 8 length\n[PASS] long derivedKey, empty salt, SHA-1, with empty info with bad hash name SHA1\n[PASS] long derivedKey, empty salt, SHA-1, with empty info with missing deriveBits usage\n[PASS] long derivedKey, empty salt, SHA-1, with empty info with wrong (ECDH) key\n[PASS] long derivedKey, empty salt, SHA-256, with normal info\n[PASS] long derivedKey, empty salt, SHA-256, with normal info with 0 length\n[PASS] Derived key of type name: AES-CBC length: 128  using long derivedKey, empty salt, SHA-256, with normal info\n[PASS] Derived key of type name: AES-CBC length: 128  using long derivedKey, empty salt, SHA-256, with normal info with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 128  using long derivedKey, empty salt, SHA-256, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using long derivedKey, empty salt, SHA-256, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using long derivedKey, empty salt, SHA-256, with normal info\n[PASS] Derived key of type name: AES-CBC length: 192  using long derivedKey, empty salt, SHA-256, with normal info with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 192  using long derivedKey, empty salt, SHA-256, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using long derivedKey, empty salt, SHA-256, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using long derivedKey, empty salt, SHA-256, with normal info\n[PASS] Derived key of type name: AES-CBC length: 256  using long derivedKey, empty salt, SHA-256, with normal info with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 256  using long derivedKey, empty salt, SHA-256, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using long derivedKey, empty salt, SHA-256, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using long derivedKey, empty salt, SHA-256, with normal info\n[PASS] Derived key of type name: AES-CTR length: 128  using long derivedKey, empty salt, SHA-256, with normal info with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 128  using long derivedKey, empty salt, SHA-256, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using long derivedKey, empty salt, SHA-256, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using long derivedKey, empty salt, SHA-256, with normal info\n[PASS] Derived key of type name: AES-CTR length: 192  using long derivedKey, empty salt, SHA-256, with normal info with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 192  using long derivedKey, empty salt, SHA-256, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using long derivedKey, empty salt, SHA-256, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using long derivedKey, empty salt, SHA-256, with normal info\n[PASS] Derived key of type name: AES-CTR length: 256  using long derivedKey, empty salt, SHA-256, with normal info with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 256  using long derivedKey, empty salt, SHA-256, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using long derivedKey, empty salt, SHA-256, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using long derivedKey, empty salt, SHA-256, with normal info\n[PASS] Derived key of type name: AES-GCM length: 128  using long derivedKey, empty salt, SHA-256, with normal info with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 128  using long derivedKey, empty salt, SHA-256, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using long derivedKey, empty salt, SHA-256, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using long derivedKey, empty salt, SHA-256, with normal info\n[PASS] Derived key of type name: AES-GCM length: 192  using long derivedKey, empty salt, SHA-256, with normal info with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 192  using long derivedKey, empty salt, SHA-256, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using long derivedKey, empty salt, SHA-256, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using long derivedKey, empty salt, SHA-256, with normal info\n[PASS] Derived key of type name: AES-GCM length: 256  using long derivedKey, empty salt, SHA-256, with normal info with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 256  using long derivedKey, empty salt, SHA-256, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using long derivedKey, empty salt, SHA-256, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using long derivedKey, empty salt, SHA-256, with normal info\n[PASS] Derived key of type name: AES-KW length: 128  using long derivedKey, empty salt, SHA-256, with normal info with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 128  using long derivedKey, empty salt, SHA-256, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using long derivedKey, empty salt, SHA-256, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using long derivedKey, empty salt, SHA-256, with normal info\n[PASS] Derived key of type name: AES-KW length: 192  using long derivedKey, empty salt, SHA-256, with normal info with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 192  using long derivedKey, empty salt, SHA-256, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using long derivedKey, empty salt, SHA-256, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using long derivedKey, empty salt, SHA-256, with normal info\n[PASS] Derived key of type name: AES-KW length: 256  using long derivedKey, empty salt, SHA-256, with normal info with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 256  using long derivedKey, empty salt, SHA-256, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using long derivedKey, empty salt, SHA-256, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long derivedKey, empty salt, SHA-256, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long derivedKey, empty salt, SHA-256, with normal info with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long derivedKey, empty salt, SHA-256, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long derivedKey, empty salt, SHA-256, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long derivedKey, empty salt, SHA-256, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long derivedKey, empty salt, SHA-256, with normal info with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long derivedKey, empty salt, SHA-256, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long derivedKey, empty salt, SHA-256, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long derivedKey, empty salt, SHA-256, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long derivedKey, empty salt, SHA-256, with normal info with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long derivedKey, empty salt, SHA-256, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long derivedKey, empty salt, SHA-256, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long derivedKey, empty salt, SHA-256, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long derivedKey, empty salt, SHA-256, with normal info with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long derivedKey, empty salt, SHA-256, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long derivedKey, empty salt, SHA-256, with normal info with wrong (ECDH) key\n[PASS] long derivedKey, empty salt, SHA-256, with normal info with missing salt\n[PASS] long derivedKey, empty salt, SHA-256, with normal info with missing info\n[PASS] long derivedKey, empty salt, SHA-256, with normal info with null length\n[PASS] long derivedKey, empty salt, SHA-256, with normal info with non-multiple of 8 length\n[PASS] long derivedKey, empty salt, SHA-256, with normal info with bad hash name SHA256\n[PASS] long derivedKey, empty salt, SHA-256, with normal info with missing deriveBits usage\n[PASS] long derivedKey, empty salt, SHA-256, with normal info with wrong (ECDH) key\n[PASS] long derivedKey, empty salt, SHA-256, with empty info\n[PASS] long derivedKey, empty salt, SHA-256, with empty info with 0 length\n[PASS] Derived key of type name: AES-CBC length: 128  using long derivedKey, empty salt, SHA-256, with empty info\n[PASS] Derived key of type name: AES-CBC length: 128  using long derivedKey, empty salt, SHA-256, with empty info with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 128  using long derivedKey, empty salt, SHA-256, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using long derivedKey, empty salt, SHA-256, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using long derivedKey, empty salt, SHA-256, with empty info\n[PASS] Derived key of type name: AES-CBC length: 192  using long derivedKey, empty salt, SHA-256, with empty info with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 192  using long derivedKey, empty salt, SHA-256, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using long derivedKey, empty salt, SHA-256, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using long derivedKey, empty salt, SHA-256, with empty info\n[PASS] Derived key of type name: AES-CBC length: 256  using long derivedKey, empty salt, SHA-256, with empty info with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 256  using long derivedKey, empty salt, SHA-256, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using long derivedKey, empty salt, SHA-256, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using long derivedKey, empty salt, SHA-256, with empty info\n[PASS] Derived key of type name: AES-CTR length: 128  using long derivedKey, empty salt, SHA-256, with empty info with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 128  using long derivedKey, empty salt, SHA-256, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using long derivedKey, empty salt, SHA-256, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using long derivedKey, empty salt, SHA-256, with empty info\n[PASS] Derived key of type name: AES-CTR length: 192  using long derivedKey, empty salt, SHA-256, with empty info with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 192  using long derivedKey, empty salt, SHA-256, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using long derivedKey, empty salt, SHA-256, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using long derivedKey, empty salt, SHA-256, with empty info\n[PASS] Derived key of type name: AES-CTR length: 256  using long derivedKey, empty salt, SHA-256, with empty info with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 256  using long derivedKey, empty salt, SHA-256, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using long derivedKey, empty salt, SHA-256, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using long derivedKey, empty salt, SHA-256, with empty info\n[PASS] Derived key of type name: AES-GCM length: 128  using long derivedKey, empty salt, SHA-256, with empty info with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 128  using long derivedKey, empty salt, SHA-256, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using long derivedKey, empty salt, SHA-256, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using long derivedKey, empty salt, SHA-256, with empty info\n[PASS] Derived key of type name: AES-GCM length: 192  using long derivedKey, empty salt, SHA-256, with empty info with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 192  using long derivedKey, empty salt, SHA-256, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using long derivedKey, empty salt, SHA-256, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using long derivedKey, empty salt, SHA-256, with empty info\n[PASS] Derived key of type name: AES-GCM length: 256  using long derivedKey, empty salt, SHA-256, with empty info with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 256  using long derivedKey, empty salt, SHA-256, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using long derivedKey, empty salt, SHA-256, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using long derivedKey, empty salt, SHA-256, with empty info\n[PASS] Derived key of type name: AES-KW length: 128  using long derivedKey, empty salt, SHA-256, with empty info with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 128  using long derivedKey, empty salt, SHA-256, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using long derivedKey, empty salt, SHA-256, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using long derivedKey, empty salt, SHA-256, with empty info\n[PASS] Derived key of type name: AES-KW length: 192  using long derivedKey, empty salt, SHA-256, with empty info with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 192  using long derivedKey, empty salt, SHA-256, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using long derivedKey, empty salt, SHA-256, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using long derivedKey, empty salt, SHA-256, with empty info\n[PASS] Derived key of type name: AES-KW length: 256  using long derivedKey, empty salt, SHA-256, with empty info with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 256  using long derivedKey, empty salt, SHA-256, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using long derivedKey, empty salt, SHA-256, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long derivedKey, empty salt, SHA-256, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long derivedKey, empty salt, SHA-256, with empty info with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long derivedKey, empty salt, SHA-256, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long derivedKey, empty salt, SHA-256, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long derivedKey, empty salt, SHA-256, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long derivedKey, empty salt, SHA-256, with empty info with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long derivedKey, empty salt, SHA-256, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long derivedKey, empty salt, SHA-256, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long derivedKey, empty salt, SHA-256, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long derivedKey, empty salt, SHA-256, with empty info with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long derivedKey, empty salt, SHA-256, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long derivedKey, empty salt, SHA-256, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long derivedKey, empty salt, SHA-256, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long derivedKey, empty salt, SHA-256, with empty info with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long derivedKey, empty salt, SHA-256, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long derivedKey, empty salt, SHA-256, with empty info with wrong (ECDH) key\n[PASS] long derivedKey, empty salt, SHA-256, with empty info with missing salt\n[PASS] long derivedKey, empty salt, SHA-256, with empty info with missing info\n[PASS] long derivedKey, empty salt, SHA-256, with empty info with null length\n[PASS] long derivedKey, empty salt, SHA-256, with empty info with non-multiple of 8 length\n[PASS] long derivedKey, empty salt, SHA-256, with empty info with bad hash name SHA256\n[PASS] long derivedKey, empty salt, SHA-256, with empty info with missing deriveBits usage\n[PASS] long derivedKey, empty salt, SHA-256, with empty info with wrong (ECDH) key\n[PASS] long derivedKey, empty salt, PBKDF2, with normal info with non-digest algorithm PBKDF2\n[PASS] Derived key of type name: AES-CBC length: 128  using long derivedKey, empty salt, PBKDF2, with normal info\n[PASS] Derived key of type name: AES-CBC length: 192  using long derivedKey, empty salt, PBKDF2, with normal info\n[PASS] Derived key of type name: AES-CBC length: 256  using long derivedKey, empty salt, PBKDF2, with normal info\n[PASS] Derived key of type name: AES-CTR length: 128  using long derivedKey, empty salt, PBKDF2, with normal info\n[PASS] Derived key of type name: AES-CTR length: 192  using long derivedKey, empty salt, PBKDF2, with normal info\n[PASS] Derived key of type name: AES-CTR length: 256  using long derivedKey, empty salt, PBKDF2, with normal info\n[PASS] Derived key of type name: AES-GCM length: 128  using long derivedKey, empty salt, PBKDF2, with normal info\n[PASS] Derived key of type name: AES-GCM length: 192  using long derivedKey, empty salt, PBKDF2, with normal info\n[PASS] Derived key of type name: AES-GCM length: 256  using long derivedKey, empty salt, PBKDF2, with normal info\n[PASS] Derived key of type name: AES-KW length: 128  using long derivedKey, empty salt, PBKDF2, with normal info\n[PASS] Derived key of type name: AES-KW length: 192  using long derivedKey, empty salt, PBKDF2, with normal info\n[PASS] Derived key of type name: AES-KW length: 256  using long derivedKey, empty salt, PBKDF2, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long derivedKey, empty salt, PBKDF2, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long derivedKey, empty salt, PBKDF2, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long derivedKey, empty salt, PBKDF2, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long derivedKey, empty salt, PBKDF2, with normal info\n[PASS] long derivedKey, empty salt, PBKDF2, with empty info with non-digest algorithm PBKDF2\n[PASS] Derived key of type name: AES-CBC length: 128  using long derivedKey, empty salt, PBKDF2, with empty info\n[PASS] Derived key of type name: AES-CBC length: 192  using long derivedKey, empty salt, PBKDF2, with empty info\n[PASS] Derived key of type name: AES-CBC length: 256  using long derivedKey, empty salt, PBKDF2, with empty info\n[PASS] Derived key of type name: AES-CTR length: 128  using long derivedKey, empty salt, PBKDF2, with empty info\n[PASS] Derived key of type name: AES-CTR length: 192  using long derivedKey, empty salt, PBKDF2, with empty info\n[PASS] Derived key of type name: AES-CTR length: 256  using long derivedKey, empty salt, PBKDF2, with empty info\n[PASS] Derived key of type name: AES-GCM length: 128  using long derivedKey, empty salt, PBKDF2, with empty info\n[PASS] Derived key of type name: AES-GCM length: 192  using long derivedKey, empty salt, PBKDF2, with empty info\n[PASS] Derived key of type name: AES-GCM length: 256  using long derivedKey, empty salt, PBKDF2, with empty info\n[PASS] Derived key of type name: AES-KW length: 128  using long derivedKey, empty salt, PBKDF2, with empty info\n[PASS] Derived key of type name: AES-KW length: 192  using long derivedKey, empty salt, PBKDF2, with empty info\n[PASS] Derived key of type name: AES-KW length: 256  using long derivedKey, empty salt, PBKDF2, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long derivedKey, empty salt, PBKDF2, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long derivedKey, empty salt, PBKDF2, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long derivedKey, empty salt, PBKDF2, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long derivedKey, empty salt, PBKDF2, with empty info\n[PASS] empty derivedKey, normal salt, SHA-384, with normal info\n[PASS] empty derivedKey, normal salt, SHA-384, with normal info with 0 length\n[PASS] Derived key of type name: AES-CBC length: 128  using empty derivedKey, normal salt, SHA-384, with normal info\n[PASS] Derived key of type name: AES-CBC length: 128  using empty derivedKey, normal salt, SHA-384, with normal info with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 128  using empty derivedKey, normal salt, SHA-384, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using empty derivedKey, normal salt, SHA-384, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using empty derivedKey, normal salt, SHA-384, with normal info\n[PASS] Derived key of type name: AES-CBC length: 192  using empty derivedKey, normal salt, SHA-384, with normal info with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 192  using empty derivedKey, normal salt, SHA-384, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using empty derivedKey, normal salt, SHA-384, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using empty derivedKey, normal salt, SHA-384, with normal info\n[PASS] Derived key of type name: AES-CBC length: 256  using empty derivedKey, normal salt, SHA-384, with normal info with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 256  using empty derivedKey, normal salt, SHA-384, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using empty derivedKey, normal salt, SHA-384, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using empty derivedKey, normal salt, SHA-384, with normal info\n[PASS] Derived key of type name: AES-CTR length: 128  using empty derivedKey, normal salt, SHA-384, with normal info with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 128  using empty derivedKey, normal salt, SHA-384, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using empty derivedKey, normal salt, SHA-384, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using empty derivedKey, normal salt, SHA-384, with normal info\n[PASS] Derived key of type name: AES-CTR length: 192  using empty derivedKey, normal salt, SHA-384, with normal info with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 192  using empty derivedKey, normal salt, SHA-384, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using empty derivedKey, normal salt, SHA-384, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using empty derivedKey, normal salt, SHA-384, with normal info\n[PASS] Derived key of type name: AES-CTR length: 256  using empty derivedKey, normal salt, SHA-384, with normal info with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 256  using empty derivedKey, normal salt, SHA-384, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using empty derivedKey, normal salt, SHA-384, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using empty derivedKey, normal salt, SHA-384, with normal info\n[PASS] Derived key of type name: AES-GCM length: 128  using empty derivedKey, normal salt, SHA-384, with normal info with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 128  using empty derivedKey, normal salt, SHA-384, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using empty derivedKey, normal salt, SHA-384, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using empty derivedKey, normal salt, SHA-384, with normal info\n[PASS] Derived key of type name: AES-GCM length: 192  using empty derivedKey, normal salt, SHA-384, with normal info with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 192  using empty derivedKey, normal salt, SHA-384, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using empty derivedKey, normal salt, SHA-384, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using empty derivedKey, normal salt, SHA-384, with normal info\n[PASS] Derived key of type name: AES-GCM length: 256  using empty derivedKey, normal salt, SHA-384, with normal info with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 256  using empty derivedKey, normal salt, SHA-384, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using empty derivedKey, normal salt, SHA-384, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using empty derivedKey, normal salt, SHA-384, with normal info\n[PASS] Derived key of type name: AES-KW length: 128  using empty derivedKey, normal salt, SHA-384, with normal info with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 128  using empty derivedKey, normal salt, SHA-384, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using empty derivedKey, normal salt, SHA-384, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using empty derivedKey, normal salt, SHA-384, with normal info\n[PASS] Derived key of type name: AES-KW length: 192  using empty derivedKey, normal salt, SHA-384, with normal info with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 192  using empty derivedKey, normal salt, SHA-384, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using empty derivedKey, normal salt, SHA-384, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using empty derivedKey, normal salt, SHA-384, with normal info\n[PASS] Derived key of type name: AES-KW length: 256  using empty derivedKey, normal salt, SHA-384, with normal info with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 256  using empty derivedKey, normal salt, SHA-384, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using empty derivedKey, normal salt, SHA-384, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty derivedKey, normal salt, SHA-384, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty derivedKey, normal salt, SHA-384, with normal info with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty derivedKey, normal salt, SHA-384, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty derivedKey, normal salt, SHA-384, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty derivedKey, normal salt, SHA-384, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty derivedKey, normal salt, SHA-384, with normal info with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty derivedKey, normal salt, SHA-384, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty derivedKey, normal salt, SHA-384, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty derivedKey, normal salt, SHA-384, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty derivedKey, normal salt, SHA-384, with normal info with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty derivedKey, normal salt, SHA-384, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty derivedKey, normal salt, SHA-384, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty derivedKey, normal salt, SHA-384, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty derivedKey, normal salt, SHA-384, with normal info with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty derivedKey, normal salt, SHA-384, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty derivedKey, normal salt, SHA-384, with normal info with wrong (ECDH) key\n[PASS] empty derivedKey, normal salt, SHA-384, with normal info with missing salt\n[PASS] empty derivedKey, normal salt, SHA-384, with normal info with missing info\n[PASS] empty derivedKey, normal salt, SHA-384, with normal info with null length\n[PASS] empty derivedKey, normal salt, SHA-384, with normal info with non-multiple of 8 length\n[PASS] empty derivedKey, normal salt, SHA-384, with normal info with bad hash name SHA384\n[PASS] empty derivedKey, normal salt, SHA-384, with normal info with missing deriveBits usage\n[PASS] empty derivedKey, normal salt, SHA-384, with normal info with wrong (ECDH) key\n[PASS] empty derivedKey, normal salt, SHA-384, with empty info\n[PASS] empty derivedKey, normal salt, SHA-384, with empty info with 0 length\n[PASS] Derived key of type name: AES-CBC length: 128  using empty derivedKey, normal salt, SHA-384, with empty info\n[PASS] Derived key of type name: AES-CBC length: 128  using empty derivedKey, normal salt, SHA-384, with empty info with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 128  using empty derivedKey, normal salt, SHA-384, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using empty derivedKey, normal salt, SHA-384, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using empty derivedKey, normal salt, SHA-384, with empty info\n[PASS] Derived key of type name: AES-CBC length: 192  using empty derivedKey, normal salt, SHA-384, with empty info with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 192  using empty derivedKey, normal salt, SHA-384, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using empty derivedKey, normal salt, SHA-384, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using empty derivedKey, normal salt, SHA-384, with empty info\n[PASS] Derived key of type name: AES-CBC length: 256  using empty derivedKey, normal salt, SHA-384, with empty info with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 256  using empty derivedKey, normal salt, SHA-384, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using empty derivedKey, normal salt, SHA-384, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using empty derivedKey, normal salt, SHA-384, with empty info\n[PASS] Derived key of type name: AES-CTR length: 128  using empty derivedKey, normal salt, SHA-384, with empty info with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 128  using empty derivedKey, normal salt, SHA-384, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using empty derivedKey, normal salt, SHA-384, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using empty derivedKey, normal salt, SHA-384, with empty info\n[PASS] Derived key of type name: AES-CTR length: 192  using empty derivedKey, normal salt, SHA-384, with empty info with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 192  using empty derivedKey, normal salt, SHA-384, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using empty derivedKey, normal salt, SHA-384, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using empty derivedKey, normal salt, SHA-384, with empty info\n[PASS] Derived key of type name: AES-CTR length: 256  using empty derivedKey, normal salt, SHA-384, with empty info with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 256  using empty derivedKey, normal salt, SHA-384, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using empty derivedKey, normal salt, SHA-384, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using empty derivedKey, normal salt, SHA-384, with empty info\n[PASS] Derived key of type name: AES-GCM length: 128  using empty derivedKey, normal salt, SHA-384, with empty info with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 128  using empty derivedKey, normal salt, SHA-384, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using empty derivedKey, normal salt, SHA-384, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using empty derivedKey, normal salt, SHA-384, with empty info\n[PASS] Derived key of type name: AES-GCM length: 192  using empty derivedKey, normal salt, SHA-384, with empty info with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 192  using empty derivedKey, normal salt, SHA-384, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using empty derivedKey, normal salt, SHA-384, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using empty derivedKey, normal salt, SHA-384, with empty info\n[PASS] Derived key of type name: AES-GCM length: 256  using empty derivedKey, normal salt, SHA-384, with empty info with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 256  using empty derivedKey, normal salt, SHA-384, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using empty derivedKey, normal salt, SHA-384, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using empty derivedKey, normal salt, SHA-384, with empty info\n[PASS] Derived key of type name: AES-KW length: 128  using empty derivedKey, normal salt, SHA-384, with empty info with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 128  using empty derivedKey, normal salt, SHA-384, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using empty derivedKey, normal salt, SHA-384, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using empty derivedKey, normal salt, SHA-384, with empty info\n[PASS] Derived key of type name: AES-KW length: 192  using empty derivedKey, normal salt, SHA-384, with empty info with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 192  using empty derivedKey, normal salt, SHA-384, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using empty derivedKey, normal salt, SHA-384, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using empty derivedKey, normal salt, SHA-384, with empty info\n[PASS] Derived key of type name: AES-KW length: 256  using empty derivedKey, normal salt, SHA-384, with empty info with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 256  using empty derivedKey, normal salt, SHA-384, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using empty derivedKey, normal salt, SHA-384, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty derivedKey, normal salt, SHA-384, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty derivedKey, normal salt, SHA-384, with empty info with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty derivedKey, normal salt, SHA-384, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty derivedKey, normal salt, SHA-384, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty derivedKey, normal salt, SHA-384, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty derivedKey, normal salt, SHA-384, with empty info with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty derivedKey, normal salt, SHA-384, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty derivedKey, normal salt, SHA-384, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty derivedKey, normal salt, SHA-384, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty derivedKey, normal salt, SHA-384, with empty info with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty derivedKey, normal salt, SHA-384, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty derivedKey, normal salt, SHA-384, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty derivedKey, normal salt, SHA-384, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty derivedKey, normal salt, SHA-384, with empty info with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty derivedKey, normal salt, SHA-384, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty derivedKey, normal salt, SHA-384, with empty info with wrong (ECDH) key\n[PASS] empty derivedKey, normal salt, SHA-384, with empty info with missing salt\n[PASS] empty derivedKey, normal salt, SHA-384, with empty info with missing info\n[PASS] empty derivedKey, normal salt, SHA-384, with empty info with null length\n[PASS] empty derivedKey, normal salt, SHA-384, with empty info with non-multiple of 8 length\n[PASS] empty derivedKey, normal salt, SHA-384, with empty info with bad hash name SHA384\n[PASS] empty derivedKey, normal salt, SHA-384, with empty info with missing deriveBits usage\n[PASS] empty derivedKey, normal salt, SHA-384, with empty info with wrong (ECDH) key\n[PASS] empty derivedKey, normal salt, SHA-512, with normal info\n[PASS] empty derivedKey, normal salt, SHA-512, with normal info with 0 length\n[PASS] Derived key of type name: AES-CBC length: 128  using empty derivedKey, normal salt, SHA-512, with normal info\n[PASS] Derived key of type name: AES-CBC length: 128  using empty derivedKey, normal salt, SHA-512, with normal info with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 128  using empty derivedKey, normal salt, SHA-512, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using empty derivedKey, normal salt, SHA-512, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using empty derivedKey, normal salt, SHA-512, with normal info\n[PASS] Derived key of type name: AES-CBC length: 192  using empty derivedKey, normal salt, SHA-512, with normal info with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 192  using empty derivedKey, normal salt, SHA-512, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using empty derivedKey, normal salt, SHA-512, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using empty derivedKey, normal salt, SHA-512, with normal info\n[PASS] Derived key of type name: AES-CBC length: 256  using empty derivedKey, normal salt, SHA-512, with normal info with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 256  using empty derivedKey, normal salt, SHA-512, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using empty derivedKey, normal salt, SHA-512, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using empty derivedKey, normal salt, SHA-512, with normal info\n[PASS] Derived key of type name: AES-CTR length: 128  using empty derivedKey, normal salt, SHA-512, with normal info with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 128  using empty derivedKey, normal salt, SHA-512, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using empty derivedKey, normal salt, SHA-512, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using empty derivedKey, normal salt, SHA-512, with normal info\n[PASS] Derived key of type name: AES-CTR length: 192  using empty derivedKey, normal salt, SHA-512, with normal info with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 192  using empty derivedKey, normal salt, SHA-512, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using empty derivedKey, normal salt, SHA-512, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using empty derivedKey, normal salt, SHA-512, with normal info\n[PASS] Derived key of type name: AES-CTR length: 256  using empty derivedKey, normal salt, SHA-512, with normal info with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 256  using empty derivedKey, normal salt, SHA-512, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using empty derivedKey, normal salt, SHA-512, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using empty derivedKey, normal salt, SHA-512, with normal info\n[PASS] Derived key of type name: AES-GCM length: 128  using empty derivedKey, normal salt, SHA-512, with normal info with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 128  using empty derivedKey, normal salt, SHA-512, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using empty derivedKey, normal salt, SHA-512, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using empty derivedKey, normal salt, SHA-512, with normal info\n[PASS] Derived key of type name: AES-GCM length: 192  using empty derivedKey, normal salt, SHA-512, with normal info with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 192  using empty derivedKey, normal salt, SHA-512, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using empty derivedKey, normal salt, SHA-512, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using empty derivedKey, normal salt, SHA-512, with normal info\n[PASS] Derived key of type name: AES-GCM length: 256  using empty derivedKey, normal salt, SHA-512, with normal info with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 256  using empty derivedKey, normal salt, SHA-512, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using empty derivedKey, normal salt, SHA-512, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using empty derivedKey, normal salt, SHA-512, with normal info\n[PASS] Derived key of type name: AES-KW length: 128  using empty derivedKey, normal salt, SHA-512, with normal info with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 128  using empty derivedKey, normal salt, SHA-512, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using empty derivedKey, normal salt, SHA-512, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using empty derivedKey, normal salt, SHA-512, with normal info\n[PASS] Derived key of type name: AES-KW length: 192  using empty derivedKey, normal salt, SHA-512, with normal info with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 192  using empty derivedKey, normal salt, SHA-512, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using empty derivedKey, normal salt, SHA-512, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using empty derivedKey, normal salt, SHA-512, with normal info\n[PASS] Derived key of type name: AES-KW length: 256  using empty derivedKey, normal salt, SHA-512, with normal info with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 256  using empty derivedKey, normal salt, SHA-512, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using empty derivedKey, normal salt, SHA-512, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty derivedKey, normal salt, SHA-512, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty derivedKey, normal salt, SHA-512, with normal info with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty derivedKey, normal salt, SHA-512, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty derivedKey, normal salt, SHA-512, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty derivedKey, normal salt, SHA-512, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty derivedKey, normal salt, SHA-512, with normal info with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty derivedKey, normal salt, SHA-512, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty derivedKey, normal salt, SHA-512, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty derivedKey, normal salt, SHA-512, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty derivedKey, normal salt, SHA-512, with normal info with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty derivedKey, normal salt, SHA-512, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty derivedKey, normal salt, SHA-512, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty derivedKey, normal salt, SHA-512, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty derivedKey, normal salt, SHA-512, with normal info with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty derivedKey, normal salt, SHA-512, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty derivedKey, normal salt, SHA-512, with normal info with wrong (ECDH) key\n[PASS] empty derivedKey, normal salt, SHA-512, with normal info with missing salt\n[PASS] empty derivedKey, normal salt, SHA-512, with normal info with missing info\n[PASS] empty derivedKey, normal salt, SHA-512, with normal info with null length\n[PASS] empty derivedKey, normal salt, SHA-512, with normal info with non-multiple of 8 length\n[PASS] empty derivedKey, normal salt, SHA-512, with normal info with bad hash name SHA512\n[PASS] empty derivedKey, normal salt, SHA-512, with normal info with missing deriveBits usage\n[PASS] empty derivedKey, normal salt, SHA-512, with normal info with wrong (ECDH) key\n[PASS] empty derivedKey, normal salt, SHA-512, with empty info\n[PASS] empty derivedKey, normal salt, SHA-512, with empty info with 0 length\n[PASS] Derived key of type name: AES-CBC length: 128  using empty derivedKey, normal salt, SHA-512, with empty info\n[PASS] Derived key of type name: AES-CBC length: 128  using empty derivedKey, normal salt, SHA-512, with empty info with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 128  using empty derivedKey, normal salt, SHA-512, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using empty derivedKey, normal salt, SHA-512, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using empty derivedKey, normal salt, SHA-512, with empty info\n[PASS] Derived key of type name: AES-CBC length: 192  using empty derivedKey, normal salt, SHA-512, with empty info with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 192  using empty derivedKey, normal salt, SHA-512, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using empty derivedKey, normal salt, SHA-512, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using empty derivedKey, normal salt, SHA-512, with empty info\n[PASS] Derived key of type name: AES-CBC length: 256  using empty derivedKey, normal salt, SHA-512, with empty info with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 256  using empty derivedKey, normal salt, SHA-512, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using empty derivedKey, normal salt, SHA-512, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using empty derivedKey, normal salt, SHA-512, with empty info\n[PASS] Derived key of type name: AES-CTR length: 128  using empty derivedKey, normal salt, SHA-512, with empty info with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 128  using empty derivedKey, normal salt, SHA-512, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using empty derivedKey, normal salt, SHA-512, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using empty derivedKey, normal salt, SHA-512, with empty info\n[PASS] Derived key of type name: AES-CTR length: 192  using empty derivedKey, normal salt, SHA-512, with empty info with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 192  using empty derivedKey, normal salt, SHA-512, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using empty derivedKey, normal salt, SHA-512, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using empty derivedKey, normal salt, SHA-512, with empty info\n[PASS] Derived key of type name: AES-CTR length: 256  using empty derivedKey, normal salt, SHA-512, with empty info with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 256  using empty derivedKey, normal salt, SHA-512, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using empty derivedKey, normal salt, SHA-512, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using empty derivedKey, normal salt, SHA-512, with empty info\n[PASS] Derived key of type name: AES-GCM length: 128  using empty derivedKey, normal salt, SHA-512, with empty info with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 128  using empty derivedKey, normal salt, SHA-512, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using empty derivedKey, normal salt, SHA-512, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using empty derivedKey, normal salt, SHA-512, with empty info\n[PASS] Derived key of type name: AES-GCM length: 192  using empty derivedKey, normal salt, SHA-512, with empty info with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 192  using empty derivedKey, normal salt, SHA-512, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using empty derivedKey, normal salt, SHA-512, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using empty derivedKey, normal salt, SHA-512, with empty info\n[PASS] Derived key of type name: AES-GCM length: 256  using empty derivedKey, normal salt, SHA-512, with empty info with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 256  using empty derivedKey, normal salt, SHA-512, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using empty derivedKey, normal salt, SHA-512, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using empty derivedKey, normal salt, SHA-512, with empty info\n[PASS] Derived key of type name: AES-KW length: 128  using empty derivedKey, normal salt, SHA-512, with empty info with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 128  using empty derivedKey, normal salt, SHA-512, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using empty derivedKey, normal salt, SHA-512, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using empty derivedKey, normal salt, SHA-512, with empty info\n[PASS] Derived key of type name: AES-KW length: 192  using empty derivedKey, normal salt, SHA-512, with empty info with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 192  using empty derivedKey, normal salt, SHA-512, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using empty derivedKey, normal salt, SHA-512, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using empty derivedKey, normal salt, SHA-512, with empty info\n[PASS] Derived key of type name: AES-KW length: 256  using empty derivedKey, normal salt, SHA-512, with empty info with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 256  using empty derivedKey, normal salt, SHA-512, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using empty derivedKey, normal salt, SHA-512, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty derivedKey, normal salt, SHA-512, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty derivedKey, normal salt, SHA-512, with empty info with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty derivedKey, normal salt, SHA-512, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty derivedKey, normal salt, SHA-512, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty derivedKey, normal salt, SHA-512, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty derivedKey, normal salt, SHA-512, with empty info with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty derivedKey, normal salt, SHA-512, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty derivedKey, normal salt, SHA-512, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty derivedKey, normal salt, SHA-512, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty derivedKey, normal salt, SHA-512, with empty info with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty derivedKey, normal salt, SHA-512, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty derivedKey, normal salt, SHA-512, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty derivedKey, normal salt, SHA-512, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty derivedKey, normal salt, SHA-512, with empty info with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty derivedKey, normal salt, SHA-512, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty derivedKey, normal salt, SHA-512, with empty info with wrong (ECDH) key\n[PASS] empty derivedKey, normal salt, SHA-512, with empty info with missing salt\n[PASS] empty derivedKey, normal salt, SHA-512, with empty info with missing info\n[PASS] empty derivedKey, normal salt, SHA-512, with empty info with null length\n[PASS] empty derivedKey, normal salt, SHA-512, with empty info with non-multiple of 8 length\n[PASS] empty derivedKey, normal salt, SHA-512, with empty info with bad hash name SHA512\n[PASS] empty derivedKey, normal salt, SHA-512, with empty info with missing deriveBits usage\n[PASS] empty derivedKey, normal salt, SHA-512, with empty info with wrong (ECDH) key\n[PASS] empty derivedKey, normal salt, SHA-1, with normal info\n[PASS] empty derivedKey, normal salt, SHA-1, with normal info with 0 length\n[PASS] Derived key of type name: AES-CBC length: 128  using empty derivedKey, normal salt, SHA-1, with normal info\n[PASS] Derived key of type name: AES-CBC length: 128  using empty derivedKey, normal salt, SHA-1, with normal info with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 128  using empty derivedKey, normal salt, SHA-1, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using empty derivedKey, normal salt, SHA-1, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using empty derivedKey, normal salt, SHA-1, with normal info\n[PASS] Derived key of type name: AES-CBC length: 192  using empty derivedKey, normal salt, SHA-1, with normal info with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 192  using empty derivedKey, normal salt, SHA-1, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using empty derivedKey, normal salt, SHA-1, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using empty derivedKey, normal salt, SHA-1, with normal info\n[PASS] Derived key of type name: AES-CBC length: 256  using empty derivedKey, normal salt, SHA-1, with normal info with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 256  using empty derivedKey, normal salt, SHA-1, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using empty derivedKey, normal salt, SHA-1, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using empty derivedKey, normal salt, SHA-1, with normal info\n[PASS] Derived key of type name: AES-CTR length: 128  using empty derivedKey, normal salt, SHA-1, with normal info with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 128  using empty derivedKey, normal salt, SHA-1, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using empty derivedKey, normal salt, SHA-1, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using empty derivedKey, normal salt, SHA-1, with normal info\n[PASS] Derived key of type name: AES-CTR length: 192  using empty derivedKey, normal salt, SHA-1, with normal info with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 192  using empty derivedKey, normal salt, SHA-1, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using empty derivedKey, normal salt, SHA-1, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using empty derivedKey, normal salt, SHA-1, with normal info\n[PASS] Derived key of type name: AES-CTR length: 256  using empty derivedKey, normal salt, SHA-1, with normal info with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 256  using empty derivedKey, normal salt, SHA-1, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using empty derivedKey, normal salt, SHA-1, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using empty derivedKey, normal salt, SHA-1, with normal info\n[PASS] Derived key of type name: AES-GCM length: 128  using empty derivedKey, normal salt, SHA-1, with normal info with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 128  using empty derivedKey, normal salt, SHA-1, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using empty derivedKey, normal salt, SHA-1, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using empty derivedKey, normal salt, SHA-1, with normal info\n[PASS] Derived key of type name: AES-GCM length: 192  using empty derivedKey, normal salt, SHA-1, with normal info with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 192  using empty derivedKey, normal salt, SHA-1, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using empty derivedKey, normal salt, SHA-1, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using empty derivedKey, normal salt, SHA-1, with normal info\n[PASS] Derived key of type name: AES-GCM length: 256  using empty derivedKey, normal salt, SHA-1, with normal info with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 256  using empty derivedKey, normal salt, SHA-1, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using empty derivedKey, normal salt, SHA-1, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using empty derivedKey, normal salt, SHA-1, with normal info\n[PASS] Derived key of type name: AES-KW length: 128  using empty derivedKey, normal salt, SHA-1, with normal info with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 128  using empty derivedKey, normal salt, SHA-1, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using empty derivedKey, normal salt, SHA-1, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using empty derivedKey, normal salt, SHA-1, with normal info\n[PASS] Derived key of type name: AES-KW length: 192  using empty derivedKey, normal salt, SHA-1, with normal info with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 192  using empty derivedKey, normal salt, SHA-1, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using empty derivedKey, normal salt, SHA-1, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using empty derivedKey, normal salt, SHA-1, with normal info\n[PASS] Derived key of type name: AES-KW length: 256  using empty derivedKey, normal salt, SHA-1, with normal info with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 256  using empty derivedKey, normal salt, SHA-1, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using empty derivedKey, normal salt, SHA-1, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty derivedKey, normal salt, SHA-1, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty derivedKey, normal salt, SHA-1, with normal info with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty derivedKey, normal salt, SHA-1, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty derivedKey, normal salt, SHA-1, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty derivedKey, normal salt, SHA-1, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty derivedKey, normal salt, SHA-1, with normal info with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty derivedKey, normal salt, SHA-1, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty derivedKey, normal salt, SHA-1, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty derivedKey, normal salt, SHA-1, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty derivedKey, normal salt, SHA-1, with normal info with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty derivedKey, normal salt, SHA-1, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty derivedKey, normal salt, SHA-1, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty derivedKey, normal salt, SHA-1, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty derivedKey, normal salt, SHA-1, with normal info with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty derivedKey, normal salt, SHA-1, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty derivedKey, normal salt, SHA-1, with normal info with wrong (ECDH) key\n[PASS] empty derivedKey, normal salt, SHA-1, with normal info with missing salt\n[PASS] empty derivedKey, normal salt, SHA-1, with normal info with missing info\n[PASS] empty derivedKey, normal salt, SHA-1, with normal info with null length\n[PASS] empty derivedKey, normal salt, SHA-1, with normal info with non-multiple of 8 length\n[PASS] empty derivedKey, normal salt, SHA-1, with normal info with bad hash name SHA1\n[PASS] empty derivedKey, normal salt, SHA-1, with normal info with missing deriveBits usage\n[PASS] empty derivedKey, normal salt, SHA-1, with normal info with wrong (ECDH) key\n[PASS] empty derivedKey, normal salt, SHA-1, with empty info\n[PASS] empty derivedKey, normal salt, SHA-1, with empty info with 0 length\n[PASS] Derived key of type name: AES-CBC length: 128  using empty derivedKey, normal salt, SHA-1, with empty info\n[PASS] Derived key of type name: AES-CBC length: 128  using empty derivedKey, normal salt, SHA-1, with empty info with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 128  using empty derivedKey, normal salt, SHA-1, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using empty derivedKey, normal salt, SHA-1, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using empty derivedKey, normal salt, SHA-1, with empty info\n[PASS] Derived key of type name: AES-CBC length: 192  using empty derivedKey, normal salt, SHA-1, with empty info with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 192  using empty derivedKey, normal salt, SHA-1, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using empty derivedKey, normal salt, SHA-1, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using empty derivedKey, normal salt, SHA-1, with empty info\n[PASS] Derived key of type name: AES-CBC length: 256  using empty derivedKey, normal salt, SHA-1, with empty info with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 256  using empty derivedKey, normal salt, SHA-1, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using empty derivedKey, normal salt, SHA-1, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using empty derivedKey, normal salt, SHA-1, with empty info\n[PASS] Derived key of type name: AES-CTR length: 128  using empty derivedKey, normal salt, SHA-1, with empty info with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 128  using empty derivedKey, normal salt, SHA-1, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using empty derivedKey, normal salt, SHA-1, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using empty derivedKey, normal salt, SHA-1, with empty info\n[PASS] Derived key of type name: AES-CTR length: 192  using empty derivedKey, normal salt, SHA-1, with empty info with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 192  using empty derivedKey, normal salt, SHA-1, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using empty derivedKey, normal salt, SHA-1, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using empty derivedKey, normal salt, SHA-1, with empty info\n[PASS] Derived key of type name: AES-CTR length: 256  using empty derivedKey, normal salt, SHA-1, with empty info with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 256  using empty derivedKey, normal salt, SHA-1, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using empty derivedKey, normal salt, SHA-1, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using empty derivedKey, normal salt, SHA-1, with empty info\n[PASS] Derived key of type name: AES-GCM length: 128  using empty derivedKey, normal salt, SHA-1, with empty info with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 128  using empty derivedKey, normal salt, SHA-1, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using empty derivedKey, normal salt, SHA-1, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using empty derivedKey, normal salt, SHA-1, with empty info\n[PASS] Derived key of type name: AES-GCM length: 192  using empty derivedKey, normal salt, SHA-1, with empty info with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 192  using empty derivedKey, normal salt, SHA-1, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using empty derivedKey, normal salt, SHA-1, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using empty derivedKey, normal salt, SHA-1, with empty info\n[PASS] Derived key of type name: AES-GCM length: 256  using empty derivedKey, normal salt, SHA-1, with empty info with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 256  using empty derivedKey, normal salt, SHA-1, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using empty derivedKey, normal salt, SHA-1, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using empty derivedKey, normal salt, SHA-1, with empty info\n[PASS] Derived key of type name: AES-KW length: 128  using empty derivedKey, normal salt, SHA-1, with empty info with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 128  using empty derivedKey, normal salt, SHA-1, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using empty derivedKey, normal salt, SHA-1, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using empty derivedKey, normal salt, SHA-1, with empty info\n[PASS] Derived key of type name: AES-KW length: 192  using empty derivedKey, normal salt, SHA-1, with empty info with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 192  using empty derivedKey, normal salt, SHA-1, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using empty derivedKey, normal salt, SHA-1, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using empty derivedKey, normal salt, SHA-1, with empty info\n[PASS] Derived key of type name: AES-KW length: 256  using empty derivedKey, normal salt, SHA-1, with empty info with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 256  using empty derivedKey, normal salt, SHA-1, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using empty derivedKey, normal salt, SHA-1, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty derivedKey, normal salt, SHA-1, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty derivedKey, normal salt, SHA-1, with empty info with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty derivedKey, normal salt, SHA-1, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty derivedKey, normal salt, SHA-1, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty derivedKey, normal salt, SHA-1, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty derivedKey, normal salt, SHA-1, with empty info with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty derivedKey, normal salt, SHA-1, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty derivedKey, normal salt, SHA-1, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty derivedKey, normal salt, SHA-1, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty derivedKey, normal salt, SHA-1, with empty info with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty derivedKey, normal salt, SHA-1, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty derivedKey, normal salt, SHA-1, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty derivedKey, normal salt, SHA-1, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty derivedKey, normal salt, SHA-1, with empty info with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty derivedKey, normal salt, SHA-1, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty derivedKey, normal salt, SHA-1, with empty info with wrong (ECDH) key\n[PASS] empty derivedKey, normal salt, SHA-1, with empty info with missing salt\n[PASS] empty derivedKey, normal salt, SHA-1, with empty info with missing info\n[PASS] empty derivedKey, normal salt, SHA-1, with empty info with null length\n[PASS] empty derivedKey, normal salt, SHA-1, with empty info with non-multiple of 8 length\n[PASS] empty derivedKey, normal salt, SHA-1, with empty info with bad hash name SHA1\n[PASS] empty derivedKey, normal salt, SHA-1, with empty info with missing deriveBits usage\n[PASS] empty derivedKey, normal salt, SHA-1, with empty info with wrong (ECDH) key\n[PASS] empty derivedKey, normal salt, SHA-256, with normal info\n[PASS] empty derivedKey, normal salt, SHA-256, with normal info with 0 length\n[PASS] Derived key of type name: AES-CBC length: 128  using empty derivedKey, normal salt, SHA-256, with normal info\n[PASS] Derived key of type name: AES-CBC length: 128  using empty derivedKey, normal salt, SHA-256, with normal info with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 128  using empty derivedKey, normal salt, SHA-256, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using empty derivedKey, normal salt, SHA-256, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using empty derivedKey, normal salt, SHA-256, with normal info\n[PASS] Derived key of type name: AES-CBC length: 192  using empty derivedKey, normal salt, SHA-256, with normal info with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 192  using empty derivedKey, normal salt, SHA-256, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using empty derivedKey, normal salt, SHA-256, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using empty derivedKey, normal salt, SHA-256, with normal info\n[PASS] Derived key of type name: AES-CBC length: 256  using empty derivedKey, normal salt, SHA-256, with normal info with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 256  using empty derivedKey, normal salt, SHA-256, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using empty derivedKey, normal salt, SHA-256, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using empty derivedKey, normal salt, SHA-256, with normal info\n[PASS] Derived key of type name: AES-CTR length: 128  using empty derivedKey, normal salt, SHA-256, with normal info with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 128  using empty derivedKey, normal salt, SHA-256, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using empty derivedKey, normal salt, SHA-256, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using empty derivedKey, normal salt, SHA-256, with normal info\n[PASS] Derived key of type name: AES-CTR length: 192  using empty derivedKey, normal salt, SHA-256, with normal info with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 192  using empty derivedKey, normal salt, SHA-256, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using empty derivedKey, normal salt, SHA-256, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using empty derivedKey, normal salt, SHA-256, with normal info\n[PASS] Derived key of type name: AES-CTR length: 256  using empty derivedKey, normal salt, SHA-256, with normal info with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 256  using empty derivedKey, normal salt, SHA-256, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using empty derivedKey, normal salt, SHA-256, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using empty derivedKey, normal salt, SHA-256, with normal info\n[PASS] Derived key of type name: AES-GCM length: 128  using empty derivedKey, normal salt, SHA-256, with normal info with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 128  using empty derivedKey, normal salt, SHA-256, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using empty derivedKey, normal salt, SHA-256, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using empty derivedKey, normal salt, SHA-256, with normal info\n[PASS] Derived key of type name: AES-GCM length: 192  using empty derivedKey, normal salt, SHA-256, with normal info with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 192  using empty derivedKey, normal salt, SHA-256, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using empty derivedKey, normal salt, SHA-256, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using empty derivedKey, normal salt, SHA-256, with normal info\n[PASS] Derived key of type name: AES-GCM length: 256  using empty derivedKey, normal salt, SHA-256, with normal info with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 256  using empty derivedKey, normal salt, SHA-256, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using empty derivedKey, normal salt, SHA-256, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using empty derivedKey, normal salt, SHA-256, with normal info\n[PASS] Derived key of type name: AES-KW length: 128  using empty derivedKey, normal salt, SHA-256, with normal info with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 128  using empty derivedKey, normal salt, SHA-256, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using empty derivedKey, normal salt, SHA-256, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using empty derivedKey, normal salt, SHA-256, with normal info\n[PASS] Derived key of type name: AES-KW length: 192  using empty derivedKey, normal salt, SHA-256, with normal info with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 192  using empty derivedKey, normal salt, SHA-256, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using empty derivedKey, normal salt, SHA-256, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using empty derivedKey, normal salt, SHA-256, with normal info\n[PASS] Derived key of type name: AES-KW length: 256  using empty derivedKey, normal salt, SHA-256, with normal info with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 256  using empty derivedKey, normal salt, SHA-256, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using empty derivedKey, normal salt, SHA-256, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty derivedKey, normal salt, SHA-256, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty derivedKey, normal salt, SHA-256, with normal info with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty derivedKey, normal salt, SHA-256, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty derivedKey, normal salt, SHA-256, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty derivedKey, normal salt, SHA-256, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty derivedKey, normal salt, SHA-256, with normal info with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty derivedKey, normal salt, SHA-256, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty derivedKey, normal salt, SHA-256, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty derivedKey, normal salt, SHA-256, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty derivedKey, normal salt, SHA-256, with normal info with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty derivedKey, normal salt, SHA-256, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty derivedKey, normal salt, SHA-256, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty derivedKey, normal salt, SHA-256, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty derivedKey, normal salt, SHA-256, with normal info with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty derivedKey, normal salt, SHA-256, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty derivedKey, normal salt, SHA-256, with normal info with wrong (ECDH) key\n[PASS] empty derivedKey, normal salt, SHA-256, with normal info with missing salt\n[PASS] empty derivedKey, normal salt, SHA-256, with normal info with missing info\n[PASS] empty derivedKey, normal salt, SHA-256, with normal info with null length\n[PASS] empty derivedKey, normal salt, SHA-256, with normal info with non-multiple of 8 length\n[PASS] empty derivedKey, normal salt, SHA-256, with normal info with bad hash name SHA256\n[PASS] empty derivedKey, normal salt, SHA-256, with normal info with missing deriveBits usage\n[PASS] empty derivedKey, normal salt, SHA-256, with normal info with wrong (ECDH) key\n[PASS] empty derivedKey, normal salt, SHA-256, with empty info\n[PASS] empty derivedKey, normal salt, SHA-256, with empty info with 0 length\n[PASS] Derived key of type name: AES-CBC length: 128  using empty derivedKey, normal salt, SHA-256, with empty info\n[PASS] Derived key of type name: AES-CBC length: 128  using empty derivedKey, normal salt, SHA-256, with empty info with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 128  using empty derivedKey, normal salt, SHA-256, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using empty derivedKey, normal salt, SHA-256, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using empty derivedKey, normal salt, SHA-256, with empty info\n[PASS] Derived key of type name: AES-CBC length: 192  using empty derivedKey, normal salt, SHA-256, with empty info with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 192  using empty derivedKey, normal salt, SHA-256, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using empty derivedKey, normal salt, SHA-256, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using empty derivedKey, normal salt, SHA-256, with empty info\n[PASS] Derived key of type name: AES-CBC length: 256  using empty derivedKey, normal salt, SHA-256, with empty info with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 256  using empty derivedKey, normal salt, SHA-256, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using empty derivedKey, normal salt, SHA-256, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using empty derivedKey, normal salt, SHA-256, with empty info\n[PASS] Derived key of type name: AES-CTR length: 128  using empty derivedKey, normal salt, SHA-256, with empty info with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 128  using empty derivedKey, normal salt, SHA-256, with empty info with missing deriveKey usage\n[PASS] setup - define tests\n[PASS] X25519 key derivation checks for all-zero value result with a key of order 0\n[PASS] X25519 key derivation checks for all-zero value result with a key of order 1\n[PASS] X25519 key derivation checks for all-zero value result with a key of order 8\n[PASS] X25519 key derivation checks for all-zero value result with a key of order p-1 (order 2)\n[PASS] X25519 key derivation checks for all-zero value result with a key of order p (=0, order 4)\n[PASS] X25519 key derivation checks for all-zero value result with a key of order p+1 (=1, order 1)\n[PASS] X448 key derivation checks for all-zero value result with a key of order 0\n[PASS] X448 key derivation checks for all-zero value result with a key of order 1\n[PASS] X448 key derivation checks for all-zero value result with a key of order p-1 (order 2)\n[PASS] X448 key derivation checks for all-zero value result with a key of order p (=0, order 4)\n[PASS] X448 key derivation checks for all-zero value result with a key of order p+1 (=1, order 1)\n[PASS] X25519 good parameters\n[PASS] X25519 mixed case parameters\n[PASS] X25519 with null length\n[PASS] X25519 short result\n[PASS] X25519 non-multiple of 8 bits\n[PASS] X25519 missing public property\n[PASS] X25519 public property of algorithm is not a CryptoKey\n[PASS] X25519 mismatched algorithms\n[PASS] X25519 no deriveBits usage for base key\n[PASS] X25519 base key is not a private key\n[PASS] X25519 public property value is a private key\n[PASS] X25519 public property value is a secret key\n[PASS] X25519 asking for too many bits\n[PASS] X448 good parameters\n[PASS] X448 mixed case parameters\n[PASS] X448 with null length\n[PASS] X448 short result\n[PASS] X448 non-multiple of 8 bits\n[PASS] X448 missing public property\n[PASS] X448 public property of algorithm is not a CryptoKey\n[PASS] X448 mismatched algorithms\n[PASS] X448 no deriveBits usage for base key\n[PASS] X448 base key is not a private key\n[PASS] X448 public property value is a private key\n[PASS] X448 public property value is a secret key\n[PASS] X448 asking for too many bits\n[PASS] setup - define tests\n[PASS] X25519 deriveBits checks for all-zero value result with a key of order 0\n[PASS] X25519 deriveBits checks for all-zero value result with a key of order 1\n[PASS] X25519 deriveBits checks for all-zero value result with a key of order 8\n[PASS] X25519 deriveBits checks for all-zero value result with a key of order p-1 (order 2)\n[PASS] X25519 deriveBits checks for all-zero value result with a key of order p (=0, order 4)\n[PASS] X25519 deriveBits checks for all-zero value result with a key of order p+1 (=1, order 1)\n[PASS] X448 deriveBits checks for all-zero value result with a key of order 0\n[PASS] X448 deriveBits checks for all-zero value result with a key of order 1\n[PASS] X448 deriveBits checks for all-zero value result with a key of order p-1 (order 2)\n[PASS] X448 deriveBits checks for all-zero value result with a key of order p (=0, order 4)\n[PASS] X448 deriveBits checks for all-zero value result with a key of order p+1 (=1, order 1)\n[PASS] Key derivation using a X25519 generated keys.\n[PASS] Key derivation using a X448 generated keys.\n[PASS] X25519 good parameters\n[PASS] X25519 mixed case parameters\n[PASS] X25519 missing public property\n[PASS] X25519 public property of algorithm is not a CryptoKey\n[PASS] X25519 mismatched algorithms\n[PASS] X25519 no deriveKey usage for base key\n[PASS] X25519 base key is not a private key\n[PASS] X25519 public property value is a private key\n[PASS] X25519 public property value is a secret key\n[PASS] X448 good parameters\n[PASS] X448 mixed case parameters\n[PASS] X448 missing public property\n[PASS] X448 public property of algorithm is not a CryptoKey\n[PASS] X448 mismatched algorithms\n[PASS] X448 no deriveKey usage for base key\n[PASS] X448 base key is not a private key\n[PASS] X448 public property value is a private key\n[PASS] X448 public property value is a secret key\n[PASS] setup - define tests\n[PASS] Derived key of type name: AES-CTR length: 128  using empty derivedKey, normal salt, SHA-256, with empty info with wrong (ECDH) key\n[PASS] setup - define tests\n[PASS] Derived key of type name: AES-CTR length: 192  using empty derivedKey, normal salt, SHA-256, with empty info\n[PASS] Derived key of type name: AES-CTR length: 192  using empty derivedKey, normal salt, SHA-256, with empty info with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 192  using empty derivedKey, normal salt, SHA-256, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using empty derivedKey, normal salt, SHA-256, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using empty derivedKey, normal salt, SHA-256, with empty info\n[PASS] Derived key of type name: AES-CTR length: 256  using empty derivedKey, normal salt, SHA-256, with empty info with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 256  using empty derivedKey, normal salt, SHA-256, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using empty derivedKey, normal salt, SHA-256, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using empty derivedKey, normal salt, SHA-256, with empty info\n[PASS] Derived key of type name: AES-GCM length: 128  using empty derivedKey, normal salt, SHA-256, with empty info with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 128  using empty derivedKey, normal salt, SHA-256, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using empty derivedKey, normal salt, SHA-256, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using empty derivedKey, normal salt, SHA-256, with empty info\n[PASS] Derived key of type name: AES-GCM length: 192  using empty derivedKey, normal salt, SHA-256, with empty info with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 192  using empty derivedKey, normal salt, SHA-256, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using empty derivedKey, normal salt, SHA-256, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using empty derivedKey, normal salt, SHA-256, with empty info\n[PASS] Derived key of type name: AES-GCM length: 256  using empty derivedKey, normal salt, SHA-256, with empty info with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 256  using empty derivedKey, normal salt, SHA-256, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using empty derivedKey, normal salt, SHA-256, with empty info with wrong (ECDH) key\n[PASS] setup - define tests\n[PASS] short password, short salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, long salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, long salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, long salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, long salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, long salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, long salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, long salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, long salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using short password, long salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using short password, long salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 128  using short password, long salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using short password, long salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using short password, long salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using short password, long salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 192  using short password, long salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using short password, long salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] setup - define tests\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, empty salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, empty salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, empty salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using empty derivedKey, normal salt, SHA-256, with empty info\n[PASS] Derived key of type name: AES-KW length: 128  using empty derivedKey, normal salt, SHA-256, with empty info with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 128  using empty derivedKey, normal salt, SHA-256, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using empty derivedKey, normal salt, SHA-256, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using empty derivedKey, normal salt, SHA-256, with empty info\n[PASS] Derived key of type name: AES-KW length: 192  using empty derivedKey, normal salt, SHA-256, with empty info with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 192  using empty derivedKey, normal salt, SHA-256, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using empty derivedKey, normal salt, SHA-256, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using empty derivedKey, normal salt, SHA-256, with empty info\n[PASS] Derived key of type name: AES-KW length: 256  using empty derivedKey, normal salt, SHA-256, with empty info with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 256  using empty derivedKey, normal salt, SHA-256, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using empty derivedKey, normal salt, SHA-256, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, short salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, short salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, short salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, short salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, short salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, short salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, short salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, short salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, short salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, short salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, short salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, short salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, short salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, short salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, short salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using short password, long salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using short password, long salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 256  using short password, long salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using short password, long salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, long salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, long salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, long salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, long salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, long salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, long salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, long salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, long salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty derivedKey, normal salt, SHA-256, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty derivedKey, normal salt, SHA-256, with empty info with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty derivedKey, normal salt, SHA-256, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty derivedKey, normal salt, SHA-256, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty derivedKey, normal salt, SHA-256, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty derivedKey, normal salt, SHA-256, with empty info with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty derivedKey, normal salt, SHA-256, with empty info with missing deriveKey usage\n[PASS] setup - define tests\n[PASS] Derived key of type name: AES-KW length: 256  using long password, long salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, short salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, short salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, short salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, short salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, short salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, short salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, short salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, short salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, short salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, short salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, short salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, short salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, empty salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, empty salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, empty salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, empty salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] short password, empty salt, SHA-384, with 1 iterations with null length\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, long salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, long salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, long salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, long salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, long salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, long salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, long salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, long salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] short password, long salt, SHA-384, with 1 iterations with null length\n[PASS] short password, long salt, SHA-384, with 1 iterations with 0 length\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty derivedKey, normal salt, SHA-256, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty derivedKey, normal salt, SHA-256, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty derivedKey, normal salt, SHA-256, with empty info with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty derivedKey, normal salt, SHA-256, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty derivedKey, normal salt, SHA-256, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty derivedKey, normal salt, SHA-256, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty derivedKey, normal salt, SHA-256, with empty info with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty derivedKey, normal salt, SHA-256, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty derivedKey, normal salt, SHA-256, with empty info with wrong (ECDH) key\n[PASS] empty derivedKey, normal salt, SHA-256, with empty info with missing salt\n[PASS] empty derivedKey, normal salt, SHA-256, with empty info with missing info\n[PASS] empty derivedKey, normal salt, SHA-256, with empty info with null length\n[PASS] empty derivedKey, normal salt, SHA-256, with empty info with non-multiple of 8 length\n[PASS] empty derivedKey, normal salt, SHA-256, with empty info with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 256  using long password, long salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 256  using long password, long salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using long password, long salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, long salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, long salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, long salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, long salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] short password, empty salt, SHA-384, with 1 iterations with 0 length\n[PASS] short password, empty salt, SHA-384, with 1 iterations with non-multiple of 8 length\n[PASS] short password, empty salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] short password, empty salt, SHA-384, with 1 iterations with missing deriveBits usage\n[PASS] short password, empty salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] short password, long salt, SHA-384, with 1 iterations with non-multiple of 8 length\n[PASS] short password, long salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] short password, long salt, SHA-384, with 1 iterations with missing deriveBits usage\n[PASS] short password, long salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] short password, long salt, SHA-384, with 1000 iterations\n[PASS] empty derivedKey, normal salt, SHA-256, with empty info with missing deriveBits usage\n[PASS] empty derivedKey, normal salt, SHA-256, with empty info with wrong (ECDH) key\n[PASS] empty derivedKey, normal salt, PBKDF2, with normal info with non-digest algorithm PBKDF2\n[PASS] Derived key of type name: AES-CBC length: 128  using empty derivedKey, normal salt, PBKDF2, with normal info\n[PASS] Derived key of type name: AES-CBC length: 192  using empty derivedKey, normal salt, PBKDF2, with normal info\n[PASS] setup - define tests\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, empty salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, empty salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, short salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, short salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, short salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, short salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, short salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] setup - define tests\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, short salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] short password, empty salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, long salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, long salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, long salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, long salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, long salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, long salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, long salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, long salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using empty derivedKey, normal salt, PBKDF2, with normal info\n[PASS] Derived key of type name: AES-CTR length: 128  using empty derivedKey, normal salt, PBKDF2, with normal info\n[PASS] Derived key of type name: AES-CTR length: 192  using empty derivedKey, normal salt, PBKDF2, with normal info\n[PASS] Derived key of type name: AES-CTR length: 256  using empty derivedKey, normal salt, PBKDF2, with normal info\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, short salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using empty derivedKey, normal salt, PBKDF2, with normal info\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, short salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, short salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, long salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, empty salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using empty derivedKey, normal salt, PBKDF2, with normal info\n[PASS] Derived key of type name: AES-GCM length: 256  using empty derivedKey, normal salt, PBKDF2, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, long salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, short salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, empty salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, long salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, empty salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using empty derivedKey, normal salt, PBKDF2, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, long salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, empty salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, long salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using short password, short salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using empty derivedKey, normal salt, PBKDF2, with normal info\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, long salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, long salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using empty derivedKey, normal salt, PBKDF2, with normal info\n[PASS] Derived key of type name: AES-KW length: 128  using short password, short salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 128  using short password, short salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, short salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, long salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty derivedKey, normal salt, PBKDF2, with normal info\n[PASS] Derived key of type name: AES-KW length: 128  using short password, short salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty derivedKey, normal salt, PBKDF2, with normal info\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, short salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty derivedKey, normal salt, PBKDF2, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty derivedKey, normal salt, PBKDF2, with normal info\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, short salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] empty derivedKey, normal salt, PBKDF2, with empty info with non-digest algorithm PBKDF2\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, long salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using short password, short salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, empty salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using empty derivedKey, normal salt, PBKDF2, with empty info\n[PASS] Derived key of type name: AES-CBC length: 192  using empty derivedKey, normal salt, PBKDF2, with empty info\n[PASS] Derived key of type name: AES-CBC length: 256  using empty derivedKey, normal salt, PBKDF2, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, long salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, long salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, long salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, short salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using short password, short salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 192  using short password, short salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using short password, short salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, empty salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 128  using empty derivedKey, normal salt, PBKDF2, with empty info\n[PASS] long password, long salt, SHA-384, with 1000 iterations with null length\n[PASS] Derived key of type name: AES-CTR length: 192  using empty derivedKey, normal salt, PBKDF2, with empty info\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, long salt, SHA-384, with 1000 iterations\n[PASS] long password, long salt, SHA-384, with 1000 iterations with 0 length\n[PASS] long password, long salt, SHA-384, with 1000 iterations with non-multiple of 8 length\n[PASS] Derived key of type name: AES-CTR length: 256  using empty derivedKey, normal salt, PBKDF2, with empty info\n[PASS] Derived key of type name: AES-GCM length: 128  using empty derivedKey, normal salt, PBKDF2, with empty info\n[PASS] Derived key of type name: AES-GCM length: 192  using empty derivedKey, normal salt, PBKDF2, with empty info\n[PASS] Derived key of type name: AES-GCM length: 256  using empty derivedKey, normal salt, PBKDF2, with empty info\n[PASS] Derived key of type name: AES-KW length: 128  using empty derivedKey, normal salt, PBKDF2, with empty info\n[PASS] Derived key of type name: AES-KW length: 192  using empty derivedKey, normal salt, PBKDF2, with empty info\n[PASS] Derived key of type name: AES-KW length: 256  using short password, short salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using short password, short salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 256  using short password, short salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using short password, short salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, long salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, long salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, long salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] long password, long salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] long password, long salt, SHA-384, with 1000 iterations with missing deriveBits usage\n[PASS] long password, long salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, empty salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, empty salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, short salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, short salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, short salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, short salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using empty derivedKey, normal salt, PBKDF2, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty derivedKey, normal salt, PBKDF2, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty derivedKey, normal salt, PBKDF2, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty derivedKey, normal salt, PBKDF2, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty derivedKey, normal salt, PBKDF2, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, short salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, short salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, short salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, short salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, short salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, short salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, short salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, short salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, short salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, empty salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, empty salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, empty salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, empty salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, short salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, short salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, long salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, long salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, long salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, long salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] empty derivedKey, empty salt, SHA-384, with normal info\n[PASS] empty derivedKey, empty salt, SHA-384, with normal info with 0 length\n[PASS] Derived key of type name: AES-CBC length: 128  using empty derivedKey, empty salt, SHA-384, with normal info\n[PASS] Derived key of type name: AES-CBC length: 128  using empty derivedKey, empty salt, SHA-384, with normal info with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 128  using empty derivedKey, empty salt, SHA-384, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using empty derivedKey, empty salt, SHA-384, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, short salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, short salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, short salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, short salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, short salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using empty derivedKey, empty salt, SHA-384, with normal info\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, long salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, short salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, short salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 192  using empty derivedKey, empty salt, SHA-384, with normal info with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 192  using empty derivedKey, empty salt, SHA-384, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, short salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, short salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, long salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, long salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, long salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using empty derivedKey, empty salt, SHA-384, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, empty salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, empty salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, empty salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, empty salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] short password, short salt, SHA-384, with 1 iterations with null length\n[PASS] Derived key of type name: AES-CBC length: 256  using empty derivedKey, empty salt, SHA-384, with normal info\n[PASS] Derived key of type name: AES-CBC length: 256  using empty derivedKey, empty salt, SHA-384, with normal info with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, short salt, SHA-384, with 1000 iterations\n[PASS] short password, short salt, SHA-384, with 1 iterations with 0 length\n[PASS] Derived key of type name: AES-CBC length: 256  using empty derivedKey, empty salt, SHA-384, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, short salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, short salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using empty derivedKey, empty salt, SHA-384, with normal info with wrong (ECDH) key\n[PASS] short password, short salt, SHA-384, with 1 iterations with non-multiple of 8 length\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, short salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] short password, short salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, long salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, long salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] short password, short salt, SHA-384, with 1 iterations with missing deriveBits usage\n[PASS] Derived key of type name: AES-CTR length: 128  using empty derivedKey, empty salt, SHA-384, with normal info\n[PASS] Derived key of type name: AES-CTR length: 128  using empty derivedKey, empty salt, SHA-384, with normal info with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 128  using empty derivedKey, empty salt, SHA-384, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using empty derivedKey, empty salt, SHA-384, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, long salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, long salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] short password, short salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, empty salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, empty salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, empty salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, empty salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, short salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, short salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, short salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, short salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, long salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using empty derivedKey, empty salt, SHA-384, with normal info\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, long salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, long salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] short password, short salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, long salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using empty derivedKey, empty salt, SHA-384, with normal info with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 192  using empty derivedKey, empty salt, SHA-384, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using empty derivedKey, empty salt, SHA-384, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, empty salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, empty salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, empty salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using long password, short salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, empty salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using long password, short salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 128  using long password, short salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using long password, short salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, short salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using empty derivedKey, empty salt, SHA-384, with normal info\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, long salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using empty derivedKey, empty salt, SHA-384, with normal info with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, short salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, long salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, long salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using empty derivedKey, empty salt, SHA-384, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, long salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using empty derivedKey, empty salt, SHA-384, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, short salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using long password, short salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, short salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using long password, short salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, empty salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, empty salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 192  using long password, short salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using long password, short salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, empty salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, empty salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, long salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using empty derivedKey, empty salt, SHA-384, with normal info\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, long salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 128  using empty derivedKey, empty salt, SHA-384, with normal info with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, long salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using empty derivedKey, empty salt, SHA-384, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, long salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using empty derivedKey, empty salt, SHA-384, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, short salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, short salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, short salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using long password, short salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, short salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using long password, short salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 256  using long password, short salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, empty salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, empty salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 192  using empty derivedKey, empty salt, SHA-384, with normal info\n[PASS] Derived key of type name: AES-GCM length: 192  using empty derivedKey, empty salt, SHA-384, with normal info with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 192  using empty derivedKey, empty salt, SHA-384, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, empty salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, empty salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using long password, short salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using empty derivedKey, empty salt, SHA-384, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using short password, long salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using short password, long salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 128  using short password, long salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using short password, long salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using empty derivedKey, empty salt, SHA-384, with normal info\n[PASS] Derived key of type name: AES-GCM length: 256  using empty derivedKey, empty salt, SHA-384, with normal info with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, short salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, short salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 256  using empty derivedKey, empty salt, SHA-384, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using empty derivedKey, empty salt, SHA-384, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, short salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, short salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, empty salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using empty derivedKey, empty salt, SHA-384, with normal info\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, empty salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, short salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, empty salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using empty derivedKey, empty salt, SHA-384, with normal info with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, empty salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, short salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 128  using empty derivedKey, empty salt, SHA-384, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using short password, long salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using short password, long salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, short salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using empty derivedKey, empty salt, SHA-384, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using short password, long salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, short salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using short password, long salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, short salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, short salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 192  using empty derivedKey, empty salt, SHA-384, with normal info\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, short salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using empty derivedKey, empty salt, SHA-384, with normal info with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 192  using empty derivedKey, empty salt, SHA-384, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, short salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using empty derivedKey, empty salt, SHA-384, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using short password, empty salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using short password, empty salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 256  using short password, long salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using short password, empty salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using short password, long salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 128  using short password, empty salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using short password, long salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using short password, long salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, short salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using empty derivedKey, empty salt, SHA-384, with normal info\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, short salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 256  using empty derivedKey, empty salt, SHA-384, with normal info with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, short salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using empty derivedKey, empty salt, SHA-384, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, short salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using empty derivedKey, empty salt, SHA-384, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, short salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, short salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, short salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using short password, empty salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, long salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using short password, empty salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, long salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 192  using short password, empty salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty derivedKey, empty salt, SHA-384, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, long salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, short salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, short salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 192  using short password, empty salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, long salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty derivedKey, empty salt, SHA-384, with normal info with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty derivedKey, empty salt, SHA-384, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, short salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty derivedKey, empty salt, SHA-384, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, short salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, short salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using short password, empty salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty derivedKey, empty salt, SHA-384, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty derivedKey, empty salt, SHA-384, with normal info with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, long salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, long salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 256  using short password, empty salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty derivedKey, empty salt, SHA-384, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty derivedKey, empty salt, SHA-384, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, long salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, long salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using short password, empty salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using short password, empty salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty derivedKey, empty salt, SHA-384, with normal info\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, short salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, short salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty derivedKey, empty salt, SHA-384, with normal info with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty derivedKey, empty salt, SHA-384, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, short salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, short salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, short salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty derivedKey, empty salt, SHA-384, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, short salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, short salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, long salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty derivedKey, empty salt, SHA-384, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty derivedKey, empty salt, SHA-384, with normal info with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, short salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty derivedKey, empty salt, SHA-384, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, long salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, long salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, long salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty derivedKey, empty salt, SHA-384, with normal info with wrong (ECDH) key\n[PASS] empty derivedKey, empty salt, SHA-384, with normal info with missing salt\n[PASS] empty derivedKey, empty salt, SHA-384, with normal info with missing info\n[PASS] empty derivedKey, empty salt, SHA-384, with normal info with null length\n[PASS] empty derivedKey, empty salt, SHA-384, with normal info with non-multiple of 8 length\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, empty salt, SHA-384, with 1000 iterations\n[PASS] empty derivedKey, empty salt, SHA-384, with normal info with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, empty salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] empty derivedKey, empty salt, SHA-384, with normal info with missing deriveBits usage\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, short salt, SHA-384, with 1000 iterations\n[PASS] empty derivedKey, empty salt, SHA-384, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, empty salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, short salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, empty salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, short salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, short salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] empty derivedKey, empty salt, SHA-384, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, long salt, SHA-384, with 1000 iterations\n[PASS] empty derivedKey, empty salt, SHA-384, with empty info with 0 length\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, long salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, long salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, long salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, short salt, SHA-384, with 1000 iterations\n[PASS] short password, long salt, SHA-384, with 1000 iterations with null length\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, short salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] short password, long salt, SHA-384, with 1000 iterations with 0 length\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, short salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] short password, long salt, SHA-384, with 1000 iterations with non-multiple of 8 length\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, short salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, empty salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, empty salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 128  using empty derivedKey, empty salt, SHA-384, with empty info\n[PASS] Derived key of type name: AES-CBC length: 128  using empty derivedKey, empty salt, SHA-384, with empty info with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 128  using empty derivedKey, empty salt, SHA-384, with empty info with missing deriveKey usage\n[PASS] short password, long salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] short password, long salt, SHA-384, with 1000 iterations with missing deriveBits usage\n[PASS] short password, long salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, empty salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, empty salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 128  using empty derivedKey, empty salt, SHA-384, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using empty derivedKey, empty salt, SHA-384, with empty info\n[PASS] long password, short salt, SHA-384, with 1000 iterations with null length\n[PASS] Derived key of type name: AES-CBC length: 192  using empty derivedKey, empty salt, SHA-384, with empty info with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, short salt, SHA-384, with 1000 iterations\n[PASS] long password, short salt, SHA-384, with 1000 iterations with 0 length\n[PASS] Derived key of type name: AES-CBC length: 192  using empty derivedKey, empty salt, SHA-384, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using empty derivedKey, empty salt, SHA-384, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, short salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, short salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] long password, short salt, SHA-384, with 1000 iterations with non-multiple of 8 length\n[PASS] long password, short salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, short salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] long password, short salt, SHA-384, with 1000 iterations with missing deriveBits usage\n[PASS] long password, short salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, empty salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using empty derivedKey, empty salt, SHA-384, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, empty salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 256  using empty derivedKey, empty salt, SHA-384, with empty info with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, empty salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using empty derivedKey, empty salt, SHA-384, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using empty derivedKey, empty salt, SHA-384, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, empty salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using short password, short salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using short password, short salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 128  using short password, short salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using short password, short salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using empty derivedKey, empty salt, SHA-384, with empty info\n[PASS] Derived key of type name: AES-CTR length: 128  using empty derivedKey, empty salt, SHA-384, with empty info with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 128  using empty derivedKey, empty salt, SHA-384, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using empty derivedKey, empty salt, SHA-384, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, empty salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, empty salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, empty salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, empty salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, empty salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] short password, empty salt, SHA-384, with 1000 iterations with null length\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, empty salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] short password, empty salt, SHA-384, with 1000 iterations with 0 length\n[PASS] Derived key of type name: AES-CTR length: 192  using empty derivedKey, empty salt, SHA-384, with empty info\n[PASS] Derived key of type name: AES-KW length: 192  using short password, short salt, SHA-384, with 1000 iterations\n[PASS] short password, empty salt, SHA-384, with 1000 iterations with non-multiple of 8 length\n[PASS] Derived key of type name: AES-CTR length: 192  using empty derivedKey, empty salt, SHA-384, with empty info with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, empty salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using short password, short salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] short password, empty salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 192  using empty derivedKey, empty salt, SHA-384, with empty info with missing deriveKey usage\n[PASS] short password, empty salt, SHA-384, with 1000 iterations with missing deriveBits usage\n[PASS] Derived key of type name: AES-KW length: 192  using short password, short salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using empty derivedKey, empty salt, SHA-384, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, empty salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] short password, empty salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using short password, short salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] long password, long salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using empty derivedKey, empty salt, SHA-384, with empty info\n[PASS] Derived key of type name: AES-CTR length: 256  using empty derivedKey, empty salt, SHA-384, with empty info with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 256  using empty derivedKey, empty salt, SHA-384, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using empty derivedKey, empty salt, SHA-384, with empty info with wrong (ECDH) key\n[PASS] short password, long salt, SHA-384, with 100000 iterations\n[PASS] long password, short salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using short password, short salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using empty derivedKey, empty salt, SHA-384, with empty info\n[PASS] Derived key of type name: AES-KW length: 256  using short password, short salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 256  using short password, short salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using empty derivedKey, empty salt, SHA-384, with empty info with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 256  using short password, short salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using empty derivedKey, empty salt, SHA-384, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using empty derivedKey, empty salt, SHA-384, with empty info with wrong (ECDH) key\n[PASS] short password, empty salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, empty salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, empty salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, empty salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, short salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using empty derivedKey, empty salt, SHA-384, with empty info\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, empty salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, short salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 192  using empty derivedKey, empty salt, SHA-384, with empty info with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 192  using empty derivedKey, empty salt, SHA-384, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, short salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using empty derivedKey, empty salt, SHA-384, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, short salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, long salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, long salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, long salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, long salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, long salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using empty derivedKey, empty salt, SHA-384, with empty info\n[PASS] Derived key of type name: AES-GCM length: 256  using empty derivedKey, empty salt, SHA-384, with empty info with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, long salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 256  using empty derivedKey, empty salt, SHA-384, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, long salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using empty derivedKey, empty salt, SHA-384, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, long salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, short salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, short salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, short salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, short salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using empty derivedKey, empty salt, SHA-384, with empty info\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, short salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, short salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 128  using empty derivedKey, empty salt, SHA-384, with empty info with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 128  using empty derivedKey, empty salt, SHA-384, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, short salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using empty derivedKey, empty salt, SHA-384, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, short salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, empty salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, empty salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, empty salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, empty salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using empty derivedKey, empty salt, SHA-384, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, short salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using empty derivedKey, empty salt, SHA-384, with empty info with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, short salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 192  using empty derivedKey, empty salt, SHA-384, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, short salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using empty derivedKey, empty salt, SHA-384, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, short salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, empty salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, empty salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, empty salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, empty salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, long salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using empty derivedKey, empty salt, SHA-384, with empty info\n[PASS] Derived key of type name: AES-KW length: 256  using empty derivedKey, empty salt, SHA-384, with empty info with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 256  using empty derivedKey, empty salt, SHA-384, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, long salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 256  using empty derivedKey, empty salt, SHA-384, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, long salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, long salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, short salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, short salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, short salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, short salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] short password, short salt, SHA-384, with 1000 iterations with null length\n[PASS] short password, short salt, SHA-384, with 1000 iterations with 0 length\n[PASS] short password, short salt, SHA-384, with 1000 iterations with non-multiple of 8 length\n[PASS] short password, short salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] short password, short salt, SHA-384, with 1000 iterations with missing deriveBits usage\n[PASS] short password, short salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, long salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty derivedKey, empty salt, SHA-384, with empty info\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, long salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty derivedKey, empty salt, SHA-384, with empty info with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, long salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty derivedKey, empty salt, SHA-384, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty derivedKey, empty salt, SHA-384, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, long salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, short salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, short salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, short salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, short salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, empty salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty derivedKey, empty salt, SHA-384, with empty info\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, empty salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty derivedKey, empty salt, SHA-384, with empty info with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, empty salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty derivedKey, empty salt, SHA-384, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, empty salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty derivedKey, empty salt, SHA-384, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, empty salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, empty salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, empty salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, empty salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, long salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, long salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, long salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, long salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] short password, short salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty derivedKey, empty salt, SHA-384, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty derivedKey, empty salt, SHA-384, with empty info with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty derivedKey, empty salt, SHA-384, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty derivedKey, empty salt, SHA-384, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, long salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, long salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, long salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, long salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, short salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, short salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, short salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, short salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, empty salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty derivedKey, empty salt, SHA-384, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty derivedKey, empty salt, SHA-384, with empty info with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, empty salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, empty salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty derivedKey, empty salt, SHA-384, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty derivedKey, empty salt, SHA-384, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, empty salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] empty derivedKey, empty salt, SHA-384, with empty info with missing salt\n[PASS] empty derivedKey, empty salt, SHA-384, with empty info with missing info\n[PASS] empty derivedKey, empty salt, SHA-384, with empty info with null length\n[PASS] empty derivedKey, empty salt, SHA-384, with empty info with non-multiple of 8 length\n[PASS] empty derivedKey, empty salt, SHA-384, with empty info with bad hash name SHA384\n[PASS] empty derivedKey, empty salt, SHA-384, with empty info with missing deriveBits usage\n[PASS] empty derivedKey, empty salt, SHA-384, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, empty salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, empty salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, empty salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, empty salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, long salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, long salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, long salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, long salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] empty derivedKey, empty salt, SHA-512, with normal info\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, short salt, SHA-384, with 100000 iterations\n[PASS] empty derivedKey, empty salt, SHA-512, with normal info with 0 length\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, short salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, short salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, short salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, long salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, long salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, long salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, long salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, short salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using empty derivedKey, empty salt, SHA-512, with normal info\n[PASS] Derived key of type name: AES-CBC length: 128  using empty derivedKey, empty salt, SHA-512, with normal info with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 128  using empty derivedKey, empty salt, SHA-512, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, short salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, short salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, short salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 128  using empty derivedKey, empty salt, SHA-512, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, empty salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, empty salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, empty salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, empty salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, empty salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, empty salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, empty salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, empty salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using empty derivedKey, empty salt, SHA-512, with normal info\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, long salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, long salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 192  using empty derivedKey, empty salt, SHA-512, with normal info with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, long salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using empty derivedKey, empty salt, SHA-512, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, long salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using empty derivedKey, empty salt, SHA-512, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, short salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, short salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, short salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, short salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, long salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, long salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, long salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, long salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, short salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using empty derivedKey, empty salt, SHA-512, with normal info\n[PASS] Derived key of type name: AES-CBC length: 256  using empty derivedKey, empty salt, SHA-512, with normal info with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, short salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 256  using empty derivedKey, empty salt, SHA-512, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, short salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using empty derivedKey, empty salt, SHA-512, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, short salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, empty salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, empty salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, empty salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, empty salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using empty derivedKey, empty salt, SHA-512, with normal info\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, empty salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using empty derivedKey, empty salt, SHA-512, with normal info with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, empty salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 128  using empty derivedKey, empty salt, SHA-512, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, empty salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using empty derivedKey, empty salt, SHA-512, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, empty salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, long salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, long salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, long salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, long salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, short salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using empty derivedKey, empty salt, SHA-512, with normal info\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, short salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, short salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, short salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using empty derivedKey, empty salt, SHA-512, with normal info with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 192  using empty derivedKey, empty salt, SHA-512, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using empty derivedKey, empty salt, SHA-512, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, long salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, long salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, long salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, long salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, short salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, short salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, short salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, short salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, empty salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using empty derivedKey, empty salt, SHA-512, with normal info\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, empty salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 256  using empty derivedKey, empty salt, SHA-512, with normal info with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, empty salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using empty derivedKey, empty salt, SHA-512, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, empty salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using empty derivedKey, empty salt, SHA-512, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, empty salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, empty salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, empty salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, empty salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, long salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, long salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, long salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, long salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using empty derivedKey, empty salt, SHA-512, with normal info\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, short salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using empty derivedKey, empty salt, SHA-512, with normal info with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 128  using empty derivedKey, empty salt, SHA-512, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, short salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 128  using empty derivedKey, empty salt, SHA-512, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, short salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, short salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, long salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, long salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, long salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, long salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, short salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using empty derivedKey, empty salt, SHA-512, with normal info\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, short salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 192  using empty derivedKey, empty salt, SHA-512, with normal info with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 192  using empty derivedKey, empty salt, SHA-512, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using empty derivedKey, empty salt, SHA-512, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, short salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, short salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, empty salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, empty salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, empty salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, empty salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using long password, empty salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using long password, empty salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 128  using long password, empty salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using long password, empty salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using empty derivedKey, empty salt, SHA-512, with normal info\n[PASS] Derived key of type name: AES-GCM length: 256  using empty derivedKey, empty salt, SHA-512, with normal info with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, long salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using empty derivedKey, empty salt, SHA-512, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using empty derivedKey, empty salt, SHA-512, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, long salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, long salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, long salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, short salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, short salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, short salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, short salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using empty derivedKey, empty salt, SHA-512, with normal info\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, long salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using empty derivedKey, empty salt, SHA-512, with normal info with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, long salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 128  using empty derivedKey, empty salt, SHA-512, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, long salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using empty derivedKey, empty salt, SHA-512, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, long salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, short salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, short salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, short salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, empty salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, short salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, empty salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 192  using empty derivedKey, empty salt, SHA-512, with normal info\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, empty salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using empty derivedKey, empty salt, SHA-512, with normal info with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 192  using empty derivedKey, empty salt, SHA-512, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, empty salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using empty derivedKey, empty salt, SHA-512, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using long password, empty salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using long password, empty salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 192  using long password, empty salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using long password, empty salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, long salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, long salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, long salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, long salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, short salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using empty derivedKey, empty salt, SHA-512, with normal info\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, short salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 256  using empty derivedKey, empty salt, SHA-512, with normal info with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 256  using empty derivedKey, empty salt, SHA-512, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, short salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using empty derivedKey, empty salt, SHA-512, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, short salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, short salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, short salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, long salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, long salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, long salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, long salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty derivedKey, empty salt, SHA-512, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty derivedKey, empty salt, SHA-512, with normal info with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty derivedKey, empty salt, SHA-512, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty derivedKey, empty salt, SHA-512, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, short salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, short salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, empty salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, empty salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty derivedKey, empty salt, SHA-512, with normal info\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, empty salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty derivedKey, empty salt, SHA-512, with normal info with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, empty salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty derivedKey, empty salt, SHA-512, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty derivedKey, empty salt, SHA-512, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using long password, empty salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using long password, empty salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 256  using long password, empty salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using long password, empty salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using long password, long salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using long password, long salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 128  using long password, long salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using long password, long salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using long password, short salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty derivedKey, empty salt, SHA-512, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty derivedKey, empty salt, SHA-512, with normal info with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 128  using long password, short salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty derivedKey, empty salt, SHA-512, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty derivedKey, empty salt, SHA-512, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using long password, short salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using long password, short salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using short password, long salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using short password, long salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 128  using short password, long salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using short password, long salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, short salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, short salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, short salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty derivedKey, empty salt, SHA-512, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty derivedKey, empty salt, SHA-512, with normal info with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty derivedKey, empty salt, SHA-512, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty derivedKey, empty salt, SHA-512, with normal info with wrong (ECDH) key\n[PASS] empty derivedKey, empty salt, SHA-512, with normal info with missing salt\n[PASS] empty derivedKey, empty salt, SHA-512, with normal info with missing info\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, short salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] empty derivedKey, empty salt, SHA-512, with normal info with null length\n[PASS] empty derivedKey, empty salt, SHA-512, with normal info with non-multiple of 8 length\n[PASS] empty derivedKey, empty salt, SHA-512, with normal info with bad hash name SHA512\n[PASS] empty derivedKey, empty salt, SHA-512, with normal info with missing deriveBits usage\n[PASS] empty derivedKey, empty salt, SHA-512, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using short password, empty salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using short password, empty salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 128  using short password, empty salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using short password, empty salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, empty salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, empty salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, empty salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, empty salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] empty derivedKey, empty salt, SHA-512, with empty info\n[PASS] empty derivedKey, empty salt, SHA-512, with empty info with 0 length\n[PASS] Derived key of type name: AES-KW length: 192  using long password, long salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using long password, long salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 192  using long password, long salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using long password, long salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using long password, short salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using long password, short salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 192  using long password, short salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using long password, short salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 128  using empty derivedKey, empty salt, SHA-512, with empty info\n[PASS] Derived key of type name: AES-KW length: 192  using short password, long salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using empty derivedKey, empty salt, SHA-512, with empty info with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 128  using empty derivedKey, empty salt, SHA-512, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using short password, long salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 128  using empty derivedKey, empty salt, SHA-512, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using short password, long salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using short password, long salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, short salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, short salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, short salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, short salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using short password, empty salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using empty derivedKey, empty salt, SHA-512, with empty info\n[PASS] Derived key of type name: AES-CBC length: 192  using empty derivedKey, empty salt, SHA-512, with empty info with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 192  using short password, empty salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 192  using empty derivedKey, empty salt, SHA-512, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using short password, empty salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using short password, empty salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using empty derivedKey, empty salt, SHA-512, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, empty salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, empty salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, empty salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, empty salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using long password, long salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using long password, long salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 256  using long password, long salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using long password, long salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using long password, short salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using empty derivedKey, empty salt, SHA-512, with empty info\n[PASS] Derived key of type name: AES-KW length: 256  using long password, short salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 256  using empty derivedKey, empty salt, SHA-512, with empty info with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 256  using long password, short salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using empty derivedKey, empty salt, SHA-512, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using long password, short salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using empty derivedKey, empty salt, SHA-512, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using short password, long salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using short password, long salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 256  using short password, long salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using short password, long salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, short salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, short salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, short salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, short salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using short password, empty salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using empty derivedKey, empty salt, SHA-512, with empty info\n[PASS] Derived key of type name: AES-CTR length: 128  using empty derivedKey, empty salt, SHA-512, with empty info with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 256  using short password, empty salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 128  using empty derivedKey, empty salt, SHA-512, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using empty derivedKey, empty salt, SHA-512, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using short password, empty salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using short password, empty salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, empty salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, empty salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, empty salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, empty salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using empty derivedKey, empty salt, SHA-512, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, long salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, long salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 192  using empty derivedKey, empty salt, SHA-512, with empty info with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 192  using empty derivedKey, empty salt, SHA-512, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, long salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using empty derivedKey, empty salt, SHA-512, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, long salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, short salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, short salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, short salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, short salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using empty derivedKey, empty salt, SHA-512, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, long salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, long salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 256  using empty derivedKey, empty salt, SHA-512, with empty info with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 256  using empty derivedKey, empty salt, SHA-512, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, long salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using empty derivedKey, empty salt, SHA-512, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, long salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using short password, short salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using short password, short salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 128  using short password, short salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using short password, short salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, empty salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using empty derivedKey, empty salt, SHA-512, with empty info\n[PASS] Derived key of type name: AES-GCM length: 128  using empty derivedKey, empty salt, SHA-512, with empty info with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 128  using empty derivedKey, empty salt, SHA-512, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using empty derivedKey, empty salt, SHA-512, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, empty salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, empty salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, empty salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, empty salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, empty salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, empty salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, empty salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] long password, empty salt, SHA-384, with 100000 iterations with null length\n[PASS] long password, empty salt, SHA-384, with 100000 iterations with 0 length\n[PASS] long password, empty salt, SHA-384, with 100000 iterations with non-multiple of 8 length\n[PASS] long password, empty salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] long password, empty salt, SHA-384, with 100000 iterations with missing deriveBits usage\n[PASS] long password, empty salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] long password, empty salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, empty salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, empty salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, empty salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, empty salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, empty salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, empty salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, empty salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, empty salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, empty salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using long password, empty salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using long password, empty salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using long password, empty salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, empty salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, empty salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, empty salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, empty salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using empty derivedKey, empty salt, SHA-512, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, long salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using empty derivedKey, empty salt, SHA-512, with empty info with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, long salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 192  using empty derivedKey, empty salt, SHA-512, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, long salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using empty derivedKey, empty salt, SHA-512, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, long salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] long password, empty salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, short salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, short salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 256  using empty derivedKey, empty salt, SHA-512, with empty info\n[PASS] Derived key of type name: AES-GCM length: 256  using empty derivedKey, empty salt, SHA-512, with empty info with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 256  using empty derivedKey, empty salt, SHA-512, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, short salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, short salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using empty derivedKey, empty salt, SHA-512, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using empty derivedKey, empty salt, SHA-512, with empty info\n[PASS] Derived key of type name: AES-KW length: 128  using empty derivedKey, empty salt, SHA-512, with empty info with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 128  using empty derivedKey, empty salt, SHA-512, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using empty derivedKey, empty salt, SHA-512, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, empty salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, empty salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, empty salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, empty salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, long salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, long salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, long salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, long salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using empty derivedKey, empty salt, SHA-512, with empty info\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, empty salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, empty salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 192  using short password, short salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using short password, short salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, empty salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, empty salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using empty derivedKey, empty salt, SHA-512, with empty info with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 192  using empty derivedKey, empty salt, SHA-512, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using empty derivedKey, empty salt, SHA-512, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using short password, short salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using short password, short salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, empty salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, empty salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, empty salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, empty salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, empty salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, empty salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, empty salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, empty salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, long salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using empty derivedKey, empty salt, SHA-512, with empty info\n[PASS] Derived key of type name: AES-KW length: 256  using empty derivedKey, empty salt, SHA-512, with empty info with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, long salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 256  using empty derivedKey, empty salt, SHA-512, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, long salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, long salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using empty derivedKey, empty salt, SHA-512, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, short salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, empty salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, empty salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, short salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, short salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, empty salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, empty salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, short salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using short password, short salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty derivedKey, empty salt, SHA-512, with empty info\n[PASS] Derived key of type name: AES-KW length: 256  using short password, short salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty derivedKey, empty salt, SHA-512, with empty info with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 256  using short password, short salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty derivedKey, empty salt, SHA-512, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using short password, short salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty derivedKey, empty salt, SHA-512, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, empty salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, long salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, long salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, empty salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, long salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, empty salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, long salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, empty salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, empty salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty derivedKey, empty salt, SHA-512, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, empty salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, empty salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty derivedKey, empty salt, SHA-512, with empty info with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty derivedKey, empty salt, SHA-512, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, empty salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty derivedKey, empty salt, SHA-512, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, long salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, empty salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, empty salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, long salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, empty salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, long salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, empty salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, long salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] long password, long salt, SHA-384, with 100000 iterations with null length\n[PASS] long password, long salt, SHA-384, with 100000 iterations with 0 length\n[PASS] long password, long salt, SHA-384, with 100000 iterations with non-multiple of 8 length\n[PASS] long password, long salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] long password, long salt, SHA-384, with 100000 iterations with missing deriveBits usage\n[PASS] long password, long salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] long password, long salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, long salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, long salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, long salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, long salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, long salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, empty salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, short salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty derivedKey, empty salt, SHA-512, with empty info\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, long salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, empty salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, short salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty derivedKey, empty salt, SHA-512, with empty info with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, long salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, empty salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, short salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty derivedKey, empty salt, SHA-512, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, long salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, empty salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty derivedKey, empty salt, SHA-512, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, short salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, long salt, SHA-384, with 0 iterations\n[PASS] long password, short salt, SHA-384, with 100000 iterations with null length\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, empty salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using long password, long salt, SHA-384, with 0 iterations\n[PASS] long password, short salt, SHA-384, with 100000 iterations with 0 length\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty derivedKey, empty salt, SHA-512, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty derivedKey, empty salt, SHA-512, with empty info with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, empty salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, empty salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, empty salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using long password, long salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using long password, long salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, long salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty derivedKey, empty salt, SHA-512, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty derivedKey, empty salt, SHA-512, with empty info with wrong (ECDH) key\n[PASS] empty derivedKey, empty salt, SHA-512, with empty info with missing salt\n[PASS] empty derivedKey, empty salt, SHA-512, with empty info with missing info\n[PASS] long password, short salt, SHA-384, with 100000 iterations with non-multiple of 8 length\n[PASS] long password, short salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, empty salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, empty salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, empty salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, long salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, long salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, long salt, SHA-384, with 0 iterations\n[PASS] empty derivedKey, empty salt, SHA-512, with empty info with null length\n[PASS] empty derivedKey, empty salt, SHA-512, with empty info with non-multiple of 8 length\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, empty salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] long password, long salt, SHA-512, with 1 iterations\n[PASS] empty derivedKey, empty salt, SHA-512, with empty info with bad hash name SHA512\n[PASS] empty derivedKey, empty salt, SHA-512, with empty info with missing deriveBits usage\n[PASS] long password, short salt, SHA-384, with 100000 iterations with missing deriveBits usage\n[PASS] long password, short salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] empty derivedKey, empty salt, SHA-512, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using long password, empty salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, long salt, SHA-512, with 1 iterations\n[PASS] empty derivedKey, empty salt, SHA-1, with normal info\n[PASS] Derived key of type name: AES-KW length: 128  using long password, empty salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, long salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] long password, short salt, SHA-384, with 0 iterations\n[PASS] empty derivedKey, empty salt, SHA-1, with normal info with 0 length\n[PASS] Derived key of type name: AES-KW length: 128  using long password, empty salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using long password, empty salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, long salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, long salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 128  using empty derivedKey, empty salt, SHA-1, with normal info\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, short salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using empty derivedKey, empty salt, SHA-1, with normal info with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, short salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using long password, empty salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, long salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using empty derivedKey, empty salt, SHA-1, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, short salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using long password, empty salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, long salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, long salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using empty derivedKey, empty salt, SHA-1, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, short salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using long password, empty salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using long password, empty salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, long salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using empty derivedKey, empty salt, SHA-1, with normal info\n[PASS] Derived key of type name: AES-CBC length: 192  using empty derivedKey, empty salt, SHA-1, with normal info with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, short salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, short salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, long salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, long salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, long salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, long salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using empty derivedKey, empty salt, SHA-1, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using empty derivedKey, empty salt, SHA-1, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using empty derivedKey, empty salt, SHA-1, with normal info\n[PASS] Derived key of type name: AES-CBC length: 256  using empty derivedKey, empty salt, SHA-1, with normal info with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 256  using empty derivedKey, empty salt, SHA-1, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, short salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, short salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, short salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using long password, short salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using long password, short salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using long password, short salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, short salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using empty derivedKey, empty salt, SHA-1, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using empty derivedKey, empty salt, SHA-1, with normal info\n[PASS] Derived key of type name: AES-CTR length: 128  using empty derivedKey, empty salt, SHA-1, with normal info with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 128  using empty derivedKey, empty salt, SHA-1, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, short salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, short salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, short salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, short salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, short salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, short salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, short salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using long password, empty salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using long password, empty salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 256  using long password, empty salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using long password, empty salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, empty salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, empty salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, empty salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, empty salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, empty salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, empty salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 128  using empty derivedKey, empty salt, SHA-1, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using empty derivedKey, empty salt, SHA-1, with normal info\n[PASS] Derived key of type name: AES-CTR length: 192  using empty derivedKey, empty salt, SHA-1, with normal info with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 192  using empty derivedKey, empty salt, SHA-1, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using empty derivedKey, empty salt, SHA-1, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using empty derivedKey, empty salt, SHA-1, with normal info\n[PASS] Derived key of type name: AES-CTR length: 256  using empty derivedKey, empty salt, SHA-1, with normal info with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 256  using empty derivedKey, empty salt, SHA-1, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using empty derivedKey, empty salt, SHA-1, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, empty salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, empty salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, empty salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, empty salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, long salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, long salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, long salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, long salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, long salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, long salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, long salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, long salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, long salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, long salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, long salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, long salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using empty derivedKey, empty salt, SHA-1, with normal info\n[PASS] Derived key of type name: AES-GCM length: 128  using empty derivedKey, empty salt, SHA-1, with normal info with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 128  using empty derivedKey, empty salt, SHA-1, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using empty derivedKey, empty salt, SHA-1, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using empty derivedKey, empty salt, SHA-1, with normal info\n[PASS] Derived key of type name: AES-GCM length: 192  using empty derivedKey, empty salt, SHA-1, with normal info with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 192  using empty derivedKey, empty salt, SHA-1, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using empty derivedKey, empty salt, SHA-1, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, empty salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, empty salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, empty salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, empty salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, empty salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, empty salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] long password, empty salt, SHA-512, with 1 iterations with null length\n[PASS] long password, empty salt, SHA-512, with 1 iterations with 0 length\n[PASS] long password, empty salt, SHA-512, with 1 iterations with non-multiple of 8 length\n[PASS] long password, empty salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, long salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, long salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, long salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, long salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, long salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, long salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, long salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, long salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using empty derivedKey, empty salt, SHA-1, with normal info\n[PASS] Derived key of type name: AES-GCM length: 256  using empty derivedKey, empty salt, SHA-1, with normal info with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 256  using empty derivedKey, empty salt, SHA-1, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using empty derivedKey, empty salt, SHA-1, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using empty derivedKey, empty salt, SHA-1, with normal info\n[PASS] Derived key of type name: AES-KW length: 128  using empty derivedKey, empty salt, SHA-1, with normal info with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 128  using empty derivedKey, empty salt, SHA-1, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using empty derivedKey, empty salt, SHA-1, with normal info with wrong (ECDH) key\n[PASS] long password, empty salt, SHA-512, with 1 iterations with missing deriveBits usage\n[PASS] long password, empty salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] long password, short salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, short salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, short salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, short salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, short salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, long salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, long salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, long salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, long salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] long password, empty salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, short salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using long password, long salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using long password, long salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 128  using long password, long salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using long password, long salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using empty derivedKey, empty salt, SHA-1, with normal info\n[PASS] Derived key of type name: AES-KW length: 192  using empty derivedKey, empty salt, SHA-1, with normal info with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, short salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, short salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, short salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using empty derivedKey, empty salt, SHA-1, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using empty derivedKey, empty salt, SHA-1, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using long password, long salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, short salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, empty salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using long password, long salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 256  using empty derivedKey, empty salt, SHA-1, with normal info\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, short salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, short salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using long password, long salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using long password, long salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, short salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using empty derivedKey, empty salt, SHA-1, with normal info with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 256  using empty derivedKey, empty salt, SHA-1, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using empty derivedKey, empty salt, SHA-1, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, empty salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, empty salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, empty salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using long password, long salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using long password, long salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 256  using long password, long salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using long password, long salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, short salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, short salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, short salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, short salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, empty salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, short salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, long salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty derivedKey, empty salt, SHA-1, with normal info\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, empty salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, short salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, long salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, short salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, long salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, empty salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty derivedKey, empty salt, SHA-1, with normal info with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, short salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, long salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, empty salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty derivedKey, empty salt, SHA-1, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty derivedKey, empty salt, SHA-1, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, short salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, short salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, short salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, long salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, long salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, long salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, short salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, long salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, empty salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, short salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty derivedKey, empty salt, SHA-1, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, long salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, empty salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, long salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty derivedKey, empty salt, SHA-1, with normal info with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, long salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, empty salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty derivedKey, empty salt, SHA-1, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty derivedKey, empty salt, SHA-1, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, short salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, short salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, long salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, long salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, long salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, empty salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, short salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, long salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, long salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] long password, long salt, SHA-512, with 1 iterations with null length\n[PASS] long password, long salt, SHA-512, with 1 iterations with 0 length\n[PASS] long password, long salt, SHA-512, with 1 iterations with non-multiple of 8 length\n[PASS] long password, long salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, empty salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, short salt, SHA-512, with 1 iterations\n[PASS] long password, long salt, SHA-512, with 1 iterations with missing deriveBits usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty derivedKey, empty salt, SHA-1, with normal info\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, short salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, empty salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] long password, long salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, short salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty derivedKey, empty salt, SHA-1, with normal info with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, empty salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, empty salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, short salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty derivedKey, empty salt, SHA-1, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty derivedKey, empty salt, SHA-1, with normal info with wrong (ECDH) key\n[PASS] long password, long salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, short salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, short salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, short salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, short salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, empty salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty derivedKey, empty salt, SHA-1, with normal info\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, empty salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty derivedKey, empty salt, SHA-1, with normal info with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty derivedKey, empty salt, SHA-1, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, empty salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty derivedKey, empty salt, SHA-1, with normal info with wrong (ECDH) key\n[PASS] empty derivedKey, empty salt, SHA-1, with normal info with missing salt\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, empty salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] empty derivedKey, empty salt, SHA-1, with normal info with missing info\n[PASS] empty derivedKey, empty salt, SHA-1, with normal info with null length\n[PASS] empty derivedKey, empty salt, SHA-1, with normal info with non-multiple of 8 length\n[PASS] empty derivedKey, empty salt, SHA-1, with normal info with bad hash name SHA1\n[PASS] empty derivedKey, empty salt, SHA-1, with normal info with missing deriveBits usage\n[PASS] Derived key of type name: AES-KW length: 128  using long password, short salt, SHA-512, with 1 iterations\n[PASS] empty derivedKey, empty salt, SHA-1, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using long password, short salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, long salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, long salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 128  using long password, short salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, long salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using long password, short salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, empty salt, SHA-512, with 1000 iterations\n[PASS] empty derivedKey, empty salt, SHA-1, with empty info\n[PASS] empty derivedKey, empty salt, SHA-1, with empty info with 0 length\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, long salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, empty salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, empty salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, empty salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using long password, short salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using long password, short salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 192  using long password, short salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using long password, short salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, long salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using empty derivedKey, empty salt, SHA-1, with empty info\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, long salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 128  using empty derivedKey, empty salt, SHA-1, with empty info with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 128  using empty derivedKey, empty salt, SHA-1, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, long salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using empty derivedKey, empty salt, SHA-1, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, long salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, empty salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using empty derivedKey, empty salt, SHA-1, with empty info\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, empty salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 256  using long password, short salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, empty salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using empty derivedKey, empty salt, SHA-1, with empty info with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, empty salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using empty derivedKey, empty salt, SHA-1, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using long password, short salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 256  using long password, short salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, long salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, long salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, long salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, long salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 192  using empty derivedKey, empty salt, SHA-1, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using long password, short salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, long salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, long salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, long salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] short password, long salt, SHA-384, with 100000 iterations with null length\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, long salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using empty derivedKey, empty salt, SHA-1, with empty info\n[PASS] short password, long salt, SHA-384, with 100000 iterations with 0 length\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, short salt, SHA-512, with 1 iterations\n[PASS] short password, long salt, SHA-384, with 100000 iterations with non-multiple of 8 length\n[PASS] Derived key of type name: AES-CBC length: 256  using empty derivedKey, empty salt, SHA-1, with empty info with bad hash name SHA1\n[PASS] short password, long salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, short salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 256  using empty derivedKey, empty salt, SHA-1, with empty info with missing deriveKey usage\n[PASS] short password, long salt, SHA-384, with 100000 iterations with missing deriveBits usage\n[PASS] Derived key of type name: AES-CBC length: 256  using empty derivedKey, empty salt, SHA-1, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, short salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, short salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] short password, long salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, empty salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, empty salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 128  using empty derivedKey, empty salt, SHA-1, with empty info\n[PASS] short password, long salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, empty salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, empty salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, short salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, short salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 128  using empty derivedKey, empty salt, SHA-1, with empty info with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 128  using empty derivedKey, empty salt, SHA-1, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using empty derivedKey, empty salt, SHA-1, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, long salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, long salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, long salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, long salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, short salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, short salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, long salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, long salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, long salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, long salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, long salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, long salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, long salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using empty derivedKey, empty salt, SHA-1, with empty info\n[PASS] Derived key of type name: AES-CTR length: 192  using empty derivedKey, empty salt, SHA-1, with empty info with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 192  using empty derivedKey, empty salt, SHA-1, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using empty derivedKey, empty salt, SHA-1, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using empty derivedKey, empty salt, SHA-1, with empty info\n[PASS] Derived key of type name: AES-CTR length: 256  using empty derivedKey, empty salt, SHA-1, with empty info with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 256  using empty derivedKey, empty salt, SHA-1, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using empty derivedKey, empty salt, SHA-1, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, long salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, long salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, empty salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, empty salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, empty salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, empty salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, short salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, short salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, short salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, short salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, short salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, short salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, short salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, short salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] long password, short salt, SHA-512, with 1 iterations with null length\n[PASS] long password, short salt, SHA-512, with 1 iterations with 0 length\n[PASS] Derived key of type name: AES-GCM length: 128  using empty derivedKey, empty salt, SHA-1, with empty info\n[PASS] Derived key of type name: AES-GCM length: 128  using empty derivedKey, empty salt, SHA-1, with empty info with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 128  using empty derivedKey, empty salt, SHA-1, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using empty derivedKey, empty salt, SHA-1, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using empty derivedKey, empty salt, SHA-1, with empty info\n[PASS] Derived key of type name: AES-GCM length: 192  using empty derivedKey, empty salt, SHA-1, with empty info with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 192  using empty derivedKey, empty salt, SHA-1, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using empty derivedKey, empty salt, SHA-1, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using empty derivedKey, empty salt, SHA-1, with empty info\n[PASS] Derived key of type name: AES-KW length: 128  using short password, long salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using short password, long salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using short password, long salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, long salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, long salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, long salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, long salt, SHA-384, with 0 iterations\n[PASS] short password, long salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, long salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, long salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, long salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, long salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] long password, short salt, SHA-512, with 1 iterations with non-multiple of 8 length\n[PASS] long password, short salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] long password, short salt, SHA-512, with 1 iterations with missing deriveBits usage\n[PASS] long password, short salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using empty derivedKey, empty salt, SHA-1, with empty info with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 256  using empty derivedKey, empty salt, SHA-1, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using empty derivedKey, empty salt, SHA-1, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, long salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, long salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, long salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, long salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using long password, empty salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using long password, empty salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 128  using long password, empty salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using long password, empty salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] long password, short salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using empty derivedKey, empty salt, SHA-1, with empty info\n[PASS] Derived key of type name: AES-KW length: 128  using empty derivedKey, empty salt, SHA-1, with empty info with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 128  using empty derivedKey, empty salt, SHA-1, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using empty derivedKey, empty salt, SHA-1, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, long salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, long salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, long salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, long salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, long salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, long salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, long salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using long password, empty salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using long password, empty salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 192  using empty derivedKey, empty salt, SHA-1, with empty info\n[PASS] Derived key of type name: AES-KW length: 192  using empty derivedKey, empty salt, SHA-1, with empty info with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, long salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using long password, empty salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using long password, empty salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, long salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, long salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, long salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, long salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using empty derivedKey, empty salt, SHA-1, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using empty derivedKey, empty salt, SHA-1, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, short salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, short salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, short salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, short salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, long salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, long salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using empty derivedKey, empty salt, SHA-1, with empty info\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, long salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 256  using empty derivedKey, empty salt, SHA-1, with empty info with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 256  using long password, empty salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using long password, empty salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, long salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, long salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, long salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, long salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using empty derivedKey, empty salt, SHA-1, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using empty derivedKey, empty salt, SHA-1, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty derivedKey, empty salt, SHA-1, with empty info\n[PASS] Derived key of type name: AES-KW length: 256  using long password, empty salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using long password, empty salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, long salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, long salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, long salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, long salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, long salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, short salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, short salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, short salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty derivedKey, empty salt, SHA-1, with empty info with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty derivedKey, empty salt, SHA-1, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty derivedKey, empty salt, SHA-1, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, short salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, empty salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, long salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, empty salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, empty salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, long salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, empty salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, long salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty derivedKey, empty salt, SHA-1, with empty info\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, long salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty derivedKey, empty salt, SHA-1, with empty info with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, long salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, short salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty derivedKey, empty salt, SHA-1, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty derivedKey, empty salt, SHA-1, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, long salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, short salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, short salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, long salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty derivedKey, empty salt, SHA-1, with empty info\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, short salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, long salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, empty salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty derivedKey, empty salt, SHA-1, with empty info with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty derivedKey, empty salt, SHA-1, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, long salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, long salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, long salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, empty salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, empty salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty derivedKey, empty salt, SHA-1, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty derivedKey, empty salt, SHA-1, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty derivedKey, empty salt, SHA-1, with empty info with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, long salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, long salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, long salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, empty salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, long salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, long salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty derivedKey, empty salt, SHA-1, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, short salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty derivedKey, empty salt, SHA-1, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, short salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] empty derivedKey, empty salt, SHA-1, with empty info with missing salt\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, short salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] empty derivedKey, empty salt, SHA-1, with empty info with missing info\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, short salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] empty derivedKey, empty salt, SHA-1, with empty info with null length\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, empty salt, SHA-512, with 1000 iterations\n[PASS] empty derivedKey, empty salt, SHA-1, with empty info with non-multiple of 8 length\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, empty salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, long salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, long salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] empty derivedKey, empty salt, SHA-1, with empty info with bad hash name SHA1\n[PASS] empty derivedKey, empty salt, SHA-1, with empty info with missing deriveBits usage\n[PASS] empty derivedKey, empty salt, SHA-1, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, long salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, long salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, empty salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, empty salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] empty derivedKey, empty salt, SHA-256, with normal info\n[PASS] empty derivedKey, empty salt, SHA-256, with normal info with 0 length\n[PASS] Derived key of type name: AES-CBC length: 128  using empty derivedKey, empty salt, SHA-256, with normal info\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, short salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, short salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, short salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using short password, long salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using short password, long salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 128  using short password, long salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using short password, long salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using short password, long salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using short password, long salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 192  using short password, long salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, long salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, long salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, long salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, long salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 128  using empty derivedKey, empty salt, SHA-256, with normal info with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 128  using empty derivedKey, empty salt, SHA-256, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using empty derivedKey, empty salt, SHA-256, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using empty derivedKey, empty salt, SHA-256, with normal info\n[PASS] Derived key of type name: AES-CBC length: 192  using empty derivedKey, empty salt, SHA-256, with normal info with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 192  using empty derivedKey, empty salt, SHA-256, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, short salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, short salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using short password, long salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using short password, long salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, empty salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, empty salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, empty salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, empty salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] long password, empty salt, SHA-512, with 1000 iterations with null length\n[PASS] long password, empty salt, SHA-512, with 1000 iterations with 0 length\n[PASS] long password, empty salt, SHA-512, with 1000 iterations with non-multiple of 8 length\n[PASS] long password, empty salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] long password, empty salt, SHA-512, with 1000 iterations with missing deriveBits usage\n[PASS] long password, empty salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using empty derivedKey, empty salt, SHA-256, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using empty derivedKey, empty salt, SHA-256, with normal info\n[PASS] Derived key of type name: AES-CBC length: 256  using empty derivedKey, empty salt, SHA-256, with normal info with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 256  using empty derivedKey, empty salt, SHA-256, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using empty derivedKey, empty salt, SHA-256, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using empty derivedKey, empty salt, SHA-256, with normal info\n[PASS] Derived key of type name: AES-CTR length: 128  using empty derivedKey, empty salt, SHA-256, with normal info with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 128  using empty derivedKey, empty salt, SHA-256, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using empty derivedKey, empty salt, SHA-256, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, short salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, short salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, short salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using short password, long salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 256  using short password, long salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using short password, long salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using long password, long salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using long password, long salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 128  using long password, long salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using long password, long salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, short salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, short salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, short salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, short salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using long password, long salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using empty derivedKey, empty salt, SHA-256, with normal info\n[PASS] Derived key of type name: AES-CTR length: 192  using empty derivedKey, empty salt, SHA-256, with normal info with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 192  using long password, long salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, long salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using empty derivedKey, empty salt, SHA-256, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using empty derivedKey, empty salt, SHA-256, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using long password, long salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, long salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 192  using long password, long salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, long salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, short salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using empty derivedKey, empty salt, SHA-256, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, long salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, short salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, short salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, short salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using empty derivedKey, empty salt, SHA-256, with normal info with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 256  using empty derivedKey, empty salt, SHA-256, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using empty derivedKey, empty salt, SHA-256, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, long salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, long salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 256  using long password, long salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using long password, long salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 256  using long password, long salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using long password, long salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, long salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, long salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, short salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, short salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 128  using empty derivedKey, empty salt, SHA-256, with normal info\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, short salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, short salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using empty derivedKey, empty salt, SHA-256, with normal info with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 128  using empty derivedKey, empty salt, SHA-256, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using empty derivedKey, empty salt, SHA-256, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, long salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, long salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, long salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, long salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, long salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, long salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, long salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, long salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using long password, short salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using empty derivedKey, empty salt, SHA-256, with normal info\n[PASS] Derived key of type name: AES-GCM length: 192  using empty derivedKey, empty salt, SHA-256, with normal info with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, long salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, long salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 128  using long password, short salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 128  using long password, short salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using long password, short salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using empty derivedKey, empty salt, SHA-256, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using empty derivedKey, empty salt, SHA-256, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, long salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, long salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] short password, long salt, SHA-512, with 1 iterations with null length\n[PASS] short password, long salt, SHA-512, with 1 iterations with 0 length\n[PASS] Derived key of type name: AES-GCM length: 256  using empty derivedKey, empty salt, SHA-256, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, long salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using empty derivedKey, empty salt, SHA-256, with normal info with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, long salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 256  using empty derivedKey, empty salt, SHA-256, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, long salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using empty derivedKey, empty salt, SHA-256, with normal info with wrong (ECDH) key\n[PASS] short password, long salt, SHA-512, with 1 iterations with non-multiple of 8 length\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, long salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] short password, long salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] short password, long salt, SHA-512, with 1 iterations with missing deriveBits usage\n[PASS] short password, long salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using empty derivedKey, empty salt, SHA-256, with normal info\n[PASS] Derived key of type name: AES-KW length: 192  using long password, short salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using empty derivedKey, empty salt, SHA-256, with normal info with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 192  using long password, short salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 128  using empty derivedKey, empty salt, SHA-256, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using long password, short salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using empty derivedKey, empty salt, SHA-256, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using long password, short salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, long salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, long salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, long salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, long salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] short password, long salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using empty derivedKey, empty salt, SHA-256, with normal info\n[PASS] Derived key of type name: AES-KW length: 192  using empty derivedKey, empty salt, SHA-256, with normal info with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 192  using empty derivedKey, empty salt, SHA-256, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using empty derivedKey, empty salt, SHA-256, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using long password, short salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using long password, short salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 256  using long password, short salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using long password, short salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, long salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, long salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, long salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, long salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] long password, long salt, SHA-512, with 1000 iterations with null length\n[PASS] long password, long salt, SHA-512, with 1000 iterations with 0 length\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, long salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using empty derivedKey, empty salt, SHA-256, with normal info\n[PASS] long password, long salt, SHA-512, with 1000 iterations with non-multiple of 8 length\n[PASS] Derived key of type name: AES-KW length: 256  using empty derivedKey, empty salt, SHA-256, with normal info with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, long salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 256  using empty derivedKey, empty salt, SHA-256, with normal info with missing deriveKey usage\n[PASS] long password, long salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, long salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using empty derivedKey, empty salt, SHA-256, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, long salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] long password, long salt, SHA-512, with 1000 iterations with missing deriveBits usage\n[PASS] long password, long salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, short salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, short salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty derivedKey, empty salt, SHA-256, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty derivedKey, empty salt, SHA-256, with normal info with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, short salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty derivedKey, empty salt, SHA-256, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, short salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty derivedKey, empty salt, SHA-256, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, long salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, long salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, long salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, long salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, empty salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, empty salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, empty salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, empty salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] short password, empty salt, SHA-384, with 100000 iterations with null length\n[PASS] short password, empty salt, SHA-384, with 100000 iterations with 0 length\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, short salt, SHA-512, with 1000 iterations\n[PASS] short password, empty salt, SHA-384, with 100000 iterations with non-multiple of 8 length\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty derivedKey, empty salt, SHA-256, with normal info\n[PASS] short password, empty salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] short password, empty salt, SHA-384, with 100000 iterations with missing deriveBits usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, short salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, short salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] short password, empty salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty derivedKey, empty salt, SHA-256, with normal info with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty derivedKey, empty salt, SHA-256, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty derivedKey, empty salt, SHA-256, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, short salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] short password, empty salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, long salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, empty salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, long salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, long salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, long salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, empty salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, empty salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, empty salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty derivedKey, empty salt, SHA-256, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty derivedKey, empty salt, SHA-256, with normal info with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty derivedKey, empty salt, SHA-256, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, short salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, short salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, short salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, short salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, empty salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, empty salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, empty salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, empty salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, empty salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty derivedKey, empty salt, SHA-256, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, short salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, short salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, short salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, short salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using short password, empty salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using short password, empty salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using short password, empty salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, empty salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, empty salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty derivedKey, empty salt, SHA-256, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty derivedKey, empty salt, SHA-256, with normal info with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty derivedKey, empty salt, SHA-256, with normal info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty derivedKey, empty salt, SHA-256, with normal info with wrong (ECDH) key\n[PASS] empty derivedKey, empty salt, SHA-256, with normal info with missing salt\n[PASS] empty derivedKey, empty salt, SHA-256, with normal info with missing info\n[PASS] empty derivedKey, empty salt, SHA-256, with normal info with null length\n[PASS] empty derivedKey, empty salt, SHA-256, with normal info with non-multiple of 8 length\n[PASS] empty derivedKey, empty salt, SHA-256, with normal info with bad hash name SHA256\n[PASS] empty derivedKey, empty salt, SHA-256, with normal info with missing deriveBits usage\n[PASS] empty derivedKey, empty salt, SHA-256, with normal info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, long salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, long salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, long salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, long salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, empty salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, empty salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, short salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, short salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, short salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, short salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] long password, short salt, SHA-512, with 1000 iterations with null length\n[PASS] long password, short salt, SHA-512, with 1000 iterations with 0 length\n[PASS] long password, short salt, SHA-512, with 1000 iterations with non-multiple of 8 length\n[PASS] long password, short salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] empty derivedKey, empty salt, SHA-256, with empty info\n[PASS] empty derivedKey, empty salt, SHA-256, with empty info with 0 length\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, long salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, long salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, long salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] long password, short salt, SHA-512, with 1000 iterations with missing deriveBits usage\n[PASS] long password, short salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, long salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 128  using empty derivedKey, empty salt, SHA-256, with empty info\n[PASS] Derived key of type name: AES-CBC length: 128  using empty derivedKey, empty salt, SHA-256, with empty info with bad hash name SHA256\n[PASS] short password, empty salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using empty derivedKey, empty salt, SHA-256, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using empty derivedKey, empty salt, SHA-256, with empty info with wrong (ECDH) key\n[PASS] long password, empty salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, long salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using empty derivedKey, empty salt, SHA-256, with empty info\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, empty salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using empty derivedKey, empty salt, SHA-256, with empty info with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, long salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 192  using empty derivedKey, empty salt, SHA-256, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, empty salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 192  using empty derivedKey, empty salt, SHA-256, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, long salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, empty salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, long salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, empty salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] long password, long salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using empty derivedKey, empty salt, SHA-256, with empty info\n[PASS] Derived key of type name: AES-CBC length: 256  using empty derivedKey, empty salt, SHA-256, with empty info with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 256  using empty derivedKey, empty salt, SHA-256, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using empty derivedKey, empty salt, SHA-256, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, long salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, empty salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, empty salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, long salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, empty salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, long salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, empty salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, long salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, short salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, empty salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using empty derivedKey, empty salt, SHA-256, with empty info\n[PASS] Derived key of type name: AES-CTR length: 128  using empty derivedKey, empty salt, SHA-256, with empty info with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, short salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, short salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, short salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, empty salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, empty salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, empty salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using empty derivedKey, empty salt, SHA-256, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using empty derivedKey, empty salt, SHA-256, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, long salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, long salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, long salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, long salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] long password, short salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using empty derivedKey, empty salt, SHA-256, with empty info\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, empty salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using empty derivedKey, empty salt, SHA-256, with empty info with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, empty salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 192  using empty derivedKey, empty salt, SHA-256, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using empty derivedKey, empty salt, SHA-256, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, empty salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, empty salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, long salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, long salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, long salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, long salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, empty salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, empty salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, empty salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using empty derivedKey, empty salt, SHA-256, with empty info\n[PASS] Derived key of type name: AES-CTR length: 256  using empty derivedKey, empty salt, SHA-256, with empty info with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 256  using empty derivedKey, empty salt, SHA-256, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using empty derivedKey, empty salt, SHA-256, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, empty salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, empty salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, empty salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, empty salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, empty salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using empty derivedKey, empty salt, SHA-256, with empty info\n[PASS] Derived key of type name: AES-GCM length: 128  using empty derivedKey, empty salt, SHA-256, with empty info with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 128  using empty derivedKey, empty salt, SHA-256, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using short password, long salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using short password, long salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 128  using short password, long salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using short password, long salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, empty salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, empty salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, empty salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, empty salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using empty derivedKey, empty salt, SHA-256, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, long salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using empty derivedKey, empty salt, SHA-256, with empty info\n[PASS] Derived key of type name: AES-GCM length: 192  using empty derivedKey, empty salt, SHA-256, with empty info with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, long salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, long salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using empty derivedKey, empty salt, SHA-256, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, long salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using empty derivedKey, empty salt, SHA-256, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using short password, long salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, empty salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using short password, long salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, empty salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 192  using short password, long salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, empty salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using short password, long salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, empty salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using empty derivedKey, empty salt, SHA-256, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, short salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, short salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, short salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using empty derivedKey, empty salt, SHA-256, with empty info with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 256  using empty derivedKey, empty salt, SHA-256, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using empty derivedKey, empty salt, SHA-256, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, short salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] short password, short salt, SHA-384, with 100000 iterations with null length\n[PASS] short password, short salt, SHA-384, with 100000 iterations with 0 length\n[PASS] short password, short salt, SHA-384, with 100000 iterations with non-multiple of 8 length\n[PASS] Derived key of type name: AES-KW length: 128  using empty derivedKey, empty salt, SHA-256, with empty info\n[PASS] short password, short salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] short password, short salt, SHA-384, with 100000 iterations with missing deriveBits usage\n[PASS] Derived key of type name: AES-KW length: 256  using short password, long salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, empty salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, empty salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] short password, short salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using empty derivedKey, empty salt, SHA-256, with empty info with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 128  using empty derivedKey, empty salt, SHA-256, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using empty derivedKey, empty salt, SHA-256, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using empty derivedKey, empty salt, SHA-256, with empty info\n[PASS] Derived key of type name: AES-KW length: 192  using empty derivedKey, empty salt, SHA-256, with empty info with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 192  using empty derivedKey, empty salt, SHA-256, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using short password, long salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 256  using short password, long salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using short password, long salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, empty salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, empty salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] short password, short salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, short salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, short salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, short salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, short salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using empty derivedKey, empty salt, SHA-256, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, short salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, short salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, short salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, short salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using empty derivedKey, empty salt, SHA-256, with empty info\n[PASS] Derived key of type name: AES-KW length: 256  using empty derivedKey, empty salt, SHA-256, with empty info with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 256  using empty derivedKey, empty salt, SHA-256, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, empty salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, empty salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, long salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, long salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, long salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using empty derivedKey, empty salt, SHA-256, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty derivedKey, empty salt, SHA-256, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty derivedKey, empty salt, SHA-256, with empty info with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty derivedKey, empty salt, SHA-256, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, short salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using short password, short salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using short password, short salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using short password, short salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, short salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, short salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, empty salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, empty salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using short password, empty salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using short password, empty salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 128  using short password, empty salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using short password, empty salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, long salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty derivedKey, empty salt, SHA-256, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, short salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, short salt, SHA-384, with 0 iterations\n[PASS] short password, short salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, long salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty derivedKey, empty salt, SHA-256, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty derivedKey, empty salt, SHA-256, with empty info with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty derivedKey, empty salt, SHA-256, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty derivedKey, empty salt, SHA-256, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty derivedKey, empty salt, SHA-256, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty derivedKey, empty salt, SHA-256, with empty info with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty derivedKey, empty salt, SHA-256, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty derivedKey, empty salt, SHA-256, with empty info with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, short salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, short salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, short salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, short salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, long salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, long salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, long salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using short password, empty salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using short password, empty salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 192  using short password, empty salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using short password, empty salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using short password, empty salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty derivedKey, empty salt, SHA-256, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, long salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, long salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, long salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, long salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, short salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, short salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, short salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, short salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using short password, empty salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 256  using short password, empty salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using short password, empty salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty derivedKey, empty salt, SHA-256, with empty info with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty derivedKey, empty salt, SHA-256, with empty info with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty derivedKey, empty salt, SHA-256, with empty info with wrong (ECDH) key\n[PASS] empty derivedKey, empty salt, SHA-256, with empty info with missing salt\n[PASS] empty derivedKey, empty salt, SHA-256, with empty info with missing info\n[PASS] empty derivedKey, empty salt, SHA-256, with empty info with null length\n[PASS] empty derivedKey, empty salt, SHA-256, with empty info with non-multiple of 8 length\n[PASS] empty derivedKey, empty salt, SHA-256, with empty info with bad hash name SHA256\n[PASS] empty derivedKey, empty salt, SHA-256, with empty info with missing deriveBits usage\n[PASS] empty derivedKey, empty salt, SHA-256, with empty info with wrong (ECDH) key\n[PASS] empty derivedKey, empty salt, PBKDF2, with normal info with non-digest algorithm PBKDF2\n[PASS] Derived key of type name: AES-CBC length: 128  using empty derivedKey, empty salt, PBKDF2, with normal info\n[PASS] Derived key of type name: AES-CBC length: 192  using empty derivedKey, empty salt, PBKDF2, with normal info\n[PASS] Derived key of type name: AES-CBC length: 256  using empty derivedKey, empty salt, PBKDF2, with normal info\n[PASS] Derived key of type name: AES-CTR length: 128  using empty derivedKey, empty salt, PBKDF2, with normal info\n[PASS] Derived key of type name: AES-CTR length: 192  using empty derivedKey, empty salt, PBKDF2, with normal info\n[PASS] Derived key of type name: AES-CTR length: 256  using empty derivedKey, empty salt, PBKDF2, with normal info\n[PASS] Derived key of type name: AES-GCM length: 128  using empty derivedKey, empty salt, PBKDF2, with normal info\n[PASS] Derived key of type name: AES-GCM length: 192  using empty derivedKey, empty salt, PBKDF2, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, long salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, long salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, long salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, long salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] short password, long salt, SHA-512, with 1000 iterations with null length\n[PASS] short password, long salt, SHA-512, with 1000 iterations with 0 length\n[PASS] short password, long salt, SHA-512, with 1000 iterations with non-multiple of 8 length\n[PASS] short password, long salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] short password, long salt, SHA-512, with 1000 iterations with missing deriveBits usage\n[PASS] short password, long salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, short salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, short salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, short salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, short salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, short salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, short salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, short salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, short salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, empty salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, empty salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, empty salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, empty salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, empty salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, empty salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, empty salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, empty salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using empty derivedKey, empty salt, PBKDF2, with normal info\n[PASS] Derived key of type name: AES-KW length: 128  using empty derivedKey, empty salt, PBKDF2, with normal info\n[PASS] Derived key of type name: AES-KW length: 192  using empty derivedKey, empty salt, PBKDF2, with normal info\n[PASS] Derived key of type name: AES-KW length: 256  using empty derivedKey, empty salt, PBKDF2, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty derivedKey, empty salt, PBKDF2, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty derivedKey, empty salt, PBKDF2, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty derivedKey, empty salt, PBKDF2, with normal info\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty derivedKey, empty salt, PBKDF2, with normal info\n[PASS] empty derivedKey, empty salt, PBKDF2, with empty info with non-digest algorithm PBKDF2\n[PASS] Derived key of type name: AES-CBC length: 128  using empty derivedKey, empty salt, PBKDF2, with empty info\n[PASS] Derived key of type name: AES-CBC length: 192  using empty derivedKey, empty salt, PBKDF2, with empty info\n[PASS] Derived key of type name: AES-CBC length: 256  using empty derivedKey, empty salt, PBKDF2, with empty info\n[PASS] Derived key of type name: AES-CTR length: 128  using empty derivedKey, empty salt, PBKDF2, with empty info\n[PASS] Derived key of type name: AES-CTR length: 192  using empty derivedKey, empty salt, PBKDF2, with empty info\n[PASS] Derived key of type name: AES-CTR length: 256  using empty derivedKey, empty salt, PBKDF2, with empty info\n[PASS] Derived key of type name: AES-GCM length: 128  using empty derivedKey, empty salt, PBKDF2, with empty info\n[PASS] Derived key of type name: AES-GCM length: 192  using empty derivedKey, empty salt, PBKDF2, with empty info\n[PASS] Derived key of type name: AES-GCM length: 256  using empty derivedKey, empty salt, PBKDF2, with empty info\n[PASS] Derived key of type name: AES-KW length: 128  using empty derivedKey, empty salt, PBKDF2, with empty info\n[PASS] Derived key of type name: AES-KW length: 192  using empty derivedKey, empty salt, PBKDF2, with empty info\n[PASS] Derived key of type name: AES-KW length: 256  using empty derivedKey, empty salt, PBKDF2, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty derivedKey, empty salt, PBKDF2, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty derivedKey, empty salt, PBKDF2, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty derivedKey, empty salt, PBKDF2, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty derivedKey, empty salt, PBKDF2, with empty info\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, empty salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, empty salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, empty salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, empty salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, empty salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, empty salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, short salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, short salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, short salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, short salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, short salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, short salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, short salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, short salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, empty salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, empty salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] short password, empty salt, SHA-512, with 1 iterations with null length\n[PASS] short password, empty salt, SHA-512, with 1 iterations with 0 length\n[PASS] short password, empty salt, SHA-512, with 1 iterations with non-multiple of 8 length\n[PASS] short password, empty salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] short password, empty salt, SHA-512, with 1 iterations with missing deriveBits usage\n[PASS] short password, empty salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, short salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, empty salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, empty salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, short salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, short salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, empty salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, empty salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, short salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] short password, empty salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, short salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, short salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, short salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, short salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, long salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, long salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, long salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, long salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, empty salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, short salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, empty salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, empty salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, empty salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, short salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, short salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, short salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] short password, long salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, empty salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, short salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, empty salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, short salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, empty salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, short salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, empty salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, short salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, short salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, short salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, short salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, short salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using short password, short salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, empty salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, empty salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 128  using short password, short salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 128  using short password, short salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using short password, short salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, empty salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, empty salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] setup - define tests\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, short salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, empty salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using short password, short salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using short password, short salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, empty salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 192  using short password, short salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, empty salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using short password, short salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, empty salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, empty salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using short password, short salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using short password, short salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 256  using short password, short salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using short password, short salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, empty salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, empty salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, empty salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, long salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, long salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, long salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, long salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, long salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, long salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, long salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, long salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, short salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, empty salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, short salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, short salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, empty salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, short salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, empty salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, empty salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, short salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, short salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, short salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, short salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, short salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, short salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, short salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, short salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, empty salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, empty salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, empty salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, empty salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, short salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, short salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, short salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, short salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, empty salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, empty salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, empty salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, empty salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, short salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, short salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, short salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, short salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, long salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, long salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, long salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, long salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, empty salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, short salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, empty salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, short salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, empty salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, empty salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, short salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, short salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] short password, short salt, SHA-512, with 1 iterations with null length\n[PASS] short password, short salt, SHA-512, with 1 iterations with 0 length\n[PASS] short password, short salt, SHA-512, with 1 iterations with non-multiple of 8 length\n[PASS] short password, short salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] short password, short salt, SHA-512, with 1 iterations with missing deriveBits usage\n[PASS] short password, short salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, long salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, long salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, long salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, long salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, short salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, short salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, short salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, short salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, empty salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, empty salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, empty salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, empty salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] short password, short salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, empty salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, empty salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, empty salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, empty salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, short salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, short salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, short salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, empty salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, empty salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, empty salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, short salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, empty salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, short salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, short salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, short salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, short salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, long salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, long salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, long salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, long salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, short salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, short salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, short salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, short salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using short password, empty salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using short password, empty salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 128  using short password, empty salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using short password, empty salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, short salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, short salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, short salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, short salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, long salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, long salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, long salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, long salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, empty salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, empty salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, empty salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, empty salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using short password, empty salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using short password, empty salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 192  using short password, empty salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using short password, empty salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, short salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, short salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, short salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, short salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, short salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, short salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, short salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, short salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, long salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, long salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, long salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, long salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using short password, empty salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using short password, empty salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 256  using short password, empty salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using short password, empty salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, short salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, short salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, short salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, short salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, short salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, short salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, short salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, short salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, long salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, long salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, long salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, long salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, empty salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, empty salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, empty salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, empty salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, empty salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, empty salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, empty salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, empty salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, short salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, short salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, short salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, short salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, short salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, short salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, short salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, short salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, long salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, empty salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, long salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, empty salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, long salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, long salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, empty salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, empty salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, short salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, short salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, short salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, short salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, short salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, short salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, short salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, short salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, long salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, long salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, long salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, long salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, empty salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, empty salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, empty salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, empty salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, short salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, short salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, short salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, short salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, empty salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, empty salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, empty salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, empty salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, short salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, short salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, short salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, empty salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, short salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, empty salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, empty salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, empty salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] short password, empty salt, SHA-512, with 1000 iterations with null length\n[PASS] short password, empty salt, SHA-512, with 1000 iterations with 0 length\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, short salt, SHA-512, with 1000 iterations\n[PASS] short password, empty salt, SHA-512, with 1000 iterations with non-multiple of 8 length\n[PASS] short password, empty salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, short salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] short password, empty salt, SHA-512, with 1000 iterations with missing deriveBits usage\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, short salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, short salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] short password, empty salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, long salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, long salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, long salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, long salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, short salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, short salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, short salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, short salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, long salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, long salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, long salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, long salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, short salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, short salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, short salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, short salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, empty salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, empty salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, empty salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, empty salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, short salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, short salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, short salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, short salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] short password, empty salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using short password, short salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using short password, short salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 128  using short password, short salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using short password, short salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, long salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, long salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, long salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, long salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, short salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, short salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, short salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, short salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, long salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, long salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, long salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, long salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using short password, short salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using short password, short salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 192  using short password, short salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using short password, short salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using long password, empty salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using long password, empty salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 128  using long password, empty salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using long password, empty salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, short salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, short salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, short salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, short salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, empty salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, empty salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, empty salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, empty salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using short password, short salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using short password, short salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 256  using short password, short salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using short password, short salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using long password, long salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using long password, long salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 128  using long password, long salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using long password, long salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using long password, short salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using long password, short salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 128  using long password, short salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using long password, short salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, long salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, long salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, long salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, long salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, short salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, short salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, short salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, short salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using long password, empty salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using long password, empty salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 192  using long password, empty salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using long password, empty salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, short salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, short salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, short salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, short salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] empty password, short salt, SHA-384, with 100000 iterations with null length\n[PASS] empty password, short salt, SHA-384, with 100000 iterations with 0 length\n[PASS] empty password, short salt, SHA-384, with 100000 iterations with non-multiple of 8 length\n[PASS] empty password, short salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] empty password, short salt, SHA-384, with 100000 iterations with missing deriveBits usage\n[PASS] empty password, short salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] empty password, short salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, short salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, short salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, short salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, short salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, short salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, short salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, short salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, short salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, short salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, short salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, short salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, short salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, short salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, short salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, short salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, short salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, empty salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, empty salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, empty salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, empty salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, short salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, short salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, short salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, short salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using long password, long salt, SHA-512, with 100000 iterations\n[PASS] empty password, short salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using long password, long salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 192  using long password, long salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using long password, long salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using long password, short salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using long password, short salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 192  using long password, short salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using long password, short salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, short salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, short salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, short salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, short salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, short salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, short salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, short salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, short salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, long salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, long salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, long salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, long salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using long password, empty salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using long password, empty salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 256  using long password, empty salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using long password, empty salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, short salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, short salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, short salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, short salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, short salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, short salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, short salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] short password, short salt, SHA-512, with 1000 iterations with null length\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, short salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] short password, short salt, SHA-512, with 1000 iterations with 0 length\n[PASS] short password, short salt, SHA-512, with 1000 iterations with non-multiple of 8 length\n[PASS] short password, short salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] short password, short salt, SHA-512, with 1000 iterations with missing deriveBits usage\n[PASS] short password, short salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, empty salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, empty salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, empty salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, empty salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using long password, long salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, short salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using long password, long salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, short salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 256  using long password, long salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, short salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using long password, long salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, short salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using long password, short salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using long password, short salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 256  using long password, short salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using long password, short salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using short password, long salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, short salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, short salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 128  using short password, long salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, short salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using short password, long salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, short salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using short password, long salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, empty salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, empty salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, empty salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, empty salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] short password, short salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, short salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, short salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, short salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, short salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, empty salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, empty salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, empty salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, empty salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, long salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, long salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, long salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, long salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, short salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, short salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, short salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, short salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, short salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, short salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, short salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, short salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using short password, long salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using short password, long salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 192  using short password, long salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using short password, long salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, empty salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, empty salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, empty salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, empty salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, short salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, short salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, short salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, short salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, short salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, short salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, short salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, short salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, empty salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, empty salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, empty salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, empty salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, long salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, long salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, long salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, long salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, short salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, short salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, short salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, short salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, short salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, short salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, short salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, short salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using short password, long salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using short password, long salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 256  using short password, long salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using short password, long salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, empty salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, empty salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, empty salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, empty salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, short salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, short salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, short salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, short salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, short salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, short salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, short salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, short salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, empty salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, empty salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, empty salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, empty salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, long salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, long salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, long salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, long salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, short salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, long salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, short salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, long salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, short salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, short salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, long salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, long salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, short salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, short salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, short salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, short salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, short salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, empty salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, short salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, empty salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, short salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, short salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, empty salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, empty salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] long password, empty salt, SHA-512, with 100000 iterations with null length\n[PASS] long password, empty salt, SHA-512, with 100000 iterations with 0 length\n[PASS] long password, empty salt, SHA-512, with 100000 iterations with non-multiple of 8 length\n[PASS] long password, empty salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] long password, empty salt, SHA-512, with 100000 iterations with missing deriveBits usage\n[PASS] long password, empty salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] long password, empty salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, empty salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, empty salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, empty salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, empty salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, empty salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, empty salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, empty salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, empty salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, empty salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using long password, empty salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using long password, empty salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using long password, empty salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, empty salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, empty salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, empty salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, empty salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, short salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, short salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, short salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, short salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] long password, empty salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, short salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, empty salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, short salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, short salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, empty salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, short salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, empty salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, empty salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, empty salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, long salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, short salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, short salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, short salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, empty salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, empty salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, long salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, long salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, short salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, empty salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, long salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] long password, long salt, SHA-512, with 100000 iterations with null length\n[PASS] long password, long salt, SHA-512, with 100000 iterations with 0 length\n[PASS] long password, long salt, SHA-512, with 100000 iterations with non-multiple of 8 length\n[PASS] long password, long salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] long password, long salt, SHA-512, with 100000 iterations with missing deriveBits usage\n[PASS] long password, long salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] long password, long salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, long salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, long salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, long salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, long salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, long salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, long salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, long salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, long salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, long salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using long password, long salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using long password, long salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using long password, long salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, long salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, long salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, long salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, long salt, SHA-512, with 0 iterations\n[PASS] long password, long salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, short salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, long salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, empty salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, empty salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, long salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, short salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, short salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, long salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, long salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, empty salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, long salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, long salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, long salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, long salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, short salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, short salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, short salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, short salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, long salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, long salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, long salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, long salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, empty salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, empty salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, empty salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, empty salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, empty salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, short salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, long salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, empty salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, short salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, short salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, long salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, empty salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, long salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, short salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, short salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, long salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, empty salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, short salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, short salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, empty salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, long salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, short salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, short salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] long password, short salt, SHA-512, with 100000 iterations with null length\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, empty salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, long salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] long password, short salt, SHA-512, with 100000 iterations with 0 length\n[PASS] empty password, short salt, SHA-512, with 1 iterations with null length\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, empty salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] long password, short salt, SHA-512, with 100000 iterations with non-multiple of 8 length\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, long salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] long password, short salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] empty password, short salt, SHA-512, with 1 iterations with 0 length\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, empty salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, long salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] long password, short salt, SHA-512, with 100000 iterations with missing deriveBits usage\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, empty salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] long password, short salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] long password, short salt, SHA-512, with 0 iterations\n[PASS] empty password, short salt, SHA-512, with 1 iterations with non-multiple of 8 length\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, long salt, SHA-1, with 1 iterations\n[PASS] empty password, short salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, short salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, empty salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, long salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, short salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, empty salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, short salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, long salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, long salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] empty password, short salt, SHA-512, with 1 iterations with missing deriveBits usage\n[PASS] empty password, short salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, empty salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, empty salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, short salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, short salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, short salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, short salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, short salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, short salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using long password, short salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using long password, short salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using long password, short salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, short salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, short salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, long salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, long salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, long salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, empty salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, empty salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, empty salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, empty salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, short salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, short salt, SHA-512, with 0 iterations\n[PASS] long password, short salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, long salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, empty salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, empty salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, short salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, short salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, empty salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, long salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, short salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, short salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, short salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] empty password, short salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, short salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, short salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, long salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, long salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, empty salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, empty salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, empty salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, short salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, empty salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, long salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, empty salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, short salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, long salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, short salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using long password, empty salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, short salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, short salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, short salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, short salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, long salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, long salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, long salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, short salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using long password, empty salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 128  using long password, empty salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using long password, empty salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, short salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, short salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, short salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, short salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, short salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, short salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, long salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, short salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using long password, empty salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, short salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, short salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, long salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, long salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, short salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, short salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, short salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, short salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using long password, empty salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 192  using long password, empty salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using long password, empty salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, long salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, short salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using long password, long salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using long password, long salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, short salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, short salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, short salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using long password, empty salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using long password, empty salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 256  using long password, empty salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using long password, empty salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, short salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, short salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, short salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using long password, long salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using long password, long salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, short salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, short salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, short salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, short salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 192  using long password, long salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, empty salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, empty salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, short salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, short salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, short salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, empty salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, empty salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using long password, long salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 192  using long password, long salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using long password, long salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, empty salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, empty salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, empty salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, empty salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, short salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, short salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, short salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, short salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, short salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, empty salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, empty salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, empty salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, empty salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using long password, long salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using long password, long salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 256  using long password, long salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using long password, long salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, short salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, short salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, short salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, empty salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, long salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, short salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, short salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, short salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, empty salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, empty salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, empty salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, short salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, short salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, long salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, long salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, long salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, short salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, short salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, empty salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, short salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, long salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, short salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, empty salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, empty salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, short salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, short salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, short salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, long salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, long salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, long salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, short salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, short salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, empty salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] long password, empty salt, SHA-1, with 1 iterations with null length\n[PASS] long password, empty salt, SHA-1, with 1 iterations with 0 length\n[PASS] long password, empty salt, SHA-1, with 1 iterations with non-multiple of 8 length\n[PASS] long password, empty salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] long password, empty salt, SHA-1, with 1 iterations with missing deriveBits usage\n[PASS] long password, empty salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, short salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, long salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using long password, short salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, short salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, short salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, long salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, long salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using long password, short salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 128  using long password, short salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, short salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using long password, short salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, long salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] long password, empty salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using long password, short salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, short salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, long salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using long password, short salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, short salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 192  using long password, short salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, long salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, short salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, short salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using long password, short salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, long salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, long salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] long password, long salt, SHA-1, with 1 iterations with null length\n[PASS] long password, long salt, SHA-1, with 1 iterations with 0 length\n[PASS] long password, long salt, SHA-1, with 1 iterations with non-multiple of 8 length\n[PASS] long password, long salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] long password, long salt, SHA-1, with 1 iterations with missing deriveBits usage\n[PASS] Derived key of type name: AES-KW length: 256  using long password, short salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using long password, short salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 256  using long password, short salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using long password, short salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, empty salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, empty salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, empty salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, empty salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] long password, long salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, short salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, short salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, short salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, short salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, empty salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, short salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, empty salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, short salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, empty salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, short salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, empty salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, short salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] long password, long salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, short salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, short salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, short salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, short salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, empty salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, short salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, empty salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, short salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, empty salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, short salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, empty salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, short salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, long salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, long salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, long salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, long salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, short salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, short salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, short salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, short salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, empty salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, short salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, empty salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, short salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, empty salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, short salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, empty salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, short salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, long salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, long salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, long salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, long salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, short salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, short salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, short salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, short salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, short salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, short salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, short salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, short salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] long password, short salt, SHA-1, with 1 iterations with null length\n[PASS] long password, short salt, SHA-1, with 1 iterations with 0 length\n[PASS] long password, short salt, SHA-1, with 1 iterations with non-multiple of 8 length\n[PASS] long password, short salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] long password, short salt, SHA-1, with 1 iterations with missing deriveBits usage\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, empty salt, SHA-1, with 1000 iterations\n[PASS] long password, short salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, empty salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, empty salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, empty salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, long salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, long salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, long salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, long salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, short salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, short salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, short salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, short salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] long password, short salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, empty salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, empty salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, empty salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, empty salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, long salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, long salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, long salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, long salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, short salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, short salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, short salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, short salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, short salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, short salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, short salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, short salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, empty salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, empty salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, empty salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, empty salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, long salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, long salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, long salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, long salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, short salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, short salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, short salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, short salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, short salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, short salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, short salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, short salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, empty salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, empty salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, empty salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, empty salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, long salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, long salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, long salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, long salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, short salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, short salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, short salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, short salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] empty password, short salt, SHA-512, with 1000 iterations with null length\n[PASS] empty password, short salt, SHA-512, with 1000 iterations with 0 length\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, short salt, SHA-1, with 1000 iterations\n[PASS] empty password, short salt, SHA-512, with 1000 iterations with non-multiple of 8 length\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, short salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] empty password, short salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, short salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, short salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] empty password, short salt, SHA-512, with 1000 iterations with missing deriveBits usage\n[PASS] empty password, short salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, empty salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, empty salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, empty salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, long salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, empty salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, long salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, long salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, long salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, short salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, short salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, short salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, short salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, long salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, long salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, long salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, long salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using long password, empty salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using long password, empty salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 128  using long password, empty salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using long password, empty salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, long salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, long salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, long salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, long salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, short salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, short salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, short salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, short salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, empty salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, empty salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, empty salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, empty salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using long password, empty salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using long password, empty salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 192  using long password, empty salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using long password, empty salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, short salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, short salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, short salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, short salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, long salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, long salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, long salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, long salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, short salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, short salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, short salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, short salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using long password, empty salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using long password, empty salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 256  using long password, empty salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using long password, empty salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] empty password, short salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using long password, long salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using long password, long salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 128  using long password, long salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using long password, long salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, short salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, short salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, short salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, short salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, empty salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, empty salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, empty salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, empty salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, long salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, long salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, long salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, long salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] short password, long salt, SHA-512, with 100000 iterations with null length\n[PASS] Derived key of type name: AES-KW length: 192  using long password, long salt, SHA-1, with 1000 iterations\n[PASS] short password, long salt, SHA-512, with 100000 iterations with 0 length\n[PASS] Derived key of type name: AES-KW length: 192  using long password, long salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 192  using long password, long salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] short password, long salt, SHA-512, with 100000 iterations with non-multiple of 8 length\n[PASS] Derived key of type name: AES-KW length: 192  using long password, long salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] short password, long salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] short password, long salt, SHA-512, with 100000 iterations with missing deriveBits usage\n[PASS] short password, long salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] short password, long salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, long salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, long salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, short salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, long salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, short salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, long salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, short salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, long salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, short salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, long salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, long salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, empty salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, long salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, empty salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, long salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using short password, long salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, empty salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, empty salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using short password, long salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using short password, long salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, long salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, long salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using long password, long salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, long salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using long password, long salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, long salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using long password, long salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using long password, long salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, short salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, short salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, short salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, short salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] short password, long salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, empty salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, empty salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, empty salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, empty salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, long salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, long salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, long salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, long salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using long password, short salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, long salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, long salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 128  using long password, short salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, long salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using long password, short salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, long salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using long password, short salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, empty salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, empty salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, empty salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, empty salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] long password, empty salt, SHA-1, with 1000 iterations with null length\n[PASS] long password, empty salt, SHA-1, with 1000 iterations with 0 length\n[PASS] long password, empty salt, SHA-1, with 1000 iterations with non-multiple of 8 length\n[PASS] long password, empty salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, long salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, long salt, SHA-1, with 1000 iterations\n[PASS] long password, empty salt, SHA-1, with 1000 iterations with missing deriveBits usage\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, long salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, long salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] long password, empty salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, long salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, long salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, long salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, long salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using long password, short salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using long password, short salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 192  using long password, short salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using long password, short salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, long salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using short password, empty salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, long salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 128  using short password, empty salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, long salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, long salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using short password, empty salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using short password, empty salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, long salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, long salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, long salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, long salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, long salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using long password, short salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, long salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 256  using long password, short salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, long salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using long password, short salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, long salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using long password, short salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, short salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, short salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, short salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, short salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, long salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, long salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, long salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, long salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, long salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, long salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, long salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, long salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] long password, long salt, SHA-1, with 1000 iterations with null length\n[PASS] long password, long salt, SHA-1, with 1000 iterations with 0 length\n[PASS] long password, long salt, SHA-1, with 1000 iterations with non-multiple of 8 length\n[PASS] long password, long salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] long password, long salt, SHA-1, with 1000 iterations with missing deriveBits usage\n[PASS] long password, long salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, short salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, short salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, short salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, short salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, short salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, long salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, long salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, short salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, short salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, long salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, short salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, long salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] long password, empty salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, short salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, long salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, short salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, long salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, short salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, short salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, long salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, long salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using short password, empty salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using short password, empty salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 192  using short password, empty salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using short password, empty salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, short salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, short salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, short salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, short salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, short salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, long salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, short salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, long salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, short salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, long salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, short salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, long salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, empty salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, empty salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, empty salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, empty salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] long password, long salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, long salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, long salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, long salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, long salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, short salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, short salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, short salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, short salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] long password, short salt, SHA-1, with 1000 iterations with null length\n[PASS] long password, short salt, SHA-1, with 1000 iterations with 0 length\n[PASS] long password, short salt, SHA-1, with 1000 iterations with non-multiple of 8 length\n[PASS] long password, short salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] long password, short salt, SHA-1, with 1000 iterations with missing deriveBits usage\n[PASS] long password, short salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, short salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, short salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, short salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, short salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using short password, long salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using short password, empty salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using short password, long salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 256  using short password, empty salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 128  using short password, long salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using short password, empty salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using short password, long salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using short password, empty salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, long salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, long salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, long salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, long salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, short salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using short password, long salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using short password, long salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, short salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 192  using short password, long salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, short salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using short password, long salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, short salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, empty salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, empty salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, empty salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, empty salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] long password, short salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using short password, long salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using short password, long salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 256  using short password, long salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using short password, long salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, short salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, short salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, short salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, short salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, empty salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, empty salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, empty salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, empty salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, long salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, long salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, long salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, long salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, long salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, long salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, long salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, long salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, short salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, short salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, short salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, short salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, short salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, short salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, short salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, short salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, empty salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, long salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, empty salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, long salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, empty salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, long salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, empty salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, long salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, short salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, short salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, short salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, short salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, empty salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, empty salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, empty salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, empty salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, long salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, long salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, long salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, long salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, long salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, long salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, long salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, long salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, empty salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, empty salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, empty salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, empty salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, short salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, short salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, short salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, short salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, long salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using short password, short salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, long salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 128  using short password, short salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, long salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using short password, short salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, long salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using short password, short salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] short password, long salt, SHA-1, with 1 iterations with null length\n[PASS] short password, long salt, SHA-1, with 1 iterations with 0 length\n[PASS] short password, long salt, SHA-1, with 1 iterations with non-multiple of 8 length\n[PASS] short password, long salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] short password, long salt, SHA-1, with 1 iterations with missing deriveBits usage\n[PASS] short password, long salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, long salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, long salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, long salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, long salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, short salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, short salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, short salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, short salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, empty salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, empty salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, empty salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, empty salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] short password, long salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, empty salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, empty salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, empty salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, empty salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using short password, short salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using short password, short salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 192  using short password, short salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using short password, short salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, short salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, short salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, short salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, short salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, long salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, long salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, long salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, long salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, long salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, long salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, long salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, long salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, short salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, short salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, short salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, short salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, empty salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, empty salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, empty salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, empty salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] short password, empty salt, SHA-512, with 100000 iterations with null length\n[PASS] short password, empty salt, SHA-512, with 100000 iterations with 0 length\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, long salt, SHA-1, with 1000 iterations\n[PASS] short password, empty salt, SHA-512, with 100000 iterations with non-multiple of 8 length\n[PASS] short password, empty salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, long salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] short password, empty salt, SHA-512, with 100000 iterations with missing deriveBits usage\n[PASS] short password, empty salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, long salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] short password, empty salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, long salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, empty salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, empty salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, empty salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, empty salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, empty salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, empty salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, empty salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, empty salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, empty salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using short password, empty salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using short password, empty salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using short password, empty salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, empty salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, empty salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, empty salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, empty salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, short salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, short salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, short salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, short salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, empty salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, empty salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, empty salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, empty salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] short password, empty salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, long salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, long salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, long salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, long salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using short password, short salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using short password, short salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 256  using short password, short salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using short password, short salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, empty salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, empty salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, empty salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, empty salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, empty salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, empty salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, empty salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, empty salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, long salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, long salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, long salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, long salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, short salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, short salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, short salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, short salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, empty salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, long salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, long salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, empty salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, empty salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, empty salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, long salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, long salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, long salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, long salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, long salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, long salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, empty salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, short salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, short salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, empty salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, empty salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, short salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, empty salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, short salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, short salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, short salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, short salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, short salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, long salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, empty salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, long salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, empty salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, long salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, empty salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, long salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, empty salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, short salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, short salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, short salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, short salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, empty salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, empty salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, empty salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, empty salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, long salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, empty salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, long salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, empty salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, long salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, empty salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, long salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, empty salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, long salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, long salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, long salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, long salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, short salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, short salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, short salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, short salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, long salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, empty salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, long salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, empty salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, long salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, empty salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, long salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, empty salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, short salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, short salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, short salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, short salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, short salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, short salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, short salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, short salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, empty salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, long salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, long salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, empty salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, long salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, empty salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, empty salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, long salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, empty salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, empty salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, empty salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, empty salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, short salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, short salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 128  using short password, long salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, empty salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, short salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, empty salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, short salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using short password, long salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, empty salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, empty salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using short password, long salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using short password, long salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, short salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, short salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, short salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, short salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, empty salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, long salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, long salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, empty salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, empty salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, long salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, long salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, empty salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using short password, long salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using short password, long salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 192  using short password, long salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using short password, long salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using short password, empty salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using long password, empty salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using short password, empty salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 128  using long password, empty salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 128  using short password, empty salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using long password, empty salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using short password, empty salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using long password, empty salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, short salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, short salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, short salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, short salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using short password, empty salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using short password, long salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using short password, long salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 192  using short password, empty salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 256  using short password, long salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using short password, empty salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using short password, long salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using short password, empty salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, short salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, short salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, short salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, short salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, short salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, short salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, short salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, short salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using short password, empty salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, long salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, long salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 256  using short password, empty salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 256  using short password, empty salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, long salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using short password, empty salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, long salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, long salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, long salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, long salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, long salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, empty salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using long password, empty salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, empty salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 192  using long password, empty salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, empty salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using long password, empty salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, empty salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using long password, empty salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, long salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, long salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, long salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, long salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, short salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, empty salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, empty salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, short salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, short salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, short salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, empty salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, empty salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] short password, short salt, SHA-512, with 100000 iterations with null length\n[PASS] short password, short salt, SHA-512, with 100000 iterations with 0 length\n[PASS] short password, short salt, SHA-512, with 100000 iterations with non-multiple of 8 length\n[PASS] short password, short salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] short password, short salt, SHA-512, with 100000 iterations with missing deriveBits usage\n[PASS] short password, short salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] short password, short salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, short salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, short salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, short salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, short salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, short salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, short salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, short salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, short salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, short salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using short password, short salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using short password, short salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using short password, short salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, short salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, short salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, short salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, short salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, short salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, short salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, short salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, short salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] short password, short salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, long salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, empty salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, empty salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 128  using long password, long salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, long salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, long salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, empty salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, empty salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using long password, long salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 128  using long password, long salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using long password, long salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, long salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, short salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, short salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, short salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, empty salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, empty salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, short salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, empty salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, empty salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] short password, empty salt, SHA-1, with 1 iterations with null length\n[PASS] short password, empty salt, SHA-1, with 1 iterations with 0 length\n[PASS] short password, empty salt, SHA-1, with 1 iterations with non-multiple of 8 length\n[PASS] short password, empty salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] short password, empty salt, SHA-1, with 1 iterations with missing deriveBits usage\n[PASS] short password, empty salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, short salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, short salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, short salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, short salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, long salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, short salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, long salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, short salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, long salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, short salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, long salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, short salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] short password, long salt, SHA-1, with 1000 iterations with null length\n[PASS] short password, long salt, SHA-1, with 1000 iterations with 0 length\n[PASS] short password, long salt, SHA-1, with 1000 iterations with non-multiple of 8 length\n[PASS] short password, long salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] short password, long salt, SHA-1, with 1000 iterations with missing deriveBits usage\n[PASS] short password, empty salt, SHA-1, with 1000 iterations\n[PASS] short password, long salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, short salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, short salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, short salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, short salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, short salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, short salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, short salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, short salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, empty salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, empty salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, empty salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, empty salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using long password, empty salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, short salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, short salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 256  using long password, empty salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, short salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, short salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using long password, empty salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using long password, empty salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using long password, short salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using long password, short salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 128  using long password, short salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using long password, short salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, short salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, empty salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, short salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, empty salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, short salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, short salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, empty salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, empty salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using long password, long salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using long password, long salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 192  using long password, long salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using long password, long salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, short salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, short salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, short salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, short salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, short salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, short salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, short salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, short salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, empty salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, empty salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, empty salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, empty salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] short password, long salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, short salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, short salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, short salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, short salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, empty salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, empty salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, empty salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, empty salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, empty salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, empty salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, empty salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, empty salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using long password, short salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, short salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, short salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 192  using long password, short salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, short salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using long password, short salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, short salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using long password, short salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, empty salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, empty salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, empty salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, empty salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, short salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, long salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, long salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, short salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, short salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, long salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, short salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, long salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, short salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, short salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, short salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, short salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, empty salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using short password, short salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, empty salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 128  using short password, short salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, empty salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using short password, short salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, empty salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using short password, short salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using long password, long salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using long password, long salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 256  using long password, long salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using long password, long salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, empty salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, empty salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, empty salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, empty salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using short password, short salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using short password, short salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, empty salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, empty salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, empty salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, empty salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using short password, short salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using short password, short salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, short salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, short salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, short salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, short salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] empty password, short salt, SHA-512, with 100000 iterations with null length\n[PASS] empty password, short salt, SHA-512, with 100000 iterations with 0 length\n[PASS] empty password, short salt, SHA-512, with 100000 iterations with non-multiple of 8 length\n[PASS] empty password, short salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] empty password, short salt, SHA-512, with 100000 iterations with missing deriveBits usage\n[PASS] empty password, short salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] empty password, short salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, short salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, short salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, short salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, short salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, short salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, short salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, short salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, short salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, short salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, short salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, short salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, short salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, short salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, short salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, short salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, short salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using long password, short salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using long password, short salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 256  using long password, short salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using long password, short salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] empty password, short salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, empty salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, empty salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 256  using short password, short salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using short password, short salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 256  using short password, short salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, empty salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using short password, short salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, empty salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, long salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, short salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, long salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, long salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, long salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, short salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, short salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, short salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, short salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, short salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, short salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, short salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, empty salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, short salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, short salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, empty salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, empty salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, short salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, short salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, empty salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, short salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, long salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, long salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, short salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, short salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, long salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, short salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, short salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, long salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, short salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, short salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, short salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, short salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, short salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using short password, empty salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, short salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, short salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using short password, empty salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 128  using short password, empty salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using short password, empty salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, short salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, short salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, empty salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, short salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, short salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, empty salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, short salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, short salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, short salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, short salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, empty salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, empty salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, short salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using short password, empty salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, short salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, short salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, short salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, short salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using short password, empty salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, short salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, short salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] short password, short salt, SHA-1, with 1 iterations with null length\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, short salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using short password, empty salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using short password, empty salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] short password, short salt, SHA-1, with 1 iterations with 0 length\n[PASS] short password, short salt, SHA-1, with 1 iterations with non-multiple of 8 length\n[PASS] short password, short salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] short password, short salt, SHA-1, with 1 iterations with missing deriveBits usage\n[PASS] short password, short salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, short salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, short salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, short salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, short salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, short salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, short salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, short salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, short salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using short password, empty salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using short password, empty salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 256  using short password, empty salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using short password, empty salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] short password, short salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, short salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, short salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, short salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, short salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, long salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, long salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, long salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, long salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, empty salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, empty salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, empty salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, short salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, short salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, empty salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, short salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, short salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, short salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, short salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, short salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, short salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, long salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, long salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, long salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, long salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, empty salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, short salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, empty salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, empty salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, short salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, short salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, short salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, empty salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, short salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, short salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, short salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, short salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, long salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, short salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, short salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, long salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, short salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, long salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, short salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, long salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, empty salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, empty salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, empty salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, empty salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, short salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, short salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, short salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, short salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, short salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, empty salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, empty salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, short salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, short salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, empty salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, short salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, empty salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] long password, empty salt, SHA-1, with 100000 iterations with null length\n[PASS] long password, empty salt, SHA-1, with 100000 iterations with 0 length\n[PASS] long password, empty salt, SHA-1, with 100000 iterations with non-multiple of 8 length\n[PASS] long password, empty salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, empty salt, SHA-1, with 1000 iterations\n[PASS] long password, empty salt, SHA-1, with 100000 iterations with missing deriveBits usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, empty salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, short salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, short salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, short salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, short salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] long password, empty salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] long password, empty salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, short salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, short salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, short salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, short salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, empty salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, empty salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] short password, empty salt, SHA-1, with 1000 iterations with null length\n[PASS] short password, empty salt, SHA-1, with 1000 iterations with 0 length\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, short salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, short salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, short salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, empty salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, empty salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, empty salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, empty salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, empty salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, short salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] short password, empty salt, SHA-1, with 1000 iterations with non-multiple of 8 length\n[PASS] short password, empty salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, empty salt, SHA-1, with 0 iterations\n[PASS] short password, empty salt, SHA-1, with 1000 iterations with missing deriveBits usage\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, empty salt, SHA-1, with 0 iterations\n[PASS] short password, empty salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, empty salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, empty salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using long password, empty salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using long password, empty salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using long password, empty salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, short salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, short salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, empty salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, short salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, empty salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, short salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, short salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, empty salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, short salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, short salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, empty salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, short salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] long password, empty salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, short salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, short salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, short salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, short salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, empty salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, short salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, short salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, empty salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, short salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, short salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, short salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, short salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, empty salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, short salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, short salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, empty salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] empty password, short salt, SHA-1, with 1 iterations with null length\n[PASS] empty password, short salt, SHA-1, with 1 iterations with 0 length\n[PASS] empty password, short salt, SHA-1, with 1 iterations with non-multiple of 8 length\n[PASS] empty password, short salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] empty password, short salt, SHA-1, with 1 iterations with missing deriveBits usage\n[PASS] empty password, short salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, long salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, long salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, empty salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, long salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, short salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, long salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, empty salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, short salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, empty salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, short salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, empty salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, short salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] empty password, short salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, empty salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, empty salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, long salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, empty salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, empty salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, long salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, long salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, long salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, short salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, short salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, short salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, short salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, empty salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, short salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, short salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, empty salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, short salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, empty salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, short salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, empty salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] short password, empty salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, short salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, short salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, short salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, short salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, empty salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, short salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, empty salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, short salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, short salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, empty salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, empty salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, short salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, short salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, short salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, short salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, short salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, empty salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, empty salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, empty salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, empty salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, empty salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, empty salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, empty salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using short password, short salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, empty salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using short password, short salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 128  using short password, short salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using short password, short salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, short salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, short salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, short salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, short salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, long salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, empty salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, long salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, empty salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, long salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, long salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, empty salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] long password, long salt, SHA-1, with 100000 iterations with null length\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, empty salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] long password, long salt, SHA-1, with 100000 iterations with 0 length\n[PASS] long password, long salt, SHA-1, with 100000 iterations with non-multiple of 8 length\n[PASS] long password, long salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] long password, long salt, SHA-1, with 100000 iterations with missing deriveBits usage\n[PASS] long password, long salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using short password, short salt, SHA-1, with 1000 iterations\n[PASS] long password, long salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, long salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using short password, short salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, long salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using short password, short salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, long salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, empty salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, long salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, short salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using short password, short salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, empty salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, long salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, long salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, long salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, long salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, empty salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, empty salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, short salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, short salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, short salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, long salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using long password, long salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using long password, long salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using long password, long salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, long salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, long salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, long salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, empty salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using short password, short salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using short password, short salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, long salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, empty salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, empty salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using short password, short salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, empty salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using short password, short salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] long password, long salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, long salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, long salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, long salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, long salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, long salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, long salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, long salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, long salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using long password, empty salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using long password, empty salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 128  using long password, empty salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using long password, empty salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using long password, empty salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using long password, empty salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 192  using long password, empty salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using long password, empty salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, short salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, short salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, short salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, short salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, long salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, long salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, long salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, long salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, short salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, short salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, short salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, short salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, short salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using long password, empty salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, short salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, short salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using long password, empty salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, short salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, long salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using long password, empty salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, long salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 256  using long password, empty salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, long salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, long salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, short salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, short salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, short salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, short salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, short salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, empty salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, long salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, long salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, short salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, short salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, empty salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, empty salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, empty salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, long salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, long salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, short salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, short salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, short salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, short salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, short salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, short salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, long salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, empty salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, long salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, short salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, long salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, long salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, empty salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, empty salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, short salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, short salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, empty salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, short salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, long salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, short salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, long salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, short salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, short salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, long salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] short password, short salt, SHA-1, with 1000 iterations with null length\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, long salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] short password, short salt, SHA-1, with 1000 iterations with 0 length\n[PASS] short password, short salt, SHA-1, with 1000 iterations with non-multiple of 8 length\n[PASS] short password, short salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] short password, short salt, SHA-1, with 1000 iterations with missing deriveBits usage\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, long salt, SHA-256, with 1 iterations\n[PASS] short password, short salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, short salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, empty salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, long salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, long salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, empty salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, short salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, long salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, short salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, short salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, empty salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, empty salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, long salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, short salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, short salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, long salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, long salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, short salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, long salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, short salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] long password, short salt, SHA-1, with 100000 iterations with null length\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, short salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, long salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, empty salt, SHA-256, with 1 iterations\n[PASS] long password, short salt, SHA-1, with 100000 iterations with 0 length\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, long salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] long password, short salt, SHA-1, with 100000 iterations with non-multiple of 8 length\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, long salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, short salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, empty salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] long password, short salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, long salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, short salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, empty salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] long password, short salt, SHA-1, with 100000 iterations with missing deriveBits usage\n[PASS] Derived key of type name: AES-KW length: 128  using long password, long salt, SHA-256, with 1 iterations\n[PASS] long password, short salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, short salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using long password, long salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, empty salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] long password, short salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using long password, long salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, short salt, SHA-1, with 0 iterations\n[PASS] long password, empty salt, SHA-256, with 1 iterations with null length\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, short salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using long password, long salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] long password, empty salt, SHA-256, with 1 iterations with 0 length\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, short salt, SHA-1, with 0 iterations\n[PASS] long password, empty salt, SHA-256, with 1 iterations with non-multiple of 8 length\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, short salt, SHA-1, with 0 iterations\n[PASS] long password, empty salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, short salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, short salt, SHA-1, with 0 iterations\n[PASS] long password, empty salt, SHA-256, with 1 iterations with missing deriveBits usage\n[PASS] long password, empty salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, short salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, short salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, short salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using long password, short salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using long password, short salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, short salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, short salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, short salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, short salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using long password, short salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, short salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, short salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, short salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, short salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using long password, long salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using long password, long salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 192  using long password, long salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using long password, long salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] long password, empty salt, SHA-256, with 1000 iterations\n[PASS] long password, short salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, short salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using long password, long salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, short salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 256  using long password, long salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, short salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, short salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using long password, long salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using long password, long salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, short salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, empty salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, short salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, empty salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, short salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, empty salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, short salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, empty salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, short salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, short salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, long salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, short salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, short salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, short salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, long salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, short salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, short salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, long salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, short salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, long salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, empty salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, empty salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, empty salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, short salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, short salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, short salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, empty salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, short salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, long salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, short salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, short salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, long salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, long salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, short salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, long salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, short salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, short salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, long salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, empty salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, short salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, long salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, short salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, long salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, short salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, empty salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, long salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, empty salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, empty salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, short salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, long salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, short salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, short salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, short salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, short salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, long salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, long salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, long salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, short salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, short salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, short salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] long password, long salt, SHA-256, with 1 iterations with null length\n[PASS] long password, long salt, SHA-256, with 1 iterations with 0 length\n[PASS] long password, long salt, SHA-256, with 1 iterations with non-multiple of 8 length\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, empty salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, short salt, SHA-256, with 1 iterations\n[PASS] long password, long salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, empty salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, short salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, empty salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, short salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] long password, long salt, SHA-256, with 1 iterations with missing deriveBits usage\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, empty salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, short salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] long password, long salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, short salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, short salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, short salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, short salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] empty password, short salt, SHA-1, with 1000 iterations with null length\n[PASS] empty password, short salt, SHA-1, with 1000 iterations with 0 length\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, empty salt, SHA-256, with 1000 iterations\n[PASS] empty password, short salt, SHA-1, with 1000 iterations with non-multiple of 8 length\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, empty salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] empty password, short salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] empty password, short salt, SHA-1, with 1000 iterations with missing deriveBits usage\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, empty salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] empty password, short salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, empty salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] long password, long salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, short salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, short salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, short salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, short salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, long salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, long salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, long salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, long salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, empty salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, empty salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, empty salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, empty salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, long salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, short salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, short salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, long salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, short salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, long salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, short salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, long salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, empty salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, empty salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, empty salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, empty salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, short salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, empty salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, short salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, empty salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, short salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, empty salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, short salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, empty salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, long salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, long salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, long salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, long salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] short password, short salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using long password, short salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using long password, short salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 128  using long password, short salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using long password, short salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, empty salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, empty salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, empty salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, empty salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, long salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, long salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, long salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, long salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] empty password, short salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using long password, short salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using long password, short salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 192  using long password, short salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using long password, short salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, empty salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, empty salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, empty salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, empty salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, long salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, long salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, long salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, long salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using long password, short salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, long salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using long password, short salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, long salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, long salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using long password, short salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, long salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using long password, short salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using long password, empty salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using long password, empty salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 128  using long password, empty salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using long password, empty salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, long salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, long salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, long salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, long salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, short salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, short salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, short salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, short salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, short salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, short salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, short salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, short salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using long password, empty salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using long password, empty salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 192  using long password, empty salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using long password, empty salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, long salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, short salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, short salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, long salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, short salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, long salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, short salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, long salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, empty salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, empty salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, empty salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, empty salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using long password, empty salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, short salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, short salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 256  using long password, empty salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, short salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, short salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using long password, empty salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using long password, empty salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, long salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, long salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, long salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, long salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, short salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, short salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, short salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, short salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, short salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, short salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, empty salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, empty salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, empty salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, short salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, short salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, empty salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] long password, short salt, SHA-256, with 1 iterations with null length\n[PASS] long password, short salt, SHA-256, with 1 iterations with 0 length\n[PASS] long password, short salt, SHA-256, with 1 iterations with non-multiple of 8 length\n[PASS] long password, short salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] long password, short salt, SHA-256, with 1 iterations with missing deriveBits usage\n[PASS] long password, short salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, long salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, long salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, long salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, long salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, empty salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, empty salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, empty salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, empty salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, empty salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, empty salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, empty salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, empty salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, long salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, long salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, long salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, long salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] long password, short salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, long salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, long salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, long salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, long salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, empty salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, empty salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, empty salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, empty salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using long password, long salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using long password, long salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 128  using long password, long salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using long password, long salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, short salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, short salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, short salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, short salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, short salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, short salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, short salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, short salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, empty salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, empty salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, empty salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, empty salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] long password, empty salt, SHA-256, with 1000 iterations with null length\n[PASS] Derived key of type name: AES-KW length: 192  using long password, long salt, SHA-256, with 1000 iterations\n[PASS] long password, empty salt, SHA-256, with 1000 iterations with 0 length\n[PASS] Derived key of type name: AES-KW length: 192  using long password, long salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] long password, empty salt, SHA-256, with 1000 iterations with non-multiple of 8 length\n[PASS] Derived key of type name: AES-KW length: 192  using long password, long salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] long password, empty salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 192  using long password, long salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] long password, empty salt, SHA-256, with 1000 iterations with missing deriveBits usage\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, short salt, SHA-256, with 1000 iterations\n[PASS] long password, empty salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, short salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, short salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, short salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, short salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, short salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, short salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, short salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using long password, long salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using long password, long salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 256  using long password, long salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using long password, long salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using short password, long salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using short password, long salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 128  using short password, long salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using short password, long salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, short salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, short salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, short salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, short salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, empty salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, empty salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, empty salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, empty salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, long salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, long salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, long salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, long salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] long password, empty salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, short salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, short salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, short salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, short salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, short salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, short salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, short salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, short salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, long salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, long salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, long salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, long salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, short salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, short salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, short salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, short salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, short salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, short salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, short salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, short salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, empty salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, empty salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, empty salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, empty salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, long salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, long salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, long salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, long salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using short password, long salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using short password, long salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 192  using short password, long salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using short password, long salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, short salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, short salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, short salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, short salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, short salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, short salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, short salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, short salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, long salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, long salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, long salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, long salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] long password, long salt, SHA-256, with 1000 iterations with null length\n[PASS] long password, long salt, SHA-256, with 1000 iterations with 0 length\n[PASS] long password, long salt, SHA-256, with 1000 iterations with non-multiple of 8 length\n[PASS] long password, long salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] long password, long salt, SHA-256, with 1000 iterations with missing deriveBits usage\n[PASS] long password, long salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, empty salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, empty salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, empty salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, empty salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, short salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, short salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, short salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, short salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, short salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, short salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, short salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, short salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, empty salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, empty salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, empty salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, empty salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using short password, long salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using short password, long salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 256  using short password, long salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using short password, long salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, short salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, short salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] long password, long salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, short salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, short salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, empty salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, empty salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, empty salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, empty salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, short salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, short salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, short salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, short salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, empty salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, empty salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, empty salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, empty salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, short salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, short salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, short salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, short salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, long salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, long salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, long salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, long salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, short salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, short salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, short salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, short salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, long salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, long salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, long salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, long salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using long password, short salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using long password, short salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 128  using long password, short salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using long password, short salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, empty salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, empty salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, empty salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, empty salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, empty salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, empty salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, empty salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, empty salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, short salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, short salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, short salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, long salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, short salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, long salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, long salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using long password, short salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, long salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using long password, short salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 192  using long password, short salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using long password, short salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, empty salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, empty salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, empty salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, empty salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, short salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, short salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, short salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, short salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, long salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, long salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, long salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, long salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using long password, short salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using long password, short salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 256  using long password, short salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using long password, short salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, empty salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, empty salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, empty salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, empty salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, short salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, short salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, short salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, short salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, short salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, short salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, short salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, short salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, short salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, short salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, short salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, short salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, long salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, long salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, long salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, long salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, empty salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, empty salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, empty salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, empty salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using short password, empty salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using short password, empty salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 128  using short password, empty salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using short password, empty salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, short salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, short salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, short salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, short salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, long salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, long salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, long salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, long salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, short salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, short salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, short salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, short salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, short salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, long salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, long salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, short salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, long salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, long salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, short salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, short salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, short salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, short salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, short salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, short salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, empty salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, empty salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, empty salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, empty salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, long salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, long salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, long salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, long salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using short password, empty salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using short password, empty salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 192  using short password, empty salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using short password, empty salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, short salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, short salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, short salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, short salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] long password, short salt, SHA-256, with 1000 iterations with null length\n[PASS] long password, short salt, SHA-256, with 1000 iterations with 0 length\n[PASS] long password, short salt, SHA-256, with 1000 iterations with non-multiple of 8 length\n[PASS] long password, short salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] long password, short salt, SHA-256, with 1000 iterations with missing deriveBits usage\n[PASS] long password, short salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, long salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, long salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, long salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, long salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] short password, long salt, SHA-1, with 100000 iterations with null length\n[PASS] short password, long salt, SHA-1, with 100000 iterations with 0 length\n[PASS] short password, long salt, SHA-1, with 100000 iterations with non-multiple of 8 length\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, short salt, SHA-1, with 100000 iterations\n[PASS] short password, long salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, short salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] short password, long salt, SHA-1, with 100000 iterations with missing deriveBits usage\n[PASS] short password, long salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, short salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] short password, long salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, short salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, long salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, long salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, long salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, long salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, long salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, long salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, long salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, long salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, long salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using short password, long salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using short password, long salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using short password, long salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, long salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, long salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, long salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, long salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, empty salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, empty salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, empty salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, empty salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, long salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, long salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, long salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, long salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] short password, long salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, short salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, short salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, short salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, short salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using short password, empty salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using short password, empty salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 256  using short password, empty salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using short password, empty salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] long password, short salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, long salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, long salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, long salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, long salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using short password, short salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using short password, short salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 128  using short password, short salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using short password, short salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, empty salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, empty salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, empty salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, empty salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, long salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, short salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, long salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, short salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, long salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, short salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, long salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, short salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, long salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, long salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, long salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, long salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, long salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, short salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, long salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, short salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, long salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, short salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, long salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, short salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using long password, empty salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using long password, empty salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 128  using long password, empty salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using long password, empty salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, empty salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, long salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, long salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, empty salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, long salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, empty salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, long salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, empty salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using short password, short salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using short password, short salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 192  using short password, short salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using short password, short salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, long salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, long salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, long salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, long salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, long salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, long salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, long salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, long salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, short salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, short salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, short salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, short salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, long salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, short salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, short salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, long salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, long salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, long salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, short salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, short salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using long password, empty salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using long password, empty salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 192  using long password, empty salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using long password, empty salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, long salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, long salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, long salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, long salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, long salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, long salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, long salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, long salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, short salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, short salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, short salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, short salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, long salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, empty salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, long salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, long salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, long salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, empty salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 256  using short password, short salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using short password, short salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, empty salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using short password, short salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, empty salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using short password, short salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, long salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using long password, empty salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using long password, empty salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, long salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 256  using long password, empty salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, long salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, long salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using long password, empty salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using long password, long salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using long password, long salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 128  using long password, long salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using long password, long salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, short salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, short salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, short salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, short salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using short password, long salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using short password, long salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 128  using short password, long salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using short password, long salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, short salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, short salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, short salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, short salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, empty salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, empty salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, empty salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, empty salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using short password, long salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using long password, long salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using short password, long salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 192  using long password, long salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 192  using long password, long salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using short password, long salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using long password, long salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using short password, long salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, short salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, short salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, short salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, short salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, empty salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, empty salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, empty salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, empty salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, short salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using short password, long salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, short salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 256  using short password, long salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, short salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using short password, long salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, short salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using short password, long salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, empty salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, empty salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, empty salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, empty salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using long password, long salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using long password, long salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 256  using long password, long salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using long password, long salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, short salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, short salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, short salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, short salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, long salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, long salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, long salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, long salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, short salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, short salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, short salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, short salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, short salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, short salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, short salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, short salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, long salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, empty salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, empty salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, long salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, empty salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, long salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, empty salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, long salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, empty salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, empty salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, empty salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, empty salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] short password, empty salt, SHA-1, with 100000 iterations with null length\n[PASS] short password, empty salt, SHA-1, with 100000 iterations with 0 length\n[PASS] short password, empty salt, SHA-1, with 100000 iterations with non-multiple of 8 length\n[PASS] short password, empty salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] short password, empty salt, SHA-1, with 100000 iterations with missing deriveBits usage\n[PASS] short password, empty salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] short password, empty salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, empty salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, empty salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, empty salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, empty salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, empty salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, empty salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, empty salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, empty salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, empty salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using short password, empty salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using short password, empty salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using short password, empty salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, empty salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, empty salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, empty salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, empty salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, long salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, long salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, long salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, long salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] short password, empty salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, short salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, long salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, long salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, short salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, short salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, long salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, short salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, long salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, empty salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, short salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, empty salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, empty salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, short salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, empty salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, short salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, short salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, empty salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, empty salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, long salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, long salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, short salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, short salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, short salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, short salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, empty salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, empty salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, long salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, long salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] short password, long salt, SHA-256, with 1 iterations with null length\n[PASS] short password, long salt, SHA-256, with 1 iterations with 0 length\n[PASS] short password, long salt, SHA-256, with 1 iterations with non-multiple of 8 length\n[PASS] short password, long salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] short password, long salt, SHA-256, with 1 iterations with missing deriveBits usage\n[PASS] short password, long salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, empty salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, empty salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, empty salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, empty salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, empty salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, empty salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, empty salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, empty salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] long password, empty salt, SHA-256, with 100000 iterations with null length\n[PASS] long password, empty salt, SHA-256, with 100000 iterations with 0 length\n[PASS] long password, empty salt, SHA-256, with 100000 iterations with non-multiple of 8 length\n[PASS] long password, empty salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] long password, empty salt, SHA-256, with 100000 iterations with missing deriveBits usage\n[PASS] long password, empty salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] long password, empty salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, empty salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, empty salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, empty salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, empty salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, empty salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, empty salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, empty salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, empty salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, empty salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using long password, empty salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using long password, empty salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using long password, empty salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, empty salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, empty salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, empty salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, empty salt, SHA-256, with 0 iterations\n[PASS] long password, empty salt, PBKDF2, with 1 iterations with non-digest algorithm PBKDF2\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, empty salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, empty salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, empty salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, empty salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, empty salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, empty salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, empty salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, empty salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, empty salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using long password, empty salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using long password, empty salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using long password, empty salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, empty salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, empty salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, empty salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, empty salt, PBKDF2, with 1 iterations\n[PASS] long password, empty salt, PBKDF2, with 1000 iterations with non-digest algorithm PBKDF2\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, empty salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, empty salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, empty salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, empty salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, empty salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, empty salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, empty salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, empty salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, empty salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using long password, empty salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using long password, empty salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using long password, empty salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, empty salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, empty salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, empty salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, empty salt, PBKDF2, with 1000 iterations\n[PASS] long password, empty salt, PBKDF2, with 100000 iterations with non-digest algorithm PBKDF2\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, empty salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, empty salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, empty salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, empty salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, empty salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, empty salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, empty salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, empty salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, empty salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using long password, empty salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using long password, empty salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using long password, empty salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, empty salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, empty salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, empty salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, empty salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, long salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, long salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, long salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, long salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] empty password, short salt, SHA-384, with 1 iterations\n[PASS] short password, long salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, empty salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, empty salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, empty salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, empty salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, short salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, short salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, short salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, short salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, short salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, short salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, short salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, short salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, long salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, empty salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, short salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, long salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, empty salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, long salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, short salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, empty salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, long salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, empty salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, short salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, short salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, long salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, long salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, long salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, long salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, short salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, empty salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, long salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, long salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, long salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, long salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, short salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, short salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, short salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, empty salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, empty salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, empty salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, short salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, short salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, short salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, short salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, short salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, short salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, short salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, short salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, short salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, long salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, empty salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, short salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, empty salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, empty salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, empty salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, short salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, short salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, long salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, long salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, long salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, empty salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, short salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, empty salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, short salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, short salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, empty salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, short salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, short salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, empty salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, short salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, short salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, long salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, short salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, empty salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, short salt, SHA-384, with 1 iterations\n[PASS] short password, short salt, SHA-1, with 100000 iterations with null length\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, long salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, short salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, empty salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, long salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] short password, short salt, SHA-1, with 100000 iterations with 0 length\n[PASS] short password, short salt, SHA-1, with 100000 iterations with non-multiple of 8 length\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, long salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, empty salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, short salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, short salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, empty salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] short password, short salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] short password, short salt, SHA-1, with 100000 iterations with missing deriveBits usage\n[PASS] short password, short salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] short password, short salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, short salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, short salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using short password, empty salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, long salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, short salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, short salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, short salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, short salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using short password, empty salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 128  using short password, empty salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, short salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, long salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, long salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, short salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, short salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using short password, empty salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using short password, empty salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, long salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, short salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, short salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, short salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, short salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, short salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using short password, short salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, short salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, short salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, short salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using short password, empty salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 192  using short password, empty salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using short password, empty salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using short password, short salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using short password, short salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, short salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, short salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, long salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, long salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 256  using short password, empty salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using short password, empty salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, short salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, short salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, short salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, long salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, long salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, short salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, short salt, SHA-1, with 0 iterations\n[PASS] short password, short salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, short salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using short password, empty salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using short password, empty salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, short salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, short salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, short salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, short salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, long salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, short salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, short salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, empty salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, long salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, long salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, short salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, short salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, short salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, short salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, short salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, long salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, empty salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, empty salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, short salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, empty salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, long salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, short salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, short salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, empty salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, long salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, short salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, short salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, short salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, short salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, short salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, long salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, long salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, empty salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, empty salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, empty salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, short salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, long salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, short salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, empty salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, short salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, short salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, long salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, long salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, short salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, short salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, short salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, empty salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, empty salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, empty salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, short salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, short salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, long salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, short salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, empty salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using short password, long salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, short salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, short salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, short salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, empty salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, empty salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using short password, long salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 128  using short password, long salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, short salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, short salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, empty salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, short salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, short salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using short password, long salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] short password, empty salt, SHA-256, with 1 iterations with null length\n[PASS] short password, empty salt, SHA-256, with 1 iterations with 0 length\n[PASS] short password, empty salt, SHA-256, with 1 iterations with non-multiple of 8 length\n[PASS] short password, empty salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] short password, empty salt, SHA-256, with 1 iterations with missing deriveBits usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, short salt, SHA-384, with 1 iterations\n[PASS] short password, empty salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, short salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, short salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, short salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using short password, long salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, short salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using short password, long salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, short salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 192  using short password, long salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, short salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using short password, long salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, short salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] short password, empty salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, short salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, short salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, short salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, short salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] empty password, short salt, SHA-384, with 1 iterations with null length\n[PASS] empty password, short salt, SHA-384, with 1 iterations with 0 length\n[PASS] empty password, short salt, SHA-384, with 1 iterations with non-multiple of 8 length\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, short salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using short password, long salt, SHA-256, with 1000 iterations\n[PASS] empty password, short salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, short salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 256  using short password, long salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] empty password, short salt, SHA-384, with 1 iterations with missing deriveBits usage\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, short salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using short password, long salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using short password, long salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] empty password, short salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, short salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, empty salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, empty salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, empty salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, empty salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] empty password, short salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, short salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, short salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, short salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, short salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, long salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, long salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, long salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, long salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, empty salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, empty salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, empty salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, empty salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, short salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, short salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, short salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, short salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, short salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, short salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, short salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, short salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, long salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, long salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, long salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, long salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, empty salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, empty salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, empty salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, empty salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, short salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using short password, short salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, short salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 128  using short password, short salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, short salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using short password, short salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, short salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using short password, short salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, short salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, long salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, short salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, long salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, short salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, long salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, short salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, long salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, empty salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using short password, short salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using short password, short salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, empty salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 192  using short password, short salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, empty salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using short password, short salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, short salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, empty salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, short salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, short salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, short salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, long salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using short password, short salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, long salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 256  using short password, short salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, long salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using short password, short salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using short password, short salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, long salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] short password, long salt, SHA-256, with 1000 iterations with null length\n[PASS] short password, long salt, SHA-256, with 1000 iterations with 0 length\n[PASS] short password, long salt, SHA-256, with 1000 iterations with non-multiple of 8 length\n[PASS] short password, long salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, empty salt, SHA-256, with 1000 iterations\n[PASS] short password, long salt, SHA-256, with 1000 iterations with missing deriveBits usage\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, empty salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] short password, long salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, empty salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, empty salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, short salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, short salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, short salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, short salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, short salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, short salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, short salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, short salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, long salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, long salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, long salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, long salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] long password, long salt, SHA-256, with 100000 iterations with null length\n[PASS] long password, long salt, SHA-256, with 100000 iterations with 0 length\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, empty salt, SHA-256, with 1000 iterations\n[PASS] long password, long salt, SHA-256, with 100000 iterations with non-multiple of 8 length\n[PASS] long password, long salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, empty salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] long password, long salt, SHA-256, with 100000 iterations with missing deriveBits usage\n[PASS] long password, long salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, empty salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] long password, long salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, empty salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, long salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, long salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, short salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, short salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, long salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, short salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, short salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, short salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, long salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, short salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, short salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, long salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, short salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, long salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, empty salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, short salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, long salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, empty salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, empty salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, long salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, empty salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, short salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, long salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, short salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using long password, long salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, short salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using long password, long salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using long password, long salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, short salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, long salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, short salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, long salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, short salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, short salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, long salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, empty salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, long salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, short salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, empty salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, empty salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, short salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, empty salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] long password, long salt, PBKDF2, with 1 iterations with non-digest algorithm PBKDF2\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, short salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, long salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, short salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, long salt, PBKDF2, with 1 iterations\n[PASS] short password, short salt, SHA-256, with 1 iterations with null length\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, long salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, short salt, SHA-384, with 1000 iterations\n[PASS] short password, short salt, SHA-256, with 1 iterations with 0 length\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, short salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, short salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] short password, short salt, SHA-256, with 1 iterations with non-multiple of 8 length\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, short salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] short password, short salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, long salt, PBKDF2, with 1 iterations\n[PASS] short password, short salt, SHA-256, with 1 iterations with missing deriveBits usage\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, empty salt, SHA-256, with 1000 iterations\n[PASS] short password, short salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, long salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, empty salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, empty salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, long salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, empty salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, long salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, long salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, long salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using long password, long salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using long password, long salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, short salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using long password, long salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, long salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, short salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, short salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, long salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, short salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, long salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, long salt, PBKDF2, with 1 iterations\n[PASS] long password, long salt, PBKDF2, with 1000 iterations with non-digest algorithm PBKDF2\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, long salt, PBKDF2, with 1000 iterations\n[PASS] short password, short salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, long salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, long salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, long salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, long salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, long salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, long salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, long salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, long salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using long password, long salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using short password, empty salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using long password, long salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using long password, long salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using short password, empty salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, long salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using short password, empty salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, long salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using short password, empty salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, long salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, long salt, PBKDF2, with 1000 iterations\n[PASS] long password, long salt, PBKDF2, with 100000 iterations with non-digest algorithm PBKDF2\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, long salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, long salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, long salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, short salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, long salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, short salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, long salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, short salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, long salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, short salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, long salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, long salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, long salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using long password, long salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using long password, long salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, short salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using long password, long salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, short salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, long salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, short salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, long salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, short salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, long salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, long salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using short password, empty salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using short password, empty salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 192  using short password, empty salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using short password, empty salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, short salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, short salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, short salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, short salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] long password, empty salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, short salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, short salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, short salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, short salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using short password, empty salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using short password, empty salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 256  using short password, empty salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using short password, empty salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, empty salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, short salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, empty salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, short salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, empty salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, short salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, empty salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, short salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, short salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, short salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, short salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, short salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, empty salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, empty salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, empty salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, empty salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, empty salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, empty salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, empty salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, empty salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, short salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, short salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, short salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, short salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, short salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, short salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, short salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, short salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, empty salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, empty salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, empty salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, empty salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, empty salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, empty salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, empty salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, empty salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, short salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, short salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, short salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, short salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, empty salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, short salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, empty salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, short salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, empty salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, empty salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, short salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, short salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, empty salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, empty salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, empty salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, empty salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, empty salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, short salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, short salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, empty salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, short salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, empty salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, short salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, empty salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, short salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, short salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, short salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, short salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, empty salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, empty salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, empty salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, empty salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] short password, empty salt, SHA-256, with 1000 iterations with null length\n[PASS] short password, empty salt, SHA-256, with 1000 iterations with 0 length\n[PASS] short password, empty salt, SHA-256, with 1000 iterations with non-multiple of 8 length\n[PASS] short password, empty salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] short password, empty salt, SHA-256, with 1000 iterations with missing deriveBits usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, short salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, empty salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, short salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] short password, empty salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, empty salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, short salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, short salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, empty salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, empty salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, short salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, short salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, short salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, short salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using long password, short salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using long password, short salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 128  using long password, short salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using long password, short salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, empty salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, short salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, short salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, empty salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, empty salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, short salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, empty salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, short salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] empty password, short salt, SHA-384, with 1000 iterations with null length\n[PASS] empty password, short salt, SHA-384, with 1000 iterations with 0 length\n[PASS] empty password, short salt, SHA-384, with 1000 iterations with non-multiple of 8 length\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, short salt, SHA-256, with 1000 iterations\n[PASS] empty password, short salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] empty password, short salt, SHA-384, with 1000 iterations with missing deriveBits usage\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, short salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] empty password, short salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, short salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, short salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] short password, long salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, empty salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, empty salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, empty salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, empty salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, short salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, short salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, short salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, short salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, short salt, SHA-256, with 1000 iterations\n[PASS] empty password, short salt, SHA-1, with 100000 iterations with null length\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, short salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] empty password, short salt, SHA-1, with 100000 iterations with 0 length\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, short salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] empty password, short salt, SHA-1, with 100000 iterations with non-multiple of 8 length\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, short salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] empty password, short salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] empty password, short salt, SHA-1, with 100000 iterations with missing deriveBits usage\n[PASS] empty password, short salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] empty password, short salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, short salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, short salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, short salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, short salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, short salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, short salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, short salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, short salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, short salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, short salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, short salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, short salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, short salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, short salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, short salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, short salt, SHA-1, with 0 iterations\n[PASS] short password, empty salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, empty salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, empty salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, empty salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, empty salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using short password, short salt, SHA-256, with 1000 iterations\n[PASS] empty password, short salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using short password, short salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 128  using short password, short salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using short password, short salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using long password, empty salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using long password, short salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using long password, short salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 128  using long password, empty salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 128  using long password, empty salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using long password, short salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using long password, short salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using long password, empty salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, short salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, short salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, short salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, short salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using short password, short salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using short password, short salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 192  using short password, short salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using short password, short salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, long salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, long salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, long salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, long salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, short salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, short salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, short salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, short salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, short salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, short salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 192  using long password, empty salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using long password, empty salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 192  using long password, empty salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using long password, empty salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using long password, empty salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using long password, empty salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 256  using long password, empty salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using long password, empty salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, short salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, short salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using short password, short salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using short password, short salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 256  using short password, short salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using short password, short salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] empty password, short salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, short salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, empty salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, short salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, empty salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, short salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, empty salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, empty salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, short salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, short salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, short salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, short salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, short salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, empty salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using long password, short salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, short salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, empty salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, empty salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using long password, short salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, short salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, empty salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using long password, short salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, short salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, short salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using long password, short salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, empty salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, short salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, short salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, empty salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, empty salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, empty salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, short salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, short salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, short salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, short salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, short salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, short salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, empty salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, empty salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, empty salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, empty salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, empty salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, empty salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, empty salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, empty salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] long password, empty salt, SHA-384, with 1 iterations with null length\n[PASS] long password, empty salt, SHA-384, with 1 iterations with 0 length\n[PASS] long password, empty salt, SHA-384, with 1 iterations with non-multiple of 8 length\n[PASS] long password, empty salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, short salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, short salt, SHA-256, with 1 iterations\n[PASS] long password, empty salt, SHA-384, with 1 iterations with missing deriveBits usage\n[PASS] long password, empty salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, short salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, short salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, short salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, short salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, short salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, short salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, long salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, long salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, long salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, long salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] long password, empty salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, short salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, short salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, short salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, short salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, short salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, short salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, short salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, short salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] short password, short salt, SHA-256, with 1000 iterations with null length\n[PASS] short password, short salt, SHA-256, with 1000 iterations with 0 length\n[PASS] short password, short salt, SHA-256, with 1000 iterations with non-multiple of 8 length\n[PASS] short password, short salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] short password, short salt, SHA-256, with 1000 iterations with missing deriveBits usage\n[PASS] short password, short salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, short salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, short salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, short salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, short salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, short salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, empty salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, short salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, empty salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, short salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, empty salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, short salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, empty salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, short salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, short salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, short salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, short salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, empty salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, short salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, empty salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, short salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, empty salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, empty salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, short salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, short salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, empty salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, empty salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, empty salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, empty salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, long salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, long salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, long salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, long salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] short password, short salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, short salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, short salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, short salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, short salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, empty salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, empty salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, empty salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, empty salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, short salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, short salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, short salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, short salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, empty salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, short salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, empty salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, short salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, empty salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, short salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, empty salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, short salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, empty salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, empty salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, empty salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, empty salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, short salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, short salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, short salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, short salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, long salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, short salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, long salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, short salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, long salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, short salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, long salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, short salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, empty salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, empty salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, empty salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, empty salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, short salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, short salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, short salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, short salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, short salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, short salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, short salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, short salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, short salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, short salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, short salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, short salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, empty salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, empty salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, empty salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, empty salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, empty salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, short salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, empty salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, empty salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, empty salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, short salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, short salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, short salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, short salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, short salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, short salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, short salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, empty salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, empty salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, empty salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, empty salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, long salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, short salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, long salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, long salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, short salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, long salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, short salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, short salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] empty password, short salt, SHA-256, with 1 iterations with null length\n[PASS] empty password, short salt, SHA-256, with 1 iterations with 0 length\n[PASS] empty password, short salt, SHA-256, with 1 iterations with non-multiple of 8 length\n[PASS] empty password, short salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] empty password, short salt, SHA-256, with 1 iterations with missing deriveBits usage\n[PASS] empty password, short salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, short salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, short salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, short salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, short salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, empty salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, empty salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, empty salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, empty salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, short salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, short salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, short salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, short salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] long password, short salt, SHA-256, with 100000 iterations with null length\n[PASS] long password, short salt, SHA-256, with 100000 iterations with 0 length\n[PASS] empty password, short salt, SHA-256, with 1000 iterations\n[PASS] long password, short salt, SHA-256, with 100000 iterations with non-multiple of 8 length\n[PASS] long password, short salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] long password, short salt, SHA-256, with 100000 iterations with missing deriveBits usage\n[PASS] long password, short salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] long password, short salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, short salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, short salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, short salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, short salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, short salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, short salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, short salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, short salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, short salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using long password, short salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using long password, short salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using long password, short salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, short salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, short salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, short salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, short salt, SHA-256, with 0 iterations\n[PASS] long password, short salt, PBKDF2, with 1 iterations with non-digest algorithm PBKDF2\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, short salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, short salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, short salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, short salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, short salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, short salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, short salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, short salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, short salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using long password, short salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using long password, short salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using long password, short salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, short salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, short salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, short salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, short salt, PBKDF2, with 1 iterations\n[PASS] long password, short salt, PBKDF2, with 1000 iterations with non-digest algorithm PBKDF2\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, short salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, short salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, short salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, short salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, short salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, short salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, short salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, short salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, short salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using long password, short salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using long password, short salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using long password, short salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, short salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, short salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, short salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, short salt, PBKDF2, with 1000 iterations\n[PASS] long password, short salt, PBKDF2, with 100000 iterations with non-digest algorithm PBKDF2\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, short salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, short salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, short salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, short salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, short salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, short salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, short salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, short salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, short salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using long password, short salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using long password, short salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using long password, short salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, short salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, short salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, short salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, short salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, empty salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, empty salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, empty salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, empty salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, empty salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, empty salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, empty salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, empty salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] long password, long salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, short salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, short salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, short salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, short salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, long salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, long salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, long salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, long salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, long salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using long password, empty salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, long salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 128  using long password, empty salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 128  using long password, empty salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, long salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, long salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using long password, empty salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, short salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, short salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, short salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, short salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, long salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, long salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, short salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, long salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, long salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, short salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, short salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, short salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using long password, empty salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, long salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using long password, empty salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 192  using long password, empty salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, long salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, short salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, long salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using long password, empty salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, long salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, short salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, short salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, short salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, short salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, short salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, short salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, short salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using long password, empty salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, long salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using long password, empty salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, long salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 256  using long password, empty salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, long salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, long salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using long password, empty salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, empty salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, empty salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, empty salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, empty salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, long salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, short salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, long salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, short salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, long salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, short salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, long salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, short salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, empty salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, empty salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, empty salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, empty salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, long salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, long salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, long salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, long salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, long salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, long salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, long salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, long salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, short salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, short salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, short salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, short salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, long salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, empty salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, long salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, long salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, empty salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, empty salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, long salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, empty salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, short salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, short salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, short salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, short salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, short salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, long salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, short salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, long salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, short salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, long salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, short salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, long salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, empty salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, empty salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, empty salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, empty salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, short salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, short salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, short salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, short salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, long salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, short salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, long salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, short salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, long salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, short salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, long salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, short salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, empty salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, empty salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, empty salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, empty salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] long password, empty salt, SHA-384, with 1000 iterations with null length\n[PASS] long password, empty salt, SHA-384, with 1000 iterations with 0 length\n[PASS] long password, empty salt, SHA-384, with 1000 iterations with non-multiple of 8 length\n[PASS] long password, empty salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] long password, empty salt, SHA-384, with 1000 iterations with missing deriveBits usage\n[PASS] long password, empty salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using long password, long salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, empty salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using long password, long salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, empty salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 128  using long password, long salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, empty salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using long password, long salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, empty salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, short salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, short salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, short salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, short salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, long salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, long salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, long salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, long salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, short salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using long password, long salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using long password, long salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 192  using long password, long salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, short salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, short salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, short salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using long password, long salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, short salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, short salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, short salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, short salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using long password, long salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, short salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, short salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 256  using long password, long salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 256  using long password, long salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, short salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using long password, long salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, short salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] long password, empty salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, short salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, long salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, long salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, short salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, long salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, short salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, long salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, short salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, empty salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, empty salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, empty salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, empty salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, long salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, long salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, long salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, long salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, long salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, long salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, long salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, long salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, short salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, short salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, short salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, short salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, short salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, short salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, short salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, short salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, short salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, long salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, short salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, long salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, short salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, short salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, long salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, long salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, short salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, short salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, short salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, short salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, empty salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, empty salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, empty salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, empty salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, empty salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, long salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, empty salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, long salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, long salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, long salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] long password, long salt, SHA-384, with 1 iterations with null length\n[PASS] long password, long salt, SHA-384, with 1 iterations with 0 length\n[PASS] long password, long salt, SHA-384, with 1 iterations with non-multiple of 8 length\n[PASS] long password, long salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] long password, long salt, SHA-384, with 1 iterations with missing deriveBits usage\n[PASS] long password, long salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, short salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, short salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, short salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, short salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using short password, long salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using short password, long salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 128  using short password, long salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using short password, long salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] long password, long salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, short salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, short salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, short salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, short salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, short salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, short salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, short salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, short salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, long salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, long salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, long salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, long salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, short salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, short salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, short salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, short salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using short password, empty salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using short password, empty salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 128  using short password, empty salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using short password, empty salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, long salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, long salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, long salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, long salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, short salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, short salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, short salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, short salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] empty password, short salt, SHA-256, with 1000 iterations with null length\n[PASS] empty password, short salt, SHA-256, with 1000 iterations with 0 length\n[PASS] empty password, short salt, SHA-256, with 1000 iterations with non-multiple of 8 length\n[PASS] empty password, short salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] empty password, short salt, SHA-256, with 1000 iterations with missing deriveBits usage\n[PASS] empty password, short salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, short salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, short salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, short salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, long salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, long salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, long salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, long salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] setup - define tests\n[PASS] Derived key of type name: AES-KW length: 192  using short password, long salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using short password, long salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 192  using short password, long salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using short password, long salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, long salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, long salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, long salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, long salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, short salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, short salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, short salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, short salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using short password, empty salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using short password, empty salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 192  using short password, empty salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using short password, empty salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, long salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, long salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, long salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, long salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] empty password, short salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, long salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, long salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, long salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, long salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, long salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, long salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, long salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, long salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] empty password, long salt, SHA-384, with 100000 iterations with null length\n[PASS] empty password, long salt, SHA-384, with 100000 iterations with 0 length\n[PASS] empty password, long salt, SHA-384, with 100000 iterations with non-multiple of 8 length\n[PASS] empty password, long salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] empty password, long salt, SHA-384, with 100000 iterations with missing deriveBits usage\n[PASS] empty password, long salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] empty password, long salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, long salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, long salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, long salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, long salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, long salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, long salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, long salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, long salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, long salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, long salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, long salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, long salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, long salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, long salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, long salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, long salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using short password, long salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using short password, long salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 256  using short password, long salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, long salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using short password, long salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] empty password, long salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, long salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, long salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, long salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] setup - define tests\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, empty salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, empty salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, empty salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, short salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, short salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, short salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, short salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, long salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, long salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, long salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, long salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, long salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, long salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, long salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, long salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, empty salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, empty salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, empty salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, empty salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using short password, empty salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using short password, empty salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 256  using short password, empty salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using short password, empty salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, long salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, long salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, empty salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, long salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, long salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, long salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, long salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, long salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, long salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, empty salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, empty salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, empty salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, short salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, short salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, short salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, short salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using long password, long salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, long salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, empty salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using long password, long salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 128  using long password, long salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, long salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, empty salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 128  using long password, long salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, long salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, empty salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, long salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, empty salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, long salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, long salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, long salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, long salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using long password, long salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, long salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, empty salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using long password, long salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, empty salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, long salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 192  using long password, long salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, empty salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, empty salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, long salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using long password, long salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, long salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using short password, short salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, long salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using short password, short salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, empty salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using short password, short salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, long salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, empty salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 128  using short password, short salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, long salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, empty salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, empty salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, long salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, long salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, long salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, long salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, long salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, empty salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, empty salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, empty salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, long salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, empty salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, empty salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, empty salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, long salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, empty salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, empty salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, long salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, long salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, short salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, long salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, empty salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, short salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, long salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, empty salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, long salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, long salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, long salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, long salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, long salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, long salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, short salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, short salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, empty salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, empty salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, long salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, empty salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, long salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, long salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, long salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, empty salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, long salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, long salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, long salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, empty salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, empty salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, long salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] SHA-1 with empty source data\n[PASS] sha-1 with empty source data\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, long salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using short password, short salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, empty salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using short password, short salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, long salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Sha-1 with empty source data\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, empty salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 192  using short password, short salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, long salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using short password, short salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, empty salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] SHA-1 with empty source data and altered buffer after call\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, long salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, empty salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] SHA-256 with empty source data\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, empty salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, long salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, empty salt, SHA-512, with 1 iterations\n[PASS] sha-256 with empty source data\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, empty salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, long salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, empty salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Sha-256 with empty source data\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, empty salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, long salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, empty salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, empty salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, long salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] SHA-256 with empty source data and altered buffer after call\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, empty salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, long salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, long salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, long salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, long salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, short salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, long salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, empty salt, SHA-512, with 1 iterations\n[PASS] SHA-384 with empty source data\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, short salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, long salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, empty salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, short salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, long salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, short salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, empty salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] sha-384 with empty source data\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, empty salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, long salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Sha-384 with empty source data\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, long salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, long salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, long salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, long salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, long salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, long salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] SHA-384 with empty source data and altered buffer after call\n[PASS] SHA-512 with empty source data\n[PASS] sha-512 with empty source data\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, long salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, long salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, empty salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, empty salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, empty salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, empty salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Sha-512 with empty source data\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, empty salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using short password, short salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, long salt, SHA-512, with 1 iterations\n[PASS] SHA-512 with empty source data and altered buffer after call\n[PASS] SHA-1 with short source data\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, empty salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 256  using short password, short salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] sha-1 with short source data\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, long salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 256  using short password, short salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Sha-1 with short source data\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, empty salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using short password, short salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, long salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, empty salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] SHA-1 with short source data and altered buffer after call\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, long salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] empty password, long salt, SHA-512, with 1 iterations with null length\n[PASS] empty password, long salt, SHA-512, with 1 iterations with 0 length\n[PASS] empty password, long salt, SHA-512, with 1 iterations with non-multiple of 8 length\n[PASS] empty password, long salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] empty password, long salt, SHA-512, with 1 iterations with missing deriveBits usage\n[PASS] empty password, long salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] SHA-256 with short source data\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, empty salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, empty salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, empty salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, empty salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, empty salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, empty salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, empty salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, empty salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] sha-256 with short source data\n[PASS] empty password, long salt, SHA-512, with 1000 iterations\n[PASS] Sha-256 with short source data\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, empty salt, SHA-512, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, empty salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, empty salt, SHA-512, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, empty salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] empty password, empty salt, SHA-512, with 1 iterations with null length\n[PASS] empty password, empty salt, SHA-512, with 1 iterations with 0 length\n[PASS] empty password, empty salt, SHA-512, with 1 iterations with non-multiple of 8 length\n[PASS] empty password, empty salt, SHA-512, with 1 iterations with bad hash name SHA512\n[PASS] empty password, empty salt, SHA-512, with 1 iterations with missing deriveBits usage\n[PASS] empty password, empty salt, SHA-512, with 1 iterations with wrong (ECDH) key\n[PASS] SHA-256 with short source data and altered buffer after call\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, short salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, short salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, short salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, short salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, long salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, long salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, long salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, long salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] SHA-384 with short source data\n[PASS] empty password, empty salt, SHA-512, with 1000 iterations\n[PASS] sha-384 with short source data\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, long salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, long salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, long salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, long salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] short password, long salt, SHA-256, with 100000 iterations with null length\n[PASS] short password, long salt, SHA-256, with 100000 iterations with 0 length\n[PASS] short password, long salt, SHA-256, with 100000 iterations with non-multiple of 8 length\n[PASS] short password, long salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, long salt, SHA-512, with 1000 iterations\n[PASS] short password, long salt, SHA-256, with 100000 iterations with missing deriveBits usage\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, long salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] short password, long salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] short password, long salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, long salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, long salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, long salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, long salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, long salt, SHA-256, with 0 iterations\n[PASS] Sha-384 with short source data\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, empty salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, long salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, empty salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, long salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, empty salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, empty salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, long salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, long salt, SHA-256, with 0 iterations\n[PASS] SHA-384 with short source data and altered buffer after call\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, long salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, long salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, long salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, long salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, long salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using short password, long salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, long salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using short password, long salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using short password, long salt, SHA-256, with 0 iterations\n[PASS] SHA-512 with short source data\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, empty salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, long salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, empty salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, long salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, empty salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, empty salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, long salt, SHA-256, with 0 iterations\n[PASS] sha-512 with short source data\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, long salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, long salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, long salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, long salt, SHA-256, with 0 iterations\n[PASS] short password, long salt, PBKDF2, with 1 iterations with non-digest algorithm PBKDF2\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, long salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, long salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, long salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, long salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, long salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, long salt, PBKDF2, with 1 iterations\n[PASS] Sha-512 with short source data\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, empty salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, long salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, long salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, long salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, empty salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, long salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, empty salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using short password, long salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using short password, long salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, empty salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using short password, long salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, long salt, PBKDF2, with 1 iterations\n[PASS] SHA-512 with short source data and altered buffer after call\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, long salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, long salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, long salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, long salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, long salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, long salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, long salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] short password, long salt, PBKDF2, with 1000 iterations with non-digest algorithm PBKDF2\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, long salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, long salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, long salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, long salt, PBKDF2, with 1000 iterations\n[PASS] SHA-1 with medium source data\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, empty salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, long salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, long salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, empty salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, empty salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, long salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, long salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, empty salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, long salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using short password, long salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using short password, long salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using short password, long salt, PBKDF2, with 1000 iterations\n[PASS] sha-1 with medium source data\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, long salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, long salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, long salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, long salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, long salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, long salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, long salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, long salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] short password, long salt, PBKDF2, with 100000 iterations with non-digest algorithm PBKDF2\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, long salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, long salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, long salt, PBKDF2, with 100000 iterations\n[PASS] Sha-1 with medium source data\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, long salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, empty salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, long salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, empty salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, long salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, empty salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, long salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, empty salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, long salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, long salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using short password, long salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using short password, long salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using short password, long salt, PBKDF2, with 100000 iterations\n[PASS] SHA-1 with medium source data and altered buffer after call\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, long salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, long salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, long salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, long salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, long salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, long salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, long salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, long salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] SHA-256 with medium source data\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, empty salt, SHA-512, with 1000 iterations\n[PASS] short password, empty salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, empty salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, empty salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, empty salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] sha-256 with medium source data\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, empty salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, long salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, empty salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, long salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, empty salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, empty salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, long salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, long salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Sha-256 with medium source data\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, empty salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, empty salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, empty salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, empty salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, empty salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] SHA-256 with medium source data and altered buffer after call\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, empty salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, short salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, empty salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, empty salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, short salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, empty salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, short salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, empty salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, short salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, empty salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, empty salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] SHA-384 with medium source data\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, long salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, long salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, long salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, long salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] sha-384 with medium source data\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, empty salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, empty salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, empty salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, empty salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, empty salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, empty salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, empty salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, empty salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Sha-384 with medium source data\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, long salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, empty salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, long salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, empty salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, empty salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, long salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, empty salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, long salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] SHA-384 with medium source data and altered buffer after call\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, empty salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, empty salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, empty salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, empty salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, empty salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, empty salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, empty salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, empty salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] SHA-512 with medium source data\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, long salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, empty salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, empty salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, long salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, empty salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, long salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, empty salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, long salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] sha-512 with medium source data\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, empty salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, empty salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, empty salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, empty salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, empty salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, empty salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, empty salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, empty salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Sha-512 with medium source data\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, long salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, empty salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, empty salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, long salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, empty salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, long salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, empty salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, long salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] SHA-512 with medium source data and altered buffer after call\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, empty salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using short password, empty salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, empty salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 128  using short password, empty salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 128  using short password, empty salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, empty salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] SHA-1 with long source data\n[PASS] Derived key of type name: AES-KW length: 128  using short password, empty salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, empty salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, empty salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] sha-1 with long source data\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, empty salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 192  using short password, empty salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, empty salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using short password, empty salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, empty salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using short password, empty salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] short password, empty salt, SHA-256, with 100000 iterations with null length\n[PASS] Derived key of type name: AES-KW length: 192  using short password, empty salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] short password, empty salt, SHA-256, with 100000 iterations with 0 length\n[PASS] short password, empty salt, SHA-256, with 100000 iterations with non-multiple of 8 length\n[PASS] short password, empty salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] short password, empty salt, SHA-256, with 100000 iterations with missing deriveBits usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, long salt, SHA-512, with 1000 iterations\n[PASS] Sha-1 with long source data\n[PASS] short password, empty salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using short password, empty salt, SHA-384, with 1 iterations\n[PASS] short password, empty salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, long salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 256  using short password, empty salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, empty salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using short password, empty salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, empty salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, long salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using short password, empty salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, empty salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, long salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, empty salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, empty salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, empty salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, empty salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, empty salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, empty salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, empty salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, empty salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, empty salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, empty salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, empty salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, empty salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, empty salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, empty salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using short password, empty salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, empty salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, empty salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using short password, empty salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, empty salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using short password, empty salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, empty salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, long salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, empty salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, empty salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, empty salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, long salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, long salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, empty salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, long salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, empty salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, empty salt, SHA-512, with 1000 iterations\n[PASS] short password, empty salt, PBKDF2, with 1 iterations with non-digest algorithm PBKDF2\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, empty salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, empty salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, empty salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, empty salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, empty salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, empty salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, empty salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, empty salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, empty salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, empty salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, long salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, empty salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, empty salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, long salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 128  using short password, empty salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, long salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using short password, empty salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, long salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using short password, empty salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, empty salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, empty salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, empty salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, empty salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, empty salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, empty salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] short password, empty salt, PBKDF2, with 1000 iterations with non-digest algorithm PBKDF2\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, empty salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, empty salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, empty salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, empty salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, empty salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, empty salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, empty salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, empty salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, long salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, empty salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, long salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, empty salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, empty salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, long salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using short password, empty salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, long salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using short password, empty salt, PBKDF2, with 1000 iterations\n[PASS] empty password, long salt, SHA-512, with 1000 iterations with null length\n[PASS] Derived key of type name: AES-KW length: 256  using short password, empty salt, PBKDF2, with 1000 iterations\n[PASS] empty password, long salt, SHA-512, with 1000 iterations with 0 length\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, empty salt, PBKDF2, with 1000 iterations\n[PASS] empty password, long salt, SHA-512, with 1000 iterations with non-multiple of 8 length\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, empty salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, empty salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, empty salt, SHA-512, with 1000 iterations\n[PASS] empty password, long salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, empty salt, PBKDF2, with 1000 iterations\n[PASS] short password, empty salt, PBKDF2, with 100000 iterations with non-digest algorithm PBKDF2\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, empty salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, empty salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] SHA-1 with long source data and altered buffer after call\n[PASS] SHA-256 with long source data\n[PASS] sha-256 with long source data\n[PASS] Sha-256 with long source data\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, empty salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, empty salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, empty salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, empty salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, empty salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, empty salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, empty salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, empty salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, empty salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using short password, empty salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using short password, empty salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using short password, empty salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, empty salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, empty salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, empty salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, empty salt, PBKDF2, with 100000 iterations\n[PASS] long password, short salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, short salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, short salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, short salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, short salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] empty password, long salt, SHA-512, with 1000 iterations with missing deriveBits usage\n[PASS] empty password, long salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, empty salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, empty salt, SHA-512, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, empty salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, empty salt, SHA-512, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, empty salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] empty password, empty salt, SHA-512, with 1000 iterations with null length\n[PASS] empty password, empty salt, SHA-512, with 1000 iterations with 0 length\n[PASS] empty password, empty salt, SHA-512, with 1000 iterations with non-multiple of 8 length\n[PASS] empty password, empty salt, SHA-512, with 1000 iterations with bad hash name SHA512\n[PASS] empty password, empty salt, SHA-512, with 1000 iterations with missing deriveBits usage\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, short salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, short salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] empty password, empty salt, SHA-512, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, short salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, short salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] SHA-256 with long source data and altered buffer after call\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, short salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, short salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, short salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, short salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, short salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, short salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, short salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, short salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, short salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, short salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, short salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] SHA-384 with long source data\n[PASS] sha-384 with long source data\n[PASS] Sha-384 with long source data\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, short salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] SHA-384 with long source data and altered buffer after call\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, short salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, short salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, short salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, short salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] SHA-512 with long source data\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, short salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using long password, short salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, short salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] sha-512 with long source data\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, short salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, short salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, short salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, short salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Sha-512 with long source data\n[PASS] Derived key of type name: AES-CTR length: 256  using long password, short salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] setup\n[PASS] empty password, long salt, SHA-512, with 100000 iterations\n[PASS] SHA-512 with long source data and altered buffer after call\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, short salt, SHA-384, with 1 iterations\n[PASS] AES-GCM with empty\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, short salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] AES-CBC 128-bit key\n[PASS] RSA-OAEP with empty\n[PASS] PBKDF2 with empty\n[PASS] AES-KW with empty\n[PASS] AES-GCM with short\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, short salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using long password, short salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] RSA-OAEP with short\n[PASS] PBKDF2 with short\n[PASS] AES-KW with short\n[PASS] AES-GCM with medium\n[PASS] RSA-OAEP with medium\n[PASS] PBKDF2 with medium\n[PASS] AES-KW with medium\n[PASS] AES-GCM with long\n[PASS] RSA-OAEP with long\n[PASS] PBKDF2 with long\n[PASS] AES-KW with long\n[PASS] empty password, empty salt, SHA-512, with 100000 iterations\n[PASS] AES-CBC 192-bit key\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, short salt, SHA-384, with 1 iterations\n[PASS] AES-CBC 256-bit key\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, short salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, short salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, short salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using long password, short salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] AES-CBC 128-bit key with altered plaintext\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, short salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, short salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] AES-CBC 192-bit key with altered plaintext\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, short salt, SHA-384, with 1 iterations\n[PASS] AES-CBC 256-bit key with altered plaintext\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, short salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, short salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, short salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using long password, short salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using long password, short salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using long password, short salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 128  using long password, short salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] AES-CBC 128-bit key decryption\n[PASS] AES-CBC 192-bit key decryption\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, short salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, short salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, short salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using long password, short salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, short salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using long password, short salt, SHA-384, with 1 iterations\n[PASS] AES-CBC 256-bit key decryption\n[PASS] Derived key of type name: AES-KW length: 192  using long password, short salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 192  using long password, short salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using long password, short salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] setup\n[PASS] AES-CBC 128-bit key decryption with altered ciphertext\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, short salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using long password, short salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using long password, short salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, short salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] AES-CTR 128-bit key\n[PASS] Derived key of type name: AES-KW length: 256  using long password, short salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] AES-CBC 192-bit key decryption with altered ciphertext\n[PASS] Derived key of type name: AES-KW length: 256  using long password, short salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, short salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] AES-CBC 256-bit key decryption with altered ciphertext\n[PASS] AES-CTR 192-bit key\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, short salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, short salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, short salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] AES-CTR 256-bit key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, short salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] AES-CBC 128-bit key without encrypt usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using long password, short salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] AES-CBC 192-bit key without encrypt usage\n[PASS] AES-CBC 256-bit key without encrypt usage\n[PASS] AES-CBC 128-bit key with mismatched key and algorithm\n[PASS] AES-CBC 192-bit key with mismatched key and algorithm\n[PASS] AES-CBC 256-bit key with mismatched key and algorithm\n[PASS] AES-CBC 128-bit key without decrypt usage\n[PASS] AES-CBC 192-bit key without decrypt usage\n[PASS] AES-CBC 256-bit key without decrypt usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, short salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, short salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, short salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using long password, short salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, short salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, short salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] AES-CTR 128-bit key with altered plaintext\n[PASS] AES-CTR 192-bit key with altered plaintext\n[PASS] AES-CTR 256-bit key with altered plaintext\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, long salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, long salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, long salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, long salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] AES-CBC 128-bit key, 64-bit IV\n[PASS] AES-CBC 128-bit key, 192-bit IV\n[PASS] AES-CBC 192-bit key, 64-bit IV\n[PASS] AES-CBC 192-bit key, 192-bit IV\n[PASS] AES-CBC 256-bit key, 64-bit IV\n[PASS] AES-CBC 256-bit key, 192-bit IV\n[PASS] AES-CBC 128-bit key, 64-bit IV decryption\n[PASS] AES-CBC 128-bit key, 192-bit IV decryption\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, short salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using long password, short salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] AES-CBC 192-bit key, 64-bit IV decryption\n[PASS] AES-CBC 192-bit key, 192-bit IV decryption\n[PASS] AES-CBC 256-bit key, 64-bit IV decryption\n[PASS] AES-CBC 256-bit key, 192-bit IV decryption\n[PASS] AES-CTR 128-bit key decryption\n[PASS] AES-CBC 128-bit key, zeroPadChar\n[PASS] AES-CBC 128-bit key, bigPadChar\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, empty salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, empty salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, short salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, short salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, short salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] AES-CTR 192-bit key decryption\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, empty salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, empty salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using long password, short salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] long password, short salt, SHA-384, with 1 iterations with null length\n[PASS] AES-CTR 256-bit key decryption\n[PASS] long password, short salt, SHA-384, with 1 iterations with 0 length\n[PASS] long password, short salt, SHA-384, with 1 iterations with non-multiple of 8 length\n[PASS] AES-CBC 128-bit key, inconsistentPadChars\n[PASS] long password, short salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] long password, short salt, SHA-384, with 1 iterations with missing deriveBits usage\n[PASS] long password, short salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] AES-CBC 192-bit key, zeroPadChar\n[PASS] AES-CTR 128-bit key decryption with altered ciphertext\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, short salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, short salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, short salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, short salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] short password, short salt, SHA-256, with 100000 iterations with null length\n[PASS] AES-CBC 192-bit key, bigPadChar\n[PASS] short password, short salt, SHA-256, with 100000 iterations with 0 length\n[PASS] short password, short salt, SHA-256, with 100000 iterations with non-multiple of 8 length\n[PASS] long password, short salt, SHA-384, with 1000 iterations\n[PASS] AES-CTR 192-bit key decryption with altered ciphertext\n[PASS] AES-CBC 192-bit key, inconsistentPadChars\n[PASS] short password, short salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] AES-CBC 256-bit key, zeroPadChar\n[PASS] short password, short salt, SHA-256, with 100000 iterations with missing deriveBits usage\n[PASS] short password, short salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] short password, short salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, short salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, short salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, short salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, short salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, short salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, short salt, SHA-256, with 0 iterations\n[PASS] AES-CTR 256-bit key decryption with altered ciphertext\n[PASS] AES-CBC 256-bit key, bigPadChar\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, short salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, short salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, short salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, short salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, short salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, short salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using short password, short salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using long password, short salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] AES-CTR 128-bit key without encrypt usage\n[PASS] AES-CTR 192-bit key without encrypt usage\n[PASS] Derived key of type name: AES-KW length: 192  using short password, short salt, SHA-256, with 0 iterations\n[PASS] AES-CBC 256-bit key, inconsistentPadChars\n[PASS] Derived key of type name: AES-KW length: 256  using short password, short salt, SHA-256, with 0 iterations\n[PASS] AES-CTR 256-bit key without encrypt usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, short salt, SHA-256, with 0 iterations\n[PASS] AES-CTR 128-bit key with mismatched key and algorithm\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, short salt, SHA-256, with 0 iterations\n[PASS] AES-CTR 192-bit key with mismatched key and algorithm\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, short salt, SHA-256, with 0 iterations\n[PASS] AES-CTR 256-bit key with mismatched key and algorithm\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, short salt, SHA-256, with 0 iterations\n[PASS] AES-CTR 128-bit key without decrypt usage\n[PASS] short password, short salt, PBKDF2, with 1 iterations with non-digest algorithm PBKDF2\n[PASS] AES-CTR 192-bit key without decrypt usage\n[PASS] AES-CTR 256-bit key without decrypt usage\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, short salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, short salt, PBKDF2, with 1 iterations\n[PASS] AES-CTR 128-bit key, 0-bit counter\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, short salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, short salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, short salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, short salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, short salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, short salt, PBKDF2, with 1 iterations\n[PASS] AES-CTR 128-bit key, 129-bit counter\n[PASS] AES-CTR 192-bit key, 0-bit counter\n[PASS] AES-CTR 192-bit key, 129-bit counter\n[PASS] AES-CTR 256-bit key, 0-bit counter\n[PASS] AES-CTR 256-bit key, 129-bit counter\n[PASS] AES-CTR 128-bit key, 0-bit counter decryption\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, short salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using long password, short salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] AES-CTR 128-bit key, 129-bit counter decryption\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, short salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, short salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, short salt, PBKDF2, with 1 iterations\n[PASS] AES-CTR 192-bit key, 0-bit counter decryption\n[PASS] AES-CTR 192-bit key, 129-bit counter decryption\n[PASS] Derived key of type name: AES-KW length: 128  using short password, short salt, PBKDF2, with 1 iterations\n[PASS] AES-CTR 256-bit key, 0-bit counter decryption\n[PASS] Derived key of type name: AES-KW length: 192  using short password, short salt, PBKDF2, with 1 iterations\n[PASS] AES-CTR 256-bit key, 129-bit counter decryption\n[PASS] Derived key of type name: AES-KW length: 256  using short password, short salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, short salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, short salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, short salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, short salt, PBKDF2, with 1 iterations\n[PASS] short password, short salt, PBKDF2, with 1000 iterations with non-digest algorithm PBKDF2\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, short salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, short salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, short salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, short salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, short salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, short salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, short salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using long password, short salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, short salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, short salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, short salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, short salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, short salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using short password, short salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using short password, short salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using short password, short salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, short salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, short salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, short salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, short salt, PBKDF2, with 1000 iterations\n[PASS] short password, short salt, PBKDF2, with 100000 iterations with non-digest algorithm PBKDF2\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, short salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, short salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, short salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, short salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, short salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, short salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, short salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using short password, short salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using short password, short salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using short password, short salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using short password, short salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using short password, short salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using short password, short salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using short password, short salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using short password, short salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using short password, short salt, PBKDF2, with 100000 iterations\n[PASS] short password, long salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, long salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, long salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, long salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using short password, long salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, long salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, long salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, long salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using short password, long salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, long salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, long salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, long salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using short password, long salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, long salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, long salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, long salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using short password, long salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, short salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, short salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 128  using long password, short salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, long salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, long salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, long salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using short password, long salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, long salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, long salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, long salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using short password, long salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, long salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, long salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, long salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using short password, long salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, short salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, short salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, short salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, short salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, long salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, long salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, long salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, long salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, empty salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, empty salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, empty salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, empty salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Bad algorithm: generateKey(AES, false, [decrypt])\n[PASS] Bad algorithm: generateKey(AES, true, [decrypt])\n[PASS] Bad algorithm: generateKey(AES, RED, [decrypt])\n[PASS] Bad algorithm: generateKey(AES, 7, [decrypt])\n[PASS] Bad algorithm: generateKey(AES, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, true, [deriveBits, sign, decrypt])\n[PASS] setup\n[PASS] Bad algorithm: generateKey(AES, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey(AES, true, [deriveBits, decrypt])\n[PASS] setup\n[PASS] Bad algorithm: generateKey(AES, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey(AES, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey(AES, false, [sign])\n[PASS] Bad algorithm: generateKey(AES, true, [sign])\n[PASS] Bad algorithm: generateKey(AES, RED, [sign])\n[PASS] Bad algorithm: generateKey(AES, 7, [sign])\n[PASS] Bad algorithm: generateKey(AES, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey(AES, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey(AES, RED, [deriveBits, sign])\n[PASS] AES-GCM 128-bit key, 32-bit tag, 96-bit iv\n[PASS] Bad algorithm: generateKey(AES, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey(AES, false, [deriveBits])\n[PASS] AES-GCM 128-bit key, no additional data, 32-bit tag, 96-bit iv\n[PASS] Bad algorithm: generateKey(AES, true, [deriveBits])\n[PASS] AES-GCM 128-bit key, 32-bit tag, 256-bit iv\n[PASS] AES-GCM 128-bit key, 64-bit tag, 96-bit iv\n[PASS] Bad algorithm: generateKey(AES, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey(AES, 7, [deriveBits])\n[PASS] AES-GCM 128-bit key, no additional data, 32-bit tag, 256-bit iv\n[PASS] Bad algorithm: generateKey(AES, false, [])\n[PASS] AES-GCM 128-bit key, no additional data, 64-bit tag, 96-bit iv\n[PASS] Bad algorithm: generateKey(AES, true, [])\n[PASS] Bad algorithm: generateKey(AES, RED, [])\n[PASS] Bad algorithm: generateKey(AES, 7, [])\n[PASS] Bad algorithm: generateKey(AES, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey(AES, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] AES-GCM 128-bit key, 64-bit tag, 256-bit iv\n[PASS] AES-GCM 128-bit key, no additional data, 64-bit tag, 256-bit iv\n[PASS] AES-GCM 128-bit key, 96-bit tag, 256-bit iv\n[PASS] Bad algorithm: generateKey(AES, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] AES-GCM 128-bit key, 96-bit tag, 96-bit iv\n[PASS] AES-GCM 128-bit key, no additional data, 96-bit tag, 96-bit iv\n[PASS] AES-GCM 128-bit key, 104-bit tag, 96-bit iv\n[PASS] AES-GCM 128-bit key, no additional data, 96-bit tag, 256-bit iv\n[PASS] Bad algorithm: generateKey(AES, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [sign, decrypt])\n[PASS] AES-GCM 128-bit key, 104-bit tag, 256-bit iv\n[PASS] AES-GCM 128-bit key, no additional data, 104-bit tag, 256-bit iv\n[PASS] AES-GCM 128-bit key, no additional data, 104-bit tag, 96-bit iv\n[PASS] AES-GCM 128-bit key, 112-bit tag, 96-bit iv\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [deriveBits, sign, decrypt])\n[PASS] AES-GCM 128-bit key, 112-bit tag, 256-bit iv\n[PASS] Bad algorithm: generateKey({name: AES}, true, [deriveBits, sign, decrypt])\n[PASS] AES-GCM 128-bit key, no additional data, 112-bit tag, 96-bit iv\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [deriveBits, sign, decrypt])\n[PASS] AES-GCM 128-bit key, no additional data, 112-bit tag, 256-bit iv\n[PASS] AES-GCM 128-bit key, 120-bit tag, 256-bit iv\n[PASS] Bad algorithm: generateKey({name: AES}, false, [deriveBits, decrypt])\n[PASS] AES-GCM 128-bit key, 120-bit tag, 96-bit iv\n[PASS] Bad algorithm: generateKey({name: AES}, true, [deriveBits, decrypt])\n[PASS] AES-GCM 128-bit key, no additional data, 120-bit tag, 256-bit iv\n[PASS] AES-GCM 128-bit key, no additional data, 120-bit tag, 96-bit iv\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [deriveBits, decrypt])\n[PASS] AES-GCM 128-bit key, 128-bit tag, 256-bit iv\n[PASS] AES-GCM 128-bit key, 128-bit tag, 96-bit iv\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [deriveBits, decrypt])\n[PASS] AES-GCM 128-bit key, no additional data, 128-bit tag, 256-bit iv\n[PASS] Bad algorithm: generateKey({name: AES}, false, [sign])\n[PASS] AES-GCM 128-bit key, no additional data, 128-bit tag, 96-bit iv\n[PASS] AES-GCM 192-bit key, 32-bit tag, 256-bit iv\n[PASS] Bad algorithm: generateKey({name: AES}, true, [sign])\n[PASS] AES-GCM 192-bit key, no additional data, 32-bit tag, 256-bit iv\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [sign])\n[PASS] AES-GCM 192-bit key, 64-bit tag, 256-bit iv\n[PASS] AES-GCM 192-bit key, 32-bit tag, 96-bit iv\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [sign])\n[PASS] AES-GCM 192-bit key, no additional data, 64-bit tag, 256-bit iv\n[PASS] Bad algorithm: generateKey({name: AES}, false, [deriveBits, sign])\n[PASS] AES-GCM 192-bit key, no additional data, 32-bit tag, 96-bit iv\n[PASS] AES-GCM 192-bit key, 96-bit tag, 256-bit iv\n[PASS] Bad algorithm: generateKey({name: AES}, true, [deriveBits, sign])\n[PASS] AES-GCM 192-bit key, 64-bit tag, 96-bit iv\n[PASS] AES-GCM 192-bit key, no additional data, 96-bit tag, 256-bit iv\n[PASS] AES-GCM 192-bit key, 104-bit tag, 256-bit iv\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [deriveBits])\n[PASS] AES-GCM 192-bit key, no additional data, 104-bit tag, 256-bit iv\n[PASS] AES-GCM 192-bit key, no additional data, 64-bit tag, 96-bit iv\n[PASS] AES-GCM 192-bit key, 96-bit tag, 96-bit iv\n[PASS] AES-GCM 192-bit key, no additional data, 96-bit tag, 96-bit iv\n[PASS] Bad algorithm: generateKey({name: AES}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [])\n[PASS] AES-GCM 192-bit key, 104-bit tag, 96-bit iv\n[PASS] AES-GCM 192-bit key, 112-bit tag, 256-bit iv\n[PASS] AES-GCM 192-bit key, no additional data, 112-bit tag, 256-bit iv\n[PASS] Bad algorithm: generateKey({name: AES}, true, [])\n[PASS] AES-GCM 192-bit key, no additional data, 104-bit tag, 96-bit iv\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [])\n[PASS] AES-GCM 192-bit key, 120-bit tag, 256-bit iv\n[PASS] AES-GCM 192-bit key, 112-bit tag, 96-bit iv\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] AES-GCM 192-bit key, no additional data, 112-bit tag, 96-bit iv\n[PASS] AES-GCM 192-bit key, no additional data, 120-bit tag, 256-bit iv\n[PASS] Bad algorithm: generateKey({name: AES}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] AES-GCM 192-bit key, 120-bit tag, 96-bit iv\n[PASS] AES-GCM 192-bit key, no additional data, 120-bit tag, 96-bit iv\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] AES-GCM 192-bit key, 128-bit tag, 256-bit iv\n[PASS] AES-GCM 192-bit key, no additional data, 128-bit tag, 256-bit iv\n[PASS] AES-GCM 192-bit key, 128-bit tag, 96-bit iv\n[PASS] AES-GCM 192-bit key, no additional data, 128-bit tag, 96-bit iv\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [decrypt])\n[PASS] AES-GCM 256-bit key, 32-bit tag, 256-bit iv\n[PASS] AES-GCM 256-bit key, no additional data, 32-bit tag, 256-bit iv\n[PASS] AES-GCM 256-bit key, 32-bit tag, 96-bit iv\n[PASS] AES-GCM 256-bit key, no additional data, 32-bit tag, 96-bit iv\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [sign, decrypt])\n[PASS] AES-GCM 256-bit key, 64-bit tag, 256-bit iv\n[PASS] AES-GCM 256-bit key, 64-bit tag, 96-bit iv\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [sign, decrypt])\n[PASS] AES-GCM 256-bit key, no additional data, 64-bit tag, 256-bit iv\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [sign, decrypt])\n[PASS] AES-GCM 256-bit key, 96-bit tag, 256-bit iv\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [sign, decrypt])\n[PASS] AES-GCM 256-bit key, no additional data, 64-bit tag, 96-bit iv\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [deriveBits, sign, decrypt])\n[PASS] AES-GCM 256-bit key, no additional data, 96-bit tag, 256-bit iv\n[PASS] AES-GCM 256-bit key, 96-bit tag, 96-bit iv\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [deriveBits, sign, decrypt])\n[PASS] AES-GCM 256-bit key, 104-bit tag, 256-bit iv\n[PASS] AES-GCM 256-bit key, no additional data, 96-bit tag, 96-bit iv\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [deriveBits, sign, decrypt])\n[PASS] AES-GCM 256-bit key, 104-bit tag, 96-bit iv\n[PASS] AES-GCM 256-bit key, no additional data, 104-bit tag, 256-bit iv\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [deriveBits, decrypt])\n[PASS] AES-GCM 256-bit key, 112-bit tag, 256-bit iv\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [deriveBits, decrypt])\n[PASS] AES-GCM 256-bit key, no additional data, 112-bit tag, 256-bit iv\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [deriveBits, decrypt])\n[PASS] AES-GCM 256-bit key, 120-bit tag, 256-bit iv\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [sign])\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, short salt, SHA-256, with 100000 iterations\n[PASS] AES-GCM 256-bit key, no additional data, 120-bit tag, 256-bit iv\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [sign])\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, short salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] AES-GCM 256-bit key, 128-bit tag, 256-bit iv\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [sign])\n[PASS] AES-GCM 256-bit key, no additional data, 128-bit tag, 256-bit iv\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, short salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [sign])\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, short salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] AES-GCM 256-bit key, no additional data, 104-bit tag, 96-bit iv\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [deriveBits, sign])\n[PASS] AES-GCM 128-bit key, 32-bit tag, 256-bit iv with altered plaintext\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [deriveBits, sign])\n[PASS] AES-GCM 128-bit key, no additional data, 32-bit tag, 256-bit iv with altered plaintext\n[PASS] AES-GCM 256-bit key, 112-bit tag, 96-bit iv\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [deriveBits, sign])\n[PASS] AES-GCM 256-bit key, no additional data, 112-bit tag, 96-bit iv\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [deriveBits, sign])\n[PASS] AES-GCM 128-bit key, 64-bit tag, 256-bit iv with altered plaintext\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [deriveBits])\n[PASS] AES-GCM 128-bit key, no additional data, 64-bit tag, 256-bit iv with altered plaintext\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [deriveBits])\n[PASS] AES-GCM 256-bit key, 120-bit tag, 96-bit iv\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [])\n[PASS] AES-GCM 128-bit key, 96-bit tag, 256-bit iv with altered plaintext\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [])\n[PASS] AES-GCM 256-bit key, no additional data, 120-bit tag, 96-bit iv\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [])\n[PASS] AES-GCM 128-bit key, no additional data, 96-bit tag, 256-bit iv with altered plaintext\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] AES-GCM 256-bit key, 128-bit tag, 96-bit iv\n[PASS] AES-GCM 128-bit key, 104-bit tag, 256-bit iv with altered plaintext\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] AES-GCM 128-bit key, no additional data, 104-bit tag, 256-bit iv with altered plaintext\n[PASS] AES-GCM 256-bit key, no additional data, 128-bit tag, 96-bit iv\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] AES-GCM 128-bit key, 112-bit tag, 256-bit iv with altered plaintext\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [decrypt])\n[PASS] AES-GCM 128-bit key, 32-bit tag, 96-bit iv with altered plaintext\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [decrypt])\n[PASS] AES-GCM 128-bit key, no additional data, 32-bit tag, 96-bit iv with altered plaintext\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [decrypt])\n[PASS] AES-GCM 128-bit key, 64-bit tag, 96-bit iv with altered plaintext\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [sign, decrypt])\n[PASS] AES-GCM 128-bit key, no additional data, 64-bit tag, 96-bit iv with altered plaintext\n[PASS] AES-GCM 128-bit key, no additional data, 112-bit tag, 256-bit iv with altered plaintext\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [sign, decrypt])\n[PASS] AES-GCM 128-bit key, 96-bit tag, 96-bit iv with altered plaintext\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [sign, decrypt])\n[PASS] AES-GCM 128-bit key, no additional data, 96-bit tag, 96-bit iv with altered plaintext\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [deriveBits, sign, decrypt])\n[PASS] AES-GCM 128-bit key, 104-bit tag, 96-bit iv with altered plaintext\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [deriveBits, sign, decrypt])\n[PASS] AES-GCM 128-bit key, no additional data, 104-bit tag, 96-bit iv with altered plaintext\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [deriveBits, sign, decrypt])\n[PASS] AES-GCM 128-bit key, 112-bit tag, 96-bit iv with altered plaintext\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [deriveBits, decrypt])\n[PASS] AES-GCM 128-bit key, no additional data, 112-bit tag, 96-bit iv with altered plaintext\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [deriveBits, decrypt])\n[PASS] AES-GCM 128-bit key, 120-bit tag, 96-bit iv with altered plaintext\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [sign])\n[PASS] AES-GCM 128-bit key, no additional data, 120-bit tag, 96-bit iv with altered plaintext\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [sign])\n[PASS] AES-GCM 128-bit key, 128-bit tag, 96-bit iv with altered plaintext\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [sign])\n[PASS] AES-GCM 128-bit key, no additional data, 128-bit tag, 96-bit iv with altered plaintext\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [deriveBits, sign])\n[PASS] AES-GCM 128-bit key, 120-bit tag, 256-bit iv with altered plaintext\n[PASS] AES-GCM 192-bit key, 32-bit tag, 96-bit iv with altered plaintext\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [deriveBits, sign])\n[PASS] AES-GCM 192-bit key, no additional data, 32-bit tag, 96-bit iv with altered plaintext\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [deriveBits, sign])\n[PASS] AES-GCM 192-bit key, 64-bit tag, 96-bit iv with altered plaintext\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [deriveBits])\n[PASS] AES-GCM 192-bit key, no additional data, 64-bit tag, 96-bit iv with altered plaintext\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [deriveBits])\n[PASS] AES-GCM 192-bit key, 96-bit tag, 96-bit iv with altered plaintext\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [deriveBits])\n[PASS] AES-GCM 192-bit key, no additional data, 96-bit tag, 96-bit iv with altered plaintext\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [deriveBits])\n[PASS] AES-GCM 192-bit key, 104-bit tag, 96-bit iv with altered plaintext\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [])\n[PASS] AES-GCM 128-bit key, no additional data, 120-bit tag, 256-bit iv with altered plaintext\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [])\n[PASS] AES-GCM 192-bit key, no additional data, 104-bit tag, 96-bit iv with altered plaintext\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [])\n[PASS] AES-GCM 192-bit key, 112-bit tag, 96-bit iv with altered plaintext\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [])\n[PASS] AES-GCM 192-bit key, no additional data, 112-bit tag, 96-bit iv with altered plaintext\n[PASS] AES-GCM 192-bit key, 120-bit tag, 96-bit iv with altered plaintext\n[PASS] AES-GCM 128-bit key, 128-bit tag, 256-bit iv with altered plaintext\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] AES-GCM 192-bit key, no additional data, 120-bit tag, 96-bit iv with altered plaintext\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] AES-GCM 192-bit key, 128-bit tag, 96-bit iv with altered plaintext\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] AES-GCM 192-bit key, no additional data, 128-bit tag, 96-bit iv with altered plaintext\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] AES-GCM 256-bit key, 32-bit tag, 96-bit iv with altered plaintext\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [decrypt])\n[PASS] AES-GCM 128-bit key, no additional data, 128-bit tag, 256-bit iv with altered plaintext\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [decrypt])\n[PASS] AES-GCM 256-bit key, no additional data, 32-bit tag, 96-bit iv with altered plaintext\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [decrypt])\n[PASS] AES-GCM 256-bit key, 64-bit tag, 96-bit iv with altered plaintext\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [decrypt])\n[PASS] AES-GCM 192-bit key, 32-bit tag, 256-bit iv with altered plaintext\n[PASS] AES-GCM 256-bit key, no additional data, 64-bit tag, 96-bit iv with altered plaintext\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [sign, decrypt])\n[PASS] AES-GCM 192-bit key, no additional data, 32-bit tag, 256-bit iv with altered plaintext\n[PASS] AES-GCM 256-bit key, 96-bit tag, 96-bit iv with altered plaintext\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [sign, decrypt])\n[PASS] AES-GCM 192-bit key, 64-bit tag, 256-bit iv with altered plaintext\n[PASS] AES-GCM 256-bit key, no additional data, 96-bit tag, 96-bit iv with altered plaintext\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [sign, decrypt])\n[PASS] AES-GCM 256-bit key, 104-bit tag, 96-bit iv with altered plaintext\n[PASS] AES-GCM 192-bit key, no additional data, 64-bit tag, 256-bit iv with altered plaintext\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [sign, decrypt])\n[PASS] AES-GCM 256-bit key, no additional data, 104-bit tag, 96-bit iv with altered plaintext\n[PASS] AES-GCM 192-bit key, 96-bit tag, 256-bit iv with altered plaintext\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [deriveBits, sign, decrypt])\n[PASS] AES-GCM 256-bit key, 112-bit tag, 96-bit iv with altered plaintext\n[PASS] AES-GCM 192-bit key, no additional data, 96-bit tag, 256-bit iv with altered plaintext\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [deriveBits, sign, decrypt])\n[PASS] AES-GCM 256-bit key, no additional data, 112-bit tag, 96-bit iv with altered plaintext\n[PASS] AES-GCM 192-bit key, 104-bit tag, 256-bit iv with altered plaintext\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [deriveBits, sign, decrypt])\n[PASS] AES-GCM 256-bit key, 120-bit tag, 96-bit iv with altered plaintext\n[PASS] AES-GCM 192-bit key, no additional data, 104-bit tag, 256-bit iv with altered plaintext\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [deriveBits, sign, decrypt])\n[PASS] AES-GCM 256-bit key, no additional data, 120-bit tag, 96-bit iv with altered plaintext\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [deriveBits, decrypt])\n[PASS] AES-GCM 192-bit key, 112-bit tag, 256-bit iv with altered plaintext\n[PASS] AES-GCM 256-bit key, 128-bit tag, 96-bit iv with altered plaintext\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [deriveBits, decrypt])\n[PASS] AES-GCM 192-bit key, no additional data, 112-bit tag, 256-bit iv with altered plaintext\n[PASS] AES-GCM 256-bit key, no additional data, 128-bit tag, 96-bit iv with altered plaintext\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [deriveBits, decrypt])\n[PASS] AES-GCM 192-bit key, 120-bit tag, 256-bit iv with altered plaintext\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [deriveBits, decrypt])\n[PASS] AES-GCM 192-bit key, no additional data, 120-bit tag, 256-bit iv with altered plaintext\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [sign])\n[PASS] AES-GCM 192-bit key, 128-bit tag, 256-bit iv with altered plaintext\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [sign])\n[PASS] AES-GCM 128-bit key, 32-bit tag, 96-bit iv decryption\n[PASS] AES-GCM 128-bit key, no additional data, 32-bit tag, 96-bit iv decryption\n[PASS] AES-GCM 192-bit key, no additional data, 128-bit tag, 256-bit iv with altered plaintext\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [sign])\n[PASS] AES-GCM 256-bit key, 32-bit tag, 256-bit iv with altered plaintext\n[PASS] AES-GCM 128-bit key, 64-bit tag, 96-bit iv decryption\n[PASS] AES-GCM 256-bit key, no additional data, 32-bit tag, 256-bit iv with altered plaintext\n[PASS] AES-GCM 128-bit key, no additional data, 64-bit tag, 96-bit iv decryption\n[PASS] AES-GCM 256-bit key, 64-bit tag, 256-bit iv with altered plaintext\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [sign])\n[PASS] AES-GCM 128-bit key, 96-bit tag, 96-bit iv decryption\n[PASS] AES-GCM 256-bit key, no additional data, 64-bit tag, 256-bit iv with altered plaintext\n[PASS] AES-GCM 128-bit key, no additional data, 96-bit tag, 96-bit iv decryption\n[PASS] AES-GCM 256-bit key, 96-bit tag, 256-bit iv with altered plaintext\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [deriveBits, sign])\n[PASS] AES-GCM 256-bit key, no additional data, 96-bit tag, 256-bit iv with altered plaintext\n[PASS] AES-GCM 128-bit key, 104-bit tag, 96-bit iv decryption\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [deriveBits])\n[PASS] AES-GCM 256-bit key, 104-bit tag, 256-bit iv with altered plaintext\n[PASS] AES-GCM 256-bit key, no additional data, 104-bit tag, 256-bit iv with altered plaintext\n[PASS] AES-GCM 256-bit key, 112-bit tag, 256-bit iv with altered plaintext\n[PASS] AES-GCM 256-bit key, no additional data, 112-bit tag, 256-bit iv with altered plaintext\n[PASS] AES-GCM 256-bit key, 120-bit tag, 256-bit iv with altered plaintext\n[PASS] AES-GCM 256-bit key, no additional data, 120-bit tag, 256-bit iv with altered plaintext\n[PASS] AES-GCM 256-bit key, 128-bit tag, 256-bit iv with altered plaintext\n[PASS] AES-GCM 256-bit key, no additional data, 128-bit tag, 256-bit iv with altered plaintext\n[PASS] AES-GCM 128-bit key, no additional data, 104-bit tag, 96-bit iv decryption\n[PASS] AES-GCM 128-bit key, 112-bit tag, 96-bit iv decryption\n[PASS] AES-GCM 128-bit key, no additional data, 112-bit tag, 96-bit iv decryption\n[PASS] AES-GCM 128-bit key, 120-bit tag, 96-bit iv decryption\n[PASS] AES-GCM 128-bit key, no additional data, 120-bit tag, 96-bit iv decryption\n[PASS] AES-GCM 128-bit key, 128-bit tag, 96-bit iv decryption\n[PASS] AES-GCM 128-bit key, no additional data, 128-bit tag, 96-bit iv decryption\n[PASS] AES-GCM 192-bit key, 32-bit tag, 96-bit iv decryption\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [])\n[PASS] AES-GCM 128-bit key, 32-bit tag, 256-bit iv decryption\n[PASS] AES-GCM 192-bit key, no additional data, 32-bit tag, 96-bit iv decryption\n[PASS] AES-GCM 192-bit key, 64-bit tag, 96-bit iv decryption\n[PASS] AES-GCM 192-bit key, no additional data, 64-bit tag, 96-bit iv decryption\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] AES-GCM 192-bit key, 96-bit tag, 96-bit iv decryption\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] AES-GCM 192-bit key, no additional data, 96-bit tag, 96-bit iv decryption\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] AES-GCM 192-bit key, 104-bit tag, 96-bit iv decryption\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] AES-GCM 192-bit key, no additional data, 104-bit tag, 96-bit iv decryption\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [decrypt])\n[PASS] AES-GCM 192-bit key, 112-bit tag, 96-bit iv decryption\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [decrypt])\n[PASS] AES-GCM 128-bit key, no additional data, 32-bit tag, 256-bit iv decryption\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [deriveBits, sign, decrypt])\n[PASS] AES-GCM 128-bit key, 64-bit tag, 256-bit iv decryption\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [deriveBits, decrypt])\n[PASS] AES-GCM 192-bit key, no additional data, 112-bit tag, 96-bit iv decryption\n[PASS] AES-GCM 128-bit key, no additional data, 64-bit tag, 256-bit iv decryption\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [deriveBits, decrypt])\n[PASS] AES-GCM 192-bit key, 120-bit tag, 96-bit iv decryption\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [deriveBits, decrypt])\n[PASS] AES-GCM 128-bit key, 96-bit tag, 256-bit iv decryption\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [deriveBits, decrypt])\n[PASS] AES-GCM 192-bit key, no additional data, 120-bit tag, 96-bit iv decryption\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [sign])\n[PASS] AES-GCM 192-bit key, 128-bit tag, 96-bit iv decryption\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [sign])\n[PASS] AES-GCM 128-bit key, no additional data, 96-bit tag, 256-bit iv decryption\n[PASS] AES-GCM 192-bit key, no additional data, 128-bit tag, 96-bit iv decryption\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [deriveBits, sign])\n[PASS] AES-GCM 256-bit key, 32-bit tag, 96-bit iv decryption\n[PASS] AES-GCM 256-bit key, no additional data, 32-bit tag, 96-bit iv decryption\n[PASS] AES-GCM 128-bit key, 104-bit tag, 256-bit iv decryption\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [deriveBits, sign])\n[PASS] AES-GCM 256-bit key, 64-bit tag, 96-bit iv decryption\n[PASS] AES-GCM 128-bit key, no additional data, 104-bit tag, 256-bit iv decryption\n[PASS] AES-GCM 256-bit key, no additional data, 64-bit tag, 96-bit iv decryption\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [deriveBits])\n[PASS] AES-GCM 256-bit key, 96-bit tag, 96-bit iv decryption\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [])\n[PASS] AES-GCM 256-bit key, no additional data, 96-bit tag, 96-bit iv decryption\n[PASS] AES-GCM 256-bit key, 104-bit tag, 96-bit iv decryption\n[PASS] AES-GCM 128-bit key, 112-bit tag, 256-bit iv decryption\n[PASS] AES-GCM 128-bit key, no additional data, 112-bit tag, 256-bit iv decryption\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] AES-GCM 256-bit key, no additional data, 104-bit tag, 96-bit iv decryption\n[PASS] AES-GCM 256-bit key, 112-bit tag, 96-bit iv decryption\n[PASS] AES-GCM 256-bit key, no additional data, 112-bit tag, 96-bit iv decryption\n[PASS] AES-GCM 128-bit key, 120-bit tag, 256-bit iv decryption\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] AES-GCM 256-bit key, 120-bit tag, 96-bit iv decryption\n[PASS] AES-GCM 256-bit key, no additional data, 120-bit tag, 96-bit iv decryption\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] AES-GCM 128-bit key, no additional data, 120-bit tag, 256-bit iv decryption\n[PASS] AES-GCM 256-bit key, 128-bit tag, 96-bit iv decryption\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [decrypt])\n[PASS] AES-GCM 128-bit key, 128-bit tag, 256-bit iv decryption\n[PASS] AES-GCM 256-bit key, no additional data, 128-bit tag, 96-bit iv decryption\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [decrypt])\n[PASS] AES-GCM 128-bit key, no additional data, 128-bit tag, 256-bit iv decryption\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [decrypt])\n[PASS] AES-GCM 128-bit key, 32-bit tag, 96-bit iv decryption with altered ciphertext\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [decrypt])\n[PASS] AES-GCM 192-bit key, 32-bit tag, 256-bit iv decryption\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [sign, decrypt])\n[PASS] AES-GCM 128-bit key, no additional data, 32-bit tag, 96-bit iv decryption with altered ciphertext\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign, decrypt])\n[PASS] AES-GCM 128-bit key, 64-bit tag, 96-bit iv decryption with altered ciphertext\n[PASS] AES-GCM 192-bit key, no additional data, 32-bit tag, 256-bit iv decryption\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [sign, decrypt])\n[PASS] AES-GCM 128-bit key, no additional data, 64-bit tag, 96-bit iv decryption with altered ciphertext\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [sign, decrypt])\n[PASS] AES-GCM 128-bit key, 96-bit tag, 96-bit iv decryption with altered ciphertext\n[PASS] AES-GCM 192-bit key, 64-bit tag, 256-bit iv decryption\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits, sign, decrypt])\n[PASS] AES-GCM 128-bit key, no additional data, 96-bit tag, 96-bit iv decryption with altered ciphertext\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits, sign, decrypt])\n[PASS] AES-GCM 128-bit key, 104-bit tag, 96-bit iv decryption with altered ciphertext\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits, sign, decrypt])\n[PASS] AES-GCM 128-bit key, no additional data, 104-bit tag, 96-bit iv decryption with altered ciphertext\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits, sign, decrypt])\n[PASS] AES-GCM 128-bit key, 112-bit tag, 96-bit iv decryption with altered ciphertext\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits, decrypt])\n[PASS] AES-GCM 128-bit key, no additional data, 112-bit tag, 96-bit iv decryption with altered ciphertext\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits, decrypt])\n[PASS] AES-GCM 128-bit key, 120-bit tag, 96-bit iv decryption with altered ciphertext\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits, decrypt])\n[PASS] AES-GCM 128-bit key, no additional data, 120-bit tag, 96-bit iv decryption with altered ciphertext\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [sign])\n[PASS] AES-GCM 128-bit key, 128-bit tag, 96-bit iv decryption with altered ciphertext\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign])\n[PASS] AES-GCM 192-bit key, no additional data, 64-bit tag, 256-bit iv decryption\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [sign])\n[PASS] AES-GCM 128-bit key, no additional data, 128-bit tag, 96-bit iv decryption with altered ciphertext\n[PASS] AES-GCM 192-bit key, 96-bit tag, 256-bit iv decryption\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [sign])\n[PASS] AES-GCM 192-bit key, 32-bit tag, 96-bit iv decryption with altered ciphertext\n[PASS] AES-GCM 192-bit key, no additional data, 96-bit tag, 256-bit iv decryption\n[PASS] AES-GCM 192-bit key, no additional data, 32-bit tag, 96-bit iv decryption with altered ciphertext\n[PASS] AES-GCM 192-bit key, 64-bit tag, 96-bit iv decryption with altered ciphertext\n[PASS] AES-GCM 192-bit key, 104-bit tag, 256-bit iv decryption\n[PASS] AES-GCM 192-bit key, no additional data, 104-bit tag, 256-bit iv decryption\n[PASS] AES-GCM 192-bit key, no additional data, 64-bit tag, 96-bit iv decryption with altered ciphertext\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits, sign])\n[PASS] AES-GCM 192-bit key, 96-bit tag, 96-bit iv decryption with altered ciphertext\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits, sign])\n[PASS] AES-GCM 192-bit key, no additional data, 96-bit tag, 96-bit iv decryption with altered ciphertext\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits])\n[PASS] AES-GCM 192-bit key, 104-bit tag, 96-bit iv decryption with altered ciphertext\n[PASS] AES-GCM 192-bit key, no additional data, 104-bit tag, 96-bit iv decryption with altered ciphertext\n[PASS] AES-GCM 192-bit key, 112-bit tag, 96-bit iv decryption with altered ciphertext\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [])\n[PASS] AES-GCM 192-bit key, no additional data, 112-bit tag, 96-bit iv decryption with altered ciphertext\n[PASS] AES-GCM 192-bit key, 120-bit tag, 96-bit iv decryption with altered ciphertext\n[PASS] AES-GCM 192-bit key, no additional data, 120-bit tag, 96-bit iv decryption with altered ciphertext\n[PASS] AES-GCM 192-bit key, 128-bit tag, 96-bit iv decryption with altered ciphertext\n[PASS] AES-GCM 192-bit key, 112-bit tag, 256-bit iv decryption\n[PASS] AES-GCM 192-bit key, no additional data, 112-bit tag, 256-bit iv decryption\n[PASS] AES-GCM 192-bit key, 120-bit tag, 256-bit iv decryption\n[PASS] AES-GCM 192-bit key, no additional data, 120-bit tag, 256-bit iv decryption\n[PASS] AES-GCM 192-bit key, 128-bit tag, 256-bit iv decryption\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] AES-GCM 192-bit key, no additional data, 128-bit tag, 96-bit iv decryption with altered ciphertext\n[PASS] AES-GCM 256-bit key, 32-bit tag, 96-bit iv decryption with altered ciphertext\n[PASS] AES-GCM 256-bit key, no additional data, 32-bit tag, 96-bit iv decryption with altered ciphertext\n[PASS] AES-GCM 192-bit key, no additional data, 128-bit tag, 256-bit iv decryption\n[PASS] AES-GCM 256-bit key, 64-bit tag, 96-bit iv decryption with altered ciphertext\n[PASS] AES-GCM 256-bit key, 32-bit tag, 256-bit iv decryption\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [decrypt])\n[PASS] AES-GCM 256-bit key, no additional data, 64-bit tag, 96-bit iv decryption with altered ciphertext\n[PASS] AES-GCM 256-bit key, no additional data, 32-bit tag, 256-bit iv decryption\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [decrypt])\n[PASS] AES-GCM 256-bit key, 96-bit tag, 96-bit iv decryption with altered ciphertext\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [decrypt])\n[PASS] AES-GCM 256-bit key, 64-bit tag, 256-bit iv decryption\n[PASS] AES-GCM 256-bit key, no additional data, 96-bit tag, 96-bit iv decryption with altered ciphertext\n[PASS] AES-GCM 256-bit key, no additional data, 64-bit tag, 256-bit iv decryption\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [decrypt])\n[PASS] AES-GCM 256-bit key, 104-bit tag, 96-bit iv decryption with altered ciphertext\n[PASS] AES-GCM 256-bit key, no additional data, 104-bit tag, 96-bit iv decryption with altered ciphertext\n[PASS] AES-GCM 256-bit key, 112-bit tag, 96-bit iv decryption with altered ciphertext\n[PASS] AES-GCM 256-bit key, no additional data, 112-bit tag, 96-bit iv decryption with altered ciphertext\n[PASS] AES-GCM 256-bit key, 120-bit tag, 96-bit iv decryption with altered ciphertext\n[PASS] AES-GCM 256-bit key, no additional data, 120-bit tag, 96-bit iv decryption with altered ciphertext\n[PASS] AES-GCM 256-bit key, 128-bit tag, 96-bit iv decryption with altered ciphertext\n[PASS] AES-GCM 256-bit key, no additional data, 128-bit tag, 96-bit iv decryption with altered ciphertext\n[PASS] AES-GCM 128-bit key, 32-bit tag, 96-bit iv without encrypt usage\n[PASS] AES-GCM 128-bit key, no additional data, 32-bit tag, 96-bit iv without encrypt usage\n[PASS] AES-GCM 256-bit key, 96-bit tag, 256-bit iv decryption\n[PASS] AES-GCM 256-bit key, no additional data, 96-bit tag, 256-bit iv decryption\n[PASS] AES-GCM 256-bit key, 104-bit tag, 256-bit iv decryption\n[PASS] AES-GCM 256-bit key, no additional data, 104-bit tag, 256-bit iv decryption\n[PASS] AES-GCM 256-bit key, 112-bit tag, 256-bit iv decryption\n[PASS] AES-GCM 256-bit key, no additional data, 112-bit tag, 256-bit iv decryption\n[PASS] AES-GCM 256-bit key, 120-bit tag, 256-bit iv decryption\n[PASS] AES-GCM 256-bit key, no additional data, 120-bit tag, 256-bit iv decryption\n[PASS] AES-GCM 256-bit key, 128-bit tag, 256-bit iv decryption\n[PASS] AES-GCM 256-bit key, no additional data, 128-bit tag, 256-bit iv decryption\n[PASS] AES-GCM 128-bit key, 32-bit tag, 256-bit iv decryption with altered ciphertext\n[PASS] AES-GCM 128-bit key, no additional data, 32-bit tag, 256-bit iv decryption with altered ciphertext\n[PASS] AES-GCM 128-bit key, 64-bit tag, 256-bit iv decryption with altered ciphertext\n[PASS] AES-GCM 128-bit key, no additional data, 64-bit tag, 256-bit iv decryption with altered ciphertext\n[PASS] AES-GCM 128-bit key, 96-bit tag, 256-bit iv decryption with altered ciphertext\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [])\n[PASS] AES-GCM 128-bit key, 64-bit tag, 96-bit iv without encrypt usage\n[PASS] AES-GCM 128-bit key, no additional data, 64-bit tag, 96-bit iv without encrypt usage\n[PASS] AES-GCM 128-bit key, 96-bit tag, 96-bit iv without encrypt usage\n[PASS] AES-GCM 128-bit key, no additional data, 96-bit tag, 96-bit iv without encrypt usage\n[PASS] AES-GCM 128-bit key, 104-bit tag, 96-bit iv without encrypt usage\n[PASS] AES-GCM 128-bit key, no additional data, 104-bit tag, 96-bit iv without encrypt usage\n[PASS] AES-GCM 128-bit key, 112-bit tag, 96-bit iv without encrypt usage\n[PASS] AES-GCM 128-bit key, no additional data, 112-bit tag, 96-bit iv without encrypt usage\n[PASS] AES-GCM 128-bit key, 120-bit tag, 96-bit iv without encrypt usage\n[PASS] AES-GCM 128-bit key, no additional data, 120-bit tag, 96-bit iv without encrypt usage\n[PASS] AES-GCM 128-bit key, 128-bit tag, 96-bit iv without encrypt usage\n[PASS] AES-GCM 128-bit key, no additional data, 128-bit tag, 96-bit iv without encrypt usage\n[PASS] AES-GCM 192-bit key, 32-bit tag, 96-bit iv without encrypt usage\n[PASS] AES-GCM 192-bit key, no additional data, 32-bit tag, 96-bit iv without encrypt usage\n[PASS] AES-GCM 192-bit key, 64-bit tag, 96-bit iv without encrypt usage\n[PASS] AES-GCM 192-bit key, no additional data, 64-bit tag, 96-bit iv without encrypt usage\n[PASS] AES-GCM 192-bit key, 96-bit tag, 96-bit iv without encrypt usage\n[PASS] AES-GCM 192-bit key, no additional data, 96-bit tag, 96-bit iv without encrypt usage\n[PASS] AES-GCM 192-bit key, 104-bit tag, 96-bit iv without encrypt usage\n[PASS] AES-GCM 192-bit key, no additional data, 104-bit tag, 96-bit iv without encrypt usage\n[PASS] AES-GCM 192-bit key, 112-bit tag, 96-bit iv without encrypt usage\n[PASS] AES-GCM 192-bit key, no additional data, 112-bit tag, 96-bit iv without encrypt usage\n[PASS] AES-GCM 192-bit key, 120-bit tag, 96-bit iv without encrypt usage\n[PASS] AES-GCM 192-bit key, no additional data, 120-bit tag, 96-bit iv without encrypt usage\n[PASS] AES-GCM 192-bit key, 128-bit tag, 96-bit iv without encrypt usage\n[PASS] AES-GCM 128-bit key, no additional data, 96-bit tag, 256-bit iv decryption with altered ciphertext\n[PASS] AES-GCM 128-bit key, 104-bit tag, 256-bit iv decryption with altered ciphertext\n[PASS] AES-GCM 128-bit key, no additional data, 104-bit tag, 256-bit iv decryption with altered ciphertext\n[PASS] AES-GCM 128-bit key, 112-bit tag, 256-bit iv decryption with altered ciphertext\n[PASS] AES-GCM 128-bit key, no additional data, 112-bit tag, 256-bit iv decryption with altered ciphertext\n[PASS] AES-GCM 128-bit key, 120-bit tag, 256-bit iv decryption with altered ciphertext\n[PASS] AES-GCM 128-bit key, no additional data, 120-bit tag, 256-bit iv decryption with altered ciphertext\n[PASS] AES-GCM 128-bit key, 128-bit tag, 256-bit iv decryption with altered ciphertext\n[PASS] AES-GCM 128-bit key, no additional data, 128-bit tag, 256-bit iv decryption with altered ciphertext\n[PASS] AES-GCM 192-bit key, 32-bit tag, 256-bit iv decryption with altered ciphertext\n[PASS] AES-GCM 192-bit key, no additional data, 32-bit tag, 256-bit iv decryption with altered ciphertext\n[PASS] AES-GCM 192-bit key, 64-bit tag, 256-bit iv decryption with altered ciphertext\n[PASS] AES-GCM 192-bit key, no additional data, 64-bit tag, 256-bit iv decryption with altered ciphertext\n[PASS] AES-GCM 192-bit key, 96-bit tag, 256-bit iv decryption with altered ciphertext\n[PASS] AES-GCM 192-bit key, no additional data, 96-bit tag, 256-bit iv decryption with altered ciphertext\n[PASS] AES-GCM 192-bit key, 104-bit tag, 256-bit iv decryption with altered ciphertext\n[PASS] AES-GCM 192-bit key, no additional data, 104-bit tag, 256-bit iv decryption with altered ciphertext\n[PASS] AES-GCM 192-bit key, 112-bit tag, 256-bit iv decryption with altered ciphertext\n[PASS] AES-GCM 192-bit key, no additional data, 112-bit tag, 256-bit iv decryption with altered ciphertext\n[PASS] AES-GCM 192-bit key, 120-bit tag, 256-bit iv decryption with altered ciphertext\n[PASS] AES-GCM 192-bit key, no additional data, 120-bit tag, 256-bit iv decryption with altered ciphertext\n[PASS] AES-GCM 192-bit key, 128-bit tag, 256-bit iv decryption with altered ciphertext\n[PASS] AES-GCM 192-bit key, no additional data, 128-bit tag, 256-bit iv decryption with altered ciphertext\n[PASS] AES-GCM 256-bit key, 32-bit tag, 256-bit iv decryption with altered ciphertext\n[PASS] AES-GCM 256-bit key, no additional data, 32-bit tag, 256-bit iv decryption with altered ciphertext\n[PASS] AES-GCM 256-bit key, 64-bit tag, 256-bit iv decryption with altered ciphertext\n[PASS] AES-GCM 256-bit key, no additional data, 64-bit tag, 256-bit iv decryption with altered ciphertext\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [])\n[PASS] AES-GCM 192-bit key, no additional data, 128-bit tag, 96-bit iv without encrypt usage\n[PASS] AES-GCM 256-bit key, 32-bit tag, 96-bit iv without encrypt usage\n[PASS] AES-GCM 256-bit key, no additional data, 32-bit tag, 96-bit iv without encrypt usage\n[PASS] AES-GCM 256-bit key, 64-bit tag, 96-bit iv without encrypt usage\n[PASS] AES-GCM 256-bit key, no additional data, 64-bit tag, 96-bit iv without encrypt usage\n[PASS] AES-GCM 256-bit key, 96-bit tag, 96-bit iv without encrypt usage\n[PASS] AES-GCM 256-bit key, no additional data, 96-bit tag, 96-bit iv without encrypt usage\n[PASS] AES-GCM 256-bit key, 104-bit tag, 96-bit iv without encrypt usage\n[PASS] AES-GCM 256-bit key, no additional data, 104-bit tag, 96-bit iv without encrypt usage\n[PASS] AES-GCM 256-bit key, 112-bit tag, 96-bit iv without encrypt usage\n[PASS] AES-GCM 256-bit key, no additional data, 112-bit tag, 96-bit iv without encrypt usage\n[PASS] AES-GCM 256-bit key, 120-bit tag, 96-bit iv without encrypt usage\n[PASS] AES-GCM 256-bit key, no additional data, 120-bit tag, 96-bit iv without encrypt usage\n[PASS] AES-GCM 256-bit key, 128-bit tag, 96-bit iv without encrypt usage\n[PASS] AES-GCM 256-bit key, no additional data, 128-bit tag, 96-bit iv without encrypt usage\n[PASS] AES-GCM 128-bit key, 32-bit tag, 96-bit iv with mismatched key and algorithm\n[PASS] AES-GCM 128-bit key, no additional data, 32-bit tag, 96-bit iv with mismatched key and algorithm\n[PASS] AES-GCM 128-bit key, 64-bit tag, 96-bit iv with mismatched key and algorithm\n[PASS] AES-GCM 128-bit key, no additional data, 64-bit tag, 96-bit iv with mismatched key and algorithm\n[PASS] AES-GCM 128-bit key, 96-bit tag, 96-bit iv with mismatched key and algorithm\n[PASS] AES-GCM 128-bit key, no additional data, 96-bit tag, 96-bit iv with mismatched key and algorithm\n[PASS] AES-GCM 128-bit key, 104-bit tag, 96-bit iv with mismatched key and algorithm\n[PASS] AES-GCM 128-bit key, no additional data, 104-bit tag, 96-bit iv with mismatched key and algorithm\n[PASS] AES-GCM 128-bit key, 112-bit tag, 96-bit iv with mismatched key and algorithm\n[PASS] AES-GCM 128-bit key, no additional data, 112-bit tag, 96-bit iv with mismatched key and algorithm\n[PASS] AES-GCM 128-bit key, 120-bit tag, 96-bit iv with mismatched key and algorithm\n[PASS] AES-GCM 128-bit key, no additional data, 120-bit tag, 96-bit iv with mismatched key and algorithm\n[PASS] AES-GCM 128-bit key, 128-bit tag, 96-bit iv with mismatched key and algorithm\n[PASS] AES-GCM 128-bit key, no additional data, 128-bit tag, 96-bit iv with mismatched key and algorithm\n[PASS] AES-GCM 192-bit key, 32-bit tag, 96-bit iv with mismatched key and algorithm\n[PASS] AES-GCM 192-bit key, no additional data, 32-bit tag, 96-bit iv with mismatched key and algorithm\n[PASS] AES-GCM 192-bit key, 64-bit tag, 96-bit iv with mismatched key and algorithm\n[PASS] AES-GCM 192-bit key, no additional data, 64-bit tag, 96-bit iv with mismatched key and algorithm\n[PASS] AES-GCM 192-bit key, 96-bit tag, 96-bit iv with mismatched key and algorithm\n[PASS] AES-GCM 192-bit key, no additional data, 96-bit tag, 96-bit iv with mismatched key and algorithm\n[PASS] AES-GCM 192-bit key, 104-bit tag, 96-bit iv with mismatched key and algorithm\n[PASS] AES-GCM 192-bit key, no additional data, 104-bit tag, 96-bit iv with mismatched key and algorithm\n[PASS] AES-GCM 192-bit key, 112-bit tag, 96-bit iv with mismatched key and algorithm\n[PASS] AES-GCM 192-bit key, no additional data, 112-bit tag, 96-bit iv with mismatched key and algorithm\n[PASS] AES-GCM 256-bit key, 96-bit tag, 256-bit iv decryption with altered ciphertext\n[PASS] AES-GCM 256-bit key, no additional data, 96-bit tag, 256-bit iv decryption with altered ciphertext\n[PASS] AES-GCM 256-bit key, 104-bit tag, 256-bit iv decryption with altered ciphertext\n[PASS] AES-GCM 256-bit key, no additional data, 104-bit tag, 256-bit iv decryption with altered ciphertext\n[PASS] AES-GCM 256-bit key, 112-bit tag, 256-bit iv decryption with altered ciphertext\n[PASS] AES-GCM 256-bit key, no additional data, 112-bit tag, 256-bit iv decryption with altered ciphertext\n[PASS] AES-GCM 256-bit key, 120-bit tag, 256-bit iv decryption with altered ciphertext\n[PASS] AES-GCM 256-bit key, no additional data, 120-bit tag, 256-bit iv decryption with altered ciphertext\n[PASS] AES-GCM 256-bit key, 128-bit tag, 256-bit iv decryption with altered ciphertext\n[PASS] AES-GCM 256-bit key, no additional data, 128-bit tag, 256-bit iv decryption with altered ciphertext\n[PASS] AES-GCM 128-bit key, 32-bit tag, 256-bit iv without encrypt usage\n[PASS] AES-GCM 128-bit key, no additional data, 32-bit tag, 256-bit iv without encrypt usage\n[PASS] AES-GCM 128-bit key, 64-bit tag, 256-bit iv without encrypt usage\n[PASS] AES-GCM 128-bit key, no additional data, 64-bit tag, 256-bit iv without encrypt usage\n[PASS] AES-GCM 128-bit key, 96-bit tag, 256-bit iv without encrypt usage\n[PASS] AES-GCM 128-bit key, no additional data, 96-bit tag, 256-bit iv without encrypt usage\n[PASS] AES-GCM 128-bit key, 104-bit tag, 256-bit iv without encrypt usage\n[PASS] AES-GCM 128-bit key, no additional data, 104-bit tag, 256-bit iv without encrypt usage\n[PASS] AES-GCM 128-bit key, 112-bit tag, 256-bit iv without encrypt usage\n[PASS] AES-GCM 128-bit key, no additional data, 112-bit tag, 256-bit iv without encrypt usage\n[PASS] AES-GCM 128-bit key, 120-bit tag, 256-bit iv without encrypt usage\n[PASS] AES-GCM 128-bit key, no additional data, 120-bit tag, 256-bit iv without encrypt usage\n[PASS] AES-GCM 128-bit key, 128-bit tag, 256-bit iv without encrypt usage\n[PASS] AES-GCM 128-bit key, no additional data, 128-bit tag, 256-bit iv without encrypt usage\n[PASS] AES-GCM 192-bit key, 32-bit tag, 256-bit iv without encrypt usage\n[PASS] AES-GCM 192-bit key, no additional data, 32-bit tag, 256-bit iv without encrypt usage\n[PASS] AES-GCM 192-bit key, 64-bit tag, 256-bit iv without encrypt usage\n[PASS] AES-GCM 192-bit key, no additional data, 64-bit tag, 256-bit iv without encrypt usage\n[PASS] AES-GCM 192-bit key, 96-bit tag, 256-bit iv without encrypt usage\n[PASS] AES-GCM 192-bit key, no additional data, 96-bit tag, 256-bit iv without encrypt usage\n[PASS] AES-GCM 192-bit key, 104-bit tag, 256-bit iv without encrypt usage\n[PASS] AES-GCM 192-bit key, no additional data, 104-bit tag, 256-bit iv without encrypt usage\n[PASS] AES-GCM 192-bit key, 112-bit tag, 256-bit iv without encrypt usage\n[PASS] AES-GCM 192-bit key, no additional data, 112-bit tag, 256-bit iv without encrypt usage\n[PASS] AES-GCM 192-bit key, 120-bit tag, 256-bit iv without encrypt usage\n[PASS] AES-GCM 192-bit key, no additional data, 120-bit tag, 256-bit iv without encrypt usage\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CBC}, true, [sign])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CBC}, true, [encrypt, sign])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CBC}, true, [decrypt, encrypt, sign])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CBC}, true, [wrapKey, decrypt, encrypt, sign])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CBC}, true, [unwrapKey, wrapKey, decrypt, encrypt, sign])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CBC}, true, [unwrapKey, decrypt, encrypt, sign])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CBC}, true, [wrapKey, encrypt, sign])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CBC}, true, [unwrapKey, wrapKey, encrypt, sign])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CBC}, true, [unwrapKey, encrypt, sign])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CBC}, true, [decrypt, sign])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CBC}, true, [wrapKey, decrypt, sign])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CBC}, true, [unwrapKey, wrapKey, decrypt, sign])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CBC}, true, [unwrapKey, decrypt, sign])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CBC}, true, [wrapKey, sign])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CBC}, true, [unwrapKey, wrapKey, sign])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CBC}, true, [unwrapKey, sign])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CBC}, true, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey, sign])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CBC}, true, [verify])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CBC}, true, [encrypt, verify])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CBC}, true, [decrypt, encrypt, verify])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CBC}, true, [wrapKey, decrypt, encrypt, verify])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CBC}, true, [unwrapKey, wrapKey, decrypt, encrypt, verify])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CBC}, true, [unwrapKey, decrypt, encrypt, verify])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CBC}, true, [wrapKey, encrypt, verify])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CBC}, true, [unwrapKey, wrapKey, encrypt, verify])\n[PASS] AES-GCM 192-bit key, 120-bit tag, 96-bit iv with mismatched key and algorithm\n[PASS] AES-GCM 192-bit key, no additional data, 120-bit tag, 96-bit iv with mismatched key and algorithm\n[PASS] AES-GCM 192-bit key, 128-bit tag, 96-bit iv with mismatched key and algorithm\n[PASS] AES-GCM 192-bit key, no additional data, 128-bit tag, 96-bit iv with mismatched key and algorithm\n[PASS] AES-GCM 256-bit key, 32-bit tag, 96-bit iv with mismatched key and algorithm\n[PASS] AES-GCM 256-bit key, no additional data, 32-bit tag, 96-bit iv with mismatched key and algorithm\n[PASS] AES-GCM 256-bit key, 64-bit tag, 96-bit iv with mismatched key and algorithm\n[PASS] AES-GCM 256-bit key, no additional data, 64-bit tag, 96-bit iv with mismatched key and algorithm\n[PASS] AES-GCM 256-bit key, 96-bit tag, 96-bit iv with mismatched key and algorithm\n[PASS] AES-GCM 256-bit key, no additional data, 96-bit tag, 96-bit iv with mismatched key and algorithm\n[PASS] AES-GCM 256-bit key, 104-bit tag, 96-bit iv with mismatched key and algorithm\n[PASS] AES-GCM 256-bit key, no additional data, 104-bit tag, 96-bit iv with mismatched key and algorithm\n[PASS] AES-GCM 256-bit key, 112-bit tag, 96-bit iv with mismatched key and algorithm\n[PASS] AES-GCM 256-bit key, no additional data, 112-bit tag, 96-bit iv with mismatched key and algorithm\n[PASS] AES-GCM 256-bit key, 120-bit tag, 96-bit iv with mismatched key and algorithm\n[PASS] AES-GCM 256-bit key, no additional data, 120-bit tag, 96-bit iv with mismatched key and algorithm\n[PASS] AES-GCM 256-bit key, 128-bit tag, 96-bit iv with mismatched key and algorithm\n[PASS] AES-GCM 256-bit key, no additional data, 128-bit tag, 96-bit iv with mismatched key and algorithm\n[PASS] AES-GCM 128-bit key, 32-bit tag, 96-bit iv without decrypt usage\n[PASS] AES-GCM 128-bit key, no additional data, 32-bit tag, 96-bit iv without decrypt usage\n[PASS] AES-GCM 128-bit key, 64-bit tag, 96-bit iv without decrypt usage\n[PASS] AES-GCM 128-bit key, no additional data, 64-bit tag, 96-bit iv without decrypt usage\n[PASS] AES-GCM 128-bit key, 96-bit tag, 96-bit iv without decrypt usage\n[PASS] AES-GCM 128-bit key, no additional data, 96-bit tag, 96-bit iv without decrypt usage\n[PASS] AES-GCM 128-bit key, 104-bit tag, 96-bit iv without decrypt usage\n[PASS] AES-GCM 128-bit key, no additional data, 104-bit tag, 96-bit iv without decrypt usage\n[PASS] AES-GCM 128-bit key, 112-bit tag, 96-bit iv without decrypt usage\n[PASS] AES-GCM 128-bit key, no additional data, 112-bit tag, 96-bit iv without decrypt usage\n[PASS] AES-GCM 128-bit key, 120-bit tag, 96-bit iv without decrypt usage\n[PASS] AES-GCM 128-bit key, no additional data, 120-bit tag, 96-bit iv without decrypt usage\n[PASS] AES-GCM 128-bit key, 128-bit tag, 96-bit iv without decrypt usage\n[PASS] AES-GCM 128-bit key, no additional data, 128-bit tag, 96-bit iv without decrypt usage\n[PASS] AES-GCM 192-bit key, 128-bit tag, 256-bit iv without encrypt usage\n[PASS] AES-GCM 192-bit key, no additional data, 128-bit tag, 256-bit iv without encrypt usage\n[PASS] AES-GCM 256-bit key, 32-bit tag, 256-bit iv without encrypt usage\n[PASS] AES-GCM 256-bit key, no additional data, 32-bit tag, 256-bit iv without encrypt usage\n[PASS] AES-GCM 256-bit key, 64-bit tag, 256-bit iv without encrypt usage\n[PASS] AES-GCM 256-bit key, no additional data, 64-bit tag, 256-bit iv without encrypt usage\n[PASS] AES-GCM 256-bit key, 96-bit tag, 256-bit iv without encrypt usage\n[PASS] AES-GCM 256-bit key, no additional data, 96-bit tag, 256-bit iv without encrypt usage\n[PASS] AES-GCM 256-bit key, 104-bit tag, 256-bit iv without encrypt usage\n[PASS] AES-GCM 256-bit key, no additional data, 104-bit tag, 256-bit iv without encrypt usage\n[PASS] AES-GCM 256-bit key, 112-bit tag, 256-bit iv without encrypt usage\n[PASS] AES-GCM 256-bit key, no additional data, 112-bit tag, 256-bit iv without encrypt usage\n[PASS] AES-GCM 256-bit key, 120-bit tag, 256-bit iv without encrypt usage\n[PASS] AES-GCM 256-bit key, no additional data, 120-bit tag, 256-bit iv without encrypt usage\n[PASS] AES-GCM 256-bit key, 128-bit tag, 256-bit iv without encrypt usage\n[PASS] AES-GCM 256-bit key, no additional data, 128-bit tag, 256-bit iv without encrypt usage\n[PASS] AES-GCM 128-bit key, 32-bit tag, 256-bit iv with mismatched key and algorithm\n[PASS] AES-GCM 128-bit key, no additional data, 32-bit tag, 256-bit iv with mismatched key and algorithm\n[PASS] AES-GCM 128-bit key, 64-bit tag, 256-bit iv with mismatched key and algorithm\n[PASS] AES-GCM 128-bit key, no additional data, 64-bit tag, 256-bit iv with mismatched key and algorithm\n[PASS] AES-GCM 128-bit key, 96-bit tag, 256-bit iv with mismatched key and algorithm\n[PASS] AES-GCM 128-bit key, no additional data, 96-bit tag, 256-bit iv with mismatched key and algorithm\n[PASS] AES-GCM 128-bit key, 104-bit tag, 256-bit iv with mismatched key and algorithm\n[PASS] AES-GCM 128-bit key, no additional data, 104-bit tag, 256-bit iv with mismatched key and algorithm\n[PASS] AES-GCM 128-bit key, 112-bit tag, 256-bit iv with mismatched key and algorithm\n[PASS] AES-GCM 128-bit key, no additional data, 112-bit tag, 256-bit iv with mismatched key and algorithm\n[PASS] AES-GCM 128-bit key, 120-bit tag, 256-bit iv with mismatched key and algorithm\n[PASS] AES-GCM 128-bit key, no additional data, 120-bit tag, 256-bit iv with mismatched key and algorithm\n[PASS] AES-GCM 128-bit key, 128-bit tag, 256-bit iv with mismatched key and algorithm\n[PASS] AES-GCM 128-bit key, no additional data, 128-bit tag, 256-bit iv with mismatched key and algorithm\n[PASS] AES-GCM 192-bit key, 32-bit tag, 256-bit iv with mismatched key and algorithm\n[PASS] AES-GCM 192-bit key, no additional data, 32-bit tag, 256-bit iv with mismatched key and algorithm\n[PASS] AES-GCM 192-bit key, 64-bit tag, 256-bit iv with mismatched key and algorithm\n[PASS] AES-GCM 192-bit key, no additional data, 64-bit tag, 256-bit iv with mismatched key and algorithm\n[PASS] AES-GCM 192-bit key, 96-bit tag, 256-bit iv with mismatched key and algorithm\n[PASS] AES-GCM 192-bit key, no additional data, 96-bit tag, 256-bit iv with mismatched key and algorithm\n[PASS] AES-GCM 192-bit key, 104-bit tag, 256-bit iv with mismatched key and algorithm\n[PASS] AES-GCM 192-bit key, no additional data, 104-bit tag, 256-bit iv with mismatched key and algorithm\n[PASS] AES-GCM 192-bit key, 112-bit tag, 256-bit iv with mismatched key and algorithm\n[PASS] AES-GCM 192-bit key, no additional data, 112-bit tag, 256-bit iv with mismatched key and algorithm\n[PASS] AES-GCM 192-bit key, 120-bit tag, 256-bit iv with mismatched key and algorithm\n[PASS] AES-GCM 192-bit key, no additional data, 120-bit tag, 256-bit iv with mismatched key and algorithm\n[PASS] AES-GCM 192-bit key, 128-bit tag, 256-bit iv with mismatched key and algorithm\n[PASS] AES-GCM 192-bit key, no additional data, 128-bit tag, 256-bit iv with mismatched key and algorithm\n[PASS] AES-GCM 256-bit key, 32-bit tag, 256-bit iv with mismatched key and algorithm\n[PASS] AES-GCM 256-bit key, no additional data, 32-bit tag, 256-bit iv with mismatched key and algorithm\n[PASS] AES-GCM 256-bit key, 64-bit tag, 256-bit iv with mismatched key and algorithm\n[PASS] AES-GCM 256-bit key, no additional data, 64-bit tag, 256-bit iv with mismatched key and algorithm\n[PASS] AES-GCM 256-bit key, 96-bit tag, 256-bit iv with mismatched key and algorithm\n[PASS] AES-GCM 256-bit key, no additional data, 96-bit tag, 256-bit iv with mismatched key and algorithm\n[PASS] AES-GCM 256-bit key, 104-bit tag, 256-bit iv with mismatched key and algorithm\n[PASS] AES-GCM 256-bit key, no additional data, 104-bit tag, 256-bit iv with mismatched key and algorithm\n[PASS] AES-GCM 256-bit key, 112-bit tag, 256-bit iv with mismatched key and algorithm\n[PASS] AES-GCM 256-bit key, no additional data, 112-bit tag, 256-bit iv with mismatched key and algorithm\n[PASS] AES-GCM 256-bit key, 120-bit tag, 256-bit iv with mismatched key and algorithm\n[PASS] Bad usages: generateKey({length: 128, name: AES-CBC}, true, [unwrapKey, encrypt, verify])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CBC}, true, [decrypt, verify])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CBC}, true, [wrapKey, decrypt, verify])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CBC}, true, [unwrapKey, wrapKey, decrypt, verify])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CBC}, true, [unwrapKey, decrypt, verify])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CBC}, true, [wrapKey, verify])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CBC}, true, [unwrapKey, wrapKey, verify])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CBC}, true, [unwrapKey, verify])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CBC}, true, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey, verify])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CBC}, true, [deriveKey])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CBC}, true, [encrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CBC}, true, [decrypt, encrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CBC}, true, [wrapKey, decrypt, encrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CBC}, true, [unwrapKey, wrapKey, decrypt, encrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CBC}, true, [unwrapKey, decrypt, encrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CBC}, true, [wrapKey, encrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CBC}, true, [unwrapKey, wrapKey, encrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CBC}, true, [unwrapKey, encrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CBC}, true, [decrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CBC}, true, [wrapKey, decrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CBC}, true, [unwrapKey, wrapKey, decrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CBC}, true, [unwrapKey, decrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CBC}, true, [wrapKey, deriveKey])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CBC}, true, [unwrapKey, wrapKey, deriveKey])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CBC}, true, [unwrapKey, deriveKey])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CBC}, true, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey, deriveKey])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CBC}, true, [deriveBits])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CBC}, true, [encrypt, deriveBits])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CBC}, true, [decrypt, encrypt, deriveBits])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CBC}, true, [wrapKey, decrypt, encrypt, deriveBits])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CBC}, true, [unwrapKey, wrapKey, decrypt, encrypt, deriveBits])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CBC}, true, [unwrapKey, decrypt, encrypt, deriveBits])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CBC}, true, [wrapKey, encrypt, deriveBits])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CBC}, true, [unwrapKey, wrapKey, encrypt, deriveBits])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CBC}, true, [unwrapKey, encrypt, deriveBits])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CBC}, true, [decrypt, deriveBits])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CBC}, true, [wrapKey, decrypt, deriveBits])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CBC}, true, [unwrapKey, wrapKey, decrypt, deriveBits])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CBC}, true, [unwrapKey, decrypt, deriveBits])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CBC}, true, [wrapKey, deriveBits])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CBC}, true, [unwrapKey, wrapKey, deriveBits])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CBC}, true, [unwrapKey, deriveBits])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CBC}, true, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey, deriveBits])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CBC}, true, [sign])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CBC}, true, [encrypt, sign])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CBC}, true, [decrypt, encrypt, sign])\n[PASS] AES-GCM 192-bit key, 32-bit tag, 96-bit iv without decrypt usage\n[PASS] AES-GCM 192-bit key, no additional data, 32-bit tag, 96-bit iv without decrypt usage\n[PASS] AES-GCM 192-bit key, 64-bit tag, 96-bit iv without decrypt usage\n[PASS] AES-GCM 192-bit key, no additional data, 64-bit tag, 96-bit iv without decrypt usage\n[PASS] AES-GCM 192-bit key, 96-bit tag, 96-bit iv without decrypt usage\n[PASS] AES-GCM 192-bit key, no additional data, 96-bit tag, 96-bit iv without decrypt usage\n[PASS] AES-GCM 192-bit key, 104-bit tag, 96-bit iv without decrypt usage\n[PASS] AES-GCM 192-bit key, no additional data, 104-bit tag, 96-bit iv without decrypt usage\n[PASS] AES-GCM 192-bit key, 112-bit tag, 96-bit iv without decrypt usage\n[PASS] AES-GCM 192-bit key, no additional data, 112-bit tag, 96-bit iv without decrypt usage\n[PASS] AES-GCM 192-bit key, 120-bit tag, 96-bit iv without decrypt usage\n[PASS] AES-GCM 192-bit key, no additional data, 120-bit tag, 96-bit iv without decrypt usage\n[PASS] AES-GCM 192-bit key, 128-bit tag, 96-bit iv without decrypt usage\n[PASS] AES-GCM 192-bit key, no additional data, 128-bit tag, 96-bit iv without decrypt usage\n[PASS] AES-GCM 256-bit key, 32-bit tag, 96-bit iv without decrypt usage\n[PASS] AES-GCM 256-bit key, no additional data, 32-bit tag, 96-bit iv without decrypt usage\n[PASS] AES-GCM 256-bit key, 64-bit tag, 96-bit iv without decrypt usage\n[PASS] AES-GCM 256-bit key, no additional data, 64-bit tag, 96-bit iv without decrypt usage\n[PASS] AES-GCM 256-bit key, 96-bit tag, 96-bit iv without decrypt usage\n[PASS] AES-GCM 256-bit key, no additional data, 96-bit tag, 96-bit iv without decrypt usage\n[PASS] AES-GCM 256-bit key, 104-bit tag, 96-bit iv without decrypt usage\n[PASS] AES-GCM 256-bit key, no additional data, 104-bit tag, 96-bit iv without decrypt usage\n[PASS] AES-GCM 256-bit key, 112-bit tag, 96-bit iv without decrypt usage\n[PASS] AES-GCM 256-bit key, no additional data, 112-bit tag, 96-bit iv without decrypt usage\n[PASS] AES-GCM 256-bit key, 120-bit tag, 96-bit iv without decrypt usage\n[PASS] AES-GCM 256-bit key, no additional data, 120-bit tag, 96-bit iv without decrypt usage\n[PASS] AES-GCM 256-bit key, 128-bit tag, 96-bit iv without decrypt usage\n[PASS] AES-GCM 256-bit key, no additional data, 128-bit tag, 96-bit iv without decrypt usage\n[PASS] AES-GCM 128-bit key, 96-bit iv, illegal tag length 24-bits\n[PASS] AES-GCM 128-bit key, 96-bit iv, illegal tag length 48-bits\n[PASS] AES-GCM 128-bit key, 96-bit iv, illegal tag length 72-bits\n[PASS] AES-GCM 128-bit key, 96-bit iv, illegal tag length 95-bits\n[PASS] AES-GCM 128-bit key, 96-bit iv, illegal tag length 129-bits\n[PASS] AES-GCM 192-bit key, 96-bit iv, illegal tag length 24-bits\n[PASS] AES-GCM 192-bit key, 96-bit iv, illegal tag length 48-bits\n[PASS] AES-GCM 192-bit key, 96-bit iv, illegal tag length 72-bits\n[PASS] AES-GCM 192-bit key, 96-bit iv, illegal tag length 95-bits\n[PASS] AES-GCM 192-bit key, 96-bit iv, illegal tag length 129-bits\n[PASS] AES-GCM 256-bit key, 96-bit iv, illegal tag length 24-bits\n[PASS] AES-GCM 256-bit key, 96-bit iv, illegal tag length 48-bits\n[PASS] AES-GCM 256-bit key, 96-bit iv, illegal tag length 72-bits\n[PASS] AES-GCM 256-bit key, 96-bit iv, illegal tag length 95-bits\n[PASS] AES-GCM 256-bit key, 96-bit iv, illegal tag length 129-bits\n[PASS] AES-GCM 128-bit key, 96-bit iv, illegal tag length 24-bits decryption\n[PASS] AES-GCM 128-bit key, 96-bit iv, illegal tag length 48-bits decryption\n[PASS] AES-GCM 128-bit key, 96-bit iv, illegal tag length 72-bits decryption\n[PASS] AES-GCM 128-bit key, 96-bit iv, illegal tag length 95-bits decryption\n[PASS] AES-GCM 128-bit key, 96-bit iv, illegal tag length 129-bits decryption\n[PASS] AES-GCM 192-bit key, 96-bit iv, illegal tag length 24-bits decryption\n[PASS] AES-GCM 192-bit key, 96-bit iv, illegal tag length 48-bits decryption\n[PASS] AES-GCM 192-bit key, 96-bit iv, illegal tag length 72-bits decryption\n[PASS] AES-GCM 192-bit key, 96-bit iv, illegal tag length 95-bits decryption\n[PASS] AES-GCM 192-bit key, 96-bit iv, illegal tag length 129-bits decryption\n[PASS] AES-GCM 256-bit key, 96-bit iv, illegal tag length 24-bits decryption\n[PASS] AES-GCM 256-bit key, 96-bit iv, illegal tag length 48-bits decryption\n[PASS] AES-GCM 256-bit key, 96-bit iv, illegal tag length 72-bits decryption\n[PASS] AES-GCM 256-bit key, no additional data, 120-bit tag, 256-bit iv with mismatched key and algorithm\n[PASS] AES-GCM 256-bit key, 128-bit tag, 256-bit iv with mismatched key and algorithm\n[PASS] AES-GCM 256-bit key, no additional data, 128-bit tag, 256-bit iv with mismatched key and algorithm\n[PASS] AES-GCM 128-bit key, 32-bit tag, 256-bit iv without decrypt usage\n[PASS] AES-GCM 128-bit key, no additional data, 32-bit tag, 256-bit iv without decrypt usage\n[PASS] AES-GCM 128-bit key, 64-bit tag, 256-bit iv without decrypt usage\n[PASS] AES-GCM 128-bit key, no additional data, 64-bit tag, 256-bit iv without decrypt usage\n[PASS] AES-GCM 128-bit key, 96-bit tag, 256-bit iv without decrypt usage\n[PASS] AES-GCM 128-bit key, no additional data, 96-bit tag, 256-bit iv without decrypt usage\n[PASS] AES-GCM 128-bit key, 104-bit tag, 256-bit iv without decrypt usage\n[PASS] AES-GCM 128-bit key, no additional data, 104-bit tag, 256-bit iv without decrypt usage\n[PASS] AES-GCM 128-bit key, 112-bit tag, 256-bit iv without decrypt usage\n[PASS] AES-GCM 128-bit key, no additional data, 112-bit tag, 256-bit iv without decrypt usage\n[PASS] AES-GCM 128-bit key, 120-bit tag, 256-bit iv without decrypt usage\n[PASS] AES-GCM 128-bit key, no additional data, 120-bit tag, 256-bit iv without decrypt usage\n[PASS] AES-GCM 128-bit key, 128-bit tag, 256-bit iv without decrypt usage\n[PASS] AES-GCM 128-bit key, no additional data, 128-bit tag, 256-bit iv without decrypt usage\n[PASS] AES-GCM 192-bit key, 32-bit tag, 256-bit iv without decrypt usage\n[PASS] AES-GCM 192-bit key, no additional data, 32-bit tag, 256-bit iv without decrypt usage\n[PASS] AES-GCM 192-bit key, 64-bit tag, 256-bit iv without decrypt usage\n[PASS] AES-GCM 192-bit key, no additional data, 64-bit tag, 256-bit iv without decrypt usage\n[PASS] AES-GCM 192-bit key, 96-bit tag, 256-bit iv without decrypt usage\n[PASS] AES-GCM 192-bit key, no additional data, 96-bit tag, 256-bit iv without decrypt usage\n[PASS] AES-GCM 192-bit key, 104-bit tag, 256-bit iv without decrypt usage\n[PASS] AES-GCM 192-bit key, no additional data, 104-bit tag, 256-bit iv without decrypt usage\n[PASS] AES-GCM 192-bit key, 112-bit tag, 256-bit iv without decrypt usage\n[PASS] AES-GCM 192-bit key, no additional data, 112-bit tag, 256-bit iv without decrypt usage\n[PASS] AES-GCM 192-bit key, 120-bit tag, 256-bit iv without decrypt usage\n[PASS] AES-GCM 192-bit key, no additional data, 120-bit tag, 256-bit iv without decrypt usage\n[PASS] AES-GCM 192-bit key, 128-bit tag, 256-bit iv without decrypt usage\n[PASS] AES-GCM 192-bit key, no additional data, 128-bit tag, 256-bit iv without decrypt usage\n[PASS] AES-GCM 256-bit key, 32-bit tag, 256-bit iv without decrypt usage\n[PASS] AES-GCM 256-bit key, no additional data, 32-bit tag, 256-bit iv without decrypt usage\n[PASS] AES-GCM 256-bit key, 64-bit tag, 256-bit iv without decrypt usage\n[PASS] AES-GCM 256-bit key, no additional data, 64-bit tag, 256-bit iv without decrypt usage\n[PASS] AES-GCM 256-bit key, 96-bit tag, 256-bit iv without decrypt usage\n[PASS] AES-GCM 256-bit key, no additional data, 96-bit tag, 256-bit iv without decrypt usage\n[PASS] AES-GCM 256-bit key, 104-bit tag, 256-bit iv without decrypt usage\n[PASS] AES-GCM 256-bit key, no additional data, 104-bit tag, 256-bit iv without decrypt usage\n[PASS] AES-GCM 256-bit key, 112-bit tag, 256-bit iv without decrypt usage\n[PASS] AES-GCM 256-bit key, no additional data, 112-bit tag, 256-bit iv without decrypt usage\n[PASS] AES-GCM 256-bit key, 120-bit tag, 256-bit iv without decrypt usage\n[PASS] AES-GCM 256-bit key, no additional data, 120-bit tag, 256-bit iv without decrypt usage\n[PASS] AES-GCM 256-bit key, 128-bit tag, 256-bit iv without decrypt usage\n[PASS] AES-GCM 256-bit key, no additional data, 128-bit tag, 256-bit iv without decrypt usage\n[PASS] AES-GCM 128-bit key, 256-bit iv, illegal tag length 24-bits\n[PASS] AES-GCM 128-bit key, 256-bit iv, illegal tag length 48-bits\n[PASS] AES-GCM 128-bit key, 256-bit iv, illegal tag length 72-bits\n[PASS] AES-GCM 128-bit key, 256-bit iv, illegal tag length 95-bits\n[PASS] AES-GCM 128-bit key, 256-bit iv, illegal tag length 129-bits\n[PASS] AES-GCM 192-bit key, 256-bit iv, illegal tag length 24-bits\n[PASS] AES-GCM 192-bit key, 256-bit iv, illegal tag length 48-bits\n[PASS] Bad usages: generateKey({length: 192, name: AES-CBC}, true, [wrapKey, decrypt, encrypt, sign])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CBC}, true, [unwrapKey, wrapKey, decrypt, encrypt, sign])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CBC}, true, [unwrapKey, decrypt, encrypt, sign])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CBC}, true, [wrapKey, encrypt, sign])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CBC}, true, [unwrapKey, wrapKey, encrypt, sign])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CBC}, true, [unwrapKey, encrypt, sign])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CBC}, true, [decrypt, sign])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CBC}, true, [wrapKey, decrypt, sign])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CBC}, true, [unwrapKey, wrapKey, decrypt, sign])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CBC}, true, [unwrapKey, decrypt, sign])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CBC}, true, [wrapKey, sign])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CBC}, true, [unwrapKey, wrapKey, sign])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CBC}, true, [unwrapKey, sign])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CBC}, true, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey, sign])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CBC}, true, [verify])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CBC}, true, [encrypt, verify])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CBC}, true, [decrypt, encrypt, verify])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CBC}, true, [wrapKey, decrypt, encrypt, verify])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CBC}, true, [unwrapKey, wrapKey, decrypt, encrypt, verify])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CBC}, true, [unwrapKey, decrypt, encrypt, verify])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CBC}, true, [wrapKey, encrypt, verify])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CBC}, true, [unwrapKey, wrapKey, encrypt, verify])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CBC}, true, [unwrapKey, encrypt, verify])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CBC}, true, [decrypt, verify])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CBC}, true, [wrapKey, decrypt, verify])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CBC}, true, [unwrapKey, wrapKey, decrypt, verify])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CBC}, true, [unwrapKey, decrypt, verify])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CBC}, true, [wrapKey, verify])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CBC}, true, [unwrapKey, wrapKey, verify])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CBC}, true, [unwrapKey, verify])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CBC}, true, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey, verify])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CBC}, true, [deriveKey])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CBC}, true, [encrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CBC}, true, [decrypt, encrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CBC}, true, [wrapKey, decrypt, encrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CBC}, true, [unwrapKey, wrapKey, decrypt, encrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CBC}, true, [unwrapKey, decrypt, encrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CBC}, true, [wrapKey, encrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CBC}, true, [unwrapKey, wrapKey, encrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CBC}, true, [unwrapKey, encrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CBC}, true, [decrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CBC}, true, [wrapKey, decrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CBC}, true, [unwrapKey, wrapKey, decrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CBC}, true, [unwrapKey, decrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CBC}, true, [wrapKey, deriveKey])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CBC}, true, [unwrapKey, wrapKey, deriveKey])\n[PASS] AES-GCM 256-bit key, 96-bit iv, illegal tag length 95-bits decryption\n[PASS] AES-GCM 256-bit key, 96-bit iv, illegal tag length 129-bits decryption\n[PASS] AES-GCM 192-bit key, 256-bit iv, illegal tag length 72-bits\n[PASS] AES-GCM 192-bit key, 256-bit iv, illegal tag length 95-bits\n[PASS] AES-GCM 192-bit key, 256-bit iv, illegal tag length 129-bits\n[PASS] AES-GCM 256-bit key, 256-bit iv, illegal tag length 24-bits\n[PASS] AES-GCM 256-bit key, 256-bit iv, illegal tag length 48-bits\n[PASS] AES-GCM 256-bit key, 256-bit iv, illegal tag length 72-bits\n[PASS] AES-GCM 256-bit key, 256-bit iv, illegal tag length 95-bits\n[PASS] AES-GCM 256-bit key, 256-bit iv, illegal tag length 129-bits\n[PASS] AES-GCM 128-bit key, 256-bit iv, illegal tag length 24-bits decryption\n[PASS] AES-GCM 128-bit key, 256-bit iv, illegal tag length 48-bits decryption\n[PASS] AES-GCM 128-bit key, 256-bit iv, illegal tag length 72-bits decryption\n[PASS] AES-GCM 128-bit key, 256-bit iv, illegal tag length 95-bits decryption\n[PASS] AES-GCM 128-bit key, 256-bit iv, illegal tag length 129-bits decryption\n[PASS] AES-GCM 192-bit key, 256-bit iv, illegal tag length 24-bits decryption\n[PASS] AES-GCM 192-bit key, 256-bit iv, illegal tag length 48-bits decryption\n[PASS] AES-GCM 192-bit key, 256-bit iv, illegal tag length 72-bits decryption\n[PASS] AES-GCM 192-bit key, 256-bit iv, illegal tag length 95-bits decryption\n[PASS] AES-GCM 192-bit key, 256-bit iv, illegal tag length 129-bits decryption\n[PASS] AES-GCM 256-bit key, 256-bit iv, illegal tag length 24-bits decryption\n[PASS] AES-GCM 256-bit key, 256-bit iv, illegal tag length 48-bits decryption\n[PASS] AES-GCM 256-bit key, 256-bit iv, illegal tag length 72-bits decryption\n[PASS] AES-GCM 256-bit key, 256-bit iv, illegal tag length 95-bits decryption\n[PASS] AES-GCM 256-bit key, 256-bit iv, illegal tag length 129-bits decryption\n[PASS] Bad usages: generateKey({length: 192, name: AES-CBC}, true, [unwrapKey, deriveKey])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CBC}, true, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey, deriveKey])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CBC}, true, [deriveBits])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CBC}, true, [encrypt, deriveBits])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CBC}, true, [decrypt, encrypt, deriveBits])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CBC}, true, [wrapKey, decrypt, encrypt, deriveBits])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CBC}, true, [unwrapKey, wrapKey, decrypt, encrypt, deriveBits])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CBC}, true, [unwrapKey, decrypt, encrypt, deriveBits])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CBC}, true, [wrapKey, encrypt, deriveBits])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CBC}, true, [unwrapKey, wrapKey, encrypt, deriveBits])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CBC}, true, [unwrapKey, encrypt, deriveBits])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CBC}, true, [decrypt, deriveBits])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CBC}, true, [wrapKey, decrypt, deriveBits])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CBC}, true, [unwrapKey, wrapKey, decrypt, deriveBits])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CBC}, true, [unwrapKey, decrypt, deriveBits])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CBC}, true, [wrapKey, deriveBits])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CBC}, true, [unwrapKey, wrapKey, deriveBits])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CBC}, true, [unwrapKey, deriveBits])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CBC}, true, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey, deriveBits])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CBC}, true, [sign])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CBC}, true, [encrypt, sign])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CBC}, true, [decrypt, encrypt, sign])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CBC}, true, [wrapKey, decrypt, encrypt, sign])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CBC}, true, [unwrapKey, wrapKey, decrypt, encrypt, sign])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CBC}, true, [unwrapKey, decrypt, encrypt, sign])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CBC}, true, [wrapKey, encrypt, sign])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CBC}, true, [unwrapKey, wrapKey, encrypt, sign])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CBC}, true, [unwrapKey, encrypt, sign])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CBC}, true, [decrypt, sign])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CBC}, true, [wrapKey, decrypt, sign])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CBC}, true, [unwrapKey, wrapKey, decrypt, sign])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CBC}, true, [unwrapKey, decrypt, sign])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CBC}, true, [wrapKey, sign])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CBC}, true, [unwrapKey, wrapKey, sign])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CBC}, true, [unwrapKey, sign])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CBC}, true, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey, sign])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CBC}, true, [verify])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CBC}, true, [encrypt, verify])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CBC}, true, [decrypt, encrypt, verify])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CBC}, true, [wrapKey, decrypt, encrypt, verify])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CBC}, true, [unwrapKey, wrapKey, decrypt, encrypt, verify])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CBC}, true, [unwrapKey, decrypt, encrypt, verify])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CBC}, true, [wrapKey, encrypt, verify])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CBC}, true, [unwrapKey, wrapKey, encrypt, verify])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CBC}, true, [unwrapKey, encrypt, verify])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CBC}, true, [decrypt, verify])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CBC}, true, [wrapKey, decrypt, verify])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CBC}, true, [unwrapKey, wrapKey, decrypt, verify])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CBC}, true, [unwrapKey, decrypt, verify])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CBC}, true, [wrapKey, verify])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CBC}, true, [unwrapKey, wrapKey, verify])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CBC}, true, [unwrapKey, verify])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CBC}, true, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey, verify])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CBC}, true, [deriveKey])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CBC}, true, [encrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CBC}, true, [decrypt, encrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CBC}, true, [wrapKey, decrypt, encrypt, deriveKey])\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, long salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, long salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, long salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, long salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Bad usages: generateKey({length: 256, name: AES-CBC}, true, [unwrapKey, wrapKey, decrypt, encrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CBC}, true, [unwrapKey, decrypt, encrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CBC}, true, [wrapKey, encrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CBC}, true, [unwrapKey, wrapKey, encrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CBC}, true, [unwrapKey, encrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CBC}, true, [decrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CBC}, true, [wrapKey, decrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CBC}, true, [unwrapKey, wrapKey, decrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CBC}, true, [unwrapKey, decrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CBC}, true, [wrapKey, deriveKey])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CBC}, true, [unwrapKey, wrapKey, deriveKey])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CBC}, true, [unwrapKey, deriveKey])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CBC}, true, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey, deriveKey])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CBC}, true, [deriveBits])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CBC}, true, [encrypt, deriveBits])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CBC}, true, [decrypt, encrypt, deriveBits])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CBC}, true, [wrapKey, decrypt, encrypt, deriveBits])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CBC}, true, [unwrapKey, wrapKey, decrypt, encrypt, deriveBits])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CBC}, true, [unwrapKey, decrypt, encrypt, deriveBits])\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, empty salt, SHA-512, with 100000 iterations\n[PASS] Bad usages: generateKey({length: 256, name: AES-CBC}, true, [wrapKey, encrypt, deriveBits])\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, empty salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Bad usages: generateKey({length: 256, name: AES-CBC}, true, [unwrapKey, wrapKey, encrypt, deriveBits])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CBC}, true, [unwrapKey, encrypt, deriveBits])\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, empty salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Bad usages: generateKey({length: 256, name: AES-CBC}, true, [decrypt, deriveBits])\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, empty salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Bad usages: generateKey({length: 256, name: AES-CBC}, true, [wrapKey, decrypt, deriveBits])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CBC}, true, [unwrapKey, wrapKey, decrypt, deriveBits])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CBC}, true, [unwrapKey, decrypt, deriveBits])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CBC}, true, [wrapKey, deriveBits])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CBC}, true, [unwrapKey, wrapKey, deriveBits])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CBC}, true, [unwrapKey, deriveBits])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CBC}, true, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey, deriveBits])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-CBC}, false, [encrypt])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-CBC}, true, [encrypt])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-CBC}, false, [decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-CBC}, true, [decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-CBC}, false, [wrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-CBC}, true, [wrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-CBC}, false, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-CBC}, true, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-CBC}, false, [unwrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-CBC}, true, [unwrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-CBC}, false, [wrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-CBC}, true, [wrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-CBC}, false, [unwrapKey, wrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-CBC}, true, [unwrapKey, wrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-CBC}, false, [unwrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-CBC}, true, [unwrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-CBC}, false, [decrypt])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-CBC}, true, [decrypt])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-CBC}, false, [wrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-CBC}, true, [wrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-CBC}, false, [unwrapKey, wrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-CBC}, true, [unwrapKey, wrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-CBC}, false, [unwrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-CBC}, true, [unwrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-CBC}, false, [wrapKey])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-CBC}, true, [wrapKey])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-CBC}, false, [unwrapKey, wrapKey])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-CBC}, true, [unwrapKey, wrapKey])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-CBC}, false, [unwrapKey])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-CBC}, true, [unwrapKey])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-CBC}, false, [])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-CBC}, true, [])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-CBC}, false, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-CBC}, true, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-CBC}, false, [encrypt])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-CBC}, true, [encrypt])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-CBC}, false, [decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-CBC}, true, [decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-CBC}, false, [wrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-CBC}, true, [wrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-CBC}, false, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-CBC}, true, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-CBC}, false, [unwrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-CBC}, true, [unwrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-CBC}, false, [wrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-CBC}, true, [wrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-CBC}, false, [unwrapKey, wrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-CBC}, true, [unwrapKey, wrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-CBC}, false, [unwrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-CBC}, true, [unwrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-CBC}, false, [decrypt])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-CBC}, true, [decrypt])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-CBC}, false, [wrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-CBC}, true, [wrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-CBC}, false, [unwrapKey, wrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-CBC}, true, [unwrapKey, wrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-CBC}, false, [unwrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-CBC}, true, [unwrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-CBC}, false, [wrapKey])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-CBC}, true, [wrapKey])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-CBC}, false, [unwrapKey, wrapKey])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-CBC}, true, [unwrapKey, wrapKey])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-CBC}, false, [unwrapKey])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-CBC}, true, [unwrapKey])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-CBC}, false, [])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-CBC}, true, [])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-CBC}, false, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-CBC}, true, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-CBC}, false, [encrypt])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-CBC}, true, [encrypt])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-CBC}, false, [decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-CBC}, true, [decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-CBC}, false, [wrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-CBC}, true, [wrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-CBC}, false, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-CBC}, true, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-CBC}, false, [unwrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-CBC}, true, [unwrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-CBC}, false, [wrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-CBC}, true, [wrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-CBC}, false, [unwrapKey, wrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-CBC}, true, [unwrapKey, wrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-CBC}, false, [unwrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-CBC}, true, [unwrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-CBC}, false, [decrypt])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-CBC}, true, [decrypt])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-CBC}, false, [wrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-CBC}, true, [wrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-CBC}, false, [unwrapKey, wrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-CBC}, true, [unwrapKey, wrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-CBC}, false, [unwrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-CBC}, true, [unwrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-CBC}, false, [wrapKey])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-CBC}, true, [wrapKey])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-CBC}, false, [unwrapKey, wrapKey])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-CBC}, true, [unwrapKey, wrapKey])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-CBC}, false, [unwrapKey])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-CBC}, true, [unwrapKey])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-CBC}, false, [])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-CBC}, true, [])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-CBC}, false, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-CBC}, true, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-CBC}, false, [encrypt])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-CBC}, true, [encrypt])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-CBC}, false, [decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-CBC}, true, [decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-CBC}, false, [wrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-CBC}, true, [wrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-CBC}, false, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-CBC}, true, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-CBC}, false, [unwrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-CBC}, true, [unwrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-CBC}, false, [wrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-CBC}, true, [wrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-CBC}, false, [unwrapKey, wrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-CBC}, true, [unwrapKey, wrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-CBC}, false, [unwrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-CBC}, true, [unwrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-CBC}, false, [decrypt])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-CBC}, true, [decrypt])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-CBC}, false, [wrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-CBC}, true, [wrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-CBC}, false, [unwrapKey, wrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-CBC}, true, [unwrapKey, wrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-CBC}, false, [unwrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-CBC}, true, [unwrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-CBC}, false, [wrapKey])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-CBC}, true, [wrapKey])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-CBC}, false, [unwrapKey, wrapKey])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-CBC}, true, [unwrapKey, wrapKey])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-CBC}, false, [unwrapKey])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-CBC}, true, [unwrapKey])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-CBC}, false, [])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-CBC}, true, [])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-CBC}, false, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-CBC}, true, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-CBC}, false, [encrypt])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-CBC}, true, [encrypt])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-CBC}, false, [decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-CBC}, true, [decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-CBC}, false, [wrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-CBC}, true, [wrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-CBC}, false, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-CBC}, true, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-CBC}, false, [unwrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-CBC}, true, [unwrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-CBC}, false, [wrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-CBC}, true, [wrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-CBC}, false, [unwrapKey, wrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-CBC}, true, [unwrapKey, wrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-CBC}, false, [unwrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-CBC}, true, [unwrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-CBC}, false, [decrypt])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-CBC}, true, [decrypt])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-CBC}, false, [wrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-CBC}, true, [wrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-CBC}, false, [unwrapKey, wrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-CBC}, true, [unwrapKey, wrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-CBC}, false, [unwrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-CBC}, true, [unwrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-CBC}, false, [wrapKey])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-CBC}, true, [wrapKey])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-CBC}, false, [unwrapKey, wrapKey])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-CBC}, true, [unwrapKey, wrapKey])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-CBC}, false, [unwrapKey])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-CBC}, true, [unwrapKey])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-CBC}, false, [])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-CBC}, true, [])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-CBC}, false, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-CBC}, true, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-CBC}, false, [encrypt])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-CBC}, true, [encrypt])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-CBC}, false, [decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-CBC}, true, [decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-CBC}, false, [wrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-CBC}, true, [wrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-CBC}, false, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-CBC}, true, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-CBC}, false, [unwrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-CBC}, true, [unwrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-CBC}, false, [wrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-CBC}, true, [wrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-CBC}, false, [unwrapKey, wrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-CBC}, true, [unwrapKey, wrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-CBC}, false, [unwrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-CBC}, true, [unwrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-CBC}, false, [decrypt])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-CBC}, true, [decrypt])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-CBC}, false, [wrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-CBC}, true, [wrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-CBC}, false, [unwrapKey, wrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-CBC}, true, [unwrapKey, wrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-CBC}, false, [unwrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-CBC}, true, [unwrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-CBC}, false, [wrapKey])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-CBC}, true, [wrapKey])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-CBC}, false, [unwrapKey, wrapKey])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-CBC}, true, [unwrapKey, wrapKey])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-CBC}, false, [unwrapKey])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-CBC}, true, [unwrapKey])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-CBC}, false, [])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-CBC}, true, [])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-CBC}, false, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-CBC}, true, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] Empty usages: generateKey({length: 128, name: AES-CBC}, false, [])\n[PASS] Empty usages: generateKey({length: 128, name: AES-CBC}, true, [])\n[PASS] Empty usages: generateKey({length: 192, name: AES-CBC}, false, [])\n[PASS] Empty usages: generateKey({length: 192, name: AES-CBC}, true, [])\n[PASS] Empty usages: generateKey({length: 256, name: AES-CBC}, false, [])\n[PASS] Empty usages: generateKey({length: 256, name: AES-CBC}, true, [])\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, short salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, short salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, short salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, short salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] setup\n[PASS] RSA-OAEP with SHA-1 and no label decryption\n[PASS] RSA-OAEP with SHA-256 and no label decryption\n[PASS] RSA-OAEP with SHA-384 and no label decryption\n[PASS] RSA-OAEP with SHA-512 and no label decryption\n[PASS] RSA-OAEP with SHA-1 and empty label decryption\n[PASS] RSA-OAEP with SHA-256 and empty label decryption\n[PASS] RSA-OAEP with SHA-384 and empty label decryption\n[PASS] RSA-OAEP with SHA-512 and empty label decryption\n[PASS] Bad algorithm: generateKey(AES, false, [decrypt])\n[PASS] Bad algorithm: generateKey(AES, true, [decrypt])\n[PASS] Bad algorithm: generateKey(AES, RED, [decrypt])\n[PASS] Bad algorithm: generateKey(AES, 7, [decrypt])\n[PASS] Bad algorithm: generateKey(AES, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, true, [sign, decrypt])\n[PASS] RSA-OAEP with SHA-1 and a label decryption\n[PASS] Bad algorithm: generateKey(AES, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey(AES, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey(AES, RED, [deriveBits, decrypt])\n[PASS] RSA-OAEP with SHA-256 and a label decryption\n[PASS] Bad algorithm: generateKey(AES, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey(AES, false, [sign])\n[PASS] Bad algorithm: generateKey(AES, true, [sign])\n[PASS] Bad algorithm: generateKey(AES, RED, [sign])\n[PASS] Bad algorithm: generateKey(AES, 7, [sign])\n[PASS] Bad algorithm: generateKey(AES, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey(AES, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey(AES, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey(AES, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey(AES, false, [deriveBits])\n[PASS] Bad algorithm: generateKey(AES, true, [deriveBits])\n[PASS] Bad algorithm: generateKey(AES, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey(AES, 7, [deriveBits])\n[PASS] RSA-OAEP with SHA-384 and a label decryption\n[PASS] Bad algorithm: generateKey(AES, false, [])\n[PASS] Bad algorithm: generateKey(AES, true, [])\n[PASS] Bad algorithm: generateKey(AES, RED, [])\n[PASS] Bad algorithm: generateKey(AES, 7, [])\n[PASS] Bad algorithm: generateKey(AES, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey(AES, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey(AES, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey(AES, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [deriveBits, sign, decrypt])\n[PASS] RSA-OAEP with SHA-512 and a label decryption\n[PASS] Bad algorithm: generateKey({name: AES}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [sign])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [sign])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [sign])\n[PASS] RSA-OAEP with SHA-1 and no label decryption with altered ciphertext\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [sign])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [sign, decrypt])\n[PASS] RSA-OAEP with SHA-256 and no label decryption with altered ciphertext\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [sign, decrypt])\n[PASS] RSA-OAEP with SHA-384 and no label decryption with altered ciphertext\n[PASS] RSA-OAEP with SHA-512 and no label decryption with altered ciphertext\n[PASS] RSA-OAEP with SHA-1 and empty label decryption with altered ciphertext\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [deriveBits, sign, decrypt])\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, long salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, long salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, long salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, long salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, false, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [deriveBits, decrypt])\n[PASS] RSA-OAEP with SHA-256 and empty label decryption with altered ciphertext\n[PASS] Bad algorithm: generateKey(AES, true, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey(AES, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [sign])\n[PASS] Bad algorithm: generateKey(AES, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey(AES, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey(AES, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey(AES, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey(AES, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [])\n[PASS] RSA-OAEP with SHA-384 and empty label decryption with altered ciphertext\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [])\n[PASS] Bad algorithm: generateKey(AES, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey(AES, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [decrypt])\n[PASS] Bad algorithm: generateKey(AES, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [decrypt])\n[PASS] Bad algorithm: generateKey(AES, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey(AES, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey(AES, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey(AES, false, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [deriveBits, sign, decrypt])\n[PASS] RSA-OAEP with SHA-512 and empty label decryption with altered ciphertext\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, true, [sign])\n[PASS] Bad algorithm: generateKey(AES, RED, [sign])\n[PASS] Bad algorithm: generateKey(AES, 7, [sign])\n[PASS] Bad algorithm: generateKey(AES, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey(AES, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey(AES, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [sign])\n[PASS] Bad algorithm: generateKey(AES, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey(AES, false, [deriveBits])\n[PASS] Bad algorithm: generateKey(AES, true, [deriveBits])\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, empty salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, empty salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, empty salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, empty salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey(AES, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey(AES, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey(AES, false, [])\n[PASS] Bad algorithm: generateKey(AES, true, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey(AES, RED, [])\n[PASS] RSA-OAEP with SHA-1 and a label decryption with altered ciphertext\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey(AES, 7, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey(AES, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [])\n[PASS] Bad algorithm: generateKey(AES, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey(AES, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey(AES, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [deriveBits, sign, decrypt])\n[PASS] RSA-OAEP with SHA-256 and a label decryption with altered ciphertext\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [sign])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [sign])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [sign])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [sign])\n[PASS] RSA-OAEP with SHA-384 and a label decryption with altered ciphertext\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] RSA-OAEP with SHA-512 and a label decryption with altered ciphertext\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [decrypt])\n[PASS] RSA-OAEP with SHA-1 and no label using publicKey to decrypt\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [sign, decrypt])\n[PASS] RSA-OAEP with SHA-256 and no label using publicKey to decrypt\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign, decrypt])\n[PASS] RSA-OAEP with SHA-384 and no label using publicKey to decrypt\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [sign, decrypt])\n[PASS] RSA-OAEP with SHA-512 and no label using publicKey to decrypt\n[PASS] RSA-OAEP with SHA-1 and empty label using publicKey to decrypt\n[PASS] RSA-OAEP with SHA-256 and empty label using publicKey to decrypt\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits, sign, decrypt])\n[PASS] RSA-OAEP with SHA-384 and empty label using publicKey to decrypt\n[PASS] RSA-OAEP with SHA-512 and empty label using publicKey to decrypt\n[PASS] RSA-OAEP with SHA-1 and a label using publicKey to decrypt\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits, decrypt])\n[PASS] RSA-OAEP with SHA-256 and a label using publicKey to decrypt\n[PASS] RSA-OAEP with SHA-384 and a label using publicKey to decrypt\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [])\n[PASS] RSA-OAEP with SHA-512 and a label using publicKey to decrypt\n[PASS] RSA-OAEP with SHA-1 and no label no decrypt usage\n[PASS] RSA-OAEP with SHA-256 and no label no decrypt usage\n[PASS] RSA-OAEP with SHA-384 and no label no decrypt usage\n[PASS] RSA-OAEP with SHA-512 and no label no decrypt usage\n[PASS] RSA-OAEP with SHA-1 and empty label no decrypt usage\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits])\n[PASS] RSA-OAEP with SHA-256 and empty label no decrypt usage\n[PASS] RSA-OAEP with SHA-384 and empty label no decrypt usage\n[PASS] RSA-OAEP with SHA-512 and empty label no decrypt usage\n[PASS] RSA-OAEP with SHA-1 and a label no decrypt usage\n[PASS] RSA-OAEP with SHA-256 and a label no decrypt usage\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] RSA-OAEP with SHA-384 and a label no decrypt usage\n[PASS] RSA-OAEP with SHA-512 and a label no decrypt usage\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits, decrypt])\n[PASS] RSA-OAEP with SHA-1 and no label with altered plaintext\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [deriveBits, sign, decrypt])\n[PASS] RSA-OAEP with SHA-256 and no label with altered plaintext\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [deriveBits, sign])\n[PASS] RSA-OAEP with SHA-384 and no label with altered plaintext\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [deriveBits])\n[PASS] RSA-OAEP with SHA-512 and no label with altered plaintext\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [deriveBits, sign])\n[PASS] Bad usages: generateKey({length: 128, name: AES-GCM}, true, [sign])\n[PASS] Bad usages: generateKey({length: 128, name: AES-GCM}, true, [encrypt, sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [deriveBits, sign])\n[PASS] RSA-OAEP with SHA-1 and empty label with altered plaintext\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [deriveBits, sign])\n[PASS] Bad usages: generateKey({length: 128, name: AES-GCM}, true, [decrypt, encrypt, sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [deriveBits])\n[PASS] Bad usages: generateKey({length: 128, name: AES-GCM}, true, [wrapKey, decrypt, encrypt, sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [])\n[PASS] Bad usages: generateKey({length: 128, name: AES-GCM}, true, [unwrapKey, wrapKey, decrypt, encrypt, sign])\n[PASS] Bad usages: generateKey({length: 128, name: AES-GCM}, true, [unwrapKey, decrypt, encrypt, sign])\n[PASS] Bad usages: generateKey({length: 128, name: AES-GCM}, true, [wrapKey, encrypt, sign])\n[PASS] Bad usages: generateKey({length: 128, name: AES-GCM}, true, [unwrapKey, wrapKey, encrypt, sign])\n[PASS] Bad usages: generateKey({length: 128, name: AES-GCM}, true, [unwrapKey, encrypt, sign])\n[PASS] Bad usages: generateKey({length: 128, name: AES-GCM}, true, [decrypt, sign])\n[PASS] Bad usages: generateKey({length: 128, name: AES-GCM}, true, [wrapKey, decrypt, sign])\n[PASS] Bad usages: generateKey({length: 128, name: AES-GCM}, true, [unwrapKey, wrapKey, decrypt, sign])\n[PASS] Bad usages: generateKey({length: 128, name: AES-GCM}, true, [unwrapKey, decrypt, sign])\n[PASS] Bad usages: generateKey({length: 128, name: AES-GCM}, true, [wrapKey, sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [decrypt])\n[PASS] Bad usages: generateKey({length: 128, name: AES-GCM}, true, [unwrapKey, wrapKey, sign])\n[PASS] Bad usages: generateKey({length: 128, name: AES-GCM}, true, [unwrapKey, sign])\n[PASS] Bad usages: generateKey({length: 128, name: AES-GCM}, true, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey, sign])\n[PASS] RSA-OAEP with SHA-256 and empty label with altered plaintext\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [decrypt])\n[PASS] Bad usages: generateKey({length: 128, name: AES-GCM}, true, [verify])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [decrypt])\n[PASS] Bad usages: generateKey({length: 128, name: AES-GCM}, true, [encrypt, verify])\n[PASS] Bad usages: generateKey({length: 128, name: AES-GCM}, true, [decrypt, encrypt, verify])\n[PASS] Bad usages: generateKey({length: 128, name: AES-GCM}, true, [wrapKey, decrypt, encrypt, verify])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [sign, decrypt])\n[PASS] Bad usages: generateKey({length: 128, name: AES-GCM}, true, [unwrapKey, wrapKey, decrypt, encrypt, verify])\n[PASS] Bad usages: generateKey({length: 128, name: AES-GCM}, true, [unwrapKey, decrypt, encrypt, verify])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits, sign, decrypt])\n[PASS] Bad usages: generateKey({length: 128, name: AES-GCM}, true, [wrapKey, encrypt, verify])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits, sign, decrypt])\n[PASS] Bad usages: generateKey({length: 128, name: AES-GCM}, true, [unwrapKey, wrapKey, encrypt, verify])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad usages: generateKey({length: 128, name: AES-GCM}, true, [unwrapKey, encrypt, verify])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad usages: generateKey({length: 128, name: AES-GCM}, true, [decrypt, verify])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits, decrypt])\n[PASS] RSA-OAEP with SHA-384 and empty label with altered plaintext\n[PASS] Bad usages: generateKey({length: 128, name: AES-GCM}, true, [wrapKey, decrypt, verify])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits, decrypt])\n[PASS] Bad usages: generateKey({length: 128, name: AES-GCM}, true, [unwrapKey, wrapKey, decrypt, verify])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits, decrypt])\n[PASS] Bad usages: generateKey({length: 128, name: AES-GCM}, true, [unwrapKey, decrypt, verify])\n[PASS] Bad usages: generateKey({length: 128, name: AES-GCM}, true, [wrapKey, verify])\n[PASS] Bad usages: generateKey({length: 128, name: AES-GCM}, true, [unwrapKey, wrapKey, verify])\n[PASS] Bad usages: generateKey({length: 128, name: AES-GCM}, true, [unwrapKey, verify])\n[PASS] Bad usages: generateKey({length: 128, name: AES-GCM}, true, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey, verify])\n[PASS] Bad usages: generateKey({length: 128, name: AES-GCM}, true, [deriveKey])\n[PASS] Bad usages: generateKey({length: 128, name: AES-GCM}, true, [encrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 128, name: AES-GCM}, true, [decrypt, encrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 128, name: AES-GCM}, true, [wrapKey, decrypt, encrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 128, name: AES-GCM}, true, [unwrapKey, wrapKey, decrypt, encrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 128, name: AES-GCM}, true, [unwrapKey, decrypt, encrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 128, name: AES-GCM}, true, [wrapKey, encrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 128, name: AES-GCM}, true, [unwrapKey, wrapKey, encrypt, deriveKey])\n[PASS] Bad algorithm: generateKey(AES, false, [decrypt])\n[PASS] Bad algorithm: generateKey(AES, true, [decrypt])\n[PASS] Bad algorithm: generateKey(AES, RED, [decrypt])\n[PASS] Bad algorithm: generateKey(AES, 7, [decrypt])\n[PASS] Bad usages: generateKey({length: 128, name: AES-GCM}, true, [unwrapKey, encrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 128, name: AES-GCM}, true, [decrypt, deriveKey])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits, sign])\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, short salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, short salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, short salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, short salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Bad algorithm: generateKey(AES, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, true, [sign, decrypt])\n[PASS] Bad usages: generateKey({length: 128, name: AES-GCM}, true, [wrapKey, decrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 128, name: AES-GCM}, true, [unwrapKey, wrapKey, decrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 128, name: AES-GCM}, true, [unwrapKey, decrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 128, name: AES-GCM}, true, [wrapKey, deriveKey])\n[PASS] Bad usages: generateKey({length: 128, name: AES-GCM}, true, [unwrapKey, wrapKey, deriveKey])\n[PASS] Bad usages: generateKey({length: 128, name: AES-GCM}, true, [unwrapKey, deriveKey])\n[PASS] Bad usages: generateKey({length: 128, name: AES-GCM}, true, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey, deriveKey])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [])\n[PASS] RSA-OAEP with SHA-512 and empty label with altered plaintext\n[PASS] Bad usages: generateKey({length: 128, name: AES-GCM}, true, [deriveBits])\n[PASS] Bad usages: generateKey({length: 128, name: AES-GCM}, true, [encrypt, deriveBits])\n[PASS] Bad usages: generateKey({length: 128, name: AES-GCM}, true, [decrypt, encrypt, deriveBits])\n[PASS] Bad usages: generateKey({length: 128, name: AES-GCM}, true, [wrapKey, decrypt, encrypt, deriveBits])\n[PASS] Bad usages: generateKey({length: 128, name: AES-GCM}, true, [unwrapKey, wrapKey, decrypt, encrypt, deriveBits])\n[PASS] Bad algorithm: generateKey(AES, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad usages: generateKey({length: 128, name: AES-GCM}, true, [unwrapKey, decrypt, encrypt, deriveBits])\n[PASS] Bad usages: generateKey({length: 128, name: AES-GCM}, true, [wrapKey, encrypt, deriveBits])\n[PASS] Bad usages: generateKey({length: 128, name: AES-GCM}, true, [unwrapKey, wrapKey, encrypt, deriveBits])\n[PASS] Bad usages: generateKey({length: 128, name: AES-GCM}, true, [unwrapKey, encrypt, deriveBits])\n[PASS] Bad algorithm: generateKey(AES, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey(AES, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey(AES, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey(AES, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey(AES, false, [sign])\n[PASS] Bad algorithm: generateKey(AES, true, [sign])\n[PASS] Bad algorithm: generateKey(AES, RED, [sign])\n[PASS] Bad algorithm: generateKey(AES, 7, [sign])\n[PASS] Bad algorithm: generateKey(AES, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey(AES, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey(AES, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey(AES, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey(AES, false, [deriveBits])\n[PASS] Bad algorithm: generateKey(AES, true, [deriveBits])\n[PASS] Bad algorithm: generateKey(AES, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey(AES, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey(AES, false, [])\n[PASS] Bad algorithm: generateKey(AES, true, [])\n[PASS] Bad algorithm: generateKey(AES, RED, [])\n[PASS] Bad usages: generateKey({length: 128, name: AES-GCM}, true, [decrypt, deriveBits])\n[PASS] Bad usages: generateKey({length: 128, name: AES-GCM}, true, [wrapKey, decrypt, deriveBits])\n[PASS] Bad usages: generateKey({length: 128, name: AES-GCM}, true, [unwrapKey, wrapKey, decrypt, deriveBits])\n[PASS] Bad usages: generateKey({length: 128, name: AES-GCM}, true, [unwrapKey, decrypt, deriveBits])\n[PASS] Bad usages: generateKey({length: 128, name: AES-GCM}, true, [wrapKey, deriveBits])\n[PASS] Bad usages: generateKey({length: 128, name: AES-GCM}, true, [unwrapKey, wrapKey, deriveBits])\n[PASS] Bad usages: generateKey({length: 128, name: AES-GCM}, true, [unwrapKey, deriveBits])\n[PASS] Bad usages: generateKey({length: 128, name: AES-GCM}, true, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey, deriveBits])\n[PASS] Bad usages: generateKey({length: 192, name: AES-GCM}, true, [sign])\n[PASS] Bad usages: generateKey({length: 192, name: AES-GCM}, true, [encrypt, sign])\n[PASS] Bad usages: generateKey({length: 192, name: AES-GCM}, true, [decrypt, encrypt, sign])\n[PASS] Bad usages: generateKey({length: 192, name: AES-GCM}, true, [wrapKey, decrypt, encrypt, sign])\n[PASS] Bad usages: generateKey({length: 192, name: AES-GCM}, true, [unwrapKey, wrapKey, decrypt, encrypt, sign])\n[PASS] Bad usages: generateKey({length: 192, name: AES-GCM}, true, [unwrapKey, decrypt, encrypt, sign])\n[PASS] Bad usages: generateKey({length: 192, name: AES-GCM}, true, [wrapKey, encrypt, sign])\n[PASS] Bad usages: generateKey({length: 192, name: AES-GCM}, true, [unwrapKey, wrapKey, encrypt, sign])\n[PASS] Bad usages: generateKey({length: 192, name: AES-GCM}, true, [unwrapKey, encrypt, sign])\n[PASS] Bad usages: generateKey({length: 192, name: AES-GCM}, true, [decrypt, sign])\n[PASS] Bad usages: generateKey({length: 192, name: AES-GCM}, true, [wrapKey, decrypt, sign])\n[PASS] Bad usages: generateKey({length: 192, name: AES-GCM}, true, [unwrapKey, wrapKey, decrypt, sign])\n[PASS] Bad usages: generateKey({length: 192, name: AES-GCM}, true, [unwrapKey, decrypt, sign])\n[PASS] Bad usages: generateKey({length: 192, name: AES-GCM}, true, [wrapKey, sign])\n[PASS] Bad usages: generateKey({length: 192, name: AES-GCM}, true, [unwrapKey, wrapKey, sign])\n[PASS] Bad usages: generateKey({length: 192, name: AES-GCM}, true, [unwrapKey, sign])\n[PASS] Bad usages: generateKey({length: 192, name: AES-GCM}, true, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey, sign])\n[PASS] Bad usages: generateKey({length: 192, name: AES-GCM}, true, [verify])\n[PASS] Bad usages: generateKey({length: 192, name: AES-GCM}, true, [encrypt, verify])\n[PASS] Bad usages: generateKey({length: 192, name: AES-GCM}, true, [decrypt, encrypt, verify])\n[PASS] Bad usages: generateKey({length: 192, name: AES-GCM}, true, [wrapKey, decrypt, encrypt, verify])\n[PASS] Bad usages: generateKey({length: 192, name: AES-GCM}, true, [unwrapKey, wrapKey, decrypt, encrypt, verify])\n[PASS] Bad usages: generateKey({length: 192, name: AES-GCM}, true, [unwrapKey, decrypt, encrypt, verify])\n[PASS] Bad usages: generateKey({length: 192, name: AES-GCM}, true, [wrapKey, encrypt, verify])\n[PASS] Bad usages: generateKey({length: 192, name: AES-GCM}, true, [unwrapKey, wrapKey, encrypt, verify])\n[PASS] Bad usages: generateKey({length: 192, name: AES-GCM}, true, [unwrapKey, encrypt, verify])\n[PASS] Bad usages: generateKey({length: 192, name: AES-GCM}, true, [decrypt, verify])\n[PASS] Bad usages: generateKey({length: 192, name: AES-GCM}, true, [wrapKey, decrypt, verify])\n[PASS] Bad usages: generateKey({length: 192, name: AES-GCM}, true, [unwrapKey, wrapKey, decrypt, verify])\n[PASS] Bad usages: generateKey({length: 192, name: AES-GCM}, true, [unwrapKey, decrypt, verify])\n[PASS] Bad usages: generateKey({length: 192, name: AES-GCM}, true, [wrapKey, verify])\n[PASS] Bad usages: generateKey({length: 192, name: AES-GCM}, true, [unwrapKey, wrapKey, verify])\n[PASS] Bad usages: generateKey({length: 192, name: AES-GCM}, true, [unwrapKey, verify])\n[PASS] Bad usages: generateKey({length: 192, name: AES-GCM}, true, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey, verify])\n[PASS] Bad usages: generateKey({length: 192, name: AES-GCM}, true, [deriveKey])\n[PASS] Bad usages: generateKey({length: 192, name: AES-GCM}, true, [encrypt, deriveKey])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CTR}, true, [sign])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CTR}, true, [encrypt, sign])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CTR}, true, [decrypt, encrypt, sign])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CTR}, true, [wrapKey, decrypt, encrypt, sign])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CTR}, true, [unwrapKey, wrapKey, decrypt, encrypt, sign])\n[PASS] Bad algorithm: generateKey(AES, 7, [])\n[PASS] Bad algorithm: generateKey(AES, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey(AES, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey(AES, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey(AES, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [sign])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [sign])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [sign])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [sign])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [deriveBits, sign, decrypt])\n[PASS] RSA-OAEP with SHA-1 and a label with altered plaintext\n[PASS] RSA-OAEP with SHA-256 and a label with altered plaintext\n[PASS] RSA-OAEP with SHA-384 and a label with altered plaintext\n[PASS] RSA-OAEP with SHA-512 and a label with altered plaintext\n[PASS] RSA-OAEP with SHA-1 and no label\n[PASS] RSA-OAEP with SHA-256 and no label\n[PASS] RSA-OAEP with SHA-384 and no label\n[PASS] Bad usages: generateKey({length: 192, name: AES-GCM}, true, [decrypt, encrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 192, name: AES-GCM}, true, [wrapKey, decrypt, encrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 192, name: AES-GCM}, true, [unwrapKey, wrapKey, decrypt, encrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 192, name: AES-GCM}, true, [unwrapKey, decrypt, encrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 192, name: AES-GCM}, true, [wrapKey, encrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 192, name: AES-GCM}, true, [unwrapKey, wrapKey, encrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 192, name: AES-GCM}, true, [unwrapKey, encrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 192, name: AES-GCM}, true, [decrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 192, name: AES-GCM}, true, [wrapKey, decrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 192, name: AES-GCM}, true, [unwrapKey, wrapKey, decrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 192, name: AES-GCM}, true, [unwrapKey, decrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 192, name: AES-GCM}, true, [wrapKey, deriveKey])\n[PASS] Bad usages: generateKey({length: 192, name: AES-GCM}, true, [unwrapKey, wrapKey, deriveKey])\n[PASS] Bad usages: generateKey({length: 192, name: AES-GCM}, true, [unwrapKey, deriveKey])\n[PASS] Bad usages: generateKey({length: 192, name: AES-GCM}, true, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey, deriveKey])\n[PASS] Bad usages: generateKey({length: 192, name: AES-GCM}, true, [deriveBits])\n[PASS] Bad usages: generateKey({length: 192, name: AES-GCM}, true, [encrypt, deriveBits])\n[PASS] Bad usages: generateKey({length: 192, name: AES-GCM}, true, [decrypt, encrypt, deriveBits])\n[PASS] Bad usages: generateKey({length: 192, name: AES-GCM}, true, [wrapKey, decrypt, encrypt, deriveBits])\n[PASS] Bad usages: generateKey({length: 192, name: AES-GCM}, true, [unwrapKey, wrapKey, decrypt, encrypt, deriveBits])\n[PASS] Bad usages: generateKey({length: 192, name: AES-GCM}, true, [unwrapKey, decrypt, encrypt, deriveBits])\n[PASS] Bad usages: generateKey({length: 192, name: AES-GCM}, true, [wrapKey, encrypt, deriveBits])\n[PASS] Bad usages: generateKey({length: 192, name: AES-GCM}, true, [unwrapKey, wrapKey, encrypt, deriveBits])\n[PASS] Bad usages: generateKey({length: 192, name: AES-GCM}, true, [unwrapKey, encrypt, deriveBits])\n[PASS] Bad usages: generateKey({length: 192, name: AES-GCM}, true, [decrypt, deriveBits])\n[PASS] Bad usages: generateKey({length: 192, name: AES-GCM}, true, [wrapKey, decrypt, deriveBits])\n[PASS] Bad usages: generateKey({length: 192, name: AES-GCM}, true, [unwrapKey, wrapKey, decrypt, deriveBits])\n[PASS] Bad usages: generateKey({length: 192, name: AES-GCM}, true, [unwrapKey, decrypt, deriveBits])\n[PASS] Bad usages: generateKey({length: 192, name: AES-GCM}, true, [wrapKey, deriveBits])\n[PASS] Bad usages: generateKey({length: 192, name: AES-GCM}, true, [unwrapKey, wrapKey, deriveBits])\n[PASS] Bad usages: generateKey({length: 192, name: AES-GCM}, true, [unwrapKey, deriveBits])\n[PASS] Bad usages: generateKey({length: 192, name: AES-GCM}, true, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey, deriveBits])\n[PASS] Bad usages: generateKey({length: 256, name: AES-GCM}, true, [sign])\n[PASS] Bad usages: generateKey({length: 256, name: AES-GCM}, true, [encrypt, sign])\n[PASS] Bad usages: generateKey({length: 256, name: AES-GCM}, true, [decrypt, encrypt, sign])\n[PASS] Bad usages: generateKey({length: 256, name: AES-GCM}, true, [wrapKey, decrypt, encrypt, sign])\n[PASS] Bad usages: generateKey({length: 256, name: AES-GCM}, true, [unwrapKey, wrapKey, decrypt, encrypt, sign])\n[PASS] Bad usages: generateKey({length: 256, name: AES-GCM}, true, [unwrapKey, decrypt, encrypt, sign])\n[PASS] Bad usages: generateKey({length: 256, name: AES-GCM}, true, [wrapKey, encrypt, sign])\n[PASS] Bad usages: generateKey({length: 256, name: AES-GCM}, true, [unwrapKey, wrapKey, encrypt, sign])\n[PASS] Bad usages: generateKey({length: 256, name: AES-GCM}, true, [unwrapKey, encrypt, sign])\n[PASS] Bad usages: generateKey({length: 256, name: AES-GCM}, true, [decrypt, sign])\n[PASS] Bad usages: generateKey({length: 256, name: AES-GCM}, true, [wrapKey, decrypt, sign])\n[PASS] Bad usages: generateKey({length: 256, name: AES-GCM}, true, [unwrapKey, wrapKey, decrypt, sign])\n[PASS] Bad usages: generateKey({length: 256, name: AES-GCM}, true, [unwrapKey, decrypt, sign])\n[PASS] Bad usages: generateKey({length: 256, name: AES-GCM}, true, [wrapKey, sign])\n[PASS] Bad usages: generateKey({length: 256, name: AES-GCM}, true, [unwrapKey, wrapKey, sign])\n[PASS] Bad usages: generateKey({length: 256, name: AES-GCM}, true, [unwrapKey, sign])\n[PASS] Bad usages: generateKey({length: 256, name: AES-GCM}, true, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey, sign])\n[PASS] Bad usages: generateKey({length: 256, name: AES-GCM}, true, [verify])\n[PASS] Bad usages: generateKey({length: 256, name: AES-GCM}, true, [encrypt, verify])\n[PASS] Bad usages: generateKey({length: 256, name: AES-GCM}, true, [decrypt, encrypt, verify])\n[PASS] Bad usages: generateKey({length: 256, name: AES-GCM}, true, [wrapKey, decrypt, encrypt, verify])\n[PASS] Bad usages: generateKey({length: 256, name: AES-GCM}, true, [unwrapKey, wrapKey, decrypt, encrypt, verify])\n[PASS] Bad usages: generateKey({length: 256, name: AES-GCM}, true, [unwrapKey, decrypt, encrypt, verify])\n[PASS] Bad usages: generateKey({length: 256, name: AES-GCM}, true, [wrapKey, encrypt, verify])\n[PASS] Bad usages: generateKey({length: 256, name: AES-GCM}, true, [unwrapKey, wrapKey, encrypt, verify])\n[PASS] Bad usages: generateKey({length: 256, name: AES-GCM}, true, [unwrapKey, encrypt, verify])\n[PASS] Bad usages: generateKey({length: 256, name: AES-GCM}, true, [decrypt, verify])\n[PASS] Bad usages: generateKey({length: 256, name: AES-GCM}, true, [wrapKey, decrypt, verify])\n[PASS] Bad usages: generateKey({length: 256, name: AES-GCM}, true, [unwrapKey, wrapKey, decrypt, verify])\n[PASS] Bad usages: generateKey({length: 256, name: AES-GCM}, true, [unwrapKey, decrypt, verify])\n[PASS] Bad usages: generateKey({length: 256, name: AES-GCM}, true, [wrapKey, verify])\n[PASS] Bad usages: generateKey({length: 256, name: AES-GCM}, true, [unwrapKey, wrapKey, verify])\n[PASS] Bad usages: generateKey({length: 256, name: AES-GCM}, true, [unwrapKey, verify])\n[PASS] Bad usages: generateKey({length: 256, name: AES-GCM}, true, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey, verify])\n[PASS] Bad usages: generateKey({length: 256, name: AES-GCM}, true, [deriveKey])\n[PASS] Bad usages: generateKey({length: 256, name: AES-GCM}, true, [encrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 256, name: AES-GCM}, true, [decrypt, encrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 256, name: AES-GCM}, true, [wrapKey, decrypt, encrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 256, name: AES-GCM}, true, [unwrapKey, wrapKey, decrypt, encrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 256, name: AES-GCM}, true, [unwrapKey, decrypt, encrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 256, name: AES-GCM}, true, [wrapKey, encrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 256, name: AES-GCM}, true, [unwrapKey, wrapKey, encrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CTR}, true, [unwrapKey, decrypt, encrypt, sign])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CTR}, true, [wrapKey, encrypt, sign])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CTR}, true, [unwrapKey, wrapKey, encrypt, sign])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CTR}, true, [unwrapKey, encrypt, sign])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CTR}, true, [decrypt, sign])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CTR}, true, [wrapKey, decrypt, sign])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CTR}, true, [unwrapKey, wrapKey, decrypt, sign])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CTR}, true, [unwrapKey, decrypt, sign])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CTR}, true, [wrapKey, sign])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CTR}, true, [unwrapKey, wrapKey, sign])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CTR}, true, [unwrapKey, sign])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CTR}, true, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey, sign])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CTR}, true, [verify])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CTR}, true, [encrypt, verify])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CTR}, true, [decrypt, encrypt, verify])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CTR}, true, [wrapKey, decrypt, encrypt, verify])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CTR}, true, [unwrapKey, wrapKey, decrypt, encrypt, verify])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CTR}, true, [unwrapKey, decrypt, encrypt, verify])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CTR}, true, [wrapKey, encrypt, verify])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CTR}, true, [unwrapKey, wrapKey, encrypt, verify])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CTR}, true, [unwrapKey, encrypt, verify])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CTR}, true, [decrypt, verify])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CTR}, true, [wrapKey, decrypt, verify])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CTR}, true, [unwrapKey, wrapKey, decrypt, verify])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CTR}, true, [unwrapKey, decrypt, verify])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CTR}, true, [wrapKey, verify])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CTR}, true, [unwrapKey, wrapKey, verify])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CTR}, true, [unwrapKey, verify])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CTR}, true, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey, verify])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CTR}, true, [deriveKey])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CTR}, true, [encrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CTR}, true, [decrypt, encrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CTR}, true, [wrapKey, decrypt, encrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CTR}, true, [unwrapKey, wrapKey, decrypt, encrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CTR}, true, [unwrapKey, decrypt, encrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CTR}, true, [wrapKey, encrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CTR}, true, [unwrapKey, wrapKey, encrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CTR}, true, [unwrapKey, encrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CTR}, true, [decrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CTR}, true, [wrapKey, decrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CTR}, true, [unwrapKey, wrapKey, decrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CTR}, true, [unwrapKey, decrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CTR}, true, [wrapKey, deriveKey])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CTR}, true, [unwrapKey, wrapKey, deriveKey])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CTR}, true, [unwrapKey, deriveKey])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CTR}, true, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey, deriveKey])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CTR}, true, [deriveBits])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CTR}, true, [encrypt, deriveBits])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CTR}, true, [decrypt, encrypt, deriveBits])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CTR}, true, [wrapKey, decrypt, encrypt, deriveBits])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CTR}, true, [unwrapKey, wrapKey, decrypt, encrypt, deriveBits])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CTR}, true, [unwrapKey, decrypt, encrypt, deriveBits])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CTR}, true, [wrapKey, encrypt, deriveBits])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CTR}, true, [unwrapKey, wrapKey, encrypt, deriveBits])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CTR}, true, [unwrapKey, encrypt, deriveBits])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CTR}, true, [decrypt, deriveBits])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CTR}, true, [wrapKey, decrypt, deriveBits])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CTR}, true, [unwrapKey, wrapKey, decrypt, deriveBits])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CTR}, true, [unwrapKey, decrypt, deriveBits])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CTR}, true, [wrapKey, deriveBits])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CTR}, true, [unwrapKey, wrapKey, deriveBits])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CTR}, true, [unwrapKey, deriveBits])\n[PASS] Bad usages: generateKey({length: 128, name: AES-CTR}, true, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey, deriveBits])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CTR}, true, [sign])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CTR}, true, [encrypt, sign])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CTR}, true, [decrypt, encrypt, sign])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CTR}, true, [wrapKey, decrypt, encrypt, sign])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CTR}, true, [unwrapKey, wrapKey, decrypt, encrypt, sign])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CTR}, true, [unwrapKey, decrypt, encrypt, sign])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CTR}, true, [wrapKey, encrypt, sign])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CTR}, true, [unwrapKey, wrapKey, encrypt, sign])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CTR}, true, [unwrapKey, encrypt, sign])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CTR}, true, [decrypt, sign])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CTR}, true, [wrapKey, decrypt, sign])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CTR}, true, [unwrapKey, wrapKey, decrypt, sign])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CTR}, true, [unwrapKey, decrypt, sign])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CTR}, true, [wrapKey, sign])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CTR}, true, [unwrapKey, wrapKey, sign])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CTR}, true, [unwrapKey, sign])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CTR}, true, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey, sign])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CTR}, true, [verify])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CTR}, true, [encrypt, verify])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [])\n[PASS] RSA-OAEP with SHA-512 and no label\n[PASS] RSA-OAEP with SHA-1 and empty label\n[PASS] RSA-OAEP with SHA-256 and empty label\n[PASS] Bad usages: generateKey({length: 256, name: AES-GCM}, true, [unwrapKey, encrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 256, name: AES-GCM}, true, [decrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 256, name: AES-GCM}, true, [wrapKey, decrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 256, name: AES-GCM}, true, [unwrapKey, wrapKey, decrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 256, name: AES-GCM}, true, [unwrapKey, decrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 256, name: AES-GCM}, true, [wrapKey, deriveKey])\n[PASS] Bad usages: generateKey({length: 256, name: AES-GCM}, true, [unwrapKey, wrapKey, deriveKey])\n[PASS] Bad usages: generateKey({length: 256, name: AES-GCM}, true, [unwrapKey, deriveKey])\n[PASS] Bad usages: generateKey({length: 256, name: AES-GCM}, true, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey, deriveKey])\n[PASS] Bad usages: generateKey({length: 256, name: AES-GCM}, true, [deriveBits])\n[PASS] Bad usages: generateKey({length: 256, name: AES-GCM}, true, [encrypt, deriveBits])\n[PASS] Bad usages: generateKey({length: 256, name: AES-GCM}, true, [decrypt, encrypt, deriveBits])\n[PASS] Bad usages: generateKey({length: 256, name: AES-GCM}, true, [wrapKey, decrypt, encrypt, deriveBits])\n[PASS] Bad usages: generateKey({length: 256, name: AES-GCM}, true, [unwrapKey, wrapKey, decrypt, encrypt, deriveBits])\n[PASS] Bad usages: generateKey({length: 256, name: AES-GCM}, true, [unwrapKey, decrypt, encrypt, deriveBits])\n[PASS] Bad usages: generateKey({length: 256, name: AES-GCM}, true, [wrapKey, encrypt, deriveBits])\n[PASS] Bad usages: generateKey({length: 256, name: AES-GCM}, true, [unwrapKey, wrapKey, encrypt, deriveBits])\n[PASS] Bad usages: generateKey({length: 256, name: AES-GCM}, true, [unwrapKey, encrypt, deriveBits])\n[PASS] Bad usages: generateKey({length: 256, name: AES-GCM}, true, [decrypt, deriveBits])\n[PASS] Bad usages: generateKey({length: 256, name: AES-GCM}, true, [wrapKey, decrypt, deriveBits])\n[PASS] Bad usages: generateKey({length: 256, name: AES-GCM}, true, [unwrapKey, wrapKey, decrypt, deriveBits])\n[PASS] Bad usages: generateKey({length: 256, name: AES-GCM}, true, [unwrapKey, decrypt, deriveBits])\n[PASS] Bad usages: generateKey({length: 256, name: AES-GCM}, true, [wrapKey, deriveBits])\n[PASS] Bad usages: generateKey({length: 256, name: AES-GCM}, true, [unwrapKey, wrapKey, deriveBits])\n[PASS] Bad usages: generateKey({length: 256, name: AES-GCM}, true, [unwrapKey, deriveBits])\n[PASS] Bad usages: generateKey({length: 256, name: AES-GCM}, true, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey, deriveBits])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-GCM}, false, [encrypt])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-GCM}, true, [encrypt])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-GCM}, false, [decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-GCM}, true, [decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-GCM}, false, [wrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-GCM}, true, [wrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-GCM}, false, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-GCM}, true, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-GCM}, false, [unwrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-GCM}, true, [unwrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-GCM}, false, [wrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-GCM}, true, [wrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-GCM}, false, [unwrapKey, wrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-GCM}, true, [unwrapKey, wrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-GCM}, false, [unwrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-GCM}, true, [unwrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-GCM}, false, [decrypt])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-GCM}, true, [decrypt])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-GCM}, false, [wrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-GCM}, true, [wrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-GCM}, false, [unwrapKey, wrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-GCM}, true, [unwrapKey, wrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-GCM}, false, [unwrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-GCM}, true, [unwrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-GCM}, false, [wrapKey])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-GCM}, true, [wrapKey])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-GCM}, false, [unwrapKey, wrapKey])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-GCM}, true, [unwrapKey, wrapKey])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-GCM}, false, [unwrapKey])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-GCM}, true, [unwrapKey])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-GCM}, false, [])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-GCM}, true, [])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-GCM}, false, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-GCM}, true, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-GCM}, false, [encrypt])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-GCM}, true, [encrypt])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-GCM}, false, [decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-GCM}, true, [decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-GCM}, false, [wrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-GCM}, true, [wrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-GCM}, false, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-GCM}, true, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-GCM}, false, [unwrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-GCM}, true, [unwrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-GCM}, false, [wrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-GCM}, true, [wrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-GCM}, false, [unwrapKey, wrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-GCM}, true, [unwrapKey, wrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-GCM}, false, [unwrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-GCM}, true, [unwrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-GCM}, false, [decrypt])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-GCM}, true, [decrypt])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-GCM}, false, [wrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-GCM}, true, [wrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-GCM}, false, [unwrapKey, wrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-GCM}, true, [unwrapKey, wrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-GCM}, false, [unwrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-GCM}, true, [unwrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-GCM}, false, [wrapKey])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-GCM}, true, [wrapKey])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-GCM}, false, [unwrapKey, wrapKey])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-GCM}, true, [unwrapKey, wrapKey])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-GCM}, false, [unwrapKey])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-GCM}, true, [unwrapKey])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-GCM}, false, [])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-GCM}, true, [])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-GCM}, false, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-GCM}, true, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-GCM}, false, [encrypt])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-GCM}, true, [encrypt])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-GCM}, false, [decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-GCM}, true, [decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-GCM}, false, [wrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-GCM}, true, [wrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-GCM}, false, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-GCM}, true, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-GCM}, false, [unwrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-GCM}, true, [unwrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-GCM}, false, [wrapKey, encrypt])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CTR}, true, [decrypt, encrypt, verify])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CTR}, true, [wrapKey, decrypt, encrypt, verify])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CTR}, true, [unwrapKey, wrapKey, decrypt, encrypt, verify])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CTR}, true, [unwrapKey, decrypt, encrypt, verify])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CTR}, true, [wrapKey, encrypt, verify])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CTR}, true, [unwrapKey, wrapKey, encrypt, verify])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CTR}, true, [unwrapKey, encrypt, verify])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CTR}, true, [decrypt, verify])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CTR}, true, [wrapKey, decrypt, verify])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CTR}, true, [unwrapKey, wrapKey, decrypt, verify])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CTR}, true, [unwrapKey, decrypt, verify])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CTR}, true, [wrapKey, verify])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CTR}, true, [unwrapKey, wrapKey, verify])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CTR}, true, [unwrapKey, verify])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CTR}, true, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey, verify])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CTR}, true, [deriveKey])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CTR}, true, [encrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CTR}, true, [decrypt, encrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CTR}, true, [wrapKey, decrypt, encrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CTR}, true, [unwrapKey, wrapKey, decrypt, encrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CTR}, true, [unwrapKey, decrypt, encrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CTR}, true, [wrapKey, encrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CTR}, true, [unwrapKey, wrapKey, encrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CTR}, true, [unwrapKey, encrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CTR}, true, [decrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CTR}, true, [wrapKey, decrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CTR}, true, [unwrapKey, wrapKey, decrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CTR}, true, [unwrapKey, decrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CTR}, true, [wrapKey, deriveKey])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CTR}, true, [unwrapKey, wrapKey, deriveKey])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CTR}, true, [unwrapKey, deriveKey])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CTR}, true, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey, deriveKey])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CTR}, true, [deriveBits])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CTR}, true, [encrypt, deriveBits])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CTR}, true, [decrypt, encrypt, deriveBits])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CTR}, true, [wrapKey, decrypt, encrypt, deriveBits])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CTR}, true, [unwrapKey, wrapKey, decrypt, encrypt, deriveBits])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CTR}, true, [unwrapKey, decrypt, encrypt, deriveBits])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CTR}, true, [wrapKey, encrypt, deriveBits])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CTR}, true, [unwrapKey, wrapKey, encrypt, deriveBits])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CTR}, true, [unwrapKey, encrypt, deriveBits])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CTR}, true, [decrypt, deriveBits])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CTR}, true, [wrapKey, decrypt, deriveBits])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CTR}, true, [unwrapKey, wrapKey, decrypt, deriveBits])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CTR}, true, [unwrapKey, decrypt, deriveBits])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CTR}, true, [wrapKey, deriveBits])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CTR}, true, [unwrapKey, wrapKey, deriveBits])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CTR}, true, [unwrapKey, deriveBits])\n[PASS] Bad usages: generateKey({length: 192, name: AES-CTR}, true, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey, deriveBits])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CTR}, true, [sign])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CTR}, true, [encrypt, sign])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CTR}, true, [decrypt, encrypt, sign])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CTR}, true, [wrapKey, decrypt, encrypt, sign])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CTR}, true, [unwrapKey, wrapKey, decrypt, encrypt, sign])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CTR}, true, [unwrapKey, decrypt, encrypt, sign])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CTR}, true, [wrapKey, encrypt, sign])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CTR}, true, [unwrapKey, wrapKey, encrypt, sign])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CTR}, true, [unwrapKey, encrypt, sign])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CTR}, true, [decrypt, sign])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CTR}, true, [wrapKey, decrypt, sign])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CTR}, true, [unwrapKey, wrapKey, decrypt, sign])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CTR}, true, [unwrapKey, decrypt, sign])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CTR}, true, [wrapKey, sign])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CTR}, true, [unwrapKey, wrapKey, sign])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CTR}, true, [unwrapKey, sign])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CTR}, true, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey, sign])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CTR}, true, [verify])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CTR}, true, [encrypt, verify])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CTR}, true, [decrypt, encrypt, verify])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CTR}, true, [wrapKey, decrypt, encrypt, verify])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CTR}, true, [unwrapKey, wrapKey, decrypt, encrypt, verify])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CTR}, true, [unwrapKey, decrypt, encrypt, verify])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CTR}, true, [wrapKey, encrypt, verify])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CTR}, true, [unwrapKey, wrapKey, encrypt, verify])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CTR}, true, [unwrapKey, encrypt, verify])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CTR}, true, [decrypt, verify])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CTR}, true, [wrapKey, decrypt, verify])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CTR}, true, [unwrapKey, wrapKey, decrypt, verify])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CTR}, true, [unwrapKey, decrypt, verify])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CTR}, true, [wrapKey, verify])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CTR}, true, [unwrapKey, wrapKey, verify])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CTR}, true, [unwrapKey, verify])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CTR}, true, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey, verify])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CTR}, true, [deriveKey])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CTR}, true, [encrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CTR}, true, [decrypt, encrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CTR}, true, [wrapKey, decrypt, encrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CTR}, true, [unwrapKey, wrapKey, decrypt, encrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CTR}, true, [unwrapKey, decrypt, encrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CTR}, true, [wrapKey, encrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CTR}, true, [unwrapKey, wrapKey, encrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CTR}, true, [unwrapKey, encrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CTR}, true, [decrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CTR}, true, [wrapKey, decrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CTR}, true, [unwrapKey, wrapKey, decrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CTR}, true, [unwrapKey, decrypt, deriveKey])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CTR}, true, [wrapKey, deriveKey])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CTR}, true, [unwrapKey, wrapKey, deriveKey])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CTR}, true, [unwrapKey, deriveKey])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CTR}, true, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey, deriveKey])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits, sign])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-GCM}, true, [wrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-GCM}, false, [unwrapKey, wrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-GCM}, true, [unwrapKey, wrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-GCM}, false, [unwrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-GCM}, true, [unwrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-GCM}, false, [decrypt])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-GCM}, true, [decrypt])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-GCM}, false, [wrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-GCM}, true, [wrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-GCM}, false, [unwrapKey, wrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-GCM}, true, [unwrapKey, wrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-GCM}, false, [unwrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-GCM}, true, [unwrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-GCM}, false, [wrapKey])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-GCM}, true, [wrapKey])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-GCM}, false, [unwrapKey, wrapKey])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-GCM}, true, [unwrapKey, wrapKey])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-GCM}, false, [unwrapKey])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-GCM}, true, [unwrapKey])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-GCM}, false, [])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-GCM}, true, [])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-GCM}, false, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-GCM}, true, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-GCM}, false, [encrypt])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-GCM}, true, [encrypt])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-GCM}, false, [decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-GCM}, true, [decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-GCM}, false, [wrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-GCM}, true, [wrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-GCM}, false, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-GCM}, true, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-GCM}, false, [unwrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-GCM}, true, [unwrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-GCM}, false, [wrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-GCM}, true, [wrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-GCM}, false, [unwrapKey, wrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-GCM}, true, [unwrapKey, wrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-GCM}, false, [unwrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-GCM}, true, [unwrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-GCM}, false, [decrypt])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-GCM}, true, [decrypt])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-GCM}, false, [wrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-GCM}, true, [wrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-GCM}, false, [unwrapKey, wrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-GCM}, true, [unwrapKey, wrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-GCM}, false, [unwrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-GCM}, true, [unwrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-GCM}, false, [wrapKey])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-GCM}, true, [wrapKey])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-GCM}, false, [unwrapKey, wrapKey])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-GCM}, true, [unwrapKey, wrapKey])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-GCM}, false, [unwrapKey])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-GCM}, true, [unwrapKey])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-GCM}, false, [])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-GCM}, true, [])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-GCM}, false, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-GCM}, true, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-GCM}, false, [encrypt])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-GCM}, true, [encrypt])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-GCM}, false, [decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-GCM}, true, [decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-GCM}, false, [wrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-GCM}, true, [wrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-GCM}, false, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-GCM}, true, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-GCM}, false, [unwrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-GCM}, true, [unwrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-GCM}, false, [wrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-GCM}, true, [wrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-GCM}, false, [unwrapKey, wrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-GCM}, true, [unwrapKey, wrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-GCM}, false, [unwrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-GCM}, true, [unwrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-GCM}, false, [decrypt])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-GCM}, true, [decrypt])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-GCM}, false, [wrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-GCM}, true, [wrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-GCM}, false, [unwrapKey, wrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-GCM}, true, [unwrapKey, wrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-GCM}, false, [unwrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-GCM}, true, [unwrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-GCM}, false, [wrapKey])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-GCM}, true, [wrapKey])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-GCM}, false, [unwrapKey, wrapKey])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-GCM}, true, [unwrapKey, wrapKey])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-GCM}, false, [unwrapKey])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-GCM}, true, [unwrapKey])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-GCM}, false, [])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-GCM}, true, [])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-GCM}, false, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] RSA-OAEP with SHA-384 and empty label\n[PASS] RSA-OAEP with SHA-512 and empty label\n[PASS] RSA-OAEP with SHA-1 and a label\n[PASS] Bad usages: generateKey({length: 256, name: AES-CTR}, true, [deriveBits])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CTR}, true, [encrypt, deriveBits])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CTR}, true, [decrypt, encrypt, deriveBits])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CTR}, true, [wrapKey, decrypt, encrypt, deriveBits])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CTR}, true, [unwrapKey, wrapKey, decrypt, encrypt, deriveBits])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CTR}, true, [unwrapKey, decrypt, encrypt, deriveBits])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CTR}, true, [wrapKey, encrypt, deriveBits])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CTR}, true, [unwrapKey, wrapKey, encrypt, deriveBits])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CTR}, true, [unwrapKey, encrypt, deriveBits])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CTR}, true, [decrypt, deriveBits])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CTR}, true, [wrapKey, decrypt, deriveBits])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CTR}, true, [unwrapKey, wrapKey, decrypt, deriveBits])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CTR}, true, [unwrapKey, decrypt, deriveBits])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CTR}, true, [wrapKey, deriveBits])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CTR}, true, [unwrapKey, wrapKey, deriveBits])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CTR}, true, [unwrapKey, deriveBits])\n[PASS] Bad usages: generateKey({length: 256, name: AES-CTR}, true, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey, deriveBits])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-CTR}, false, [encrypt])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-CTR}, true, [encrypt])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-CTR}, false, [decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-CTR}, true, [decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-CTR}, false, [wrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-CTR}, true, [wrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-CTR}, false, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-CTR}, true, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-CTR}, false, [unwrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-CTR}, true, [unwrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-CTR}, false, [wrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-CTR}, true, [wrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-CTR}, false, [unwrapKey, wrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-CTR}, true, [unwrapKey, wrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-CTR}, false, [unwrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-CTR}, true, [unwrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-CTR}, false, [decrypt])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-CTR}, true, [decrypt])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-CTR}, false, [wrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-CTR}, true, [wrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-CTR}, false, [unwrapKey, wrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-CTR}, true, [unwrapKey, wrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-CTR}, false, [unwrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-CTR}, true, [unwrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-CTR}, false, [wrapKey])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-CTR}, true, [wrapKey])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-CTR}, false, [unwrapKey, wrapKey])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-CTR}, true, [unwrapKey, wrapKey])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-CTR}, false, [unwrapKey])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-CTR}, true, [unwrapKey])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-CTR}, false, [])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-CTR}, true, [])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-CTR}, false, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-CTR}, true, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-CTR}, false, [encrypt])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-CTR}, true, [encrypt])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-CTR}, false, [decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-CTR}, true, [decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-CTR}, false, [wrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-CTR}, true, [wrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-CTR}, false, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-CTR}, true, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-CTR}, false, [unwrapKey, decrypt, encrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-GCM}, true, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-GCM}, false, [encrypt])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-GCM}, true, [encrypt])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-GCM}, false, [decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-GCM}, true, [decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-GCM}, false, [wrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-GCM}, true, [wrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-GCM}, false, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-GCM}, true, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-GCM}, false, [unwrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-GCM}, true, [unwrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-GCM}, false, [wrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-GCM}, true, [wrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-GCM}, false, [unwrapKey, wrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-GCM}, true, [unwrapKey, wrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-GCM}, false, [unwrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-GCM}, true, [unwrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-GCM}, false, [decrypt])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-GCM}, true, [decrypt])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-GCM}, false, [wrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-GCM}, true, [wrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-GCM}, false, [unwrapKey, wrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-GCM}, true, [unwrapKey, wrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-GCM}, false, [unwrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-GCM}, true, [unwrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-GCM}, false, [wrapKey])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-GCM}, true, [wrapKey])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-GCM}, false, [unwrapKey, wrapKey])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-GCM}, true, [unwrapKey, wrapKey])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-GCM}, false, [unwrapKey])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-GCM}, true, [unwrapKey])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-GCM}, false, [])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-GCM}, true, [])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-GCM}, false, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-GCM}, true, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] Empty usages: generateKey({length: 128, name: AES-GCM}, false, [])\n[PASS] Empty usages: generateKey({length: 128, name: AES-GCM}, true, [])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-CTR}, true, [unwrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-CTR}, false, [wrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-CTR}, true, [wrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-CTR}, false, [unwrapKey, wrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-CTR}, true, [unwrapKey, wrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-CTR}, false, [unwrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-CTR}, true, [unwrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-CTR}, false, [decrypt])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-CTR}, true, [decrypt])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-CTR}, false, [wrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-CTR}, true, [wrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-CTR}, false, [unwrapKey, wrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-CTR}, true, [unwrapKey, wrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-CTR}, false, [unwrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-CTR}, true, [unwrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-CTR}, false, [wrapKey])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-CTR}, true, [wrapKey])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-CTR}, false, [unwrapKey, wrapKey])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-CTR}, true, [unwrapKey, wrapKey])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-CTR}, false, [unwrapKey])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-CTR}, true, [unwrapKey])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-CTR}, false, [])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-CTR}, true, [])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-CTR}, false, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-CTR}, true, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-CTR}, false, [encrypt])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-CTR}, true, [encrypt])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-CTR}, false, [decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-CTR}, true, [decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-CTR}, false, [wrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-CTR}, true, [wrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-CTR}, false, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-CTR}, true, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-CTR}, false, [unwrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-CTR}, true, [unwrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-CTR}, false, [wrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-CTR}, true, [wrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-CTR}, false, [unwrapKey, wrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-CTR}, true, [unwrapKey, wrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-CTR}, false, [unwrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-CTR}, true, [unwrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-CTR}, false, [decrypt])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-CTR}, true, [decrypt])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-CTR}, false, [wrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-CTR}, true, [wrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-CTR}, false, [unwrapKey, wrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-CTR}, true, [unwrapKey, wrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-CTR}, false, [unwrapKey, decrypt])\n[PASS] RSA-OAEP with SHA-256 and a label\n[PASS] RSA-OAEP with SHA-384 and a label\n[PASS] RSA-OAEP with SHA-512 and a label\n[PASS] RSA-OAEP with SHA-1 and no label too long plaintext\n[PASS] RSA-OAEP with SHA-256 and no label too long plaintext\n[PASS] RSA-OAEP with SHA-384 and no label too long plaintext\n[PASS] RSA-OAEP with SHA-512 and no label too long plaintext\n[PASS] RSA-OAEP with SHA-1 and empty label too long plaintext\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad usages: generateKey({length: 128, name: AES-KW}, true, [encrypt])\n[PASS] Bad usages: generateKey({length: 128, name: AES-KW}, true, [wrapKey, encrypt])\n[PASS] Bad usages: generateKey({length: 128, name: AES-KW}, true, [unwrapKey, wrapKey, encrypt])\n[PASS] Bad usages: generateKey({length: 128, name: AES-KW}, true, [unwrapKey, encrypt])\n[PASS] Bad usages: generateKey({length: 128, name: AES-KW}, true, [wrapKey, unwrapKey, wrapKey, unwrapKey, encrypt])\n[PASS] Bad usages: generateKey({length: 128, name: AES-KW}, true, [decrypt])\n[PASS] Bad usages: generateKey({length: 128, name: AES-KW}, true, [wrapKey, decrypt])\n[PASS] Bad usages: generateKey({length: 128, name: AES-KW}, true, [unwrapKey, wrapKey, decrypt])\n[PASS] Bad usages: generateKey({length: 128, name: AES-KW}, true, [unwrapKey, decrypt])\n[PASS] Bad usages: generateKey({length: 128, name: AES-KW}, true, [wrapKey, unwrapKey, wrapKey, unwrapKey, decrypt])\n[PASS] Bad usages: generateKey({length: 128, name: AES-KW}, true, [sign])\n[PASS] Bad usages: generateKey({length: 128, name: AES-KW}, true, [wrapKey, sign])\n[PASS] Bad usages: generateKey({length: 128, name: AES-KW}, true, [unwrapKey, wrapKey, sign])\n[PASS] Bad usages: generateKey({length: 128, name: AES-KW}, true, [unwrapKey, sign])\n[PASS] Bad usages: generateKey({length: 128, name: AES-KW}, true, [wrapKey, unwrapKey, wrapKey, unwrapKey, sign])\n[PASS] Bad usages: generateKey({length: 128, name: AES-KW}, true, [verify])\n[PASS] Bad usages: generateKey({length: 128, name: AES-KW}, true, [wrapKey, verify])\n[PASS] Bad usages: generateKey({length: 128, name: AES-KW}, true, [unwrapKey, wrapKey, verify])\n[PASS] Bad usages: generateKey({length: 128, name: AES-KW}, true, [unwrapKey, verify])\n[PASS] Bad usages: generateKey({length: 128, name: AES-KW}, true, [wrapKey, unwrapKey, wrapKey, unwrapKey, verify])\n[PASS] Bad usages: generateKey({length: 128, name: AES-KW}, true, [deriveKey])\n[PASS] Bad usages: generateKey({length: 128, name: AES-KW}, true, [wrapKey, deriveKey])\n[PASS] Bad usages: generateKey({length: 128, name: AES-KW}, true, [unwrapKey, wrapKey, deriveKey])\n[PASS] Bad usages: generateKey({length: 128, name: AES-KW}, true, [unwrapKey, deriveKey])\n[PASS] Bad usages: generateKey({length: 128, name: AES-KW}, true, [wrapKey, unwrapKey, wrapKey, unwrapKey, deriveKey])\n[PASS] Bad usages: generateKey({length: 128, name: AES-KW}, true, [deriveBits])\n[PASS] Bad usages: generateKey({length: 128, name: AES-KW}, true, [wrapKey, deriveBits])\n[PASS] Bad usages: generateKey({length: 128, name: AES-KW}, true, [unwrapKey, wrapKey, deriveBits])\n[PASS] Empty usages: generateKey({length: 192, name: AES-GCM}, false, [])\n[PASS] Empty usages: generateKey({length: 192, name: AES-GCM}, true, [])\n[PASS] Empty usages: generateKey({length: 256, name: AES-GCM}, false, [])\n[PASS] Empty usages: generateKey({length: 256, name: AES-GCM}, true, [])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-CTR}, true, [unwrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-CTR}, false, [wrapKey])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-CTR}, true, [wrapKey])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-CTR}, false, [unwrapKey, wrapKey])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-CTR}, true, [unwrapKey, wrapKey])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-CTR}, false, [unwrapKey])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-CTR}, true, [unwrapKey])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-CTR}, false, [])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-CTR}, true, [])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-CTR}, false, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-CTR}, true, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-CTR}, false, [encrypt])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-CTR}, true, [encrypt])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-CTR}, false, [decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-CTR}, true, [decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-CTR}, false, [wrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-CTR}, true, [wrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-CTR}, false, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-CTR}, true, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-CTR}, false, [unwrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-CTR}, true, [unwrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-CTR}, false, [wrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-CTR}, true, [wrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-CTR}, false, [unwrapKey, wrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-CTR}, true, [unwrapKey, wrapKey, encrypt])\n[PASS] RSA-OAEP with SHA-256 and empty label too long plaintext\n[PASS] RSA-OAEP with SHA-384 and empty label too long plaintext\n[PASS] RSA-OAEP with SHA-512 and empty label too long plaintext\n[PASS] RSA-OAEP with SHA-1 and a label too long plaintext\n[PASS] RSA-OAEP with SHA-256 and a label too long plaintext\n[PASS] RSA-OAEP with SHA-384 and a label too long plaintext\n[PASS] RSA-OAEP with SHA-512 and a label too long plaintext\n[PASS] RSA-OAEP with SHA-1 and no label using privateKey to encrypt\n[PASS] RSA-OAEP with SHA-256 and no label using privateKey to encrypt\n[PASS] RSA-OAEP with SHA-384 and no label using privateKey to encrypt\n[PASS] RSA-OAEP with SHA-512 and no label using privateKey to encrypt\n[PASS] RSA-OAEP with SHA-1 and empty label using privateKey to encrypt\n[PASS] RSA-OAEP with SHA-256 and empty label using privateKey to encrypt\n[PASS] RSA-OAEP with SHA-384 and empty label using privateKey to encrypt\n[PASS] RSA-OAEP with SHA-512 and empty label using privateKey to encrypt\n[PASS] RSA-OAEP with SHA-1 and a label using privateKey to encrypt\n[PASS] RSA-OAEP with SHA-256 and a label using privateKey to encrypt\n[PASS] RSA-OAEP with SHA-384 and a label using privateKey to encrypt\n[PASS] RSA-OAEP with SHA-512 and a label using privateKey to encrypt\n[PASS] RSA-OAEP with SHA-1 and no label no encrypt usage\n[PASS] RSA-OAEP with SHA-256 and no label no encrypt usage\n[PASS] RSA-OAEP with SHA-384 and no label no encrypt usage\n[PASS] Bad usages: generateKey({length: 128, name: AES-KW}, true, [unwrapKey, deriveBits])\n[PASS] Bad usages: generateKey({length: 128, name: AES-KW}, true, [wrapKey, unwrapKey, wrapKey, unwrapKey, deriveBits])\n[PASS] Bad usages: generateKey({length: 192, name: AES-KW}, true, [encrypt])\n[PASS] Bad usages: generateKey({length: 192, name: AES-KW}, true, [wrapKey, encrypt])\n[PASS] Bad usages: generateKey({length: 192, name: AES-KW}, true, [unwrapKey, wrapKey, encrypt])\n[PASS] Bad usages: generateKey({length: 192, name: AES-KW}, true, [unwrapKey, encrypt])\n[PASS] Bad usages: generateKey({length: 192, name: AES-KW}, true, [wrapKey, unwrapKey, wrapKey, unwrapKey, encrypt])\n[PASS] Bad usages: generateKey({length: 192, name: AES-KW}, true, [decrypt])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-CTR}, false, [unwrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-CTR}, true, [unwrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-CTR}, false, [decrypt])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-CTR}, true, [decrypt])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-CTR}, false, [wrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-CTR}, true, [wrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-CTR}, false, [unwrapKey, wrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-CTR}, true, [unwrapKey, wrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-CTR}, false, [unwrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-CTR}, true, [unwrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-CTR}, false, [wrapKey])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-CTR}, true, [wrapKey])\n[PASS] RSA-OAEP with SHA-512 and no label no encrypt usage\n[PASS] RSA-OAEP with SHA-1 and empty label no encrypt usage\n[PASS] RSA-OAEP with SHA-256 and empty label no encrypt usage\n[PASS] RSA-OAEP with SHA-384 and empty label no encrypt usage\n[PASS] RSA-OAEP with SHA-512 and empty label no encrypt usage\n[PASS] RSA-OAEP with SHA-1 and a label no encrypt usage\n[PASS] RSA-OAEP with SHA-256 and a label no encrypt usage\n[PASS] RSA-OAEP with SHA-384 and a label no encrypt usage\n[PASS] RSA-OAEP with SHA-512 and a label no encrypt usage\n[PASS] Bad usages: generateKey({length: 192, name: AES-KW}, true, [wrapKey, decrypt])\n[PASS] Bad usages: generateKey({length: 192, name: AES-KW}, true, [unwrapKey, wrapKey, decrypt])\n[PASS] Bad usages: generateKey({length: 192, name: AES-KW}, true, [unwrapKey, decrypt])\n[PASS] Bad usages: generateKey({length: 192, name: AES-KW}, true, [wrapKey, unwrapKey, wrapKey, unwrapKey, decrypt])\n[PASS] Bad usages: generateKey({length: 192, name: AES-KW}, true, [sign])\n[PASS] Bad usages: generateKey({length: 192, name: AES-KW}, true, [wrapKey, sign])\n[PASS] Bad usages: generateKey({length: 192, name: AES-KW}, true, [unwrapKey, wrapKey, sign])\n[PASS] Bad usages: generateKey({length: 192, name: AES-KW}, true, [unwrapKey, sign])\n[PASS] Bad usages: generateKey({length: 192, name: AES-KW}, true, [wrapKey, unwrapKey, wrapKey, unwrapKey, sign])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-CTR}, false, [unwrapKey, wrapKey])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-CTR}, true, [unwrapKey, wrapKey])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-CTR}, false, [unwrapKey])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-CTR}, true, [unwrapKey])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-CTR}, false, [])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-CTR}, true, [])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-CTR}, false, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-CTR}, true, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-CTR}, false, [encrypt])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-CTR}, true, [encrypt])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-CTR}, false, [decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-CTR}, true, [decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-CTR}, false, [wrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-CTR}, true, [wrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-CTR}, false, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-CTR}, true, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-CTR}, false, [unwrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-CTR}, true, [unwrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-CTR}, false, [wrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-CTR}, true, [wrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-CTR}, false, [unwrapKey, wrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-CTR}, true, [unwrapKey, wrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-CTR}, false, [unwrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-CTR}, true, [unwrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-CTR}, false, [decrypt])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-CTR}, true, [decrypt])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-CTR}, false, [wrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-CTR}, true, [wrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-CTR}, false, [unwrapKey, wrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-CTR}, true, [unwrapKey, wrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-CTR}, false, [unwrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-CTR}, true, [unwrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-CTR}, false, [wrapKey])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-CTR}, true, [wrapKey])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-CTR}, false, [unwrapKey, wrapKey])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-CTR}, true, [unwrapKey, wrapKey])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-CTR}, false, [unwrapKey])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-CTR}, true, [unwrapKey])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-CTR}, false, [])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-CTR}, true, [])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-CTR}, false, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-CTR}, true, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-CTR}, false, [encrypt])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-CTR}, true, [encrypt])\n[PASS] Bad usages: generateKey({length: 192, name: AES-KW}, true, [verify])\n[PASS] Bad usages: generateKey({length: 192, name: AES-KW}, true, [wrapKey, verify])\n[PASS] Bad usages: generateKey({length: 192, name: AES-KW}, true, [unwrapKey, wrapKey, verify])\n[PASS] Bad usages: generateKey({length: 192, name: AES-KW}, true, [unwrapKey, verify])\n[PASS] Bad usages: generateKey({length: 192, name: AES-KW}, true, [wrapKey, unwrapKey, wrapKey, unwrapKey, verify])\n[PASS] Bad usages: generateKey({length: 192, name: AES-KW}, true, [deriveKey])\n[PASS] Bad usages: generateKey({length: 192, name: AES-KW}, true, [wrapKey, deriveKey])\n[PASS] Bad usages: generateKey({length: 192, name: AES-KW}, true, [unwrapKey, wrapKey, deriveKey])\n[PASS] Bad usages: generateKey({length: 192, name: AES-KW}, true, [unwrapKey, deriveKey])\n[PASS] Bad usages: generateKey({length: 192, name: AES-KW}, true, [wrapKey, unwrapKey, wrapKey, unwrapKey, deriveKey])\n[PASS] Bad usages: generateKey({length: 192, name: AES-KW}, true, [deriveBits])\n[PASS] Bad usages: generateKey({length: 192, name: AES-KW}, true, [wrapKey, deriveBits])\n[PASS] Bad usages: generateKey({length: 192, name: AES-KW}, true, [unwrapKey, wrapKey, deriveBits])\n[PASS] Bad usages: generateKey({length: 192, name: AES-KW}, true, [unwrapKey, deriveBits])\n[PASS] Bad usages: generateKey({length: 192, name: AES-KW}, true, [wrapKey, unwrapKey, wrapKey, unwrapKey, deriveBits])\n[PASS] Bad usages: generateKey({length: 256, name: AES-KW}, true, [encrypt])\n[PASS] Bad usages: generateKey({length: 256, name: AES-KW}, true, [wrapKey, encrypt])\n[PASS] Bad usages: generateKey({length: 256, name: AES-KW}, true, [unwrapKey, wrapKey, encrypt])\n[PASS] Bad usages: generateKey({length: 256, name: AES-KW}, true, [unwrapKey, encrypt])\n[PASS] Bad usages: generateKey({length: 256, name: AES-KW}, true, [wrapKey, unwrapKey, wrapKey, unwrapKey, encrypt])\n[PASS] Bad usages: generateKey({length: 256, name: AES-KW}, true, [decrypt])\n[PASS] Bad usages: generateKey({length: 256, name: AES-KW}, true, [wrapKey, decrypt])\n[PASS] Bad usages: generateKey({length: 256, name: AES-KW}, true, [unwrapKey, wrapKey, decrypt])\n[PASS] Bad usages: generateKey({length: 256, name: AES-KW}, true, [unwrapKey, decrypt])\n[PASS] Bad usages: generateKey({length: 256, name: AES-KW}, true, [wrapKey, unwrapKey, wrapKey, unwrapKey, decrypt])\n[PASS] Bad usages: generateKey({length: 256, name: AES-KW}, true, [sign])\n[PASS] Bad usages: generateKey({length: 256, name: AES-KW}, true, [wrapKey, sign])\n[PASS] Bad usages: generateKey({length: 256, name: AES-KW}, true, [unwrapKey, wrapKey, sign])\n[PASS] Bad usages: generateKey({length: 256, name: AES-KW}, true, [unwrapKey, sign])\n[PASS] Bad usages: generateKey({length: 256, name: AES-KW}, true, [wrapKey, unwrapKey, wrapKey, unwrapKey, sign])\n[PASS] Bad usages: generateKey({length: 256, name: AES-KW}, true, [verify])\n[PASS] Bad usages: generateKey({length: 256, name: AES-KW}, true, [wrapKey, verify])\n[PASS] Bad usages: generateKey({length: 256, name: AES-KW}, true, [unwrapKey, wrapKey, verify])\n[PASS] Bad usages: generateKey({length: 256, name: AES-KW}, true, [unwrapKey, verify])\n[PASS] Bad usages: generateKey({length: 256, name: AES-KW}, true, [wrapKey, unwrapKey, wrapKey, unwrapKey, verify])\n[PASS] Bad usages: generateKey({length: 256, name: AES-KW}, true, [deriveKey])\n[PASS] Bad usages: generateKey({length: 256, name: AES-KW}, true, [wrapKey, deriveKey])\n[PASS] Bad usages: generateKey({length: 256, name: AES-KW}, true, [unwrapKey, wrapKey, deriveKey])\n[PASS] Bad usages: generateKey({length: 256, name: AES-KW}, true, [unwrapKey, deriveKey])\n[PASS] Bad usages: generateKey({length: 256, name: AES-KW}, true, [wrapKey, unwrapKey, wrapKey, unwrapKey, deriveKey])\n[PASS] Bad usages: generateKey({length: 256, name: AES-KW}, true, [deriveBits])\n[PASS] Bad usages: generateKey({length: 256, name: AES-KW}, true, [wrapKey, deriveBits])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-CTR}, false, [decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-CTR}, true, [decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-CTR}, false, [wrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-CTR}, true, [wrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-CTR}, false, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-CTR}, true, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-CTR}, false, [unwrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-CTR}, true, [unwrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-CTR}, false, [wrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-CTR}, true, [wrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-CTR}, false, [unwrapKey, wrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-CTR}, true, [unwrapKey, wrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-CTR}, false, [unwrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-CTR}, true, [unwrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-CTR}, false, [decrypt])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-CTR}, true, [decrypt])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-CTR}, false, [wrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-CTR}, true, [wrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-CTR}, false, [unwrapKey, wrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-CTR}, true, [unwrapKey, wrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-CTR}, false, [unwrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-CTR}, true, [unwrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-CTR}, false, [wrapKey])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-CTR}, true, [wrapKey])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-CTR}, false, [unwrapKey, wrapKey])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-CTR}, true, [unwrapKey, wrapKey])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-CTR}, false, [unwrapKey])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-CTR}, true, [unwrapKey])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-CTR}, false, [])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-CTR}, true, [])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-CTR}, false, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-CTR}, true, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] Empty usages: generateKey({length: 128, name: AES-CTR}, false, [])\n[PASS] Empty usages: generateKey({length: 128, name: AES-CTR}, true, [])\n[PASS] Empty usages: generateKey({length: 192, name: AES-CTR}, false, [])\n[PASS] Empty usages: generateKey({length: 192, name: AES-CTR}, true, [])\n[PASS] Bad usages: generateKey({length: 256, name: AES-KW}, true, [unwrapKey, wrapKey, deriveBits])\n[PASS] Bad usages: generateKey({length: 256, name: AES-KW}, true, [unwrapKey, deriveBits])\n[PASS] Bad usages: generateKey({length: 256, name: AES-KW}, true, [wrapKey, unwrapKey, wrapKey, unwrapKey, deriveBits])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-KW}, false, [wrapKey])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-KW}, true, [wrapKey])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-KW}, false, [unwrapKey, wrapKey])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-KW}, true, [unwrapKey, wrapKey])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-KW}, false, [unwrapKey])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-KW}, true, [unwrapKey])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-KW}, false, [])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-KW}, true, [])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-KW}, false, [wrapKey, unwrapKey, wrapKey, unwrapKey])\n[PASS] Bad algorithm property: generateKey({length: 64, name: AES-KW}, true, [wrapKey, unwrapKey, wrapKey, unwrapKey])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-KW}, false, [wrapKey])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-KW}, true, [wrapKey])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-KW}, false, [unwrapKey, wrapKey])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-KW}, true, [unwrapKey, wrapKey])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-KW}, false, [unwrapKey])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-KW}, true, [unwrapKey])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-KW}, false, [])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-KW}, true, [])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-KW}, false, [wrapKey, unwrapKey, wrapKey, unwrapKey])\n[PASS] Bad algorithm property: generateKey({length: 127, name: AES-KW}, true, [wrapKey, unwrapKey, wrapKey, unwrapKey])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-KW}, false, [wrapKey])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-KW}, true, [wrapKey])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-KW}, false, [unwrapKey, wrapKey])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-KW}, true, [unwrapKey, wrapKey])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-KW}, false, [unwrapKey])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-KW}, true, [unwrapKey])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-KW}, false, [])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-KW}, true, [])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-KW}, false, [wrapKey, unwrapKey, wrapKey, unwrapKey])\n[PASS] Bad algorithm property: generateKey({length: 129, name: AES-KW}, true, [wrapKey, unwrapKey, wrapKey, unwrapKey])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-KW}, false, [wrapKey])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-KW}, true, [wrapKey])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-KW}, false, [unwrapKey, wrapKey])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-KW}, true, [unwrapKey, wrapKey])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-KW}, false, [unwrapKey])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-KW}, true, [unwrapKey])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-KW}, false, [])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-KW}, true, [])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-KW}, false, [wrapKey, unwrapKey, wrapKey, unwrapKey])\n[PASS] Bad algorithm property: generateKey({length: 255, name: AES-KW}, true, [wrapKey, unwrapKey, wrapKey, unwrapKey])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-KW}, false, [wrapKey])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-KW}, true, [wrapKey])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-KW}, false, [unwrapKey, wrapKey])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-KW}, true, [unwrapKey, wrapKey])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-KW}, false, [unwrapKey])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-KW}, true, [unwrapKey])\n[PASS] Empty usages: generateKey({length: 256, name: AES-CTR}, false, [])\n[PASS] Empty usages: generateKey({length: 256, name: AES-CTR}, true, [])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-KW}, false, [])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-KW}, true, [])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-KW}, false, [wrapKey, unwrapKey, wrapKey, unwrapKey])\n[PASS] Bad algorithm property: generateKey({length: 257, name: AES-KW}, true, [wrapKey, unwrapKey, wrapKey, unwrapKey])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-KW}, false, [wrapKey])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-KW}, true, [wrapKey])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-KW}, false, [unwrapKey, wrapKey])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-KW}, true, [unwrapKey, wrapKey])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-KW}, false, [unwrapKey])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-KW}, true, [unwrapKey])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-KW}, false, [])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-KW}, true, [])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-KW}, false, [wrapKey, unwrapKey, wrapKey, unwrapKey])\n[PASS] Bad algorithm property: generateKey({length: 512, name: AES-KW}, true, [wrapKey, unwrapKey, wrapKey, unwrapKey])\n[PASS] Empty usages: generateKey({length: 128, name: AES-KW}, false, [])\n[PASS] Empty usages: generateKey({length: 128, name: AES-KW}, true, [])\n[PASS] Empty usages: generateKey({length: 192, name: AES-KW}, false, [])\n[PASS] Empty usages: generateKey({length: 192, name: AES-KW}, true, [])\n[PASS] Empty usages: generateKey({length: 256, name: AES-KW}, false, [])\n[PASS] Empty usages: generateKey({length: 256, name: AES-KW}, true, [])\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, long salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, long salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, long salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, long salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, empty salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, empty salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, empty salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, empty salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, short salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, short salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, short salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, short salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Bad algorithm: generateKey(AES, false, [decrypt])\n[PASS] Bad algorithm: generateKey(AES, true, [decrypt])\n[PASS] Bad algorithm: generateKey(AES, RED, [decrypt])\n[PASS] Bad algorithm: generateKey(AES, 7, [decrypt])\n[PASS] Bad algorithm: generateKey(AES, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey(AES, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey(AES, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey(AES, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey(AES, false, [sign])\n[PASS] Bad algorithm: generateKey(AES, true, [sign])\n[PASS] Bad algorithm: generateKey(AES, RED, [sign])\n[PASS] Bad algorithm: generateKey(AES, 7, [sign])\n[PASS] Bad algorithm: generateKey(AES, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey(AES, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey(AES, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey(AES, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey(AES, false, [decrypt])\n[PASS] Bad algorithm: generateKey(AES, true, [decrypt])\n[PASS] Bad algorithm: generateKey(AES, RED, [decrypt])\n[PASS] Bad algorithm: generateKey(AES, 7, [decrypt])\n[PASS] Bad algorithm: generateKey(AES, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, false, [deriveBits])\n[PASS] Bad algorithm: generateKey(AES, true, [deriveBits])\n[PASS] Bad algorithm: generateKey(AES, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey(AES, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey(AES, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, false, [])\n[PASS] Bad algorithm: generateKey(AES, true, [])\n[PASS] Bad algorithm: generateKey(AES, RED, [])\n[PASS] Bad algorithm: generateKey(AES, 7, [])\n[PASS] Bad algorithm: generateKey(AES, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey(AES, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey(AES, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey(AES, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey(AES, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [decrypt])\n[PASS] Bad algorithm: generateKey(AES, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey(AES, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey(AES, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey(AES, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, false, [sign])\n[PASS] Bad algorithm: generateKey(AES, true, [sign])\n[PASS] Bad algorithm: generateKey(AES, RED, [sign])\n[PASS] Bad algorithm: generateKey(AES, 7, [sign])\n[PASS] Bad algorithm: generateKey(AES, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey(AES, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [sign])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [sign])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [sign])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [sign])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey(AES, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey(AES, false, [deriveBits])\n[PASS] Bad algorithm: generateKey(AES, true, [deriveBits])\n[PASS] Bad algorithm: generateKey(AES, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey(AES, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey(AES, false, [])\n[PASS] Bad algorithm: generateKey(AES, true, [])\n[PASS] Bad algorithm: generateKey(AES, RED, [])\n[PASS] Bad algorithm: generateKey(AES, 7, [])\n[PASS] Bad algorithm: generateKey(AES, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey(AES, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey(AES, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey(AES, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [sign])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [sign])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [sign])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [sign])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, false, [decrypt])\n[PASS] Bad algorithm: generateKey(AES, true, [decrypt])\n[PASS] Bad algorithm: generateKey(AES, RED, [decrypt])\n[PASS] Bad algorithm: generateKey(AES, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey(AES, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey(AES, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey(AES, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey(AES, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey(AES, false, [sign])\n[PASS] Bad algorithm: generateKey(AES, true, [sign])\n[PASS] Bad algorithm: generateKey(AES, RED, [sign])\n[PASS] Bad algorithm: generateKey(AES, 7, [sign])\n[PASS] Bad algorithm: generateKey(AES, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey(AES, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey(AES, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey(AES, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey(AES, false, [deriveBits])\n[PASS] Bad algorithm: generateKey(AES, true, [deriveBits])\n[PASS] Bad algorithm: generateKey(AES, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey(AES, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey(AES, false, [])\n[PASS] Bad algorithm: generateKey(AES, true, [])\n[PASS] Bad algorithm: generateKey(AES, RED, [])\n[PASS] Bad algorithm: generateKey(AES, 7, [])\n[PASS] Bad algorithm: generateKey(AES, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey(AES, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey(AES, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey(AES, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [sign])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [sign])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [sign])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [sign])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey(AES, false, [decrypt])\n[PASS] Bad algorithm: generateKey(AES, true, [decrypt])\n[PASS] Bad algorithm: generateKey(AES, RED, [decrypt])\n[PASS] Bad algorithm: generateKey(AES, 7, [decrypt])\n[PASS] Bad algorithm: generateKey(AES, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey(AES, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey(AES, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey(AES, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey(AES, false, [sign])\n[PASS] Bad algorithm: generateKey(AES, true, [sign])\n[PASS] Bad algorithm: generateKey(AES, RED, [sign])\n[PASS] Bad algorithm: generateKey(AES, 7, [sign])\n[PASS] Bad algorithm: generateKey(AES, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey(AES, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey(AES, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey(AES, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey(AES, false, [deriveBits])\n[PASS] Bad algorithm: generateKey(AES, true, [deriveBits])\n[PASS] Bad algorithm: generateKey(AES, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey(AES, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey(AES, false, [])\n[PASS] Bad algorithm: generateKey(AES, true, [])\n[PASS] Bad algorithm: generateKey(AES, RED, [])\n[PASS] Bad algorithm: generateKey(AES, 7, [])\n[PASS] Bad algorithm: generateKey(AES, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey(AES, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey(AES, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey(AES, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [sign])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [sign])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [sign])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [sign])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad usages: generateKey({name: Ed25519}, true, [encrypt])\n[PASS] Bad usages: generateKey({name: Ed25519}, true, [sign, encrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad usages: generateKey({name: ECDH, namedCurve: P-256}, true, [encrypt])\n[PASS] Bad usages: generateKey({name: ECDH, namedCurve: P-256}, true, [deriveKey, encrypt])\n[PASS] Bad usages: generateKey({name: ECDH, namedCurve: P-256}, true, [deriveBits, deriveKey, encrypt])\n[PASS] Bad usages: generateKey({name: ECDH, namedCurve: P-256}, true, [deriveBits, encrypt])\n[PASS] Bad usages: generateKey({name: ECDH, namedCurve: P-256}, true, [deriveKey, deriveBits, deriveKey, deriveBits, deriveKey, deriveBits, encrypt])\n[PASS] Bad usages: generateKey({name: ECDH, namedCurve: P-256}, true, [decrypt])\n[PASS] Bad usages: generateKey({name: ECDH, namedCurve: P-256}, true, [deriveKey, decrypt])\n[PASS] Bad usages: generateKey({name: ECDH, namedCurve: P-256}, true, [deriveBits, deriveKey, decrypt])\n[PASS] Bad usages: generateKey({name: ECDH, namedCurve: P-256}, true, [deriveBits, decrypt])\n[PASS] Bad usages: generateKey({name: ECDH, namedCurve: P-256}, true, [deriveKey, deriveBits, deriveKey, deriveBits, deriveKey, deriveBits, decrypt])\n[PASS] Bad usages: generateKey({name: ECDH, namedCurve: P-256}, true, [sign])\n[PASS] Bad usages: generateKey({name: ECDH, namedCurve: P-256}, true, [deriveKey, sign])\n[PASS] Bad usages: generateKey({name: ECDH, namedCurve: P-256}, true, [deriveBits, deriveKey, sign])\n[PASS] Bad usages: generateKey({name: ECDH, namedCurve: P-256}, true, [deriveBits, sign])\n[PASS] Bad usages: generateKey({name: ECDH, namedCurve: P-256}, true, [deriveKey, deriveBits, deriveKey, deriveBits, deriveKey, deriveBits, sign])\n[PASS] Bad usages: generateKey({name: ECDH, namedCurve: P-256}, true, [verify])\n[PASS] Bad usages: generateKey({name: ECDH, namedCurve: P-256}, true, [deriveKey, verify])\n[PASS] Bad usages: generateKey({name: ECDH, namedCurve: P-256}, true, [deriveBits, deriveKey, verify])\n[PASS] Bad usages: generateKey({name: ECDH, namedCurve: P-256}, true, [deriveBits, verify])\n[PASS] Bad usages: generateKey({name: ECDH, namedCurve: P-256}, true, [deriveKey, deriveBits, deriveKey, deriveBits, deriveKey, deriveBits, verify])\n[PASS] Bad usages: generateKey({name: ECDH, namedCurve: P-256}, true, [wrapKey])\n[PASS] Bad usages: generateKey({name: ECDH, namedCurve: P-256}, true, [deriveKey, wrapKey])\n[PASS] Bad usages: generateKey({name: ECDH, namedCurve: P-256}, true, [deriveBits, deriveKey, wrapKey])\n[PASS] Bad usages: generateKey({name: ECDH, namedCurve: P-256}, true, [deriveBits, wrapKey])\n[PASS] Bad usages: generateKey({name: ECDH, namedCurve: P-256}, true, [deriveKey, deriveBits, deriveKey, deriveBits, deriveKey, deriveBits, wrapKey])\n[PASS] Bad usages: generateKey({name: ECDH, namedCurve: P-256}, true, [unwrapKey])\n[PASS] Bad usages: generateKey({name: ECDH, namedCurve: P-256}, true, [deriveKey, unwrapKey])\n[PASS] Bad usages: generateKey({name: ECDH, namedCurve: P-256}, true, [deriveBits, deriveKey, unwrapKey])\n[PASS] Bad usages: generateKey({name: ECDH, namedCurve: P-256}, true, [deriveBits, unwrapKey])\n[PASS] Bad usages: generateKey({name: ECDH, namedCurve: P-256}, true, [deriveKey, deriveBits, deriveKey, deriveBits, deriveKey, deriveBits, unwrapKey])\n[PASS] Bad usages: generateKey({name: ECDH, namedCurve: P-384}, true, [encrypt])\n[PASS] Bad usages: generateKey({name: ECDH, namedCurve: P-384}, true, [deriveKey, encrypt])\n[PASS] Bad usages: generateKey({name: ECDH, namedCurve: P-384}, true, [deriveBits, deriveKey, encrypt])\n[PASS] Bad usages: generateKey({name: ECDH, namedCurve: P-384}, true, [deriveBits, encrypt])\n[PASS] Bad usages: generateKey({name: ECDH, namedCurve: P-384}, true, [deriveKey, deriveBits, deriveKey, deriveBits, deriveKey, deriveBits, encrypt])\n[PASS] Bad usages: generateKey({name: ECDH, namedCurve: P-384}, true, [decrypt])\n[PASS] Bad usages: generateKey({name: ECDH, namedCurve: P-384}, true, [deriveKey, decrypt])\n[PASS] Bad usages: generateKey({name: ECDH, namedCurve: P-384}, true, [deriveBits, deriveKey, decrypt])\n[PASS] Bad usages: generateKey({name: ECDH, namedCurve: P-384}, true, [deriveBits, decrypt])\n[PASS] Bad usages: generateKey({name: ECDH, namedCurve: P-384}, true, [deriveKey, deriveBits, deriveKey, deriveBits, deriveKey, deriveBits, decrypt])\n[PASS] Bad usages: generateKey({name: ECDH, namedCurve: P-384}, true, [sign])\n[PASS] Bad usages: generateKey({name: ECDH, namedCurve: P-384}, true, [deriveKey, sign])\n[PASS] Bad usages: generateKey({name: ECDH, namedCurve: P-384}, true, [deriveBits, deriveKey, sign])\n[PASS] Bad usages: generateKey({name: ECDH, namedCurve: P-384}, true, [deriveBits, sign])\n[PASS] Bad usages: generateKey({name: ECDH, namedCurve: P-384}, true, [deriveKey, deriveBits, deriveKey, deriveBits, deriveKey, deriveBits, sign])\n[PASS] Bad usages: generateKey({name: ECDH, namedCurve: P-384}, true, [verify])\n[PASS] Bad usages: generateKey({name: ECDH, namedCurve: P-384}, true, [deriveKey, verify])\n[PASS] Bad usages: generateKey({name: ECDH, namedCurve: P-384}, true, [deriveBits, deriveKey, verify])\n[PASS] Bad usages: generateKey({name: ECDH, namedCurve: P-384}, true, [deriveBits, verify])\n[PASS] Bad usages: generateKey({name: ECDH, namedCurve: P-384}, true, [deriveKey, deriveBits, deriveKey, deriveBits, deriveKey, deriveBits, verify])\n[PASS] Bad usages: generateKey({name: ECDH, namedCurve: P-384}, true, [wrapKey])\n[PASS] Bad usages: generateKey({name: ECDH, namedCurve: P-384}, true, [deriveKey, wrapKey])\n[PASS] Bad usages: generateKey({name: ECDH, namedCurve: P-384}, true, [deriveBits, deriveKey, wrapKey])\n[PASS] Bad usages: generateKey({name: ECDH, namedCurve: P-384}, true, [deriveBits, wrapKey])\n[PASS] Bad usages: generateKey({name: ECDH, namedCurve: P-384}, true, [deriveKey, deriveBits, deriveKey, deriveBits, deriveKey, deriveBits, wrapKey])\n[PASS] Bad usages: generateKey({name: ECDH, namedCurve: P-384}, true, [unwrapKey])\n[PASS] Bad usages: generateKey({name: ECDH, namedCurve: P-384}, true, [deriveKey, unwrapKey])\n[PASS] Bad usages: generateKey({name: ECDH, namedCurve: P-384}, true, [deriveBits, deriveKey, unwrapKey])\n[PASS] Bad usages: generateKey({name: ECDH, namedCurve: P-384}, true, [deriveBits, unwrapKey])\n[PASS] Bad usages: generateKey({name: ECDH, namedCurve: P-384}, true, [deriveKey, deriveBits, deriveKey, deriveBits, deriveKey, deriveBits, unwrapKey])\n[PASS] Bad usages: generateKey({name: ECDH, namedCurve: P-521}, true, [encrypt])\n[PASS] Bad usages: generateKey({name: ECDH, namedCurve: P-521}, true, [deriveKey, encrypt])\n[PASS] Bad usages: generateKey({name: ECDH, namedCurve: P-521}, true, [deriveBits, deriveKey, encrypt])\n[PASS] Bad usages: generateKey({name: ECDH, namedCurve: P-521}, true, [deriveBits, encrypt])\n[PASS] Bad usages: generateKey({name: ECDH, namedCurve: P-521}, true, [deriveKey, deriveBits, deriveKey, deriveBits, deriveKey, deriveBits, encrypt])\n[PASS] Bad usages: generateKey({name: ECDH, namedCurve: P-521}, true, [decrypt])\n[PASS] Bad usages: generateKey({name: ECDH, namedCurve: P-521}, true, [deriveKey, decrypt])\n[PASS] Bad usages: generateKey({name: ECDH, namedCurve: P-521}, true, [deriveBits, deriveKey, decrypt])\n[PASS] Bad usages: generateKey({name: ECDH, namedCurve: P-521}, true, [deriveBits, decrypt])\n[PASS] Bad usages: generateKey({name: ECDH, namedCurve: P-521}, true, [deriveKey, deriveBits, deriveKey, deriveBits, deriveKey, deriveBits, decrypt])\n[PASS] Bad usages: generateKey({name: ECDH, namedCurve: P-521}, true, [sign])\n[PASS] Bad usages: generateKey({name: ECDH, namedCurve: P-521}, true, [deriveKey, sign])\n[PASS] Bad usages: generateKey({name: ECDH, namedCurve: P-521}, true, [deriveBits, deriveKey, sign])\n[PASS] Bad usages: generateKey({name: ECDH, namedCurve: P-521}, true, [deriveBits, sign])\n[PASS] Bad usages: generateKey({name: ECDH, namedCurve: P-521}, true, [deriveKey, deriveBits, deriveKey, deriveBits, deriveKey, deriveBits, sign])\n[PASS] Bad usages: generateKey({name: ECDH, namedCurve: P-521}, true, [verify])\n[PASS] Bad usages: generateKey({name: ECDH, namedCurve: P-521}, true, [deriveKey, verify])\n[PASS] Bad usages: generateKey({name: ECDH, namedCurve: P-521}, true, [deriveBits, deriveKey, verify])\n[PASS] Bad usages: generateKey({name: ECDH, namedCurve: P-521}, true, [deriveBits, verify])\n[PASS] Bad usages: generateKey({name: ECDH, namedCurve: P-521}, true, [deriveKey, deriveBits, deriveKey, deriveBits, deriveKey, deriveBits, verify])\n[PASS] Bad usages: generateKey({name: ECDH, namedCurve: P-521}, true, [wrapKey])\n[PASS] Bad usages: generateKey({name: ECDH, namedCurve: P-521}, true, [deriveKey, wrapKey])\n[PASS] Bad usages: generateKey({name: ECDH, namedCurve: P-521}, true, [deriveBits, deriveKey, wrapKey])\n[PASS] Bad usages: generateKey({name: ECDH, namedCurve: P-521}, true, [deriveBits, wrapKey])\n[PASS] Bad usages: generateKey({name: ECDH, namedCurve: P-521}, true, [deriveKey, deriveBits, deriveKey, deriveBits, deriveKey, deriveBits, wrapKey])\n[PASS] Bad usages: generateKey({name: ECDH, namedCurve: P-521}, true, [unwrapKey])\n[PASS] Bad usages: generateKey({name: ECDH, namedCurve: P-521}, true, [deriveKey, unwrapKey])\n[PASS] Bad usages: generateKey({name: ECDH, namedCurve: P-521}, true, [deriveBits, deriveKey, unwrapKey])\n[PASS] Bad usages: generateKey({name: ECDH, namedCurve: P-521}, true, [deriveBits, unwrapKey])\n[PASS] Bad usages: generateKey({name: ECDH, namedCurve: P-521}, true, [deriveKey, deriveBits, deriveKey, deriveBits, deriveKey, deriveBits, unwrapKey])\n[PASS] Bad algorithm property: generateKey({name: ECDH, namedCurve: P-512}, false, [deriveKey])\n[PASS] Bad algorithm property: generateKey({name: ECDH, namedCurve: P-512}, true, [deriveKey])\n[PASS] Bad algorithm property: generateKey({name: ECDH, namedCurve: P-512}, false, [deriveBits, deriveKey])\n[PASS] Bad algorithm property: generateKey({name: ECDH, namedCurve: P-512}, true, [deriveBits, deriveKey])\n[PASS] Bad algorithm property: generateKey({name: ECDH, namedCurve: P-512}, false, [deriveBits])\n[PASS] Bad algorithm property: generateKey({name: ECDH, namedCurve: P-512}, true, [deriveBits])\n[PASS] Bad algorithm property: generateKey({name: ECDH, namedCurve: P-512}, false, [])\n[PASS] Bad algorithm property: generateKey({name: ECDH, namedCurve: P-512}, true, [])\n[PASS] Bad algorithm property: generateKey({name: ECDH, namedCurve: P-512}, false, [deriveKey, deriveBits, deriveKey, deriveBits, deriveKey, deriveBits])\n[PASS] Bad algorithm property: generateKey({name: ECDH, namedCurve: P-512}, true, [deriveKey, deriveBits, deriveKey, deriveBits, deriveKey, deriveBits])\n[PASS] Bad algorithm property: generateKey({name: ECDH, namedCurve: Curve25519}, false, [deriveKey])\n[PASS] Bad algorithm property: generateKey({name: ECDH, namedCurve: Curve25519}, true, [deriveKey])\n[PASS] Bad algorithm property: generateKey({name: ECDH, namedCurve: Curve25519}, false, [deriveBits, deriveKey])\n[PASS] Bad algorithm property: generateKey({name: ECDH, namedCurve: Curve25519}, true, [deriveBits, deriveKey])\n[PASS] Bad algorithm property: generateKey({name: ECDH, namedCurve: Curve25519}, false, [deriveBits])\n[PASS] Bad algorithm property: generateKey({name: ECDH, namedCurve: Curve25519}, true, [deriveBits])\n[PASS] Bad algorithm property: generateKey({name: ECDH, namedCurve: Curve25519}, false, [])\n[PASS] Bad algorithm property: generateKey({name: ECDH, namedCurve: Curve25519}, true, [])\n[PASS] Bad algorithm property: generateKey({name: ECDH, namedCurve: Curve25519}, false, [deriveKey, deriveBits, deriveKey, deriveBits, deriveKey, deriveBits])\n[PASS] Bad algorithm property: generateKey({name: ECDH, namedCurve: Curve25519}, true, [deriveKey, deriveBits, deriveKey, deriveBits, deriveKey, deriveBits])\n[PASS] Empty usages: generateKey({name: ECDH, namedCurve: P-256}, false, [])\n[PASS] Empty usages: generateKey({name: ECDH, namedCurve: P-256}, true, [])\n[PASS] Empty usages: generateKey({name: ECDH, namedCurve: P-384}, false, [])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad usages: generateKey({name: ECDSA, namedCurve: P-256}, true, [encrypt])\n[PASS] Bad usages: generateKey({name: ECDSA, namedCurve: P-256}, true, [sign, encrypt])\n[PASS] Bad usages: generateKey({name: ECDSA, namedCurve: P-256}, true, [verify, sign, encrypt])\n[PASS] Bad usages: generateKey({name: ECDSA, namedCurve: P-256}, true, [sign, verify, sign, sign, verify, encrypt])\n[PASS] Bad usages: generateKey({name: ECDSA, namedCurve: P-256}, true, [decrypt])\n[PASS] Bad usages: generateKey({name: ECDSA, namedCurve: P-256}, true, [sign, decrypt])\n[PASS] Bad usages: generateKey({name: ECDSA, namedCurve: P-256}, true, [verify, sign, decrypt])\n[PASS] Bad usages: generateKey({name: ECDSA, namedCurve: P-256}, true, [sign, verify, sign, sign, verify, decrypt])\n[PASS] Bad usages: generateKey({name: ECDSA, namedCurve: P-256}, true, [wrapKey])\n[PASS] Bad usages: generateKey({name: ECDSA, namedCurve: P-256}, true, [sign, wrapKey])\n[PASS] Bad usages: generateKey({name: ECDSA, namedCurve: P-256}, true, [verify, sign, wrapKey])\n[PASS] Bad usages: generateKey({name: ECDSA, namedCurve: P-256}, true, [sign, verify, sign, sign, verify, wrapKey])\n[PASS] Bad usages: generateKey({name: ECDSA, namedCurve: P-256}, true, [unwrapKey])\n[PASS] Bad usages: generateKey({name: ECDSA, namedCurve: P-256}, true, [sign, unwrapKey])\n[PASS] Bad usages: generateKey({name: ECDSA, namedCurve: P-256}, true, [verify, sign, unwrapKey])\n[PASS] Bad usages: generateKey({name: ECDSA, namedCurve: P-256}, true, [sign, verify, sign, sign, verify, unwrapKey])\n[PASS] Bad usages: generateKey({name: ECDSA, namedCurve: P-256}, true, [deriveKey])\n[PASS] Bad usages: generateKey({name: ECDSA, namedCurve: P-256}, true, [sign, deriveKey])\n[PASS] Bad usages: generateKey({name: ECDSA, namedCurve: P-256}, true, [verify, sign, deriveKey])\n[PASS] Bad usages: generateKey({name: ECDSA, namedCurve: P-256}, true, [sign, verify, sign, sign, verify, deriveKey])\n[PASS] Bad usages: generateKey({name: ECDSA, namedCurve: P-256}, true, [deriveBits])\n[PASS] Bad usages: generateKey({name: ECDSA, namedCurve: P-256}, true, [sign, deriveBits])\n[PASS] Bad usages: generateKey({name: ECDSA, namedCurve: P-256}, true, [verify, sign, deriveBits])\n[PASS] Bad usages: generateKey({name: ECDSA, namedCurve: P-256}, true, [sign, verify, sign, sign, verify, deriveBits])\n[PASS] Bad usages: generateKey({name: ECDSA, namedCurve: P-384}, true, [encrypt])\n[PASS] Bad usages: generateKey({name: ECDSA, namedCurve: P-384}, true, [sign, encrypt])\n[PASS] Bad usages: generateKey({name: ECDSA, namedCurve: P-384}, true, [verify, sign, encrypt])\n[PASS] Bad usages: generateKey({name: ECDSA, namedCurve: P-384}, true, [sign, verify, sign, sign, verify, encrypt])\n[PASS] Bad usages: generateKey({name: ECDSA, namedCurve: P-384}, true, [decrypt])\n[PASS] Bad usages: generateKey({name: ECDSA, namedCurve: P-384}, true, [sign, decrypt])\n[PASS] Bad usages: generateKey({name: ECDSA, namedCurve: P-384}, true, [verify, sign, decrypt])\n[PASS] Bad usages: generateKey({name: ECDSA, namedCurve: P-384}, true, [sign, verify, sign, sign, verify, decrypt])\n[PASS] Bad usages: generateKey({name: ECDSA, namedCurve: P-384}, true, [wrapKey])\n[PASS] Bad usages: generateKey({name: ECDSA, namedCurve: P-384}, true, [sign, wrapKey])\n[PASS] Bad usages: generateKey({name: ECDSA, namedCurve: P-384}, true, [verify, sign, wrapKey])\n[PASS] Bad usages: generateKey({name: ECDSA, namedCurve: P-384}, true, [sign, verify, sign, sign, verify, wrapKey])\n[PASS] Bad usages: generateKey({name: ECDSA, namedCurve: P-384}, true, [unwrapKey])\n[PASS] Bad usages: generateKey({name: ECDSA, namedCurve: P-384}, true, [sign, unwrapKey])\n[PASS] Bad usages: generateKey({name: ECDSA, namedCurve: P-384}, true, [verify, sign, unwrapKey])\n[PASS] Bad usages: generateKey({name: ECDSA, namedCurve: P-384}, true, [sign, verify, sign, sign, verify, unwrapKey])\n[PASS] Bad usages: generateKey({name: ECDSA, namedCurve: P-384}, true, [deriveKey])\n[PASS] Bad usages: generateKey({name: ECDSA, namedCurve: P-384}, true, [sign, deriveKey])\n[PASS] Bad usages: generateKey({name: ECDSA, namedCurve: P-384}, true, [verify, sign, deriveKey])\n[PASS] Bad usages: generateKey({name: ECDSA, namedCurve: P-384}, true, [sign, verify, sign, sign, verify, deriveKey])\n[PASS] Bad usages: generateKey({name: ECDSA, namedCurve: P-384}, true, [deriveBits])\n[PASS] Bad usages: generateKey({name: ECDSA, namedCurve: P-384}, true, [sign, deriveBits])\n[PASS] Bad usages: generateKey({name: ECDSA, namedCurve: P-384}, true, [verify, sign, deriveBits])\n[PASS] Bad usages: generateKey({name: ECDSA, namedCurve: P-384}, true, [sign, verify, sign, sign, verify, deriveBits])\n[PASS] Bad usages: generateKey({name: ECDSA, namedCurve: P-521}, true, [encrypt])\n[PASS] Bad usages: generateKey({name: ECDSA, namedCurve: P-521}, true, [sign, encrypt])\n[PASS] Bad usages: generateKey({name: ECDSA, namedCurve: P-521}, true, [verify, sign, encrypt])\n[PASS] Bad usages: generateKey({name: ECDSA, namedCurve: P-521}, true, [sign, verify, sign, sign, verify, encrypt])\n[PASS] Bad usages: generateKey({name: ECDSA, namedCurve: P-521}, true, [decrypt])\n[PASS] Bad usages: generateKey({name: ECDSA, namedCurve: P-521}, true, [sign, decrypt])\n[PASS] Bad usages: generateKey({name: ECDSA, namedCurve: P-521}, true, [verify, sign, decrypt])\n[PASS] Bad usages: generateKey({name: ECDSA, namedCurve: P-521}, true, [sign, verify, sign, sign, verify, decrypt])\n[PASS] Bad usages: generateKey({name: ECDSA, namedCurve: P-521}, true, [wrapKey])\n[PASS] Bad usages: generateKey({name: ECDSA, namedCurve: P-521}, true, [sign, wrapKey])\n[PASS] Bad usages: generateKey({name: ECDSA, namedCurve: P-521}, true, [verify, sign, wrapKey])\n[PASS] Bad usages: generateKey({name: ECDSA, namedCurve: P-521}, true, [sign, verify, sign, sign, verify, wrapKey])\n[PASS] Bad usages: generateKey({name: ECDSA, namedCurve: P-521}, true, [unwrapKey])\n[PASS] Bad usages: generateKey({name: ECDSA, namedCurve: P-521}, true, [sign, unwrapKey])\n[PASS] Bad usages: generateKey({name: ECDSA, namedCurve: P-521}, true, [verify, sign, unwrapKey])\n[PASS] Bad usages: generateKey({name: ECDSA, namedCurve: P-521}, true, [sign, verify, sign, sign, verify, unwrapKey])\n[PASS] Bad usages: generateKey({name: ECDSA, namedCurve: P-521}, true, [deriveKey])\n[PASS] Bad usages: generateKey({name: ECDSA, namedCurve: P-521}, true, [sign, deriveKey])\n[PASS] Bad usages: generateKey({name: ECDSA, namedCurve: P-521}, true, [verify, sign, deriveKey])\n[PASS] Bad usages: generateKey({name: ECDSA, namedCurve: P-521}, true, [sign, verify, sign, sign, verify, deriveKey])\n[PASS] Bad usages: generateKey({name: ECDSA, namedCurve: P-521}, true, [deriveBits])\n[PASS] Bad usages: generateKey({name: ECDSA, namedCurve: P-521}, true, [sign, deriveBits])\n[PASS] Bad usages: generateKey({name: ECDSA, namedCurve: P-521}, true, [verify, sign, deriveBits])\n[PASS] Bad usages: generateKey({name: ECDSA, namedCurve: P-521}, true, [sign, verify, sign, sign, verify, deriveBits])\n[PASS] Bad algorithm property: generateKey({name: ECDSA, namedCurve: P-512}, false, [sign])\n[PASS] Bad algorithm property: generateKey({name: ECDSA, namedCurve: P-512}, true, [sign])\n[PASS] Bad algorithm property: generateKey({name: ECDSA, namedCurve: P-512}, false, [verify, sign])\n[PASS] Bad algorithm property: generateKey({name: ECDSA, namedCurve: P-512}, true, [verify, sign])\n[PASS] Bad algorithm property: generateKey({name: ECDSA, namedCurve: P-512}, false, [])\n[PASS] Bad algorithm property: generateKey({name: ECDSA, namedCurve: P-512}, true, [])\n[PASS] Bad algorithm property: generateKey({name: ECDSA, namedCurve: P-512}, false, [sign, verify, sign, sign, verify])\n[PASS] Bad algorithm property: generateKey({name: ECDSA, namedCurve: P-512}, true, [sign, verify, sign, sign, verify])\n[PASS] Bad algorithm property: generateKey({name: ECDSA, namedCurve: Curve25519}, false, [sign])\n[PASS] Bad algorithm property: generateKey({name: ECDSA, namedCurve: Curve25519}, true, [sign])\n[PASS] Bad algorithm property: generateKey({name: ECDSA, namedCurve: Curve25519}, false, [verify, sign])\n[PASS] Bad algorithm property: generateKey({name: ECDSA, namedCurve: Curve25519}, true, [verify, sign])\n[PASS] Bad algorithm property: generateKey({name: ECDSA, namedCurve: Curve25519}, false, [])\n[PASS] Bad algorithm property: generateKey({name: ECDSA, namedCurve: Curve25519}, true, [])\n[PASS] Bad algorithm property: generateKey({name: ECDSA, namedCurve: Curve25519}, false, [sign, verify, sign, sign, verify])\n[PASS] Bad algorithm property: generateKey({name: ECDSA, namedCurve: Curve25519}, true, [sign, verify, sign, sign, verify])\n[PASS] Empty usages: generateKey({name: ECDSA, namedCurve: P-256}, false, [])\n[PASS] Empty usages: generateKey({name: ECDSA, namedCurve: P-256}, true, [])\n[PASS] Empty usages: generateKey({name: ECDSA, namedCurve: P-384}, false, [])\n[PASS] Empty usages: generateKey({name: ECDSA, namedCurve: P-384}, true, [])\n[PASS] Empty usages: generateKey({name: ECDSA, namedCurve: P-521}, false, [])\n[PASS] Empty usages: generateKey({name: ECDSA, namedCurve: P-521}, true, [])\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, long salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, long salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, long salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, long salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad usages: generateKey({name: Ed448}, true, [encrypt])\n[PASS] Bad usages: generateKey({name: Ed448}, true, [sign, encrypt])\n[PASS] Bad usages: generateKey({name: Ed448}, true, [verify, sign, encrypt])\n[PASS] Bad usages: generateKey({name: Ed448}, true, [sign, verify, sign, sign, verify, encrypt])\n[PASS] Bad usages: generateKey({name: Ed448}, true, [decrypt])\n[PASS] Bad usages: generateKey({name: Ed448}, true, [sign, decrypt])\n[PASS] Bad usages: generateKey({name: Ed448}, true, [verify, sign, decrypt])\n[PASS] Bad usages: generateKey({name: Ed448}, true, [sign, verify, sign, sign, verify, decrypt])\n[PASS] Bad usages: generateKey({name: Ed448}, true, [wrapKey])\n[PASS] Bad usages: generateKey({name: Ed448}, true, [sign, wrapKey])\n[PASS] Bad usages: generateKey({name: Ed448}, true, [verify, sign, wrapKey])\n[PASS] Bad usages: generateKey({name: Ed448}, true, [sign, verify, sign, sign, verify, wrapKey])\n[PASS] Bad usages: generateKey({name: Ed448}, true, [unwrapKey])\n[PASS] Bad usages: generateKey({name: Ed448}, true, [sign, unwrapKey])\n[PASS] Bad usages: generateKey({name: Ed448}, true, [verify, sign, unwrapKey])\n[PASS] Bad usages: generateKey({name: Ed448}, true, [sign, verify, sign, sign, verify, unwrapKey])\n[PASS] Bad usages: generateKey({name: Ed448}, true, [deriveKey])\n[PASS] Bad usages: generateKey({name: Ed448}, true, [sign, deriveKey])\n[PASS] Bad usages: generateKey({name: Ed448}, true, [verify, sign, deriveKey])\n[PASS] Bad usages: generateKey({name: Ed448}, true, [sign, verify, sign, sign, verify, deriveKey])\n[PASS] Bad usages: generateKey({name: Ed448}, true, [deriveBits])\n[PASS] Bad usages: generateKey({name: Ed448}, true, [sign, deriveBits])\n[PASS] Bad usages: generateKey({name: Ed448}, true, [verify, sign, deriveBits])\n[PASS] Bad usages: generateKey({name: Ed448}, true, [sign, verify, sign, sign, verify, deriveBits])\n[PASS] Empty usages: generateKey({name: Ed448}, false, [])\n[PASS] Empty usages: generateKey({name: Ed448}, true, [])\n[PASS] Bad usages: generateKey({name: Ed25519}, true, [verify, sign, encrypt])\n[PASS] Bad usages: generateKey({name: Ed25519}, true, [sign, verify, sign, sign, verify, encrypt])\n[PASS] Bad usages: generateKey({name: Ed25519}, true, [decrypt])\n[PASS] Bad usages: generateKey({name: Ed25519}, true, [sign, decrypt])\n[PASS] Bad usages: generateKey({name: Ed25519}, true, [verify, sign, decrypt])\n[PASS] Bad usages: generateKey({name: Ed25519}, true, [sign, verify, sign, sign, verify, decrypt])\n[PASS] Bad usages: generateKey({name: Ed25519}, true, [wrapKey])\n[PASS] Bad usages: generateKey({name: Ed25519}, true, [sign, wrapKey])\n[PASS] Bad usages: generateKey({name: Ed25519}, true, [verify, sign, wrapKey])\n[PASS] Bad usages: generateKey({name: Ed25519}, true, [sign, verify, sign, sign, verify, wrapKey])\n[PASS] Bad usages: generateKey({name: Ed25519}, true, [unwrapKey])\n[PASS] Bad usages: generateKey({name: Ed25519}, true, [sign, unwrapKey])\n[PASS] Bad usages: generateKey({name: Ed25519}, true, [verify, sign, unwrapKey])\n[PASS] Bad usages: generateKey({name: Ed25519}, true, [sign, verify, sign, sign, verify, unwrapKey])\n[PASS] Bad usages: generateKey({name: Ed25519}, true, [deriveKey])\n[PASS] Bad usages: generateKey({name: Ed25519}, true, [sign, deriveKey])\n[PASS] Bad usages: generateKey({name: Ed25519}, true, [verify, sign, deriveKey])\n[PASS] Bad usages: generateKey({name: Ed25519}, true, [sign, verify, sign, sign, verify, deriveKey])\n[PASS] Bad usages: generateKey({name: Ed25519}, true, [deriveBits])\n[PASS] Bad usages: generateKey({name: Ed25519}, true, [sign, deriveBits])\n[PASS] Bad usages: generateKey({name: Ed25519}, true, [verify, sign, deriveBits])\n[PASS] Bad usages: generateKey({name: Ed25519}, true, [sign, verify, sign, sign, verify, deriveBits])\n[PASS] Empty usages: generateKey({name: Ed25519}, false, [])\n[PASS] Empty usages: generateKey({name: Ed25519}, true, [])\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, empty salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, empty salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, empty salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, empty salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, short salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, short salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, short salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, short salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Empty usages: generateKey({name: ECDH, namedCurve: P-384}, true, [])\n[PASS] Empty usages: generateKey({name: ECDH, namedCurve: P-521}, false, [])\n[PASS] Empty usages: generateKey({name: ECDH, namedCurve: P-521}, true, [])\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, short salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, short salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, short salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, short salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, long salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, long salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, long salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, long salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, empty salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, empty salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, empty salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, empty salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Bad algorithm: generateKey(AES, false, [decrypt])\n[PASS] Bad algorithm: generateKey(AES, true, [decrypt])\n[PASS] Bad algorithm: generateKey(AES, RED, [decrypt])\n[PASS] Bad algorithm: generateKey(AES, 7, [decrypt])\n[PASS] Bad algorithm: generateKey(AES, false, [decrypt])\n[PASS] Bad algorithm: generateKey(AES, true, [decrypt])\n[PASS] Bad algorithm: generateKey(AES, RED, [decrypt])\n[PASS] Bad algorithm: generateKey(AES, 7, [decrypt])\n[PASS] Bad algorithm: generateKey(AES, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey(AES, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey(AES, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey(AES, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey(AES, false, [sign])\n[PASS] Bad algorithm: generateKey(AES, true, [sign])\n[PASS] Bad algorithm: generateKey(AES, RED, [sign])\n[PASS] Bad algorithm: generateKey(AES, 7, [sign])\n[PASS] Bad algorithm: generateKey(AES, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey(AES, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey(AES, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey(AES, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey(AES, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey(AES, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey(AES, false, [sign])\n[PASS] Bad algorithm: generateKey(AES, true, [sign])\n[PASS] Bad algorithm: generateKey(AES, RED, [sign])\n[PASS] Bad algorithm: generateKey(AES, 7, [sign])\n[PASS] Bad algorithm: generateKey(AES, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey(AES, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey(AES, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey(AES, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey(AES, false, [deriveBits])\n[PASS] Bad algorithm: generateKey(AES, true, [deriveBits])\n[PASS] Bad algorithm: generateKey(AES, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey(AES, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey(AES, false, [])\n[PASS] Bad algorithm: generateKey(AES, true, [])\n[PASS] Bad algorithm: generateKey(AES, RED, [])\n[PASS] Bad algorithm: generateKey(AES, 7, [])\n[PASS] Bad algorithm: generateKey(AES, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey(AES, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey(AES, false, [deriveBits])\n[PASS] Bad algorithm: generateKey(AES, true, [deriveBits])\n[PASS] Bad algorithm: generateKey(AES, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey(AES, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey(AES, false, [])\n[PASS] Bad algorithm: generateKey(AES, true, [])\n[PASS] Bad algorithm: generateKey(AES, RED, [])\n[PASS] Bad algorithm: generateKey(AES, 7, [])\n[PASS] Bad algorithm: generateKey(AES, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey(AES, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey(AES, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey(AES, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey(AES, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey(AES, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey(AES, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey(AES, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [sign])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [sign])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [sign])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [sign])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [sign])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [sign])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [sign])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [sign])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey(AES, false, [decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, true, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey(AES, RED, [decrypt])\n[PASS] Bad algorithm: generateKey(AES, 7, [decrypt])\n[PASS] Bad algorithm: generateKey(AES, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey(AES, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey(AES, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey(AES, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey(AES, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey(AES, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey(AES, false, [sign])\n[PASS] Bad algorithm: generateKey(AES, true, [sign])\n[PASS] Bad algorithm: generateKey(AES, RED, [sign])\n[PASS] Bad algorithm: generateKey(AES, 7, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey(AES, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey(AES, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey(AES, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey(AES, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey(AES, false, [deriveBits])\n[PASS] Bad algorithm: generateKey(AES, true, [deriveBits])\n[PASS] Bad algorithm: generateKey(AES, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey(AES, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey(AES, false, [])\n[PASS] Bad algorithm: generateKey(AES, true, [])\n[PASS] Bad algorithm: generateKey(AES, RED, [])\n[PASS] Bad algorithm: generateKey(AES, 7, [])\n[PASS] Bad algorithm: generateKey(AES, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey(AES, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey(AES, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey(AES, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [sign])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [sign])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [sign])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [sign])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [encrypt])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign, encrypt])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [verify, sign, encrypt])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign, verify, sign, sign, verify, encrypt])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [decrypt])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign, decrypt])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [verify, sign, decrypt])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign, verify, sign, sign, verify, decrypt])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [wrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign, wrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [verify, sign, wrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign, verify, sign, sign, verify, wrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign, unwrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [verify, sign, unwrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign, verify, sign, sign, verify, unwrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveKey])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign, deriveKey])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [verify, sign, deriveKey])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign, verify, sign, sign, verify, deriveKey])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign, deriveBits])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [verify, sign, deriveBits])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign, verify, sign, sign, verify, deriveBits])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [encrypt])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign, encrypt])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [verify, sign, encrypt])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign, verify, sign, sign, verify, encrypt])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [decrypt])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign, decrypt])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [verify, sign, decrypt])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign, verify, sign, sign, verify, decrypt])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [wrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign, wrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [verify, sign, wrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign, verify, sign, sign, verify, wrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign, unwrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [verify, sign, unwrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign, verify, sign, sign, verify, unwrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveKey])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign, deriveKey])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [verify, sign, deriveKey])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign, verify, sign, sign, verify, deriveKey])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign, deriveBits])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [verify, sign, deriveBits])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign, verify, sign, sign, verify, deriveBits])\n[PASS] Bad algorithm property: generateKey({hash: SHA-256, modulusLength: 1024, name: RSA-PSS, publicExponent: {0: 1}}, false, [sign])\n[PASS] Bad algorithm property: generateKey({hash: SHA-256, modulusLength: 1024, name: RSA-PSS, publicExponent: {0: 1}}, true, [sign])\n[PASS] Bad algorithm property: generateKey({hash: SHA-256, modulusLength: 1024, name: RSA-PSS, publicExponent: {0: 1}}, false, [verify, sign])\n[PASS] Bad algorithm property: generateKey({hash: SHA-256, modulusLength: 1024, name: RSA-PSS, publicExponent: {0: 1}}, true, [verify, sign])\n[PASS] Bad algorithm property: generateKey({hash: SHA-256, modulusLength: 1024, name: RSA-PSS, publicExponent: {0: 1}}, false, [])\n[PASS] Bad algorithm property: generateKey({hash: SHA-256, modulusLength: 1024, name: RSA-PSS, publicExponent: {0: 1}}, true, [])\n[PASS] Bad algorithm property: generateKey({hash: SHA-256, modulusLength: 1024, name: RSA-PSS, publicExponent: {0: 1}}, false, [sign, verify, sign, sign, verify])\n[PASS] Bad algorithm property: generateKey({hash: SHA-256, modulusLength: 1024, name: RSA-PSS, publicExponent: {0: 1}}, true, [sign, verify, sign, sign, verify])\n[PASS] Bad algorithm property: generateKey({hash: SHA-256, modulusLength: 1024, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 0}}, false, [sign])\n[PASS] Bad algorithm property: generateKey({hash: SHA-256, modulusLength: 1024, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 0}}, true, [sign])\n[PASS] Bad algorithm property: generateKey({hash: SHA-256, modulusLength: 1024, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 0}}, false, [verify, sign])\n[PASS] Bad algorithm property: generateKey({hash: SHA-256, modulusLength: 1024, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 0}}, true, [verify, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad usages: generateKey({hash: SHA-1, length: 160, name: HMAC}, true, [encrypt])\n[PASS] Bad usages: generateKey({hash: SHA-1, length: 160, name: HMAC}, true, [sign, encrypt])\n[PASS] Bad usages: generateKey({hash: SHA-1, length: 160, name: HMAC}, true, [verify, sign, encrypt])\n[PASS] Bad usages: generateKey({hash: SHA-1, length: 160, name: HMAC}, true, [verify, encrypt])\n[PASS] Bad usages: generateKey({hash: SHA-1, length: 160, name: HMAC}, true, [sign, verify, sign, verify, encrypt])\n[PASS] Bad usages: generateKey({hash: SHA-1, length: 160, name: HMAC}, true, [decrypt])\n[PASS] Bad usages: generateKey({hash: SHA-1, length: 160, name: HMAC}, true, [sign, decrypt])\n[PASS] Bad usages: generateKey({hash: SHA-1, length: 160, name: HMAC}, true, [verify, sign, decrypt])\n[PASS] Bad usages: generateKey({hash: SHA-1, length: 160, name: HMAC}, true, [verify, decrypt])\n[PASS] Bad usages: generateKey({hash: SHA-1, length: 160, name: HMAC}, true, [sign, verify, sign, verify, decrypt])\n[PASS] Bad usages: generateKey({hash: SHA-1, length: 160, name: HMAC}, true, [wrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-1, length: 160, name: HMAC}, true, [sign, wrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-1, length: 160, name: HMAC}, true, [verify, sign, wrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-1, length: 160, name: HMAC}, true, [verify, wrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-1, length: 160, name: HMAC}, true, [sign, verify, sign, verify, wrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-1, length: 160, name: HMAC}, true, [unwrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-1, length: 160, name: HMAC}, true, [sign, unwrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-1, length: 160, name: HMAC}, true, [verify, sign, unwrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-1, length: 160, name: HMAC}, true, [verify, unwrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-1, length: 160, name: HMAC}, true, [sign, verify, sign, verify, unwrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-1, length: 160, name: HMAC}, true, [deriveKey])\n[PASS] Bad usages: generateKey({hash: SHA-1, length: 160, name: HMAC}, true, [sign, deriveKey])\n[PASS] Bad usages: generateKey({hash: SHA-1, length: 160, name: HMAC}, true, [verify, sign, deriveKey])\n[PASS] Bad usages: generateKey({hash: SHA-1, length: 160, name: HMAC}, true, [verify, deriveKey])\n[PASS] Bad usages: generateKey({hash: SHA-1, length: 160, name: HMAC}, true, [sign, verify, sign, verify, deriveKey])\n[PASS] Bad usages: generateKey({hash: SHA-1, length: 160, name: HMAC}, true, [deriveBits])\n[PASS] Bad usages: generateKey({hash: SHA-1, length: 160, name: HMAC}, true, [sign, deriveBits])\n[PASS] Bad usages: generateKey({hash: SHA-1, length: 160, name: HMAC}, true, [verify, sign, deriveBits])\n[PASS] Bad usages: generateKey({hash: SHA-1, length: 160, name: HMAC}, true, [verify, deriveBits])\n[PASS] Bad usages: generateKey({hash: SHA-1, length: 160, name: HMAC}, true, [sign, verify, sign, verify, deriveBits])\n[PASS] Bad usages: generateKey({hash: SHA-256, length: 256, name: HMAC}, true, [encrypt])\n[PASS] Bad usages: generateKey({hash: SHA-256, length: 256, name: HMAC}, true, [sign, encrypt])\n[PASS] Bad usages: generateKey({hash: SHA-256, length: 256, name: HMAC}, true, [verify, sign, encrypt])\n[PASS] Bad usages: generateKey({hash: SHA-256, length: 256, name: HMAC}, true, [verify, encrypt])\n[PASS] Bad usages: generateKey({hash: SHA-256, length: 256, name: HMAC}, true, [sign, verify, sign, verify, encrypt])\n[PASS] Bad usages: generateKey({hash: SHA-256, length: 256, name: HMAC}, true, [decrypt])\n[PASS] Bad usages: generateKey({hash: SHA-256, length: 256, name: HMAC}, true, [sign, decrypt])\n[PASS] Bad usages: generateKey({hash: SHA-256, length: 256, name: HMAC}, true, [verify, sign, decrypt])\n[PASS] Bad usages: generateKey({hash: SHA-256, length: 256, name: HMAC}, true, [verify, decrypt])\n[PASS] Bad usages: generateKey({hash: SHA-256, length: 256, name: HMAC}, true, [sign, verify, sign, verify, decrypt])\n[PASS] Bad usages: generateKey({hash: SHA-256, length: 256, name: HMAC}, true, [wrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-256, length: 256, name: HMAC}, true, [sign, wrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-256, length: 256, name: HMAC}, true, [verify, sign, wrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-256, length: 256, name: HMAC}, true, [verify, wrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-256, length: 256, name: HMAC}, true, [sign, verify, sign, verify, wrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-256, length: 256, name: HMAC}, true, [unwrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-256, length: 256, name: HMAC}, true, [sign, unwrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-256, length: 256, name: HMAC}, true, [verify, sign, unwrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-256, length: 256, name: HMAC}, true, [verify, unwrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-256, length: 256, name: HMAC}, true, [sign, verify, sign, verify, unwrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-256, length: 256, name: HMAC}, true, [deriveKey])\n[PASS] Bad usages: generateKey({hash: SHA-256, length: 256, name: HMAC}, true, [sign, deriveKey])\n[PASS] Bad usages: generateKey({hash: SHA-256, length: 256, name: HMAC}, true, [verify, sign, deriveKey])\n[PASS] Bad usages: generateKey({hash: SHA-256, length: 256, name: HMAC}, true, [verify, deriveKey])\n[PASS] Bad usages: generateKey({hash: SHA-256, length: 256, name: HMAC}, true, [sign, verify, sign, verify, deriveKey])\n[PASS] Bad usages: generateKey({hash: SHA-256, length: 256, name: HMAC}, true, [deriveBits])\n[PASS] Bad usages: generateKey({hash: SHA-256, length: 256, name: HMAC}, true, [sign, deriveBits])\n[PASS] Bad usages: generateKey({hash: SHA-256, length: 256, name: HMAC}, true, [verify, sign, deriveBits])\n[PASS] Bad usages: generateKey({hash: SHA-256, length: 256, name: HMAC}, true, [verify, deriveBits])\n[PASS] Bad usages: generateKey({hash: SHA-256, length: 256, name: HMAC}, true, [sign, verify, sign, verify, deriveBits])\n[PASS] Bad usages: generateKey({hash: SHA-384, length: 384, name: HMAC}, true, [encrypt])\n[PASS] Bad usages: generateKey({hash: SHA-384, length: 384, name: HMAC}, true, [sign, encrypt])\n[PASS] Bad usages: generateKey({hash: SHA-384, length: 384, name: HMAC}, true, [verify, sign, encrypt])\n[PASS] Bad usages: generateKey({hash: SHA-384, length: 384, name: HMAC}, true, [verify, encrypt])\n[PASS] Bad usages: generateKey({hash: SHA-384, length: 384, name: HMAC}, true, [sign, verify, sign, verify, encrypt])\n[PASS] Bad usages: generateKey({hash: SHA-384, length: 384, name: HMAC}, true, [decrypt])\n[PASS] Bad usages: generateKey({hash: SHA-384, length: 384, name: HMAC}, true, [sign, decrypt])\n[PASS] Bad usages: generateKey({hash: SHA-384, length: 384, name: HMAC}, true, [verify, sign, decrypt])\n[PASS] Bad usages: generateKey({hash: SHA-384, length: 384, name: HMAC}, true, [verify, decrypt])\n[PASS] Bad usages: generateKey({hash: SHA-384, length: 384, name: HMAC}, true, [sign, verify, sign, verify, decrypt])\n[PASS] Bad usages: generateKey({hash: SHA-384, length: 384, name: HMAC}, true, [wrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-384, length: 384, name: HMAC}, true, [sign, wrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-384, length: 384, name: HMAC}, true, [verify, sign, wrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-384, length: 384, name: HMAC}, true, [verify, wrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-384, length: 384, name: HMAC}, true, [sign, verify, sign, verify, wrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-384, length: 384, name: HMAC}, true, [unwrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-384, length: 384, name: HMAC}, true, [sign, unwrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-384, length: 384, name: HMAC}, true, [verify, sign, unwrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-384, length: 384, name: HMAC}, true, [verify, unwrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-384, length: 384, name: HMAC}, true, [sign, verify, sign, verify, unwrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-384, length: 384, name: HMAC}, true, [deriveKey])\n[PASS] Bad usages: generateKey({hash: SHA-384, length: 384, name: HMAC}, true, [sign, deriveKey])\n[PASS] Bad usages: generateKey({hash: SHA-384, length: 384, name: HMAC}, true, [verify, sign, deriveKey])\n[PASS] Bad usages: generateKey({hash: SHA-384, length: 384, name: HMAC}, true, [verify, deriveKey])\n[PASS] Bad usages: generateKey({hash: SHA-384, length: 384, name: HMAC}, true, [sign, verify, sign, verify, deriveKey])\n[PASS] Bad usages: generateKey({hash: SHA-384, length: 384, name: HMAC}, true, [deriveBits])\n[PASS] Bad usages: generateKey({hash: SHA-384, length: 384, name: HMAC}, true, [sign, deriveBits])\n[PASS] Bad usages: generateKey({hash: SHA-384, length: 384, name: HMAC}, true, [verify, sign, deriveBits])\n[PASS] Bad usages: generateKey({hash: SHA-384, length: 384, name: HMAC}, true, [verify, deriveBits])\n[PASS] Bad usages: generateKey({hash: SHA-384, length: 384, name: HMAC}, true, [sign, verify, sign, verify, deriveBits])\n[PASS] Bad usages: generateKey({hash: SHA-512, length: 512, name: HMAC}, true, [encrypt])\n[PASS] Bad usages: generateKey({hash: SHA-512, length: 512, name: HMAC}, true, [sign, encrypt])\n[PASS] Bad usages: generateKey({hash: SHA-512, length: 512, name: HMAC}, true, [verify, sign, encrypt])\n[PASS] Bad usages: generateKey({hash: SHA-512, length: 512, name: HMAC}, true, [verify, encrypt])\n[PASS] Bad usages: generateKey({hash: SHA-512, length: 512, name: HMAC}, true, [sign, verify, sign, verify, encrypt])\n[PASS] Bad usages: generateKey({hash: SHA-512, length: 512, name: HMAC}, true, [decrypt])\n[PASS] Bad usages: generateKey({hash: SHA-512, length: 512, name: HMAC}, true, [sign, decrypt])\n[PASS] Bad usages: generateKey({hash: SHA-512, length: 512, name: HMAC}, true, [verify, sign, decrypt])\n[PASS] Bad usages: generateKey({hash: SHA-512, length: 512, name: HMAC}, true, [verify, decrypt])\n[PASS] Bad usages: generateKey({hash: SHA-512, length: 512, name: HMAC}, true, [sign, verify, sign, verify, decrypt])\n[PASS] Bad usages: generateKey({hash: SHA-512, length: 512, name: HMAC}, true, [wrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-512, length: 512, name: HMAC}, true, [sign, wrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-512, length: 512, name: HMAC}, true, [verify, sign, wrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-512, length: 512, name: HMAC}, true, [verify, wrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-512, length: 512, name: HMAC}, true, [sign, verify, sign, verify, wrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-512, length: 512, name: HMAC}, true, [unwrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-512, length: 512, name: HMAC}, true, [sign, unwrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-512, length: 512, name: HMAC}, true, [verify, sign, unwrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-512, length: 512, name: HMAC}, true, [verify, unwrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-512, length: 512, name: HMAC}, true, [sign, verify, sign, verify, unwrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-512, length: 512, name: HMAC}, true, [deriveKey])\n[PASS] Bad usages: generateKey({hash: SHA-512, length: 512, name: HMAC}, true, [sign, deriveKey])\n[PASS] Bad usages: generateKey({hash: SHA-512, length: 512, name: HMAC}, true, [verify, sign, deriveKey])\n[PASS] Bad usages: generateKey({hash: SHA-512, length: 512, name: HMAC}, true, [verify, deriveKey])\n[PASS] Bad usages: generateKey({hash: SHA-512, length: 512, name: HMAC}, true, [sign, verify, sign, verify, deriveKey])\n[PASS] Bad usages: generateKey({hash: SHA-512, length: 512, name: HMAC}, true, [deriveBits])\n[PASS] Bad usages: generateKey({hash: SHA-512, length: 512, name: HMAC}, true, [sign, deriveBits])\n[PASS] Bad usages: generateKey({hash: SHA-512, length: 512, name: HMAC}, true, [verify, sign, deriveBits])\n[PASS] Bad usages: generateKey({hash: SHA-512, length: 512, name: HMAC}, true, [verify, deriveBits])\n[PASS] Bad usages: generateKey({hash: SHA-512, length: 512, name: HMAC}, true, [sign, verify, sign, verify, deriveBits])\n[PASS] Bad usages: generateKey({hash: SHA-1, name: HMAC}, true, [encrypt])\n[PASS] Bad usages: generateKey({hash: SHA-1, name: HMAC}, true, [sign, encrypt])\n[PASS] Bad usages: generateKey({hash: SHA-1, name: HMAC}, true, [verify, sign, encrypt])\n[PASS] Bad usages: generateKey({hash: SHA-1, name: HMAC}, true, [verify, encrypt])\n[PASS] Bad usages: generateKey({hash: SHA-1, name: HMAC}, true, [sign, verify, sign, verify, encrypt])\n[PASS] Bad usages: generateKey({hash: SHA-1, name: HMAC}, true, [decrypt])\n[PASS] Bad usages: generateKey({hash: SHA-1, name: HMAC}, true, [sign, decrypt])\n[PASS] Bad usages: generateKey({hash: SHA-1, name: HMAC}, true, [verify, sign, decrypt])\n[PASS] Bad usages: generateKey({hash: SHA-1, name: HMAC}, true, [verify, decrypt])\n[PASS] Bad usages: generateKey({hash: SHA-1, name: HMAC}, true, [sign, verify, sign, verify, decrypt])\n[PASS] Bad usages: generateKey({hash: SHA-1, name: HMAC}, true, [wrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-1, name: HMAC}, true, [sign, wrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-1, name: HMAC}, true, [verify, sign, wrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-1, name: HMAC}, true, [verify, wrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-1, name: HMAC}, true, [sign, verify, sign, verify, wrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-1, name: HMAC}, true, [unwrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-1, name: HMAC}, true, [sign, unwrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-1, name: HMAC}, true, [verify, sign, unwrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-1, name: HMAC}, true, [verify, unwrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-1, name: HMAC}, true, [sign, verify, sign, verify, unwrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-1, name: HMAC}, true, [deriveKey])\n[PASS] Bad usages: generateKey({hash: SHA-1, name: HMAC}, true, [sign, deriveKey])\n[PASS] Bad usages: generateKey({hash: SHA-1, name: HMAC}, true, [verify, sign, deriveKey])\n[PASS] Bad usages: generateKey({hash: SHA-1, name: HMAC}, true, [verify, deriveKey])\n[PASS] Bad usages: generateKey({hash: SHA-1, name: HMAC}, true, [sign, verify, sign, verify, deriveKey])\n[PASS] Bad usages: generateKey({hash: SHA-1, name: HMAC}, true, [deriveBits])\n[PASS] Bad usages: generateKey({hash: SHA-1, name: HMAC}, true, [sign, deriveBits])\n[PASS] Bad usages: generateKey({hash: SHA-1, name: HMAC}, true, [verify, sign, deriveBits])\n[PASS] Bad usages: generateKey({hash: SHA-1, name: HMAC}, true, [verify, deriveBits])\n[PASS] Bad usages: generateKey({hash: SHA-1, name: HMAC}, true, [sign, verify, sign, verify, deriveBits])\n[PASS] Bad usages: generateKey({hash: SHA-256, name: HMAC}, true, [encrypt])\n[PASS] Bad usages: generateKey({hash: SHA-256, name: HMAC}, true, [sign, encrypt])\n[PASS] Bad usages: generateKey({hash: SHA-256, name: HMAC}, true, [verify, sign, encrypt])\n[PASS] Bad usages: generateKey({hash: SHA-256, name: HMAC}, true, [verify, encrypt])\n[PASS] Bad usages: generateKey({hash: SHA-256, name: HMAC}, true, [sign, verify, sign, verify, encrypt])\n[PASS] Bad usages: generateKey({hash: SHA-256, name: HMAC}, true, [decrypt])\n[PASS] Bad usages: generateKey({hash: SHA-256, name: HMAC}, true, [sign, decrypt])\n[PASS] Bad usages: generateKey({hash: SHA-256, name: HMAC}, true, [verify, sign, decrypt])\n[PASS] Bad usages: generateKey({hash: SHA-256, name: HMAC}, true, [verify, decrypt])\n[PASS] Bad usages: generateKey({hash: SHA-256, name: HMAC}, true, [sign, verify, sign, verify, decrypt])\n[PASS] Bad usages: generateKey({hash: SHA-256, name: HMAC}, true, [wrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-256, name: HMAC}, true, [sign, wrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-256, name: HMAC}, true, [verify, sign, wrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-256, name: HMAC}, true, [verify, wrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-256, name: HMAC}, true, [sign, verify, sign, verify, wrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-256, name: HMAC}, true, [unwrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-256, name: HMAC}, true, [sign, unwrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-256, name: HMAC}, true, [verify, sign, unwrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-256, name: HMAC}, true, [verify, unwrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-256, name: HMAC}, true, [sign, verify, sign, verify, unwrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-256, name: HMAC}, true, [deriveKey])\n[PASS] Bad usages: generateKey({hash: SHA-256, name: HMAC}, true, [sign, deriveKey])\n[PASS] Bad usages: generateKey({hash: SHA-256, name: HMAC}, true, [verify, sign, deriveKey])\n[PASS] Bad usages: generateKey({hash: SHA-256, name: HMAC}, true, [verify, deriveKey])\n[PASS] Bad usages: generateKey({hash: SHA-256, name: HMAC}, true, [sign, verify, sign, verify, deriveKey])\n[PASS] Bad usages: generateKey({hash: SHA-256, name: HMAC}, true, [deriveBits])\n[PASS] Bad usages: generateKey({hash: SHA-256, name: HMAC}, true, [sign, deriveBits])\n[PASS] Bad usages: generateKey({hash: SHA-256, name: HMAC}, true, [verify, sign, deriveBits])\n[PASS] Bad usages: generateKey({hash: SHA-256, name: HMAC}, true, [verify, deriveBits])\n[PASS] Bad usages: generateKey({hash: SHA-256, name: HMAC}, true, [sign, verify, sign, verify, deriveBits])\n[PASS] Bad usages: generateKey({hash: SHA-384, name: HMAC}, true, [encrypt])\n[PASS] Bad usages: generateKey({hash: SHA-384, name: HMAC}, true, [sign, encrypt])\n[PASS] Bad usages: generateKey({hash: SHA-384, name: HMAC}, true, [verify, sign, encrypt])\n[PASS] Bad usages: generateKey({hash: SHA-384, name: HMAC}, true, [verify, encrypt])\n[PASS] Bad usages: generateKey({hash: SHA-384, name: HMAC}, true, [sign, verify, sign, verify, encrypt])\n[PASS] Bad usages: generateKey({hash: SHA-384, name: HMAC}, true, [decrypt])\n[PASS] Bad usages: generateKey({hash: SHA-384, name: HMAC}, true, [sign, decrypt])\n[PASS] Bad usages: generateKey({hash: SHA-384, name: HMAC}, true, [verify, sign, decrypt])\n[PASS] Bad usages: generateKey({hash: SHA-384, name: HMAC}, true, [verify, decrypt])\n[PASS] Bad usages: generateKey({hash: SHA-384, name: HMAC}, true, [sign, verify, sign, verify, decrypt])\n[PASS] Bad usages: generateKey({hash: SHA-384, name: HMAC}, true, [wrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-384, name: HMAC}, true, [sign, wrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-384, name: HMAC}, true, [verify, sign, wrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-384, name: HMAC}, true, [verify, wrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-384, name: HMAC}, true, [sign, verify, sign, verify, wrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-384, name: HMAC}, true, [unwrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-384, name: HMAC}, true, [sign, unwrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-384, name: HMAC}, true, [verify, sign, unwrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-384, name: HMAC}, true, [verify, unwrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-384, name: HMAC}, true, [sign, verify, sign, verify, unwrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-384, name: HMAC}, true, [deriveKey])\n[PASS] Bad usages: generateKey({hash: SHA-384, name: HMAC}, true, [sign, deriveKey])\n[PASS] Bad usages: generateKey({hash: SHA-384, name: HMAC}, true, [verify, sign, deriveKey])\n[PASS] Bad usages: generateKey({hash: SHA-384, name: HMAC}, true, [verify, deriveKey])\n[PASS] Bad usages: generateKey({hash: SHA-384, name: HMAC}, true, [sign, verify, sign, verify, deriveKey])\n[PASS] Bad usages: generateKey({hash: SHA-384, name: HMAC}, true, [deriveBits])\n[PASS] Bad usages: generateKey({hash: SHA-384, name: HMAC}, true, [sign, deriveBits])\n[PASS] Bad usages: generateKey({hash: SHA-384, name: HMAC}, true, [verify, sign, deriveBits])\n[PASS] Bad usages: generateKey({hash: SHA-384, name: HMAC}, true, [verify, deriveBits])\n[PASS] Bad usages: generateKey({hash: SHA-384, name: HMAC}, true, [sign, verify, sign, verify, deriveBits])\n[PASS] Bad usages: generateKey({hash: SHA-512, name: HMAC}, true, [encrypt])\n[PASS] Bad usages: generateKey({hash: SHA-512, name: HMAC}, true, [sign, encrypt])\n[PASS] Bad usages: generateKey({hash: SHA-512, name: HMAC}, true, [verify, sign, encrypt])\n[PASS] Bad usages: generateKey({hash: SHA-512, name: HMAC}, true, [verify, encrypt])\n[PASS] Bad usages: generateKey({hash: SHA-512, name: HMAC}, true, [sign, verify, sign, verify, encrypt])\n[PASS] Bad usages: generateKey({hash: SHA-512, name: HMAC}, true, [decrypt])\n[PASS] Bad usages: generateKey({hash: SHA-512, name: HMAC}, true, [sign, decrypt])\n[PASS] Bad usages: generateKey({hash: SHA-512, name: HMAC}, true, [verify, sign, decrypt])\n[PASS] Bad usages: generateKey({hash: SHA-512, name: HMAC}, true, [verify, decrypt])\n[PASS] Bad usages: generateKey({hash: SHA-512, name: HMAC}, true, [sign, verify, sign, verify, decrypt])\n[PASS] Bad usages: generateKey({hash: SHA-512, name: HMAC}, true, [wrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-512, name: HMAC}, true, [sign, wrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-512, name: HMAC}, true, [verify, sign, wrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-512, name: HMAC}, true, [verify, wrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-512, name: HMAC}, true, [sign, verify, sign, verify, wrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-512, name: HMAC}, true, [unwrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-512, name: HMAC}, true, [sign, unwrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-512, name: HMAC}, true, [verify, sign, unwrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-512, name: HMAC}, true, [verify, unwrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-512, name: HMAC}, true, [sign, verify, sign, verify, unwrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-512, name: HMAC}, true, [deriveKey])\n[PASS] Bad usages: generateKey({hash: SHA-512, name: HMAC}, true, [sign, deriveKey])\n[PASS] Bad usages: generateKey({hash: SHA-512, name: HMAC}, true, [verify, sign, deriveKey])\n[PASS] Bad usages: generateKey({hash: SHA-512, name: HMAC}, true, [verify, deriveKey])\n[PASS] Bad usages: generateKey({hash: SHA-512, name: HMAC}, true, [sign, verify, sign, verify, deriveKey])\n[PASS] Bad usages: generateKey({hash: SHA-512, name: HMAC}, true, [deriveBits])\n[PASS] Bad usages: generateKey({hash: SHA-512, name: HMAC}, true, [sign, deriveBits])\n[PASS] Bad usages: generateKey({hash: SHA-512, name: HMAC}, true, [verify, sign, deriveBits])\n[PASS] Bad usages: generateKey({hash: SHA-512, name: HMAC}, true, [verify, deriveBits])\n[PASS] Bad usages: generateKey({hash: SHA-512, name: HMAC}, true, [sign, verify, sign, verify, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSASSA-PKCS1-v1_5, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [encrypt])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSASSA-PKCS1-v1_5, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign, encrypt])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSASSA-PKCS1-v1_5, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [verify, sign, encrypt])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSASSA-PKCS1-v1_5, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign, verify, sign, sign, verify, encrypt])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSASSA-PKCS1-v1_5, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [decrypt])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSASSA-PKCS1-v1_5, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign, decrypt])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSASSA-PKCS1-v1_5, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [verify, sign, decrypt])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSASSA-PKCS1-v1_5, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign, verify, sign, sign, verify, decrypt])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSASSA-PKCS1-v1_5, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [wrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSASSA-PKCS1-v1_5, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign, wrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSASSA-PKCS1-v1_5, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [verify, sign, wrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSASSA-PKCS1-v1_5, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign, verify, sign, sign, verify, wrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSASSA-PKCS1-v1_5, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSASSA-PKCS1-v1_5, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign, unwrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSASSA-PKCS1-v1_5, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [verify, sign, unwrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSASSA-PKCS1-v1_5, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign, verify, sign, sign, verify, unwrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSASSA-PKCS1-v1_5, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveKey])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSASSA-PKCS1-v1_5, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign, deriveKey])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSASSA-PKCS1-v1_5, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [verify, sign, deriveKey])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSASSA-PKCS1-v1_5, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign, verify, sign, sign, verify, deriveKey])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSASSA-PKCS1-v1_5, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSASSA-PKCS1-v1_5, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign, deriveBits])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSASSA-PKCS1-v1_5, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [verify, sign, deriveBits])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSASSA-PKCS1-v1_5, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign, verify, sign, sign, verify, deriveBits])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSASSA-PKCS1-v1_5, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [encrypt])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSASSA-PKCS1-v1_5, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign, encrypt])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSASSA-PKCS1-v1_5, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [verify, sign, encrypt])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSASSA-PKCS1-v1_5, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign, verify, sign, sign, verify, encrypt])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSASSA-PKCS1-v1_5, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [decrypt])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSASSA-PKCS1-v1_5, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign, decrypt])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSASSA-PKCS1-v1_5, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [verify, sign, decrypt])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSASSA-PKCS1-v1_5, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign, verify, sign, sign, verify, decrypt])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSASSA-PKCS1-v1_5, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [wrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSASSA-PKCS1-v1_5, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign, wrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSASSA-PKCS1-v1_5, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [verify, sign, wrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSASSA-PKCS1-v1_5, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign, verify, sign, sign, verify, wrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSASSA-PKCS1-v1_5, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSASSA-PKCS1-v1_5, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign, unwrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSASSA-PKCS1-v1_5, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [verify, sign, unwrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSASSA-PKCS1-v1_5, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign, verify, sign, sign, verify, unwrapKey])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSASSA-PKCS1-v1_5, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveKey])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSASSA-PKCS1-v1_5, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign, deriveKey])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSASSA-PKCS1-v1_5, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [verify, sign, deriveKey])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSASSA-PKCS1-v1_5, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign, verify, sign, sign, verify, deriveKey])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSASSA-PKCS1-v1_5, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSASSA-PKCS1-v1_5, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign, deriveBits])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSASSA-PKCS1-v1_5, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [verify, sign, deriveBits])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSASSA-PKCS1-v1_5, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign, verify, sign, sign, verify, deriveBits])\n[PASS] Bad algorithm: generateKey(AES, false, [decrypt])\n[PASS] Bad algorithm: generateKey(AES, true, [decrypt])\n[PASS] Bad algorithm: generateKey(AES, RED, [decrypt])\n[PASS] Bad algorithm: generateKey(AES, 7, [decrypt])\n[PASS] Bad algorithm: generateKey(AES, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey(AES, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey(AES, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey(AES, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey(AES, false, [sign])\n[PASS] Bad algorithm: generateKey(AES, true, [sign])\n[PASS] Bad algorithm: generateKey(AES, RED, [sign])\n[PASS] Bad algorithm: generateKey(AES, 7, [sign])\n[PASS] Bad algorithm: generateKey(AES, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey(AES, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey(AES, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey(AES, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey(AES, false, [deriveBits])\n[PASS] Bad algorithm: generateKey(AES, true, [deriveBits])\n[PASS] Bad algorithm: generateKey(AES, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey(AES, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey(AES, false, [])\n[PASS] Bad algorithm: generateKey(AES, true, [])\n[PASS] Bad algorithm: generateKey(AES, RED, [])\n[PASS] Bad algorithm: generateKey(AES, 7, [])\n[PASS] Bad algorithm: generateKey(AES, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey(AES, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey(AES, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey(AES, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [sign])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [sign])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [sign])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [sign])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [decrypt, encrypt, sign])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [wrapKey, decrypt, encrypt, sign])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, wrapKey, decrypt, encrypt, sign])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, decrypt, encrypt, sign])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, wrapKey, encrypt, sign])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, encrypt, sign])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [decrypt, sign])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [wrapKey, decrypt, sign])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, wrapKey, decrypt, sign])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, decrypt, sign])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, wrapKey, sign])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, sign])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [encrypt, decrypt, wrapKey, unwrapKey, decrypt, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey, sign])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [verify])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [decrypt, encrypt, verify])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [wrapKey, decrypt, encrypt, verify])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, wrapKey, decrypt, encrypt, verify])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, decrypt, encrypt, verify])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, wrapKey, encrypt, verify])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, encrypt, verify])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [decrypt, verify])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [wrapKey, decrypt, verify])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, wrapKey, decrypt, verify])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, decrypt, verify])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, wrapKey, verify])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, verify])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [encrypt, decrypt, wrapKey, unwrapKey, decrypt, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey, verify])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveKey])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [decrypt, encrypt, deriveKey])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [wrapKey, decrypt, encrypt, deriveKey])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, wrapKey, decrypt, encrypt, deriveKey])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, decrypt, encrypt, deriveKey])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, wrapKey, encrypt, deriveKey])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, encrypt, deriveKey])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [decrypt, deriveKey])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [wrapKey, decrypt, deriveKey])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, wrapKey, decrypt, deriveKey])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, decrypt, deriveKey])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, wrapKey, deriveKey])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, deriveKey])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [encrypt, decrypt, wrapKey, unwrapKey, decrypt, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey, deriveKey])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [decrypt, encrypt, deriveBits])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [wrapKey, decrypt, encrypt, deriveBits])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, wrapKey, decrypt, encrypt, deriveBits])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, decrypt, encrypt, deriveBits])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, wrapKey, encrypt, deriveBits])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, encrypt, deriveBits])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [decrypt, deriveBits])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [wrapKey, decrypt, deriveBits])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, wrapKey, decrypt, deriveBits])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, decrypt, deriveBits])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, wrapKey, deriveBits])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, deriveBits])\n[PASS] Bad usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [encrypt, decrypt, wrapKey, unwrapKey, decrypt, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey, deriveBits])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [decrypt, encrypt, sign])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [wrapKey, decrypt, encrypt, sign])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, wrapKey, decrypt, encrypt, sign])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, decrypt, encrypt, sign])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, wrapKey, encrypt, sign])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, encrypt, sign])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [decrypt, sign])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [wrapKey, decrypt, sign])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, wrapKey, decrypt, sign])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, decrypt, sign])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, wrapKey, sign])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, sign])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [encrypt, decrypt, wrapKey, unwrapKey, decrypt, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey, sign])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [verify])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [decrypt, encrypt, verify])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [wrapKey, decrypt, encrypt, verify])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, wrapKey, decrypt, encrypt, verify])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, decrypt, encrypt, verify])\n[PASS] Bad algorithm property: generateKey({hash: SHA-256, modulusLength: 1024, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 0}}, false, [])\n[PASS] Bad algorithm property: generateKey({hash: SHA-256, modulusLength: 1024, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 0}}, true, [])\n[PASS] Bad algorithm property: generateKey({hash: SHA-256, modulusLength: 1024, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 0}}, false, [sign, verify, sign, sign, verify])\n[PASS] Bad algorithm property: generateKey({hash: SHA-256, modulusLength: 1024, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 0}}, true, [sign, verify, sign, sign, verify])\n[PASS] Empty usages: generateKey({hash: SHA-1, length: 160, name: HMAC}, false, [])\n[PASS] Empty usages: generateKey({hash: SHA-1, length: 160, name: HMAC}, true, [])\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, short salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, short salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, short salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, short salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, wrapKey, encrypt, verify])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, encrypt, verify])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [decrypt, verify])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [wrapKey, decrypt, verify])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, wrapKey, decrypt, verify])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, decrypt, verify])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, wrapKey, verify])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, verify])\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, empty salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, empty salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, empty salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, empty salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Bad algorithm property: generateKey({hash: SHA-256, modulusLength: 1024, name: RSASSA-PKCS1-v1_5, publicExponent: {0: 1}}, false, [sign])\n[PASS] Bad algorithm property: generateKey({hash: SHA-256, modulusLength: 1024, name: RSASSA-PKCS1-v1_5, publicExponent: {0: 1}}, true, [sign])\n[PASS] Bad algorithm property: generateKey({hash: SHA-256, modulusLength: 1024, name: RSASSA-PKCS1-v1_5, publicExponent: {0: 1}}, false, [verify, sign])\n[PASS] Bad algorithm property: generateKey({hash: SHA-256, modulusLength: 1024, name: RSASSA-PKCS1-v1_5, publicExponent: {0: 1}}, true, [verify, sign])\n[PASS] Bad algorithm property: generateKey({hash: SHA-256, modulusLength: 1024, name: RSASSA-PKCS1-v1_5, publicExponent: {0: 1}}, false, [])\n[PASS] Bad algorithm property: generateKey({hash: SHA-256, modulusLength: 1024, name: RSASSA-PKCS1-v1_5, publicExponent: {0: 1}}, true, [])\n[PASS] Empty usages: generateKey({hash: SHA-256, length: 256, name: HMAC}, false, [])\n[PASS] Empty usages: generateKey({hash: SHA-256, length: 256, name: HMAC}, true, [])\n[PASS] Empty usages: generateKey({hash: SHA-384, length: 384, name: HMAC}, false, [])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [encrypt, decrypt, wrapKey, unwrapKey, decrypt, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey, verify])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveKey])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [decrypt, encrypt, deriveKey])\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, long salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, long salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, long salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, long salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Bad algorithm property: generateKey({hash: SHA-256, modulusLength: 1024, name: RSASSA-PKCS1-v1_5, publicExponent: {0: 1}}, false, [sign, verify, sign, sign, verify])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [wrapKey, decrypt, encrypt, deriveKey])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, wrapKey, decrypt, encrypt, deriveKey])\n[PASS] Empty usages: generateKey({hash: SHA-384, length: 384, name: HMAC}, true, [])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, decrypt, encrypt, deriveKey])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, wrapKey, encrypt, deriveKey])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, encrypt, deriveKey])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [decrypt, deriveKey])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [wrapKey, decrypt, deriveKey])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, wrapKey, decrypt, deriveKey])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, decrypt, deriveKey])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, wrapKey, deriveKey])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, deriveKey])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [encrypt, decrypt, wrapKey, unwrapKey, decrypt, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey, deriveKey])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [decrypt, encrypt, deriveBits])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [wrapKey, decrypt, encrypt, deriveBits])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, wrapKey, decrypt, encrypt, deriveBits])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, decrypt, encrypt, deriveBits])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, wrapKey, encrypt, deriveBits])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, encrypt, deriveBits])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [decrypt, deriveBits])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [wrapKey, decrypt, deriveBits])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, wrapKey, decrypt, deriveBits])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, decrypt, deriveBits])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, wrapKey, deriveBits])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, deriveBits])\n[PASS] Bad usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [encrypt, decrypt, wrapKey, unwrapKey, decrypt, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey, deriveBits])\n[PASS] Bad algorithm property: generateKey({hash: SHA-256, modulusLength: 1024, name: RSASSA-PKCS1-v1_5, publicExponent: {0: 1}}, true, [sign, verify, sign, sign, verify])\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, short salt, SHA-256, with 100000 iterations\n[PASS] Empty usages: generateKey({hash: SHA-512, length: 512, name: HMAC}, false, [])\n[PASS] Bad algorithm property: generateKey({hash: SHA-256, modulusLength: 1024, name: RSA-OAEP, publicExponent: {0: 1}}, false, [decrypt, encrypt])\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, short salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Bad algorithm property: generateKey({hash: SHA-256, modulusLength: 1024, name: RSASSA-PKCS1-v1_5, publicExponent: {0: 1, 1: 0, 2: 0}}, false, [sign])\n[PASS] Empty usages: generateKey({hash: SHA-512, length: 512, name: HMAC}, true, [])\n[PASS] Bad algorithm property: generateKey({hash: SHA-256, modulusLength: 1024, name: RSA-OAEP, publicExponent: {0: 1}}, true, [decrypt, encrypt])\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, short salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Bad algorithm property: generateKey({hash: SHA-256, modulusLength: 1024, name: RSASSA-PKCS1-v1_5, publicExponent: {0: 1, 1: 0, 2: 0}}, true, [sign])\n[PASS] Bad algorithm property: generateKey({hash: SHA-256, modulusLength: 1024, name: RSASSA-PKCS1-v1_5, publicExponent: {0: 1, 1: 0, 2: 0}}, false, [verify, sign])\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, short salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] empty password, short salt, SHA-256, with 100000 iterations with null length\n[PASS] Bad algorithm property: generateKey({hash: SHA-256, modulusLength: 1024, name: RSA-OAEP, publicExponent: {0: 1}}, false, [wrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({hash: SHA-256, modulusLength: 1024, name: RSA-OAEP, publicExponent: {0: 1}}, true, [wrapKey, decrypt, encrypt])\n[PASS] Empty usages: generateKey({hash: SHA-1, name: HMAC}, false, [])\n[PASS] Empty usages: generateKey({hash: SHA-1, name: HMAC}, true, [])\n[PASS] empty password, short salt, SHA-256, with 100000 iterations with 0 length\n[PASS] empty password, short salt, SHA-256, with 100000 iterations with non-multiple of 8 length\n[PASS] Bad algorithm property: generateKey({hash: SHA-256, modulusLength: 1024, name: RSASSA-PKCS1-v1_5, publicExponent: {0: 1, 1: 0, 2: 0}}, true, [verify, sign])\n[PASS] Bad algorithm property: generateKey({hash: SHA-256, modulusLength: 1024, name: RSASSA-PKCS1-v1_5, publicExponent: {0: 1, 1: 0, 2: 0}}, false, [])\n[PASS] Bad algorithm property: generateKey({hash: SHA-256, modulusLength: 1024, name: RSASSA-PKCS1-v1_5, publicExponent: {0: 1, 1: 0, 2: 0}}, true, [])\n[PASS] Empty usages: generateKey({hash: SHA-256, name: HMAC}, false, [])\n[PASS] empty password, short salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Bad algorithm property: generateKey({hash: SHA-256, modulusLength: 1024, name: RSA-OAEP, publicExponent: {0: 1}}, false, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Empty usages: generateKey({hash: SHA-256, name: HMAC}, true, [])\n[PASS] empty password, short salt, SHA-256, with 100000 iterations with missing deriveBits usage\n[PASS] Bad algorithm property: generateKey({hash: SHA-256, modulusLength: 1024, name: RSA-OAEP, publicExponent: {0: 1}}, true, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({hash: SHA-256, modulusLength: 1024, name: RSASSA-PKCS1-v1_5, publicExponent: {0: 1, 1: 0, 2: 0}}, false, [sign, verify, sign, sign, verify])\n[PASS] empty password, short salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Bad algorithm property: generateKey({hash: SHA-256, modulusLength: 1024, name: RSA-OAEP, publicExponent: {0: 1}}, false, [unwrapKey, decrypt, encrypt])\n[PASS] Empty usages: generateKey({hash: SHA-384, name: HMAC}, false, [])\n[PASS] Bad algorithm property: generateKey({hash: SHA-256, modulusLength: 1024, name: RSASSA-PKCS1-v1_5, publicExponent: {0: 1, 1: 0, 2: 0}}, true, [sign, verify, sign, sign, verify])\n[PASS] empty password, short salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, short salt, SHA-256, with 0 iterations\n[PASS] Bad algorithm property: generateKey({hash: SHA-256, modulusLength: 1024, name: RSA-OAEP, publicExponent: {0: 1}}, true, [unwrapKey, decrypt, encrypt])\n[PASS] Empty usages: generateKey({hash: SHA-384, name: HMAC}, true, [])\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, short salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, short salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, short salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, short salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, short salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, short salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, short salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, short salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, short salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, short salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, short salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, short salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, short salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, short salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, short salt, SHA-256, with 0 iterations\n[PASS] empty password, short salt, PBKDF2, with 1 iterations with non-digest algorithm PBKDF2\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, short salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, short salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, short salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, short salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, short salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, short salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, short salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, short salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, short salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, short salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, short salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, short salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, short salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, short salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, short salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, short salt, PBKDF2, with 1 iterations\n[PASS] empty password, short salt, PBKDF2, with 1000 iterations with non-digest algorithm PBKDF2\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, short salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, short salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, short salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, short salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, short salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, short salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, short salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, short salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, short salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, short salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, short salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, short salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, short salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, short salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, short salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, short salt, PBKDF2, with 1000 iterations\n[PASS] empty password, short salt, PBKDF2, with 100000 iterations with non-digest algorithm PBKDF2\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, short salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, short salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, short salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, short salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, short salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, short salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, short salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, short salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, short salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, short salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, short salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, short salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, short salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, short salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, short salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, short salt, PBKDF2, with 100000 iterations\n[PASS] empty password, long salt, SHA-384, with 1 iterations\n[PASS] Empty usages: generateKey({hash: SHA-512, name: HMAC}, false, [])\n[PASS] Empty usages: generateKey({hash: SHA-512, name: HMAC}, true, [])\n[PASS] Bad algorithm property: generateKey({hash: SHA-256, modulusLength: 1024, name: RSA-OAEP, publicExponent: {0: 1}}, false, [unwrapKey, wrapKey, encrypt])\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, empty salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, empty salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, long salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, long salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, empty salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Bad algorithm property: generateKey({hash: SHA-256, modulusLength: 1024, name: RSA-OAEP, publicExponent: {0: 1}}, true, [unwrapKey, wrapKey, encrypt])\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, long salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, long salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, empty salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Bad algorithm property: generateKey({hash: SHA-256, modulusLength: 1024, name: RSA-OAEP, publicExponent: {0: 1}}, false, [unwrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({hash: SHA-256, modulusLength: 1024, name: RSA-OAEP, publicExponent: {0: 1}}, true, [unwrapKey, encrypt])\n[PASS] Bad algorithm property: generateKey({hash: SHA-256, modulusLength: 1024, name: RSA-OAEP, publicExponent: {0: 1}}, false, [decrypt])\n[PASS] Bad algorithm property: generateKey({hash: SHA-256, modulusLength: 1024, name: RSA-OAEP, publicExponent: {0: 1}}, true, [decrypt])\n[PASS] Bad algorithm property: generateKey({hash: SHA-256, modulusLength: 1024, name: RSA-OAEP, publicExponent: {0: 1}}, false, [wrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({hash: SHA-256, modulusLength: 1024, name: RSA-OAEP, publicExponent: {0: 1}}, true, [wrapKey, decrypt])\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, long salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, long salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, long salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, long salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, long salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, long salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, long salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, long salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, long salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, long salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, long salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, long salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Bad algorithm: generateKey(AES, false, [decrypt])\n[PASS] Bad algorithm: generateKey(AES, true, [decrypt])\n[PASS] Bad algorithm: generateKey(AES, RED, [decrypt])\n[PASS] Bad algorithm: generateKey(AES, 7, [decrypt])\n[PASS] Bad algorithm: generateKey(AES, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey(AES, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey(AES, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey(AES, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey(AES, false, [sign])\n[PASS] Bad algorithm: generateKey(AES, true, [sign])\n[PASS] Bad algorithm: generateKey(AES, RED, [sign])\n[PASS] Bad algorithm: generateKey(AES, 7, [sign])\n[PASS] Bad algorithm: generateKey(AES, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey(AES, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey(AES, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey(AES, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey(AES, false, [deriveBits])\n[PASS] Bad algorithm: generateKey(AES, true, [deriveBits])\n[PASS] Bad algorithm: generateKey(AES, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey(AES, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey(AES, false, [])\n[PASS] Bad algorithm: generateKey(AES, true, [])\n[PASS] Bad algorithm: generateKey(AES, RED, [])\n[PASS] Bad algorithm: generateKey(AES, 7, [])\n[PASS] Bad algorithm: generateKey(AES, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey(AES, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey(AES, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey(AES, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [sign])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [sign])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [sign])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [sign])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm property: generateKey({hash: SHA-256, modulusLength: 1024, name: RSA-OAEP, publicExponent: {0: 1}}, false, [unwrapKey, wrapKey, decrypt])\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, empty salt, SHA-512, with 100000 iterations\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [sign])\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, long salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, long salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, long salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, long salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, empty salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, empty salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, empty salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [deriveBits, sign])\n[PASS] Bad algorithm property: generateKey({hash: SHA-256, modulusLength: 1024, name: RSA-OAEP, publicExponent: {0: 1}}, true, [unwrapKey, wrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({hash: SHA-256, modulusLength: 1024, name: RSA-OAEP, publicExponent: {0: 1}}, false, [unwrapKey, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, long salt, SHA-384, with 1 iterations\n[PASS] Bad algorithm property: generateKey({hash: SHA-256, modulusLength: 1024, name: RSA-OAEP, publicExponent: {0: 1}}, true, [unwrapKey, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, long salt, SHA-512, with 100000 iterations\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, long salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, long salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Bad algorithm property: generateKey({hash: SHA-256, modulusLength: 1024, name: RSA-OAEP, publicExponent: {0: 1}}, false, [unwrapKey, wrapKey])\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, long salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, long salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [decrypt])\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, long salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, long salt, SHA-384, with 1 iterations\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [decrypt])\n[PASS] Bad algorithm property: generateKey({hash: SHA-256, modulusLength: 1024, name: RSA-OAEP, publicExponent: {0: 1}}, true, [unwrapKey, wrapKey])\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, long salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [sign, decrypt])\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, long salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign, decrypt])\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, long salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, long salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Bad algorithm property: generateKey({hash: SHA-256, modulusLength: 1024, name: RSA-OAEP, publicExponent: {0: 1}}, false, [unwrapKey])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad usages: generateKey({name: X25519}, true, [encrypt])\n[PASS] Bad usages: generateKey({name: X25519}, true, [deriveKey, encrypt])\n[PASS] Bad usages: generateKey({name: X25519}, true, [deriveBits, deriveKey, encrypt])\n[PASS] Bad usages: generateKey({name: X25519}, true, [deriveBits, encrypt])\n[PASS] Bad usages: generateKey({name: X25519}, true, [deriveKey, deriveBits, deriveKey, deriveBits, deriveKey, deriveBits, encrypt])\n[PASS] Bad usages: generateKey({name: X25519}, true, [decrypt])\n[PASS] Bad usages: generateKey({name: X25519}, true, [deriveKey, decrypt])\n[PASS] Bad usages: generateKey({name: X25519}, true, [deriveBits, deriveKey, decrypt])\n[PASS] Bad usages: generateKey({name: X25519}, true, [deriveBits, decrypt])\n[PASS] Bad usages: generateKey({name: X25519}, true, [deriveKey, deriveBits, deriveKey, deriveBits, deriveKey, deriveBits, decrypt])\n[PASS] Bad usages: generateKey({name: X25519}, true, [sign])\n[PASS] Bad usages: generateKey({name: X25519}, true, [deriveKey, sign])\n[PASS] Bad usages: generateKey({name: X25519}, true, [deriveBits, deriveKey, sign])\n[PASS] Bad usages: generateKey({name: X25519}, true, [deriveBits, sign])\n[PASS] Bad usages: generateKey({name: X25519}, true, [deriveKey, deriveBits, deriveKey, deriveBits, deriveKey, deriveBits, sign])\n[PASS] Bad usages: generateKey({name: X25519}, true, [verify])\n[PASS] Bad usages: generateKey({name: X25519}, true, [deriveKey, verify])\n[PASS] Bad usages: generateKey({name: X25519}, true, [deriveBits, deriveKey, verify])\n[PASS] Bad usages: generateKey({name: X25519}, true, [deriveBits, verify])\n[PASS] Bad usages: generateKey({name: X25519}, true, [deriveKey, deriveBits, deriveKey, deriveBits, deriveKey, deriveBits, verify])\n[PASS] Bad usages: generateKey({name: X25519}, true, [wrapKey])\n[PASS] Bad usages: generateKey({name: X25519}, true, [deriveKey, wrapKey])\n[PASS] Bad usages: generateKey({name: X25519}, true, [deriveBits, deriveKey, wrapKey])\n[PASS] Bad usages: generateKey({name: X25519}, true, [deriveBits, wrapKey])\n[PASS] Bad usages: generateKey({name: X25519}, true, [deriveKey, deriveBits, deriveKey, deriveBits, deriveKey, deriveBits, wrapKey])\n[PASS] Bad usages: generateKey({name: X25519}, true, [unwrapKey])\n[PASS] Bad usages: generateKey({name: X25519}, true, [deriveKey, unwrapKey])\n[PASS] Bad usages: generateKey({name: X25519}, true, [deriveBits, deriveKey, unwrapKey])\n[PASS] Bad usages: generateKey({name: X25519}, true, [deriveBits, unwrapKey])\n[PASS] Bad usages: generateKey({name: X25519}, true, [deriveKey, deriveBits, deriveKey, deriveBits, deriveKey, deriveBits, unwrapKey])\n[PASS] Bad algorithm property: generateKey({hash: SHA-256, modulusLength: 1024, name: RSA-OAEP, publicExponent: {0: 1}}, true, [unwrapKey])\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, empty salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, long salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, empty salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, empty salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, empty salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, long salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Bad algorithm property: generateKey({hash: SHA-256, modulusLength: 1024, name: RSA-OAEP, publicExponent: {0: 1}}, false, [])\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, long salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Bad algorithm property: generateKey({hash: SHA-256, modulusLength: 1024, name: RSA-OAEP, publicExponent: {0: 1}}, true, [])\n[PASS] Empty usages: generateKey({name: X25519}, false, [])\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, long salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Bad algorithm property: generateKey({hash: SHA-256, modulusLength: 1024, name: RSA-OAEP, publicExponent: {0: 1}}, false, [encrypt, decrypt, wrapKey, unwrapKey, decrypt, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, long salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, long salt, SHA-384, with 1 iterations\n[PASS] Empty usages: generateKey({name: X25519}, true, [])\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, long salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, long salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, long salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, long salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, long salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, long salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, long salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, long salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, long salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, long salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Bad algorithm: generateKey(AES, false, [decrypt])\n[PASS] Bad algorithm: generateKey(AES, true, [decrypt])\n[PASS] Bad algorithm: generateKey(AES, RED, [decrypt])\n[PASS] Bad algorithm: generateKey(AES, 7, [decrypt])\n[PASS] Bad algorithm: generateKey(AES, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey(AES, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey(AES, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey(AES, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey(AES, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey(AES, false, [sign])\n[PASS] Bad algorithm: generateKey(AES, true, [sign])\n[PASS] Bad algorithm: generateKey(AES, RED, [sign])\n[PASS] Bad algorithm: generateKey(AES, 7, [sign])\n[PASS] Bad algorithm: generateKey(AES, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey(AES, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey(AES, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey(AES, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey(AES, false, [deriveBits])\n[PASS] Bad algorithm: generateKey(AES, true, [deriveBits])\n[PASS] Bad algorithm: generateKey(AES, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey(AES, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey(AES, false, [])\n[PASS] Bad algorithm: generateKey(AES, true, [])\n[PASS] Bad algorithm: generateKey(AES, RED, [])\n[PASS] Bad algorithm: generateKey(AES, 7, [])\n[PASS] Bad algorithm: generateKey(AES, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey(AES, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey(AES, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey(AES, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [sign])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [sign])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [sign])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [sign])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [])\n[PASS] Bad algorithm: generateKey({name: AES}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: AES}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [])\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, empty salt, SHA-512, with 100000 iterations\n[PASS] Bad algorithm property: generateKey({hash: SHA-256, modulusLength: 1024, name: RSA-OAEP, publicExponent: {0: 1}}, true, [encrypt, decrypt, wrapKey, unwrapKey, decrypt, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, long salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, long salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Bad algorithm: generateKey({length: 128, name: AES}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [decrypt])\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, empty salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, empty salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, empty salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Bad algorithm property: generateKey({hash: SHA-256, modulusLength: 1024, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 0}}, false, [decrypt, encrypt])\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, long salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, long salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [sign, decrypt])\n[PASS] Bad algorithm property: generateKey({hash: SHA-256, modulusLength: 1024, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 0}}, true, [decrypt, encrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [])\n[PASS] Bad algorithm property: generateKey({hash: SHA-256, modulusLength: 1024, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 0}}, false, [wrapKey, decrypt, encrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, long salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, long salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, long salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, long salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Bad algorithm property: generateKey({hash: SHA-256, modulusLength: 1024, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 0}}, true, [wrapKey, decrypt, encrypt])\n[PASS] Bad algorithm property: generateKey({hash: SHA-256, modulusLength: 1024, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 0}}, false, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, long salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, long salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CMAC}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [sign, decrypt])\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, long salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, long salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Bad algorithm property: generateKey({hash: SHA-256, modulusLength: 1024, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 0}}, true, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, long salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, long salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, long salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, long salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({length: 128, name: AES-CFB}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: MD5, name: HMAC}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({hash: SHA, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [deriveBits, sign, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [deriveBits, decrypt])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [deriveBits, sign])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, false, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, true, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, RED, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad algorithm: generateKey({name: EC, namedCurve: P521}, 7, [decrypt, sign, deriveBits, decrypt, sign, deriveBits])\n[PASS] Bad usages: generateKey({name: X448}, true, [encrypt])\n[PASS] Bad usages: generateKey({name: X448}, true, [deriveKey, encrypt])\n[PASS] Bad usages: generateKey({name: X448}, true, [deriveBits, deriveKey, encrypt])\n[PASS] Bad usages: generateKey({name: X448}, true, [deriveBits, encrypt])\n[PASS] Bad usages: generateKey({name: X448}, true, [deriveKey, deriveBits, deriveKey, deriveBits, deriveKey, deriveBits, encrypt])\n[PASS] Bad usages: generateKey({name: X448}, true, [decrypt])\n[PASS] Bad usages: generateKey({name: X448}, true, [deriveKey, decrypt])\n[PASS] Bad usages: generateKey({name: X448}, true, [deriveBits, deriveKey, decrypt])\n[PASS] Bad usages: generateKey({name: X448}, true, [deriveBits, decrypt])\n[PASS] Bad usages: generateKey({name: X448}, true, [deriveKey, deriveBits, deriveKey, deriveBits, deriveKey, deriveBits, decrypt])\n[PASS] Bad usages: generateKey({name: X448}, true, [sign])\n[PASS] Bad usages: generateKey({name: X448}, true, [deriveKey, sign])\n[PASS] Bad usages: generateKey({name: X448}, true, [deriveBits, deriveKey, sign])\n[PASS] Bad usages: generateKey({name: X448}, true, [deriveBits, sign])\n[PASS] Bad usages: generateKey({name: X448}, true, [deriveKey, deriveBits, deriveKey, deriveBits, deriveKey, deriveBits, sign])\n[PASS] Bad usages: generateKey({name: X448}, true, [verify])\n[PASS] Bad usages: generateKey({name: X448}, true, [deriveKey, verify])\n[PASS] Bad usages: generateKey({name: X448}, true, [deriveBits, deriveKey, verify])\n[PASS] Bad usages: generateKey({name: X448}, true, [deriveBits, verify])\n[PASS] Bad usages: generateKey({name: X448}, true, [deriveKey, deriveBits, deriveKey, deriveBits, deriveKey, deriveBits, verify])\n[PASS] Bad usages: generateKey({name: X448}, true, [wrapKey])\n[PASS] Bad usages: generateKey({name: X448}, true, [deriveKey, wrapKey])\n[PASS] Bad usages: generateKey({name: X448}, true, [deriveBits, deriveKey, wrapKey])\n[PASS] Bad usages: generateKey({name: X448}, true, [deriveBits, wrapKey])\n[PASS] Bad usages: generateKey({name: X448}, true, [deriveKey, deriveBits, deriveKey, deriveBits, deriveKey, deriveBits, wrapKey])\n[PASS] Bad usages: generateKey({name: X448}, true, [unwrapKey])\n[PASS] Bad usages: generateKey({name: X448}, true, [deriveKey, unwrapKey])\n[PASS] Bad usages: generateKey({name: X448}, true, [deriveBits, deriveKey, unwrapKey])\n[PASS] Bad usages: generateKey({name: X448}, true, [deriveBits, unwrapKey])\n[PASS] Bad usages: generateKey({name: X448}, true, [deriveKey, deriveBits, deriveKey, deriveBits, deriveKey, deriveBits, unwrapKey])\n[PASS] Bad algorithm property: generateKey({hash: SHA-256, modulusLength: 1024, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 0}}, false, [unwrapKey, decrypt, encrypt])\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, long salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, long salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Empty usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [])\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, long salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, long salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Bad algorithm property: generateKey({hash: SHA-256, modulusLength: 1024, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 0}}, true, [unwrapKey, decrypt, encrypt])\n[PASS] Empty usages: generateKey({name: X448}, false, [])\n[PASS] Bad algorithm property: generateKey({hash: SHA-256, modulusLength: 1024, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 0}}, false, [unwrapKey, wrapKey, encrypt])\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, long salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, long salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, empty salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, long salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Bad algorithm property: generateKey({hash: SHA-256, modulusLength: 1024, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 0}}, true, [unwrapKey, wrapKey, encrypt])\n[PASS] Empty usages: generateKey({name: X448}, true, [])\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, long salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, empty salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Bad algorithm property: generateKey({hash: SHA-256, modulusLength: 1024, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 0}}, false, [unwrapKey, encrypt])\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, empty salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, long salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, long salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, empty salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, long salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, long salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, long salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Bad algorithm property: generateKey({hash: SHA-256, modulusLength: 1024, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 0}}, true, [unwrapKey, encrypt])\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, long salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, long salt, SHA-384, with 1 iterations\n[PASS] Bad algorithm property: generateKey({hash: SHA-256, modulusLength: 1024, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 0}}, false, [decrypt])\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, long salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, long salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, long salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Bad algorithm property: generateKey({hash: SHA-256, modulusLength: 1024, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 0}}, true, [decrypt])\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, long salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, long salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] empty password, long salt, SHA-384, with 1 iterations with null length\n[PASS] empty password, long salt, SHA-384, with 1 iterations with 0 length\n[PASS] empty password, long salt, SHA-384, with 1 iterations with non-multiple of 8 length\n[PASS] empty password, long salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] empty password, long salt, SHA-384, with 1 iterations with missing deriveBits usage\n[PASS] empty password, long salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Bad algorithm property: generateKey({hash: SHA-256, modulusLength: 1024, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 0}}, false, [wrapKey, decrypt])\n[PASS] Empty usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSASSA-PKCS1-v1_5, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [])\n[PASS] empty password, long salt, SHA-384, with 1000 iterations\n[PASS] Bad algorithm property: generateKey({hash: SHA-256, modulusLength: 1024, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 0}}, true, [wrapKey, decrypt])\n[PASS] Bad algorithm property: generateKey({hash: SHA-256, modulusLength: 1024, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 0}}, false, [unwrapKey, wrapKey, decrypt])\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, empty salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, empty salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, empty salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, empty salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Bad algorithm property: generateKey({hash: SHA-256, modulusLength: 1024, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 0}}, true, [unwrapKey, wrapKey, decrypt])\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, long salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, long salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, long salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, long salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({length: 128, name: AES-CBC}, false, [encrypt])\n[PASS] Bad algorithm property: generateKey({hash: SHA-256, modulusLength: 1024, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 0}}, false, [unwrapKey, decrypt])\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, long salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, long salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, long salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, long salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Bad algorithm property: generateKey({hash: SHA-256, modulusLength: 1024, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 0}}, true, [unwrapKey, decrypt])\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, long salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, long salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Success: generateKey({length: 128, name: AES-CBC}, true, [encrypt])\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, long salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, long salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Bad algorithm property: generateKey({hash: SHA-256, modulusLength: 1024, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 0}}, false, [unwrapKey, wrapKey])\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, empty salt, SHA-512, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, empty salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Success: generateKey({length: 128, name: AES-CBC}, false, [decrypt, encrypt])\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, empty salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, empty salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Bad algorithm property: generateKey({hash: SHA-256, modulusLength: 1024, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 0}}, true, [unwrapKey, wrapKey])\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, long salt, SHA-384, with 1000 iterations\n[PASS] Success: generateKey({length: 128, name: AES-CBC}, true, [decrypt, encrypt])\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, long salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, long salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, long salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Bad algorithm property: generateKey({hash: SHA-256, modulusLength: 1024, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 0}}, false, [unwrapKey])\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, long salt, SHA-512, with 100000 iterations\n[PASS] Success: generateKey({length: 128, name: AES-CBC}, false, [wrapKey, decrypt, encrypt])\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, long salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, long salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, long salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Bad algorithm property: generateKey({hash: SHA-256, modulusLength: 1024, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 0}}, true, [unwrapKey])\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, long salt, SHA-384, with 1000 iterations\n[PASS] Success: generateKey({length: 128, name: AES-CBC}, true, [wrapKey, decrypt, encrypt])\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, long salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, long salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, long salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Bad algorithm property: generateKey({hash: SHA-256, modulusLength: 1024, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 0}}, false, [])\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, empty salt, SHA-512, with 100000 iterations\n[PASS] Success: generateKey({length: 128, name: AES-CBC}, false, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, empty salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, empty salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, empty salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Bad algorithm property: generateKey({hash: SHA-256, modulusLength: 1024, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 0}}, true, [])\n[PASS] Success: generateKey({length: 128, name: AES-CBC}, true, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] empty password, empty salt, SHA-512, with 100000 iterations with null length\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, long salt, SHA-384, with 1000 iterations\n[PASS] Bad algorithm property: generateKey({hash: SHA-256, modulusLength: 1024, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 0}}, false, [encrypt, decrypt, wrapKey, unwrapKey, decrypt, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] empty password, empty salt, SHA-512, with 100000 iterations with 0 length\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, long salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Bad algorithm property: generateKey({hash: SHA-256, modulusLength: 1024, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 0}}, true, [encrypt, decrypt, wrapKey, unwrapKey, decrypt, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] empty password, empty salt, SHA-512, with 100000 iterations with non-multiple of 8 length\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, long salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, long salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] empty password, empty salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] empty password, empty salt, SHA-512, with 100000 iterations with missing deriveBits usage\n[PASS] Success: generateKey({length: 128, name: AES-CBC}, false, [unwrapKey, decrypt, encrypt])\n[PASS] empty password, empty salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] empty password, empty salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, empty salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, empty salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, empty salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, empty salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, empty salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, empty salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, empty salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, empty salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, empty salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, empty salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, empty salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, empty salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, empty salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, empty salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, empty salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, empty salt, SHA-512, with 0 iterations\n[PASS] Empty usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSASSA-PKCS1-v1_5, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [])\n[PASS] empty password, empty salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, long salt, SHA-384, with 1000 iterations\n[PASS] Success: generateKey({length: 128, name: AES-CBC}, true, [unwrapKey, decrypt, encrypt])\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, long salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, long salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, long salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, empty salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, long salt, SHA-512, with 100000 iterations\n[PASS] Success: generateKey({length: 128, name: AES-CBC}, false, [wrapKey, encrypt])\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, empty salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, long salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, empty salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, long salt, SHA-512, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, empty salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, long salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({length: 128, name: AES-CBC}, true, [wrapKey, encrypt])\n[PASS] empty password, long salt, SHA-512, with 100000 iterations with null length\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, long salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, empty salt, SHA-1, with 1 iterations\n[PASS] empty password, long salt, SHA-512, with 100000 iterations with 0 length\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, long salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Success: generateKey({length: 128, name: AES-CBC}, false, [unwrapKey, wrapKey, encrypt])\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, empty salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, long salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] empty password, long salt, SHA-512, with 100000 iterations with non-multiple of 8 length\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, empty salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Success: generateKey({length: 128, name: AES-CBC}, true, [unwrapKey, wrapKey, encrypt])\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, long salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] empty password, long salt, SHA-512, with 100000 iterations with bad hash name SHA512\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, empty salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] empty password, long salt, SHA-512, with 100000 iterations with missing deriveBits usage\n[PASS] Success: generateKey({length: 128, name: AES-CBC}, false, [unwrapKey, encrypt])\n[PASS] empty password, long salt, SHA-512, with 100000 iterations with wrong (ECDH) key\n[PASS] empty password, long salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, long salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, long salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, long salt, SHA-512, with 0 iterations\n[PASS] Success: generateKey({length: 128, name: AES-CBC}, true, [unwrapKey, encrypt])\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, empty salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, long salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, long salt, SHA-384, with 1000 iterations\n[PASS] Success: generateKey({length: 128, name: AES-CBC}, false, [decrypt])\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, empty salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, long salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, long salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, empty salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Success: generateKey({length: 128, name: AES-CBC}, true, [decrypt])\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, long salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, empty salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, long salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Success: generateKey({length: 128, name: AES-CBC}, false, [wrapKey, decrypt])\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, long salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, long salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, long salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, long salt, SHA-512, with 0 iterations\n[PASS] Success: generateKey({length: 128, name: AES-CBC}, true, [wrapKey, decrypt])\n[PASS] Success: generateKey({length: 128, name: AES-CBC}, false, [unwrapKey, wrapKey, decrypt])\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, empty salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, empty salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, long salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, empty salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, long salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, empty salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, long salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, long salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, long salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, long salt, SHA-512, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, long salt, SHA-512, with 0 iterations\n[PASS] empty password, long salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, empty salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, empty salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, empty salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Success: generateKey({length: 128, name: AES-CBC}, true, [unwrapKey, wrapKey, decrypt])\n[PASS] Success: generateKey({length: 128, name: AES-CBC}, false, [unwrapKey, decrypt])\n[PASS] Success: generateKey({length: 128, name: AES-CBC}, true, [unwrapKey, decrypt])\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, long salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, long salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, long salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, long salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, empty salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, empty salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, empty salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, empty salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Success: generateKey({length: 128, name: AES-CBC}, false, [wrapKey])\n[PASS] Success: generateKey({length: 128, name: AES-CBC}, true, [wrapKey])\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, long salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, long salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, long salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, empty salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, long salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({length: 128, name: AES-CBC}, false, [unwrapKey, wrapKey])\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, empty salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, long salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, long salt, SHA-1, with 1 iterations\n[PASS] Success: generateKey({length: 128, name: AES-CBC}, true, [unwrapKey, wrapKey])\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, long salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, empty salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, long salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, long salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, long salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Success: generateKey({length: 128, name: AES-CBC}, false, [unwrapKey])\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, long salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, empty salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, empty salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, long salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({length: 128, name: AES-CBC}, true, [unwrapKey])\n[PASS] Success: generateKey({length: 128, name: AES-CBC}, false, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, long salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, long salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, long salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, long salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, long salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, long salt, SHA-384, with 1000 iterations\n[PASS] Success: generateKey({length: 128, name: AES-CBC}, true, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, empty salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, empty salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, long salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, long salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, long salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Success: generateKey({length: 192, name: AES-CBC}, false, [encrypt])\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, empty salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, empty salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, long salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Success: generateKey({length: 192, name: AES-CBC}, true, [encrypt])\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, long salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, long salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({length: 192, name: AES-CBC}, false, [decrypt, encrypt])\n[PASS] Success: generateKey({length: 192, name: AES-CBC}, true, [decrypt, encrypt])\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, long salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, empty salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, empty salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, long salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, empty salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, long salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, empty salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, long salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({length: 192, name: AES-CBC}, false, [wrapKey, decrypt, encrypt])\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, empty salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, long salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, long salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, empty salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Success: generateKey({length: 192, name: AES-CBC}, true, [wrapKey, decrypt, encrypt])\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, long salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, empty salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Success: generateKey({length: 192, name: AES-CBC}, false, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, long salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, empty salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, long salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Success: generateKey({length: 192, name: AES-CBC}, true, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, long salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, long salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({length: 192, name: AES-CBC}, false, [unwrapKey, decrypt, encrypt])\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, long salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({length: 192, name: AES-CBC}, true, [unwrapKey, decrypt, encrypt])\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, empty salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, empty salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, empty salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, empty salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({length: 192, name: AES-CBC}, false, [wrapKey, encrypt])\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, empty salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, long salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, long salt, SHA-384, with 1000 iterations\n[PASS] Success: generateKey({length: 192, name: AES-CBC}, true, [wrapKey, encrypt])\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, long salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, long salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, empty salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Success: generateKey({length: 192, name: AES-CBC}, false, [unwrapKey, wrapKey, encrypt])\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, long salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, long salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, empty salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, empty salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, long salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({length: 192, name: AES-CBC}, true, [unwrapKey, wrapKey, encrypt])\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, long salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({length: 192, name: AES-CBC}, false, [unwrapKey, encrypt])\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, long salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, long salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, empty salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, long salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Success: generateKey({length: 192, name: AES-CBC}, true, [unwrapKey, encrypt])\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, long salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, long salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, long salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, empty salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, empty salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Success: generateKey({length: 192, name: AES-CBC}, false, [decrypt])\n[PASS] Success: generateKey({length: 192, name: AES-CBC}, true, [decrypt])\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, long salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, long salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, empty salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({length: 192, name: AES-CBC}, false, [wrapKey, decrypt])\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, long salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, long salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, long salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, empty salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, empty salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, long salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, long salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Success: generateKey({length: 192, name: AES-CBC}, true, [wrapKey, decrypt])\n[PASS] Success: generateKey({length: 192, name: AES-CBC}, false, [unwrapKey, wrapKey, decrypt])\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, long salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, long salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, empty salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, long salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({length: 192, name: AES-CBC}, true, [unwrapKey, wrapKey, decrypt])\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, empty salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, long salt, SHA-1, with 1 iterations\n[PASS] Success: generateKey({length: 192, name: AES-CBC}, false, [unwrapKey, decrypt])\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, long salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, long salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, long salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({length: 192, name: AES-CBC}, true, [unwrapKey, decrypt])\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, long salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, empty salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, long salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, long salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, long salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Success: generateKey({length: 192, name: AES-CBC}, false, [wrapKey])\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, empty salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, long salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, long salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Success: generateKey({length: 192, name: AES-CBC}, true, [wrapKey])\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, long salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, empty salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, long salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({length: 192, name: AES-CBC}, false, [unwrapKey, wrapKey])\n[PASS] empty password, long salt, SHA-384, with 1000 iterations with null length\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, empty salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({length: 192, name: AES-CBC}, true, [unwrapKey, wrapKey])\n[PASS] Success: generateKey({length: 192, name: AES-CBC}, false, [unwrapKey])\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, long salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, long salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, long salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Success: generateKey({length: 192, name: AES-CBC}, true, [unwrapKey])\n[PASS] empty password, long salt, SHA-384, with 1000 iterations with 0 length\n[PASS] empty password, long salt, SHA-384, with 1000 iterations with non-multiple of 8 length\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, long salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, empty salt, SHA-1, with 1 iterations\n[PASS] Success: generateKey({length: 192, name: AES-CBC}, false, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] empty password, long salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, empty salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] empty password, long salt, SHA-384, with 1000 iterations with missing deriveBits usage\n[PASS] Success: generateKey({length: 192, name: AES-CBC}, true, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, long salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, empty salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] empty password, long salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({length: 256, name: AES-CBC}, false, [encrypt])\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, long salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, long salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, empty salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] empty password, empty salt, SHA-1, with 1 iterations with null length\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, long salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] empty password, empty salt, SHA-1, with 1 iterations with 0 length\n[PASS] empty password, empty salt, SHA-1, with 1 iterations with non-multiple of 8 length\n[PASS] empty password, empty salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] empty password, empty salt, SHA-1, with 1 iterations with missing deriveBits usage\n[PASS] empty password, empty salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({length: 256, name: AES-CBC}, true, [encrypt])\n[PASS] Empty usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [])\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, long salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, long salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, long salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, long salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({length: 256, name: AES-CBC}, false, [decrypt, encrypt])\n[PASS] empty password, empty salt, SHA-1, with 1000 iterations\n[PASS] empty password, long salt, SHA-384, with 100000 iterations\n[PASS] Success: generateKey({length: 256, name: AES-CBC}, true, [decrypt, encrypt])\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, long salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, long salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, long salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Success: generateKey({length: 256, name: AES-CBC}, false, [wrapKey, decrypt, encrypt])\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, long salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, empty salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, empty salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, empty salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, empty salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({length: 256, name: AES-CBC}, true, [wrapKey, decrypt, encrypt])\n[PASS] Empty usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [])\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, long salt, SHA-1, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, long salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, long salt, SHA-1, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, long salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] empty password, long salt, SHA-1, with 1 iterations with null length\n[PASS] empty password, long salt, SHA-1, with 1 iterations with 0 length\n[PASS] Success: generateKey({length: 256, name: AES-CBC}, false, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] empty password, long salt, SHA-1, with 1 iterations with non-multiple of 8 length\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, empty salt, SHA-1, with 1000 iterations\n[PASS] empty password, long salt, SHA-1, with 1 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, empty salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, empty salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] empty password, long salt, SHA-1, with 1 iterations with missing deriveBits usage\n[PASS] empty password, long salt, SHA-1, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, empty salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({length: 256, name: AES-CBC}, true, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, long salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, long salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, long salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, long salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] empty password, long salt, SHA-1, with 1000 iterations\n[PASS] Success: generateKey({length: 256, name: AES-CBC}, false, [unwrapKey, decrypt, encrypt])\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, empty salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, empty salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, empty salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, empty salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Empty usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSASSA-PKCS1-v1_5, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [])\n[PASS] Success: generateKey({length: 256, name: AES-CBC}, true, [unwrapKey, decrypt, encrypt])\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, long salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, long salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, long salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, long salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, empty salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, empty salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, empty salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, empty salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({length: 256, name: AES-CBC}, false, [wrapKey, encrypt])\n[PASS] Empty usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [])\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, long salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, long salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, long salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, long salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({length: 256, name: AES-CBC}, true, [wrapKey, encrypt])\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, empty salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, empty salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, empty salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, empty salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, long salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, long salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, long salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, long salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, long salt, SHA-1, with 1000 iterations\n[PASS] Success: generateKey({length: 256, name: AES-CBC}, false, [unwrapKey, wrapKey, encrypt])\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, long salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, long salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, long salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, empty salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, empty salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, empty salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, empty salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({length: 256, name: AES-CBC}, true, [unwrapKey, wrapKey, encrypt])\n[PASS] Empty usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSASSA-PKCS1-v1_5, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [])\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, long salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, long salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, long salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, long salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({length: 256, name: AES-CBC}, false, [unwrapKey, encrypt])\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, empty salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, empty salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, empty salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, empty salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({length: 256, name: AES-CBC}, true, [unwrapKey, encrypt])\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, long salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, long salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, long salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, long salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({length: 256, name: AES-CBC}, false, [decrypt])\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, empty salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, empty salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, empty salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, empty salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({length: 256, name: AES-CBC}, true, [decrypt])\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, long salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, long salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, long salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, long salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, long salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, long salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, long salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, long salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, empty salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, empty salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, empty salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, empty salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, empty salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, empty salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, empty salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, empty salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({length: 256, name: AES-CBC}, false, [wrapKey, decrypt])\n[PASS] Success: generateKey({length: 256, name: AES-CBC}, true, [wrapKey, decrypt])\n[PASS] Success: generateKey({length: 256, name: AES-CBC}, false, [unwrapKey, wrapKey, decrypt])\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, long salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, long salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Success: generateKey({length: 256, name: AES-CBC}, true, [unwrapKey, wrapKey, decrypt])\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, long salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, long salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, empty salt, SHA-1, with 1000 iterations\n[PASS] Success: generateKey({length: 256, name: AES-CBC}, false, [unwrapKey, decrypt])\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, empty salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, empty salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, empty salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({length: 256, name: AES-CBC}, true, [unwrapKey, decrypt])\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, long salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, long salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, long salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, long salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({length: 256, name: AES-CBC}, false, [wrapKey])\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, empty salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, empty salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, empty salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, empty salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({length: 256, name: AES-CBC}, true, [wrapKey])\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, long salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, long salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, long salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, long salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, empty salt, SHA-1, with 1000 iterations\n[PASS] Success: generateKey({length: 256, name: AES-CBC}, false, [unwrapKey, wrapKey])\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, empty salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, empty salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, empty salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({length: 256, name: AES-CBC}, true, [unwrapKey, wrapKey])\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, long salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, long salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, long salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, long salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({length: 256, name: AES-CBC}, false, [unwrapKey])\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, empty salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, empty salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, empty salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, empty salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({length: 256, name: AES-CBC}, true, [unwrapKey])\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, long salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, long salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, long salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, long salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, empty salt, SHA-1, with 1000 iterations\n[PASS] Success: generateKey({length: 256, name: AES-CBC}, false, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, empty salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, empty salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, empty salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({length: 256, name: AES-CBC}, true, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, long salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, long salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, long salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, long salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({length: 128, name: aes-cbc}, false, [encrypt])\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, empty salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, empty salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, empty salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, empty salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] empty password, empty salt, SHA-1, with 1000 iterations with null length\n[PASS] empty password, empty salt, SHA-1, with 1000 iterations with 0 length\n[PASS] empty password, empty salt, SHA-1, with 1000 iterations with non-multiple of 8 length\n[PASS] empty password, empty salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] empty password, empty salt, SHA-1, with 1000 iterations with missing deriveBits usage\n[PASS] empty password, empty salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, long salt, SHA-1, with 1000 iterations\n[PASS] Success: generateKey({length: 128, name: aes-cbc}, true, [encrypt])\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, long salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, long salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, long salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({length: 128, name: aes-cbc}, false, [decrypt, encrypt])\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, long salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, long salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, long salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, long salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({length: 128, name: aes-cbc}, true, [decrypt, encrypt])\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, long salt, SHA-1, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, long salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, long salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, long salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({length: 128, name: AES-CTR}, false, [encrypt])\n[PASS] Success: generateKey({length: 128, name: aes-cbc}, false, [wrapKey, decrypt, encrypt])\n[PASS] Empty usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [])\n[PASS] Success: generateKey({length: 128, name: aes-cbc}, true, [wrapKey, decrypt, encrypt])\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, long salt, SHA-1, with 1000 iterations\n[PASS] Success: generateKey({length: 128, name: AES-CTR}, true, [encrypt])\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, long salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] Success: generateKey({length: 128, name: aes-cbc}, false, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 128, name: aes-cbc}, true, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 128, name: aes-cbc}, false, [unwrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 128, name: aes-cbc}, true, [unwrapKey, decrypt, encrypt])\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, long salt, SHA-1, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, long salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({length: 128, name: aes-cbc}, false, [wrapKey, encrypt])\n[PASS] Success: generateKey({length: 128, name: aes-cbc}, true, [wrapKey, encrypt])\n[PASS] Success: generateKey({length: 128, name: AES-CTR}, false, [decrypt, encrypt])\n[PASS] Success: generateKey({length: 128, name: AES-CTR}, true, [decrypt, encrypt])\n[PASS] empty password, long salt, SHA-1, with 1000 iterations with null length\n[PASS] Success: generateKey({length: 128, name: aes-cbc}, false, [unwrapKey, wrapKey, encrypt])\n[PASS] Success: generateKey({length: 128, name: aes-cbc}, true, [unwrapKey, wrapKey, encrypt])\n[PASS] Success: generateKey({length: 128, name: aes-cbc}, false, [unwrapKey, encrypt])\n[PASS] Success: generateKey({length: 128, name: aes-cbc}, true, [unwrapKey, encrypt])\n[PASS] empty password, long salt, SHA-1, with 1000 iterations with 0 length\n[PASS] empty password, long salt, SHA-1, with 1000 iterations with non-multiple of 8 length\n[PASS] Success: generateKey({length: 128, name: AES-CTR}, false, [wrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 128, name: aes-cbc}, false, [decrypt])\n[PASS] Success: generateKey({length: 128, name: aes-cbc}, true, [decrypt])\n[PASS] Success: generateKey({length: 128, name: aes-cbc}, false, [wrapKey, decrypt])\n[PASS] Success: generateKey({length: 128, name: aes-cbc}, true, [wrapKey, decrypt])\n[PASS] empty password, long salt, SHA-1, with 1000 iterations with bad hash name SHA1\n[PASS] empty password, long salt, SHA-1, with 1000 iterations with missing deriveBits usage\n[PASS] Success: generateKey({length: 128, name: AES-CTR}, true, [wrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 128, name: AES-CTR}, false, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 128, name: AES-CTR}, true, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 128, name: aes-cbc}, false, [unwrapKey, wrapKey, decrypt])\n[PASS] Success: generateKey({length: 128, name: aes-cbc}, true, [unwrapKey, wrapKey, decrypt])\n[PASS] Success: generateKey({length: 128, name: aes-cbc}, false, [unwrapKey, decrypt])\n[PASS] Success: generateKey({length: 128, name: aes-cbc}, true, [unwrapKey, decrypt])\n[PASS] empty password, long salt, SHA-1, with 1000 iterations with wrong (ECDH) key\n[PASS] empty password, empty salt, SHA-1, with 100000 iterations\n[PASS] Success: generateKey({length: 128, name: aes-cbc}, false, [wrapKey])\n[PASS] Success: generateKey({length: 128, name: AES-CTR}, false, [unwrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 128, name: aes-cbc}, true, [wrapKey])\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, long salt, SHA-384, with 100000 iterations\n[PASS] Success: generateKey({length: 128, name: aes-cbc}, false, [unwrapKey, wrapKey])\n[PASS] Success: generateKey({length: 128, name: AES-CTR}, true, [unwrapKey, decrypt, encrypt])\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, long salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Success: generateKey({length: 128, name: aes-cbc}, true, [unwrapKey, wrapKey])\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, long salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Success: generateKey({length: 128, name: aes-cbc}, false, [unwrapKey])\n[PASS] Success: generateKey({length: 128, name: AES-CTR}, false, [wrapKey, encrypt])\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, long salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({length: 128, name: aes-cbc}, true, [unwrapKey])\n[PASS] Success: generateKey({length: 128, name: aes-cbc}, false, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] Success: generateKey({length: 128, name: AES-CTR}, true, [wrapKey, encrypt])\n[PASS] Success: generateKey({length: 128, name: AES-CTR}, false, [unwrapKey, wrapKey, encrypt])\n[PASS] Success: generateKey({length: 128, name: AES-CTR}, true, [unwrapKey, wrapKey, encrypt])\n[PASS] Success: generateKey({length: 128, name: AES-CTR}, false, [unwrapKey, encrypt])\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, empty salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, empty salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Success: generateKey({length: 128, name: aes-cbc}, true, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] Success: generateKey({length: 192, name: aes-cbc}, false, [encrypt])\n[PASS] Success: generateKey({length: 192, name: aes-cbc}, true, [encrypt])\n[PASS] Success: generateKey({length: 128, name: AES-CTR}, true, [unwrapKey, encrypt])\n[PASS] Success: generateKey({length: 128, name: AES-CTR}, false, [decrypt])\n[PASS] Success: generateKey({length: 128, name: AES-CTR}, true, [decrypt])\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, empty salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, empty salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({length: 192, name: aes-cbc}, false, [decrypt, encrypt])\n[PASS] Success: generateKey({length: 128, name: AES-GCM}, false, [encrypt])\n[PASS] empty password, long salt, SHA-1, with 100000 iterations\n[PASS] Success: generateKey({length: 128, name: AES-CTR}, false, [wrapKey, decrypt])\n[PASS] Success: generateKey({length: 192, name: aes-cbc}, true, [decrypt, encrypt])\n[PASS] Success: generateKey({length: 128, name: AES-CTR}, true, [wrapKey, decrypt])\n[PASS] Success: generateKey({length: 128, name: AES-GCM}, true, [encrypt])\n[PASS] Success: generateKey({length: 128, name: AES-CTR}, false, [unwrapKey, wrapKey, decrypt])\n[PASS] Success: generateKey({length: 192, name: aes-cbc}, false, [wrapKey, decrypt, encrypt])\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, long salt, SHA-384, with 100000 iterations\n[PASS] Success: generateKey({length: 128, name: AES-GCM}, false, [decrypt, encrypt])\n[PASS] Success: generateKey({length: 128, name: AES-CTR}, true, [unwrapKey, wrapKey, decrypt])\n[PASS] Success: generateKey({length: 192, name: aes-cbc}, true, [wrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 128, name: AES-CTR}, false, [unwrapKey, decrypt])\n[PASS] Success: generateKey({length: 128, name: AES-CTR}, true, [unwrapKey, decrypt])\n[PASS] Success: generateKey({length: 128, name: AES-CTR}, false, [wrapKey])\n[PASS] Success: generateKey({length: 128, name: AES-CTR}, true, [wrapKey])\n[PASS] Success: generateKey({length: 128, name: AES-CTR}, false, [unwrapKey, wrapKey])\n[PASS] Success: generateKey({length: 128, name: AES-GCM}, true, [decrypt, encrypt])\n[PASS] Success: generateKey({length: 128, name: AES-GCM}, false, [wrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 128, name: AES-GCM}, true, [wrapKey, decrypt, encrypt])\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, long salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, long salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, long salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({length: 192, name: aes-cbc}, false, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 192, name: aes-cbc}, true, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 192, name: aes-cbc}, false, [unwrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 128, name: AES-CTR}, true, [unwrapKey, wrapKey])\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, long salt, SHA-384, with 100000 iterations\n[PASS] Success: generateKey({length: 192, name: aes-cbc}, true, [unwrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 128, name: AES-GCM}, false, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, long salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, long salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, long salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({length: 192, name: aes-cbc}, false, [wrapKey, encrypt])\n[PASS] Success: generateKey({length: 192, name: aes-cbc}, true, [wrapKey, encrypt])\n[PASS] Success: generateKey({length: 128, name: AES-CTR}, false, [unwrapKey])\n[PASS] Success: generateKey({length: 128, name: AES-CTR}, true, [unwrapKey])\n[PASS] Success: generateKey({length: 128, name: AES-GCM}, true, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 128, name: AES-CTR}, false, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, long salt, SHA-1, with 100000 iterations\n[PASS] Success: generateKey({length: 192, name: aes-cbc}, false, [unwrapKey, wrapKey, encrypt])\n[PASS] Success: generateKey({length: 128, name: AES-CTR}, true, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, long salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Success: generateKey({length: 192, name: AES-CTR}, false, [encrypt])\n[PASS] Success: generateKey({length: 192, name: aes-cbc}, true, [unwrapKey, wrapKey, encrypt])\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, long salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, long salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({length: 128, name: AES-GCM}, false, [unwrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 192, name: AES-CTR}, true, [encrypt])\n[PASS] Success: generateKey({length: 192, name: AES-CTR}, false, [decrypt, encrypt])\n[PASS] Success: generateKey({length: 192, name: aes-cbc}, false, [unwrapKey, encrypt])\n[PASS] Success: generateKey({length: 192, name: AES-CTR}, true, [decrypt, encrypt])\n[PASS] Success: generateKey({length: 192, name: aes-cbc}, true, [unwrapKey, encrypt])\n[PASS] Empty usages: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [])\n[PASS] Success: generateKey({length: 128, name: AES-GCM}, true, [unwrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 192, name: AES-CTR}, false, [wrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 192, name: aes-cbc}, false, [decrypt])\n[PASS] Success: generateKey({length: 192, name: AES-CTR}, true, [wrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 192, name: aes-cbc}, true, [decrypt])\n[PASS] Success: generateKey({length: 128, name: AES-GCM}, false, [wrapKey, encrypt])\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, empty salt, SHA-1, with 100000 iterations\n[PASS] Success: generateKey({length: 192, name: AES-CTR}, false, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 192, name: aes-cbc}, false, [wrapKey, decrypt])\n[PASS] Success: generateKey({length: 192, name: AES-CTR}, true, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, empty salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Success: generateKey({length: 128, name: AES-GCM}, true, [wrapKey, encrypt])\n[PASS] Success: generateKey({length: 192, name: AES-CTR}, false, [unwrapKey, decrypt, encrypt])\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, empty salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Success: generateKey({length: 128, name: AES-GCM}, false, [unwrapKey, wrapKey, encrypt])\n[PASS] Success: generateKey({length: 192, name: AES-CTR}, true, [unwrapKey, decrypt, encrypt])\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, empty salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({length: 128, name: AES-GCM}, true, [unwrapKey, wrapKey, encrypt])\n[PASS] Success: generateKey({length: 192, name: AES-CTR}, false, [wrapKey, encrypt])\n[PASS] Success: generateKey({length: 128, name: AES-GCM}, false, [unwrapKey, encrypt])\n[PASS] Success: generateKey({length: 192, name: aes-cbc}, true, [wrapKey, decrypt])\n[PASS] Success: generateKey({length: 192, name: aes-cbc}, false, [unwrapKey, wrapKey, decrypt])\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, long salt, SHA-384, with 100000 iterations\n[PASS] Success: generateKey({length: 192, name: AES-CTR}, true, [wrapKey, encrypt])\n[PASS] Success: generateKey({length: 128, name: AES-GCM}, true, [unwrapKey, encrypt])\n[PASS] Success: generateKey({length: 192, name: aes-cbc}, true, [unwrapKey, wrapKey, decrypt])\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, long salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Success: generateKey({length: 192, name: AES-CTR}, false, [unwrapKey, wrapKey, encrypt])\n[PASS] Success: generateKey({length: 128, name: AES-GCM}, false, [decrypt])\n[PASS] Success: generateKey({length: 192, name: aes-cbc}, false, [unwrapKey, decrypt])\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, long salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Success: generateKey({length: 192, name: AES-CTR}, true, [unwrapKey, wrapKey, encrypt])\n[PASS] Success: generateKey({length: 192, name: AES-CTR}, false, [unwrapKey, encrypt])\n[PASS] Success: generateKey({length: 192, name: AES-CTR}, true, [unwrapKey, encrypt])\n[PASS] Success: generateKey({length: 128, name: AES-GCM}, true, [decrypt])\n[PASS] Success: generateKey({length: 128, name: AES-GCM}, false, [wrapKey, decrypt])\n[PASS] Success: generateKey({length: 192, name: aes-cbc}, true, [unwrapKey, decrypt])\n[PASS] Success: generateKey({length: 192, name: aes-cbc}, false, [wrapKey])\n[PASS] Success: generateKey({length: 192, name: aes-cbc}, true, [wrapKey])\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, long salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({length: 192, name: aes-cbc}, false, [unwrapKey, wrapKey])\n[PASS] Success: generateKey({length: 128, name: AES-GCM}, true, [wrapKey, decrypt])\n[PASS] Success: generateKey({length: 192, name: AES-CTR}, false, [decrypt])\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, long salt, SHA-1, with 100000 iterations\n[PASS] Success: generateKey({length: 192, name: aes-cbc}, true, [unwrapKey, wrapKey])\n[PASS] Success: generateKey({length: 192, name: AES-CTR}, true, [decrypt])\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, long salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Success: generateKey({length: 192, name: aes-cbc}, false, [unwrapKey])\n[PASS] Success: generateKey({length: 128, name: AES-GCM}, false, [unwrapKey, wrapKey, decrypt])\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, long salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, long salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({length: 192, name: aes-cbc}, true, [unwrapKey])\n[PASS] Success: generateKey({length: 192, name: aes-cbc}, false, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] Success: generateKey({length: 192, name: aes-cbc}, true, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] Success: generateKey({length: 128, name: AES-GCM}, true, [unwrapKey, wrapKey, decrypt])\n[PASS] Success: generateKey({length: 128, name: AES-GCM}, false, [unwrapKey, decrypt])\n[PASS] Success: generateKey({length: 192, name: AES-CTR}, false, [wrapKey, decrypt])\n[PASS] Success: generateKey({length: 192, name: AES-CTR}, true, [wrapKey, decrypt])\n[PASS] Success: generateKey({length: 192, name: AES-CTR}, false, [unwrapKey, wrapKey, decrypt])\n[PASS] Success: generateKey({length: 128, name: AES-GCM}, true, [unwrapKey, decrypt])\n[PASS] Success: generateKey({length: 256, name: aes-cbc}, false, [encrypt])\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, empty salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, empty salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Success: generateKey({length: 192, name: AES-CTR}, true, [unwrapKey, wrapKey, decrypt])\n[PASS] Success: generateKey({length: 128, name: AES-GCM}, false, [wrapKey])\n[PASS] Success: generateKey({length: 128, name: AES-GCM}, true, [wrapKey])\n[PASS] Success: generateKey({length: 256, name: aes-cbc}, true, [encrypt])\n[PASS] Success: generateKey({length: 256, name: aes-cbc}, false, [decrypt, encrypt])\n[PASS] Success: generateKey({length: 256, name: aes-cbc}, true, [decrypt, encrypt])\n[PASS] Success: generateKey({length: 256, name: aes-cbc}, false, [wrapKey, decrypt, encrypt])\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, empty salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, empty salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({length: 128, name: AES-GCM}, false, [unwrapKey, wrapKey])\n[PASS] Success: generateKey({length: 128, name: AES-GCM}, true, [unwrapKey, wrapKey])\n[PASS] Success: generateKey({length: 192, name: AES-CTR}, false, [unwrapKey, decrypt])\n[PASS] Success: generateKey({length: 192, name: AES-CTR}, true, [unwrapKey, decrypt])\n[PASS] Success: generateKey({length: 128, name: AES-GCM}, false, [unwrapKey])\n[PASS] Success: generateKey({length: 128, name: AES-GCM}, true, [unwrapKey])\n[PASS] Success: generateKey({length: 256, name: aes-cbc}, true, [wrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 256, name: aes-cbc}, false, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 192, name: AES-CTR}, false, [wrapKey])\n[PASS] Success: generateKey({length: 192, name: AES-CTR}, true, [wrapKey])\n[PASS] Empty usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [])\n[PASS] Success: generateKey({length: 128, name: AES-GCM}, false, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] Success: generateKey({length: 128, name: AES-GCM}, true, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] Success: generateKey({length: 256, name: aes-cbc}, true, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 192, name: AES-CTR}, false, [unwrapKey, wrapKey])\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, long salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, long salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Success: generateKey({length: 192, name: AES-GCM}, false, [encrypt])\n[PASS] Success: generateKey({length: 192, name: AES-GCM}, true, [encrypt])\n[PASS] Success: generateKey({length: 192, name: AES-GCM}, false, [decrypt, encrypt])\n[PASS] Success: generateKey({length: 192, name: AES-GCM}, true, [decrypt, encrypt])\n[PASS] Success: generateKey({length: 256, name: aes-cbc}, false, [unwrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 256, name: aes-cbc}, true, [unwrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 256, name: aes-cbc}, false, [wrapKey, encrypt])\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, long salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, long salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({length: 192, name: AES-CTR}, true, [unwrapKey, wrapKey])\n[PASS] Success: generateKey({length: 192, name: AES-CTR}, false, [unwrapKey])\n[PASS] Success: generateKey({length: 192, name: AES-CTR}, true, [unwrapKey])\n[PASS] Success: generateKey({length: 192, name: AES-CTR}, false, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] Success: generateKey({length: 192, name: AES-GCM}, false, [wrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 192, name: AES-GCM}, true, [wrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 256, name: aes-cbc}, true, [wrapKey, encrypt])\n[PASS] Success: generateKey({length: 256, name: aes-cbc}, false, [unwrapKey, wrapKey, encrypt])\n[PASS] Success: generateKey({length: 192, name: AES-GCM}, false, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, empty salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, empty salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, empty salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, empty salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({length: 192, name: AES-CTR}, true, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] Success: generateKey({length: 256, name: AES-CTR}, false, [encrypt])\n[PASS] Success: generateKey({length: 256, name: AES-CTR}, true, [encrypt])\n[PASS] Success: generateKey({length: 256, name: AES-CTR}, false, [decrypt, encrypt])\n[PASS] Success: generateKey({length: 256, name: aes-cbc}, true, [unwrapKey, wrapKey, encrypt])\n[PASS] Success: generateKey({length: 256, name: aes-cbc}, false, [unwrapKey, encrypt])\n[PASS] Success: generateKey({length: 256, name: aes-cbc}, true, [unwrapKey, encrypt])\n[PASS] Success: generateKey({length: 192, name: AES-GCM}, true, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 192, name: AES-GCM}, false, [unwrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 192, name: AES-GCM}, true, [unwrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 256, name: AES-CTR}, true, [decrypt, encrypt])\n[PASS] Success: generateKey({length: 256, name: aes-cbc}, false, [decrypt])\n[PASS] Success: generateKey({length: 192, name: AES-GCM}, false, [wrapKey, encrypt])\n[PASS] Success: generateKey({length: 192, name: AES-GCM}, true, [wrapKey, encrypt])\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, long salt, SHA-1, with 100000 iterations\n[PASS] Success: generateKey({length: 256, name: AES-CTR}, false, [wrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 256, name: aes-cbc}, true, [decrypt])\n[PASS] Success: generateKey({length: 192, name: AES-GCM}, false, [unwrapKey, wrapKey, encrypt])\n[PASS] Success: generateKey({length: 256, name: aes-cbc}, false, [wrapKey, decrypt])\n[PASS] Success: generateKey({length: 256, name: AES-CTR}, true, [wrapKey, decrypt, encrypt])\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, long salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, long salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, long salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({length: 192, name: AES-GCM}, true, [unwrapKey, wrapKey, encrypt])\n[PASS] Success: generateKey({length: 192, name: AES-GCM}, false, [unwrapKey, encrypt])\n[PASS] Success: generateKey({length: 192, name: AES-GCM}, true, [unwrapKey, encrypt])\n[PASS] Success: generateKey({length: 192, name: AES-GCM}, false, [decrypt])\n[PASS] Success: generateKey({length: 192, name: AES-GCM}, true, [decrypt])\n[PASS] Success: generateKey({length: 256, name: aes-cbc}, true, [wrapKey, decrypt])\n[PASS] Success: generateKey({length: 256, name: aes-cbc}, false, [unwrapKey, wrapKey, decrypt])\n[PASS] Success: generateKey({length: 256, name: aes-cbc}, true, [unwrapKey, wrapKey, decrypt])\n[PASS] Success: generateKey({length: 256, name: AES-CTR}, false, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 256, name: AES-CTR}, true, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 256, name: aes-cbc}, false, [unwrapKey, decrypt])\n[PASS] Success: generateKey({length: 192, name: AES-GCM}, false, [wrapKey, decrypt])\n[PASS] Success: generateKey({length: 256, name: AES-CTR}, false, [unwrapKey, decrypt, encrypt])\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, long salt, SHA-384, with 100000 iterations\n[PASS] Success: generateKey({length: 192, name: AES-GCM}, true, [wrapKey, decrypt])\n[PASS] Success: generateKey({length: 192, name: AES-GCM}, false, [unwrapKey, wrapKey, decrypt])\n[PASS] Success: generateKey({length: 256, name: aes-cbc}, true, [unwrapKey, decrypt])\n[PASS] Success: generateKey({length: 256, name: aes-cbc}, false, [wrapKey])\n[PASS] Success: generateKey({length: 256, name: aes-cbc}, true, [wrapKey])\n[PASS] Success: generateKey({length: 192, name: AES-GCM}, true, [unwrapKey, wrapKey, decrypt])\n[PASS] Success: generateKey({length: 192, name: AES-GCM}, false, [unwrapKey, decrypt])\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, long salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, long salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, long salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({length: 256, name: AES-CTR}, true, [unwrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 256, name: aes-cbc}, false, [unwrapKey, wrapKey])\n[PASS] Success: generateKey({length: 256, name: aes-cbc}, true, [unwrapKey, wrapKey])\n[PASS] Success: generateKey({length: 192, name: AES-GCM}, true, [unwrapKey, decrypt])\n[PASS] Success: generateKey({length: 192, name: AES-GCM}, false, [wrapKey])\n[PASS] Success: generateKey({length: 256, name: AES-CTR}, false, [wrapKey, encrypt])\n[PASS] Success: generateKey({length: 256, name: aes-cbc}, false, [unwrapKey])\n[PASS] Success: generateKey({length: 192, name: AES-GCM}, true, [wrapKey])\n[PASS] Success: generateKey({length: 256, name: AES-CTR}, true, [wrapKey, encrypt])\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, empty salt, SHA-1, with 100000 iterations\n[PASS] Success: generateKey({length: 192, name: AES-GCM}, false, [unwrapKey, wrapKey])\n[PASS] Success: generateKey({length: 256, name: aes-cbc}, true, [unwrapKey])\n[PASS] Success: generateKey({length: 256, name: AES-CTR}, false, [unwrapKey, wrapKey, encrypt])\n[PASS] Success: generateKey({length: 192, name: AES-GCM}, true, [unwrapKey, wrapKey])\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, empty salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Success: generateKey({length: 256, name: aes-cbc}, false, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] Success: generateKey({length: 192, name: AES-GCM}, false, [unwrapKey])\n[PASS] Success: generateKey({length: 256, name: AES-CTR}, true, [unwrapKey, wrapKey, encrypt])\n[PASS] Success: generateKey({length: 256, name: aes-cbc}, true, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, empty salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Success: generateKey({length: 192, name: AES-GCM}, true, [unwrapKey])\n[PASS] Success: generateKey({length: 128, name: Aes-cbc}, false, [encrypt])\n[PASS] Success: generateKey({length: 256, name: AES-CTR}, false, [unwrapKey, encrypt])\n[PASS] Success: generateKey({length: 192, name: AES-GCM}, false, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, empty salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({length: 128, name: Aes-cbc}, true, [encrypt])\n[PASS] Success: generateKey({length: 192, name: AES-GCM}, true, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] Success: generateKey({length: 256, name: AES-CTR}, true, [unwrapKey, encrypt])\n[PASS] Success: generateKey({length: 256, name: AES-GCM}, false, [encrypt])\n[PASS] Success: generateKey({length: 128, name: Aes-cbc}, false, [decrypt, encrypt])\n[PASS] Success: generateKey({length: 128, name: Aes-cbc}, true, [decrypt, encrypt])\n[PASS] Success: generateKey({length: 256, name: AES-CTR}, false, [decrypt])\n[PASS] Success: generateKey({length: 256, name: AES-CTR}, true, [decrypt])\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, long salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, long salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, long salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, long salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({length: 128, name: Aes-cbc}, false, [wrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 128, name: Aes-cbc}, true, [wrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 256, name: AES-CTR}, false, [wrapKey, decrypt])\n[PASS] Success: generateKey({length: 256, name: AES-GCM}, true, [encrypt])\n[PASS] Success: generateKey({length: 256, name: AES-CTR}, true, [wrapKey, decrypt])\n[PASS] Success: generateKey({length: 128, name: Aes-cbc}, false, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 256, name: AES-GCM}, false, [decrypt, encrypt])\n[PASS] Success: generateKey({length: 256, name: AES-GCM}, true, [decrypt, encrypt])\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, long salt, SHA-384, with 100000 iterations\n[PASS] Success: generateKey({length: 128, name: Aes-cbc}, true, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 256, name: AES-CTR}, false, [unwrapKey, wrapKey, decrypt])\n[PASS] Success: generateKey({length: 128, name: Aes-cbc}, false, [unwrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 256, name: AES-GCM}, false, [wrapKey, decrypt, encrypt])\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, long salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Success: generateKey({length: 256, name: AES-CTR}, true, [unwrapKey, wrapKey, decrypt])\n[PASS] Success: generateKey({length: 256, name: AES-CTR}, false, [unwrapKey, decrypt])\n[PASS] Success: generateKey({length: 256, name: AES-GCM}, true, [wrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 256, name: AES-GCM}, false, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 128, name: Aes-cbc}, true, [unwrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 128, name: Aes-cbc}, false, [wrapKey, encrypt])\n[PASS] Success: generateKey({length: 128, name: Aes-cbc}, true, [wrapKey, encrypt])\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, long salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, long salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({length: 256, name: AES-CTR}, true, [unwrapKey, decrypt])\n[PASS] Success: generateKey({length: 256, name: AES-CTR}, false, [wrapKey])\n[PASS] Success: generateKey({length: 128, name: Aes-cbc}, false, [unwrapKey, wrapKey, encrypt])\n[PASS] Success: generateKey({length: 256, name: AES-GCM}, true, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 256, name: AES-CTR}, true, [wrapKey])\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, long salt, SHA-384, with 100000 iterations\n[PASS] Success: generateKey({length: 128, name: Aes-cbc}, true, [unwrapKey, wrapKey, encrypt])\n[PASS] Success: generateKey({length: 256, name: AES-GCM}, false, [unwrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 256, name: AES-CTR}, false, [unwrapKey, wrapKey])\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, long salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Success: generateKey({length: 256, name: AES-GCM}, true, [unwrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 256, name: AES-CTR}, true, [unwrapKey, wrapKey])\n[PASS] Success: generateKey({length: 128, name: Aes-cbc}, false, [unwrapKey, encrypt])\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, long salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Success: generateKey({length: 256, name: AES-GCM}, false, [wrapKey, encrypt])\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, long salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({length: 256, name: AES-CTR}, false, [unwrapKey])\n[PASS] Success: generateKey({length: 128, name: Aes-cbc}, true, [unwrapKey, encrypt])\n[PASS] Success: generateKey({length: 256, name: AES-GCM}, true, [wrapKey, encrypt])\n[PASS] Success: generateKey({length: 256, name: AES-CTR}, true, [unwrapKey])\n[PASS] Success: generateKey({length: 256, name: AES-GCM}, false, [unwrapKey, wrapKey, encrypt])\n[PASS] Success: generateKey({length: 128, name: Aes-cbc}, false, [decrypt])\n[PASS] Success: generateKey({length: 256, name: AES-CTR}, false, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, empty salt, SHA-1, with 100000 iterations\n[PASS] Success: generateKey({length: 256, name: AES-GCM}, true, [unwrapKey, wrapKey, encrypt])\n[PASS] Success: generateKey({length: 128, name: Aes-cbc}, true, [decrypt])\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, empty salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Success: generateKey({length: 256, name: AES-CTR}, true, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] Success: generateKey({length: 256, name: AES-GCM}, false, [unwrapKey, encrypt])\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, empty salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Success: generateKey({length: 128, name: Aes-cbc}, false, [wrapKey, decrypt])\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, empty salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({length: 128, name: aes-ctr}, false, [encrypt])\n[PASS] Success: generateKey({length: 256, name: AES-GCM}, true, [unwrapKey, encrypt])\n[PASS] Success: generateKey({length: 256, name: AES-GCM}, false, [decrypt])\n[PASS] Success: generateKey({length: 128, name: Aes-cbc}, true, [wrapKey, decrypt])\n[PASS] Success: generateKey({length: 128, name: Aes-cbc}, false, [unwrapKey, wrapKey, decrypt])\n[PASS] Success: generateKey({length: 128, name: aes-ctr}, true, [encrypt])\n[PASS] Success: generateKey({length: 256, name: AES-GCM}, true, [decrypt])\n[PASS] Success: generateKey({length: 128, name: Aes-cbc}, true, [unwrapKey, wrapKey, decrypt])\n[PASS] Empty usages: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [])\n[PASS] Success: generateKey({length: 256, name: AES-GCM}, false, [wrapKey, decrypt])\n[PASS] Success: generateKey({length: 128, name: aes-ctr}, false, [decrypt, encrypt])\n[PASS] Success: generateKey({length: 128, name: Aes-cbc}, false, [unwrapKey, decrypt])\n[PASS] Success: generateKey({length: 256, name: AES-GCM}, true, [wrapKey, decrypt])\n[PASS] Success: generateKey({length: 128, name: aes-ctr}, true, [decrypt, encrypt])\n[PASS] Success: generateKey({length: 128, name: Aes-cbc}, true, [unwrapKey, decrypt])\n[PASS] Success: generateKey({length: 256, name: AES-GCM}, false, [unwrapKey, wrapKey, decrypt])\n[PASS] Success: generateKey({length: 128, name: aes-ctr}, false, [wrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 128, name: aes-ctr}, true, [wrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 128, name: aes-ctr}, false, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 128, name: aes-ctr}, true, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 128, name: aes-ctr}, false, [unwrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 256, name: AES-GCM}, true, [unwrapKey, wrapKey, decrypt])\n[PASS] Success: generateKey({length: 256, name: AES-GCM}, false, [unwrapKey, decrypt])\n[PASS] Success: generateKey({length: 256, name: AES-GCM}, true, [unwrapKey, decrypt])\n[PASS] Success: generateKey({length: 256, name: AES-GCM}, false, [wrapKey])\n[PASS] Success: generateKey({length: 256, name: AES-GCM}, true, [wrapKey])\n[PASS] Success: generateKey({length: 256, name: AES-GCM}, false, [unwrapKey, wrapKey])\n[PASS] Success: generateKey({length: 128, name: Aes-cbc}, false, [wrapKey])\n[PASS] Success: generateKey({length: 128, name: Aes-cbc}, true, [wrapKey])\n[PASS] Success: generateKey({length: 128, name: Aes-cbc}, false, [unwrapKey, wrapKey])\n[PASS] Success: generateKey({length: 128, name: Aes-cbc}, true, [unwrapKey, wrapKey])\n[PASS] Success: generateKey({length: 128, name: aes-ctr}, true, [unwrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 128, name: aes-ctr}, false, [wrapKey, encrypt])\n[PASS] Success: generateKey({length: 128, name: aes-ctr}, true, [wrapKey, encrypt])\n[PASS] Success: generateKey({length: 256, name: AES-GCM}, true, [unwrapKey, wrapKey])\n[PASS] Success: generateKey({length: 256, name: AES-GCM}, false, [unwrapKey])\n[PASS] Success: generateKey({length: 128, name: aes-ctr}, false, [unwrapKey, wrapKey, encrypt])\n[PASS] Success: generateKey({length: 128, name: Aes-cbc}, false, [unwrapKey])\n[PASS] Success: generateKey({length: 128, name: Aes-cbc}, true, [unwrapKey])\n[PASS] Success: generateKey({length: 128, name: Aes-cbc}, false, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] Success: generateKey({length: 256, name: AES-GCM}, true, [unwrapKey])\n[PASS] Success: generateKey({length: 256, name: AES-GCM}, false, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] Success: generateKey({length: 128, name: Aes-cbc}, true, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] Success: generateKey({length: 128, name: aes-ctr}, true, [unwrapKey, wrapKey, encrypt])\n[PASS] Success: generateKey({length: 128, name: aes-ctr}, false, [unwrapKey, encrypt])\n[PASS] Success: generateKey({length: 128, name: aes-ctr}, true, [unwrapKey, encrypt])\n[PASS] Success: generateKey({length: 256, name: AES-GCM}, true, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] Success: generateKey({length: 128, name: aes-gcm}, false, [encrypt])\n[PASS] Success: generateKey({length: 192, name: Aes-cbc}, false, [encrypt])\n[PASS] Success: generateKey({length: 192, name: Aes-cbc}, true, [encrypt])\n[PASS] Success: generateKey({length: 128, name: aes-ctr}, false, [decrypt])\n[PASS] Success: generateKey({length: 192, name: Aes-cbc}, false, [decrypt, encrypt])\n[PASS] Success: generateKey({length: 128, name: aes-gcm}, true, [encrypt])\n[PASS] Success: generateKey({length: 192, name: Aes-cbc}, true, [decrypt, encrypt])\n[PASS] Success: generateKey({length: 128, name: aes-ctr}, true, [decrypt])\n[PASS] Success: generateKey({length: 192, name: Aes-cbc}, false, [wrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 128, name: aes-ctr}, false, [wrapKey, decrypt])\n[PASS] Success: generateKey({length: 128, name: aes-gcm}, false, [decrypt, encrypt])\n[PASS] Success: generateKey({length: 192, name: Aes-cbc}, true, [wrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 128, name: aes-ctr}, true, [wrapKey, decrypt])\n[PASS] Success: generateKey({length: 128, name: aes-gcm}, true, [decrypt, encrypt])\n[PASS] Success: generateKey({length: 128, name: aes-ctr}, false, [unwrapKey, wrapKey, decrypt])\n[PASS] Success: generateKey({length: 192, name: Aes-cbc}, false, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 192, name: Aes-cbc}, true, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 128, name: aes-ctr}, true, [unwrapKey, wrapKey, decrypt])\n[PASS] Success: generateKey({length: 128, name: aes-gcm}, false, [wrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 128, name: aes-ctr}, false, [unwrapKey, decrypt])\n[PASS] Success: generateKey({length: 128, name: aes-gcm}, true, [wrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 192, name: Aes-cbc}, false, [unwrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 128, name: aes-ctr}, true, [unwrapKey, decrypt])\n[PASS] Success: generateKey({length: 192, name: Aes-cbc}, true, [unwrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 192, name: Aes-cbc}, false, [wrapKey, encrypt])\n[PASS] Success: generateKey({length: 128, name: aes-gcm}, false, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 128, name: aes-ctr}, false, [wrapKey])\n[PASS] Success: generateKey({length: 128, name: aes-ctr}, true, [wrapKey])\n[PASS] Success: generateKey({length: 192, name: Aes-cbc}, true, [wrapKey, encrypt])\n[PASS] Success: generateKey({length: 128, name: aes-gcm}, true, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 128, name: aes-gcm}, false, [unwrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 128, name: aes-ctr}, false, [unwrapKey, wrapKey])\n[PASS] Success: generateKey({length: 128, name: aes-ctr}, true, [unwrapKey, wrapKey])\n[PASS] Success: generateKey({length: 192, name: Aes-cbc}, false, [unwrapKey, wrapKey, encrypt])\n[PASS] Success: generateKey({length: 192, name: Aes-cbc}, true, [unwrapKey, wrapKey, encrypt])\n[PASS] Success: generateKey({length: 128, name: aes-gcm}, true, [unwrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 128, name: aes-gcm}, false, [wrapKey, encrypt])\n[PASS] Success: generateKey({length: 128, name: aes-ctr}, false, [unwrapKey])\n[PASS] Success: generateKey({length: 128, name: aes-ctr}, true, [unwrapKey])\n[PASS] Success: generateKey({length: 192, name: Aes-cbc}, false, [unwrapKey, encrypt])\n[PASS] Success: generateKey({length: 192, name: Aes-cbc}, true, [unwrapKey, encrypt])\n[PASS] Success: generateKey({length: 192, name: Aes-cbc}, false, [decrypt])\n[PASS] Success: generateKey({length: 128, name: aes-gcm}, true, [wrapKey, encrypt])\n[PASS] Success: generateKey({length: 128, name: aes-gcm}, false, [unwrapKey, wrapKey, encrypt])\n[PASS] Success: generateKey({length: 128, name: aes-ctr}, false, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] Success: generateKey({length: 128, name: aes-ctr}, true, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] Success: generateKey({length: 192, name: Aes-cbc}, true, [decrypt])\n[PASS] Success: generateKey({length: 192, name: Aes-cbc}, false, [wrapKey, decrypt])\n[PASS] Success: generateKey({length: 192, name: aes-ctr}, false, [encrypt])\n[PASS] Success: generateKey({length: 128, name: aes-gcm}, true, [unwrapKey, wrapKey, encrypt])\n[PASS] Success: generateKey({length: 128, name: aes-gcm}, false, [unwrapKey, encrypt])\n[PASS] Success: generateKey({length: 192, name: Aes-cbc}, true, [wrapKey, decrypt])\n[PASS] Success: generateKey({length: 192, name: aes-ctr}, true, [encrypt])\n[PASS] Success: generateKey({length: 192, name: Aes-cbc}, false, [unwrapKey, wrapKey, decrypt])\n[PASS] Success: generateKey({length: 192, name: aes-ctr}, false, [decrypt, encrypt])\n[PASS] Success: generateKey({length: 128, name: aes-gcm}, true, [unwrapKey, encrypt])\n[PASS] Success: generateKey({length: 192, name: Aes-cbc}, true, [unwrapKey, wrapKey, decrypt])\n[PASS] Success: generateKey({length: 192, name: Aes-cbc}, false, [unwrapKey, decrypt])\n[PASS] Success: generateKey({length: 192, name: aes-ctr}, true, [decrypt, encrypt])\n[PASS] Success: generateKey({length: 192, name: aes-ctr}, false, [wrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 192, name: Aes-cbc}, true, [unwrapKey, decrypt])\n[PASS] Success: generateKey({length: 128, name: aes-gcm}, false, [decrypt])\n[PASS] Success: generateKey({length: 192, name: aes-ctr}, true, [wrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 192, name: aes-ctr}, false, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 192, name: aes-ctr}, true, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 192, name: aes-ctr}, false, [unwrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 192, name: aes-ctr}, true, [unwrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 192, name: aes-ctr}, false, [wrapKey, encrypt])\n[PASS] Success: generateKey({length: 128, name: aes-gcm}, true, [decrypt])\n[PASS] Success: generateKey({length: 128, name: aes-gcm}, false, [wrapKey, decrypt])\n[PASS] Success: generateKey({length: 128, name: aes-gcm}, true, [wrapKey, decrypt])\n[PASS] Success: generateKey({length: 128, name: aes-gcm}, false, [unwrapKey, wrapKey, decrypt])\n[PASS] Success: generateKey({length: 128, name: aes-gcm}, true, [unwrapKey, wrapKey, decrypt])\n[PASS] Success: generateKey({length: 128, name: aes-gcm}, false, [unwrapKey, decrypt])\n[PASS] Success: generateKey({length: 128, name: aes-gcm}, true, [unwrapKey, decrypt])\n[PASS] Success: generateKey({length: 128, name: aes-gcm}, false, [wrapKey])\n[PASS] Success: generateKey({length: 128, name: aes-gcm}, true, [wrapKey])\n[PASS] Success: generateKey({length: 128, name: aes-gcm}, false, [unwrapKey, wrapKey])\n[PASS] Success: generateKey({length: 128, name: aes-gcm}, true, [unwrapKey, wrapKey])\n[PASS] Success: generateKey({length: 128, name: aes-gcm}, false, [unwrapKey])\n[PASS] Success: generateKey({length: 128, name: aes-gcm}, true, [unwrapKey])\n[PASS] Success: generateKey({length: 128, name: aes-gcm}, false, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] Success: generateKey({length: 128, name: aes-gcm}, true, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] Success: generateKey({length: 192, name: aes-gcm}, false, [encrypt])\n[PASS] Success: generateKey({length: 192, name: Aes-cbc}, false, [wrapKey])\n[PASS] Success: generateKey({length: 192, name: Aes-cbc}, true, [wrapKey])\n[PASS] Success: generateKey({length: 192, name: Aes-cbc}, false, [unwrapKey, wrapKey])\n[PASS] Success: generateKey({length: 192, name: Aes-cbc}, true, [unwrapKey, wrapKey])\n[PASS] Success: generateKey({length: 192, name: Aes-cbc}, false, [unwrapKey])\n[PASS] Success: generateKey({length: 192, name: Aes-cbc}, true, [unwrapKey])\n[PASS] Success: generateKey({length: 192, name: Aes-cbc}, false, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] Success: generateKey({length: 192, name: Aes-cbc}, true, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] Success: generateKey({length: 256, name: Aes-cbc}, false, [encrypt])\n[PASS] Success: generateKey({length: 256, name: Aes-cbc}, true, [encrypt])\n[PASS] Success: generateKey({length: 256, name: Aes-cbc}, false, [decrypt, encrypt])\n[PASS] Success: generateKey({length: 256, name: Aes-cbc}, true, [decrypt, encrypt])\n[PASS] Success: generateKey({length: 256, name: Aes-cbc}, false, [wrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 256, name: Aes-cbc}, true, [wrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 256, name: Aes-cbc}, false, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 256, name: Aes-cbc}, true, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 256, name: Aes-cbc}, false, [unwrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 256, name: Aes-cbc}, true, [unwrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 256, name: Aes-cbc}, false, [wrapKey, encrypt])\n[PASS] Success: generateKey({length: 256, name: Aes-cbc}, true, [wrapKey, encrypt])\n[PASS] Success: generateKey({length: 256, name: Aes-cbc}, false, [unwrapKey, wrapKey, encrypt])\n[PASS] Success: generateKey({length: 256, name: Aes-cbc}, true, [unwrapKey, wrapKey, encrypt])\n[PASS] Success: generateKey({length: 256, name: Aes-cbc}, false, [unwrapKey, encrypt])\n[PASS] Success: generateKey({length: 256, name: Aes-cbc}, true, [unwrapKey, encrypt])\n[PASS] Success: generateKey({length: 256, name: Aes-cbc}, false, [decrypt])\n[PASS] Success: generateKey({length: 256, name: Aes-cbc}, true, [decrypt])\n[PASS] Success: generateKey({length: 256, name: Aes-cbc}, false, [wrapKey, decrypt])\n[PASS] Success: generateKey({length: 256, name: Aes-cbc}, true, [wrapKey, decrypt])\n[PASS] Success: generateKey({length: 256, name: Aes-cbc}, false, [unwrapKey, wrapKey, decrypt])\n[PASS] Success: generateKey({length: 256, name: Aes-cbc}, true, [unwrapKey, wrapKey, decrypt])\n[PASS] Success: generateKey({length: 256, name: Aes-cbc}, false, [unwrapKey, decrypt])\n[PASS] Success: generateKey({length: 256, name: Aes-cbc}, true, [unwrapKey, decrypt])\n[PASS] Success: generateKey({length: 256, name: Aes-cbc}, false, [wrapKey])\n[PASS] Success: generateKey({length: 256, name: Aes-cbc}, true, [wrapKey])\n[PASS] Success: generateKey({length: 256, name: Aes-cbc}, false, [unwrapKey, wrapKey])\n[PASS] Success: generateKey({length: 256, name: Aes-cbc}, true, [unwrapKey, wrapKey])\n[PASS] Success: generateKey({length: 256, name: Aes-cbc}, false, [unwrapKey])\n[PASS] Success: generateKey({length: 256, name: Aes-cbc}, true, [unwrapKey])\n[PASS] Success: generateKey({length: 256, name: Aes-cbc}, false, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] Success: generateKey({length: 256, name: Aes-cbc}, true, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] Success: generateKey({length: 192, name: aes-ctr}, true, [wrapKey, encrypt])\n[PASS] Success: generateKey({length: 192, name: aes-ctr}, false, [unwrapKey, wrapKey, encrypt])\n[PASS] Success: generateKey({length: 192, name: aes-ctr}, true, [unwrapKey, wrapKey, encrypt])\n[PASS] Success: generateKey({length: 192, name: aes-ctr}, false, [unwrapKey, encrypt])\n[PASS] Success: generateKey({length: 192, name: aes-ctr}, true, [unwrapKey, encrypt])\n[PASS] Success: generateKey({length: 192, name: aes-ctr}, false, [decrypt])\n[PASS] Success: generateKey({length: 192, name: aes-ctr}, true, [decrypt])\n[PASS] Success: generateKey({length: 192, name: aes-ctr}, false, [wrapKey, decrypt])\n[PASS] Success: generateKey({length: 192, name: aes-ctr}, true, [wrapKey, decrypt])\n[PASS] Success: generateKey({length: 192, name: aes-ctr}, false, [unwrapKey, wrapKey, decrypt])\n[PASS] Success: generateKey({length: 192, name: aes-ctr}, true, [unwrapKey, wrapKey, decrypt])\n[PASS] Success: generateKey({length: 192, name: aes-ctr}, false, [unwrapKey, decrypt])\n[PASS] Success: generateKey({length: 192, name: aes-ctr}, true, [unwrapKey, decrypt])\n[PASS] Success: generateKey({length: 192, name: aes-ctr}, false, [wrapKey])\n[PASS] Success: generateKey({length: 192, name: aes-ctr}, true, [wrapKey])\n[PASS] Success: generateKey({length: 192, name: aes-ctr}, false, [unwrapKey, wrapKey])\n[PASS] Success: generateKey({length: 192, name: aes-ctr}, true, [unwrapKey, wrapKey])\n[PASS] Success: generateKey({length: 192, name: aes-ctr}, false, [unwrapKey])\n[PASS] Success: generateKey({length: 192, name: aes-ctr}, true, [unwrapKey])\n[PASS] Success: generateKey({length: 192, name: aes-ctr}, false, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] Success: generateKey({length: 192, name: aes-ctr}, true, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] Success: generateKey({length: 256, name: aes-ctr}, false, [encrypt])\n[PASS] Success: generateKey({length: 256, name: aes-ctr}, true, [encrypt])\n[PASS] Success: generateKey({length: 256, name: aes-ctr}, false, [decrypt, encrypt])\n[PASS] Success: generateKey({length: 256, name: aes-ctr}, true, [decrypt, encrypt])\n[PASS] Success: generateKey({length: 256, name: aes-ctr}, false, [wrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 256, name: aes-ctr}, true, [wrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 256, name: aes-ctr}, false, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 256, name: aes-ctr}, true, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 256, name: aes-ctr}, false, [unwrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 256, name: aes-ctr}, true, [unwrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 256, name: aes-ctr}, false, [wrapKey, encrypt])\n[PASS] Success: generateKey({length: 256, name: aes-ctr}, true, [wrapKey, encrypt])\n[PASS] Success: generateKey({length: 256, name: aes-ctr}, false, [unwrapKey, wrapKey, encrypt])\n[PASS] Success: generateKey({length: 256, name: aes-ctr}, true, [unwrapKey, wrapKey, encrypt])\n[PASS] Success: generateKey({length: 256, name: aes-ctr}, false, [unwrapKey, encrypt])\n[PASS] Success: generateKey({length: 256, name: aes-ctr}, true, [unwrapKey, encrypt])\n[PASS] Success: generateKey({length: 256, name: aes-ctr}, false, [decrypt])\n[PASS] Success: generateKey({length: 256, name: aes-ctr}, true, [decrypt])\n[PASS] Success: generateKey({length: 256, name: aes-ctr}, false, [wrapKey, decrypt])\n[PASS] Success: generateKey({length: 256, name: aes-ctr}, true, [wrapKey, decrypt])\n[PASS] Success: generateKey({length: 256, name: aes-ctr}, false, [unwrapKey, wrapKey, decrypt])\n[PASS] Success: generateKey({length: 256, name: aes-ctr}, true, [unwrapKey, wrapKey, decrypt])\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, long salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, long salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, long salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, long salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({length: 192, name: aes-gcm}, true, [encrypt])\n[PASS] Success: generateKey({length: 192, name: aes-gcm}, false, [decrypt, encrypt])\n[PASS] Success: generateKey({length: 192, name: aes-gcm}, true, [decrypt, encrypt])\n[PASS] Success: generateKey({length: 192, name: aes-gcm}, false, [wrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 192, name: aes-gcm}, true, [wrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 192, name: aes-gcm}, false, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 192, name: aes-gcm}, true, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 192, name: aes-gcm}, false, [unwrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 192, name: aes-gcm}, true, [unwrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 192, name: aes-gcm}, false, [wrapKey, encrypt])\n[PASS] Success: generateKey({length: 192, name: aes-gcm}, true, [wrapKey, encrypt])\n[PASS] Success: generateKey({length: 192, name: aes-gcm}, false, [unwrapKey, wrapKey, encrypt])\n[PASS] Success: generateKey({length: 192, name: aes-gcm}, true, [unwrapKey, wrapKey, encrypt])\n[PASS] Success: generateKey({length: 256, name: aes-ctr}, false, [unwrapKey, decrypt])\n[PASS] Success: generateKey({length: 256, name: aes-ctr}, true, [unwrapKey, decrypt])\n[PASS] Success: generateKey({length: 256, name: aes-ctr}, false, [wrapKey])\n[PASS] Success: generateKey({length: 256, name: aes-ctr}, true, [wrapKey])\n[PASS] Success: generateKey({length: 256, name: aes-ctr}, false, [unwrapKey, wrapKey])\n[PASS] Success: generateKey({length: 256, name: aes-ctr}, true, [unwrapKey, wrapKey])\n[PASS] Success: generateKey({length: 256, name: aes-ctr}, false, [unwrapKey])\n[PASS] Success: generateKey({length: 256, name: aes-ctr}, true, [unwrapKey])\n[PASS] Success: generateKey({length: 256, name: aes-ctr}, false, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] Success: generateKey({length: 192, name: aes-gcm}, false, [unwrapKey, encrypt])\n[PASS] Success: generateKey({length: 192, name: aes-gcm}, true, [unwrapKey, encrypt])\n[PASS] Success: generateKey({length: 192, name: aes-gcm}, false, [decrypt])\n[PASS] Success: generateKey({length: 192, name: aes-gcm}, true, [decrypt])\n[PASS] Success: generateKey({length: 192, name: aes-gcm}, false, [wrapKey, decrypt])\n[PASS] Success: generateKey({length: 192, name: aes-gcm}, true, [wrapKey, decrypt])\n[PASS] Success: generateKey({length: 256, name: aes-ctr}, true, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] Success: generateKey({length: 128, name: Aes-ctr}, false, [encrypt])\n[PASS] Success: generateKey({length: 128, name: Aes-ctr}, true, [encrypt])\n[PASS] Success: generateKey({length: 128, name: Aes-ctr}, false, [decrypt, encrypt])\n[PASS] Success: generateKey({length: 128, name: Aes-ctr}, true, [decrypt, encrypt])\n[PASS] Success: generateKey({length: 128, name: Aes-ctr}, false, [wrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 128, name: Aes-ctr}, true, [wrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 128, name: Aes-ctr}, false, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 128, name: Aes-ctr}, true, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 128, name: Aes-ctr}, false, [unwrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 128, name: Aes-ctr}, true, [unwrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 128, name: Aes-ctr}, false, [wrapKey, encrypt])\n[PASS] Success: generateKey({length: 128, name: Aes-ctr}, true, [wrapKey, encrypt])\n[PASS] Success: generateKey({length: 128, name: Aes-ctr}, false, [unwrapKey, wrapKey, encrypt])\n[PASS] Success: generateKey({length: 128, name: Aes-ctr}, true, [unwrapKey, wrapKey, encrypt])\n[PASS] Success: generateKey({length: 128, name: Aes-ctr}, false, [unwrapKey, encrypt])\n[PASS] Success: generateKey({length: 128, name: Aes-ctr}, true, [unwrapKey, encrypt])\n[PASS] Success: generateKey({length: 128, name: Aes-ctr}, false, [decrypt])\n[PASS] Success: generateKey({length: 128, name: Aes-ctr}, true, [decrypt])\n[PASS] Success: generateKey({length: 192, name: aes-gcm}, false, [unwrapKey, wrapKey, decrypt])\n[PASS] Success: generateKey({length: 192, name: aes-gcm}, true, [unwrapKey, wrapKey, decrypt])\n[PASS] Success: generateKey({length: 192, name: aes-gcm}, false, [unwrapKey, decrypt])\n[PASS] Success: generateKey({length: 192, name: aes-gcm}, true, [unwrapKey, decrypt])\n[PASS] Success: generateKey({length: 192, name: aes-gcm}, false, [wrapKey])\n[PASS] Success: generateKey({length: 192, name: aes-gcm}, true, [wrapKey])\n[PASS] Success: generateKey({length: 192, name: aes-gcm}, false, [unwrapKey, wrapKey])\n[PASS] Success: generateKey({length: 192, name: aes-gcm}, true, [unwrapKey, wrapKey])\n[PASS] Success: generateKey({length: 192, name: aes-gcm}, false, [unwrapKey])\n[PASS] Success: generateKey({length: 192, name: aes-gcm}, true, [unwrapKey])\n[PASS] Success: generateKey({length: 192, name: aes-gcm}, false, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] Success: generateKey({length: 192, name: aes-gcm}, true, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] Success: generateKey({length: 256, name: aes-gcm}, false, [encrypt])\n[PASS] Success: generateKey({length: 256, name: aes-gcm}, true, [encrypt])\n[PASS] Success: generateKey({length: 256, name: aes-gcm}, false, [decrypt, encrypt])\n[PASS] Success: generateKey({length: 256, name: aes-gcm}, true, [decrypt, encrypt])\n[PASS] Success: generateKey({length: 256, name: aes-gcm}, false, [wrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 256, name: aes-gcm}, true, [wrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 256, name: aes-gcm}, false, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 256, name: aes-gcm}, true, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 256, name: aes-gcm}, false, [unwrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 256, name: aes-gcm}, true, [unwrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 256, name: aes-gcm}, false, [wrapKey, encrypt])\n[PASS] Success: generateKey({length: 256, name: aes-gcm}, true, [wrapKey, encrypt])\n[PASS] Success: generateKey({length: 256, name: aes-gcm}, false, [unwrapKey, wrapKey, encrypt])\n[PASS] Success: generateKey({length: 256, name: aes-gcm}, true, [unwrapKey, wrapKey, encrypt])\n[PASS] Success: generateKey({length: 256, name: aes-gcm}, false, [unwrapKey, encrypt])\n[PASS] Success: generateKey({length: 256, name: aes-gcm}, true, [unwrapKey, encrypt])\n[PASS] Success: generateKey({length: 256, name: aes-gcm}, false, [decrypt])\n[PASS] Success: generateKey({length: 256, name: aes-gcm}, true, [decrypt])\n[PASS] Success: generateKey({length: 256, name: aes-gcm}, false, [wrapKey, decrypt])\n[PASS] Success: generateKey({length: 256, name: aes-gcm}, true, [wrapKey, decrypt])\n[PASS] Success: generateKey({length: 256, name: aes-gcm}, false, [unwrapKey, wrapKey, decrypt])\n[PASS] Success: generateKey({length: 256, name: aes-gcm}, true, [unwrapKey, wrapKey, decrypt])\n[PASS] Success: generateKey({length: 256, name: aes-gcm}, false, [unwrapKey, decrypt])\n[PASS] Success: generateKey({length: 256, name: aes-gcm}, true, [unwrapKey, decrypt])\n[PASS] Success: generateKey({length: 256, name: aes-gcm}, false, [wrapKey])\n[PASS] Success: generateKey({length: 128, name: Aes-ctr}, false, [wrapKey, decrypt])\n[PASS] Success: generateKey({length: 128, name: Aes-ctr}, true, [wrapKey, decrypt])\n[PASS] Success: generateKey({length: 128, name: Aes-ctr}, false, [unwrapKey, wrapKey, decrypt])\n[PASS] Success: generateKey({length: 128, name: Aes-ctr}, true, [unwrapKey, wrapKey, decrypt])\n[PASS] Success: generateKey({length: 128, name: Aes-ctr}, false, [unwrapKey, decrypt])\n[PASS] Success: generateKey({length: 128, name: Aes-ctr}, true, [unwrapKey, decrypt])\n[PASS] Success: generateKey({length: 128, name: Aes-ctr}, false, [wrapKey])\n[PASS] Success: generateKey({length: 128, name: Aes-ctr}, true, [wrapKey])\n[PASS] Success: generateKey({length: 128, name: Aes-ctr}, false, [unwrapKey, wrapKey])\n[PASS] Success: generateKey({length: 128, name: Aes-ctr}, true, [unwrapKey, wrapKey])\n[PASS] Success: generateKey({length: 128, name: Aes-ctr}, false, [unwrapKey])\n[PASS] Success: generateKey({length: 128, name: Aes-ctr}, true, [unwrapKey])\n[PASS] Success: generateKey({length: 128, name: Aes-ctr}, false, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] Success: generateKey({length: 128, name: Aes-ctr}, true, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] Success: generateKey({length: 192, name: Aes-ctr}, false, [encrypt])\n[PASS] Success: generateKey({length: 192, name: Aes-ctr}, true, [encrypt])\n[PASS] Success: generateKey({length: 192, name: Aes-ctr}, false, [decrypt, encrypt])\n[PASS] Success: generateKey({length: 192, name: Aes-ctr}, true, [decrypt, encrypt])\n[PASS] Success: generateKey({length: 192, name: Aes-ctr}, false, [wrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 192, name: Aes-ctr}, true, [wrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 192, name: Aes-ctr}, false, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 192, name: Aes-ctr}, true, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 192, name: Aes-ctr}, false, [unwrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 192, name: Aes-ctr}, true, [unwrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 192, name: Aes-ctr}, false, [wrapKey, encrypt])\n[PASS] Success: generateKey({length: 192, name: Aes-ctr}, true, [wrapKey, encrypt])\n[PASS] Success: generateKey({length: 192, name: Aes-ctr}, false, [unwrapKey, wrapKey, encrypt])\n[PASS] Success: generateKey({length: 192, name: Aes-ctr}, true, [unwrapKey, wrapKey, encrypt])\n[PASS] Success: generateKey({length: 192, name: Aes-ctr}, false, [unwrapKey, encrypt])\n[PASS] Success: generateKey({length: 192, name: Aes-ctr}, true, [unwrapKey, encrypt])\n[PASS] Success: generateKey({length: 192, name: Aes-ctr}, false, [decrypt])\n[PASS] Success: generateKey({length: 192, name: Aes-ctr}, true, [decrypt])\n[PASS] Success: generateKey({length: 192, name: Aes-ctr}, false, [wrapKey, decrypt])\n[PASS] Success: generateKey({length: 192, name: Aes-ctr}, true, [wrapKey, decrypt])\n[PASS] Success: generateKey({length: 192, name: Aes-ctr}, false, [unwrapKey, wrapKey, decrypt])\n[PASS] Success: generateKey({length: 192, name: Aes-ctr}, true, [unwrapKey, wrapKey, decrypt])\n[PASS] Success: generateKey({length: 192, name: Aes-ctr}, false, [unwrapKey, decrypt])\n[PASS] Success: generateKey({length: 192, name: Aes-ctr}, true, [unwrapKey, decrypt])\n[PASS] Success: generateKey({length: 256, name: aes-gcm}, true, [wrapKey])\n[PASS] Success: generateKey({length: 256, name: aes-gcm}, false, [unwrapKey, wrapKey])\n[PASS] Success: generateKey({length: 256, name: aes-gcm}, true, [unwrapKey, wrapKey])\n[PASS] Success: generateKey({length: 256, name: aes-gcm}, false, [unwrapKey])\n[PASS] Success: generateKey({length: 256, name: aes-gcm}, true, [unwrapKey])\n[PASS] Success: generateKey({length: 256, name: aes-gcm}, false, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] Success: generateKey({length: 256, name: aes-gcm}, true, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] Success: generateKey({length: 128, name: Aes-gcm}, false, [encrypt])\n[PASS] Success: generateKey({length: 128, name: Aes-gcm}, true, [encrypt])\n[PASS] Success: generateKey({length: 128, name: Aes-gcm}, false, [decrypt, encrypt])\n[PASS] Success: generateKey({length: 128, name: Aes-gcm}, true, [decrypt, encrypt])\n[PASS] Success: generateKey({length: 128, name: Aes-gcm}, false, [wrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 128, name: Aes-gcm}, true, [wrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 128, name: Aes-gcm}, false, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 128, name: Aes-gcm}, true, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 192, name: Aes-ctr}, false, [wrapKey])\n[PASS] Success: generateKey({length: 192, name: Aes-ctr}, true, [wrapKey])\n[PASS] Success: generateKey({length: 192, name: Aes-ctr}, false, [unwrapKey, wrapKey])\n[PASS] Success: generateKey({length: 192, name: Aes-ctr}, true, [unwrapKey, wrapKey])\n[PASS] Success: generateKey({length: 192, name: Aes-ctr}, false, [unwrapKey])\n[PASS] Success: generateKey({length: 192, name: Aes-ctr}, true, [unwrapKey])\n[PASS] Success: generateKey({length: 128, name: Aes-gcm}, false, [unwrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 128, name: Aes-gcm}, true, [unwrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 128, name: Aes-gcm}, false, [wrapKey, encrypt])\n[PASS] Success: generateKey({length: 192, name: Aes-ctr}, false, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] Success: generateKey({length: 128, name: Aes-gcm}, true, [wrapKey, encrypt])\n[PASS] Success: generateKey({length: 192, name: Aes-ctr}, true, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] Success: generateKey({length: 128, name: Aes-gcm}, false, [unwrapKey, wrapKey, encrypt])\n[PASS] Success: generateKey({length: 256, name: Aes-ctr}, false, [encrypt])\n[PASS] Success: generateKey({length: 128, name: Aes-gcm}, true, [unwrapKey, wrapKey, encrypt])\n[PASS] Success: generateKey({length: 256, name: Aes-ctr}, true, [encrypt])\n[PASS] Success: generateKey({length: 128, name: Aes-gcm}, false, [unwrapKey, encrypt])\n[PASS] Success: generateKey({length: 256, name: Aes-ctr}, false, [decrypt, encrypt])\n[PASS] Success: generateKey({length: 128, name: Aes-gcm}, true, [unwrapKey, encrypt])\n[PASS] Success: generateKey({length: 256, name: Aes-ctr}, true, [decrypt, encrypt])\n[PASS] Success: generateKey({length: 256, name: Aes-ctr}, false, [wrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 128, name: Aes-gcm}, false, [decrypt])\n[PASS] Success: generateKey({length: 256, name: Aes-ctr}, true, [wrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 128, name: Aes-gcm}, true, [decrypt])\n[PASS] Success: generateKey({length: 128, name: Aes-gcm}, false, [wrapKey, decrypt])\n[PASS] Success: generateKey({length: 256, name: Aes-ctr}, false, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 128, name: Aes-gcm}, true, [wrapKey, decrypt])\n[PASS] Success: generateKey({length: 256, name: Aes-ctr}, true, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 128, name: Aes-gcm}, false, [unwrapKey, wrapKey, decrypt])\n[PASS] Success: generateKey({length: 256, name: Aes-ctr}, false, [unwrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 128, name: Aes-gcm}, true, [unwrapKey, wrapKey, decrypt])\n[PASS] Success: generateKey({length: 256, name: Aes-ctr}, true, [unwrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 128, name: Aes-gcm}, false, [unwrapKey, decrypt])\n[PASS] Success: generateKey({length: 256, name: Aes-ctr}, false, [wrapKey, encrypt])\n[PASS] Success: generateKey({length: 256, name: Aes-ctr}, true, [wrapKey, encrypt])\n[PASS] Success: generateKey({length: 128, name: Aes-gcm}, true, [unwrapKey, decrypt])\n[PASS] Success: generateKey({length: 256, name: Aes-ctr}, false, [unwrapKey, wrapKey, encrypt])\n[PASS] Success: generateKey({length: 128, name: Aes-gcm}, false, [wrapKey])\n[PASS] Success: generateKey({length: 256, name: Aes-ctr}, true, [unwrapKey, wrapKey, encrypt])\n[PASS] Success: generateKey({length: 128, name: Aes-gcm}, true, [wrapKey])\n[PASS] Success: generateKey({length: 256, name: Aes-ctr}, false, [unwrapKey, encrypt])\n[PASS] Success: generateKey({length: 256, name: Aes-ctr}, true, [unwrapKey, encrypt])\n[PASS] Success: generateKey({length: 128, name: Aes-gcm}, false, [unwrapKey, wrapKey])\n[PASS] Success: generateKey({length: 256, name: Aes-ctr}, false, [decrypt])\n[PASS] Success: generateKey({length: 128, name: Aes-gcm}, true, [unwrapKey, wrapKey])\n[PASS] Success: generateKey({length: 256, name: Aes-ctr}, true, [decrypt])\n[PASS] Success: generateKey({length: 256, name: Aes-ctr}, false, [wrapKey, decrypt])\n[PASS] Success: generateKey({length: 128, name: Aes-gcm}, false, [unwrapKey])\n[PASS] Success: generateKey({length: 256, name: Aes-ctr}, true, [wrapKey, decrypt])\n[PASS] Success: generateKey({length: 128, name: Aes-gcm}, true, [unwrapKey])\n[PASS] Success: generateKey({length: 256, name: Aes-ctr}, false, [unwrapKey, wrapKey, decrypt])\n[PASS] Success: generateKey({length: 128, name: Aes-gcm}, false, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] Success: generateKey({length: 256, name: Aes-ctr}, true, [unwrapKey, wrapKey, decrypt])\n[PASS] Success: generateKey({length: 128, name: Aes-gcm}, true, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] Success: generateKey({length: 256, name: Aes-ctr}, false, [unwrapKey, decrypt])\n[PASS] Success: generateKey({length: 192, name: Aes-gcm}, false, [encrypt])\n[PASS] Success: generateKey({length: 256, name: Aes-ctr}, true, [unwrapKey, decrypt])\n[PASS] Success: generateKey({length: 192, name: Aes-gcm}, true, [encrypt])\n[PASS] Success: generateKey({length: 256, name: Aes-ctr}, false, [wrapKey])\n[PASS] Success: generateKey({length: 192, name: Aes-gcm}, false, [decrypt, encrypt])\n[PASS] Success: generateKey({length: 256, name: Aes-ctr}, true, [wrapKey])\n[PASS] Success: generateKey({length: 192, name: Aes-gcm}, true, [decrypt, encrypt])\n[PASS] Success: generateKey({length: 256, name: Aes-ctr}, false, [unwrapKey, wrapKey])\n[PASS] Success: generateKey({length: 256, name: Aes-ctr}, true, [unwrapKey, wrapKey])\n[PASS] Success: generateKey({length: 256, name: Aes-ctr}, false, [unwrapKey])\n[PASS] Success: generateKey({length: 256, name: Aes-ctr}, true, [unwrapKey])\n[PASS] Success: generateKey({length: 256, name: Aes-ctr}, false, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] Success: generateKey({length: 256, name: Aes-ctr}, true, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] Success: generateKey({length: 192, name: Aes-gcm}, false, [wrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 192, name: Aes-gcm}, true, [wrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 192, name: Aes-gcm}, false, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 192, name: Aes-gcm}, true, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 192, name: Aes-gcm}, false, [unwrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 192, name: Aes-gcm}, true, [unwrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 192, name: Aes-gcm}, false, [wrapKey, encrypt])\n[PASS] Success: generateKey({length: 192, name: Aes-gcm}, true, [wrapKey, encrypt])\n[PASS] Success: generateKey({length: 192, name: Aes-gcm}, false, [unwrapKey, wrapKey, encrypt])\n[PASS] Success: generateKey({length: 192, name: Aes-gcm}, true, [unwrapKey, wrapKey, encrypt])\n[PASS] Success: generateKey({length: 192, name: Aes-gcm}, false, [unwrapKey, encrypt])\n[PASS] Success: generateKey({length: 192, name: Aes-gcm}, true, [unwrapKey, encrypt])\n[PASS] Success: generateKey({length: 192, name: Aes-gcm}, false, [decrypt])\n[PASS] Success: generateKey({length: 192, name: Aes-gcm}, true, [decrypt])\n[PASS] Success: generateKey({length: 192, name: Aes-gcm}, false, [wrapKey, decrypt])\n[PASS] Success: generateKey({length: 192, name: Aes-gcm}, true, [wrapKey, decrypt])\n[PASS] Success: generateKey({length: 192, name: Aes-gcm}, false, [unwrapKey, wrapKey, decrypt])\n[PASS] Success: generateKey({length: 192, name: Aes-gcm}, true, [unwrapKey, wrapKey, decrypt])\n[PASS] Success: generateKey({length: 192, name: Aes-gcm}, false, [unwrapKey, decrypt])\n[PASS] Success: generateKey({length: 192, name: Aes-gcm}, true, [unwrapKey, decrypt])\n[PASS] Success: generateKey({length: 192, name: Aes-gcm}, false, [wrapKey])\n[PASS] Success: generateKey({length: 192, name: Aes-gcm}, true, [wrapKey])\n[PASS] Success: generateKey({length: 192, name: Aes-gcm}, false, [unwrapKey, wrapKey])\n[PASS] Success: generateKey({length: 192, name: Aes-gcm}, true, [unwrapKey, wrapKey])\n[PASS] Success: generateKey({length: 192, name: Aes-gcm}, false, [unwrapKey])\n[PASS] Success: generateKey({length: 192, name: Aes-gcm}, true, [unwrapKey])\n[PASS] Success: generateKey({length: 192, name: Aes-gcm}, false, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] Success: generateKey({length: 192, name: Aes-gcm}, true, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] Success: generateKey({length: 256, name: Aes-gcm}, false, [encrypt])\n[PASS] Success: generateKey({length: 256, name: Aes-gcm}, true, [encrypt])\n[PASS] Success: generateKey({length: 256, name: Aes-gcm}, false, [decrypt, encrypt])\n[PASS] Success: generateKey({length: 256, name: Aes-gcm}, true, [decrypt, encrypt])\n[PASS] Success: generateKey({length: 256, name: Aes-gcm}, false, [wrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 256, name: Aes-gcm}, true, [wrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 256, name: Aes-gcm}, false, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 256, name: Aes-gcm}, true, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 256, name: Aes-gcm}, false, [unwrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 256, name: Aes-gcm}, true, [unwrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({length: 256, name: Aes-gcm}, false, [wrapKey, encrypt])\n[PASS] Success: generateKey({length: 256, name: Aes-gcm}, true, [wrapKey, encrypt])\n[PASS] Success: generateKey({length: 256, name: Aes-gcm}, false, [unwrapKey, wrapKey, encrypt])\n[PASS] Success: generateKey({length: 256, name: Aes-gcm}, true, [unwrapKey, wrapKey, encrypt])\n[PASS] Success: generateKey({length: 256, name: Aes-gcm}, false, [unwrapKey, encrypt])\n[PASS] Success: generateKey({length: 256, name: Aes-gcm}, true, [unwrapKey, encrypt])\n[PASS] Success: generateKey({length: 256, name: Aes-gcm}, false, [decrypt])\n[PASS] Success: generateKey({length: 256, name: Aes-gcm}, true, [decrypt])\n[PASS] Success: generateKey({length: 256, name: Aes-gcm}, false, [wrapKey, decrypt])\n[PASS] Success: generateKey({length: 256, name: Aes-gcm}, true, [wrapKey, decrypt])\n[PASS] Success: generateKey({length: 256, name: Aes-gcm}, false, [unwrapKey, wrapKey, decrypt])\n[PASS] Success: generateKey({length: 256, name: Aes-gcm}, true, [unwrapKey, wrapKey, decrypt])\n[PASS] Success: generateKey({length: 256, name: Aes-gcm}, false, [unwrapKey, decrypt])\n[PASS] Success: generateKey({length: 256, name: Aes-gcm}, true, [unwrapKey, decrypt])\n[PASS] Success: generateKey({length: 256, name: Aes-gcm}, false, [wrapKey])\n[PASS] Success: generateKey({length: 256, name: Aes-gcm}, true, [wrapKey])\n[PASS] Success: generateKey({length: 256, name: Aes-gcm}, false, [unwrapKey, wrapKey])\n[PASS] Success: generateKey({length: 256, name: Aes-gcm}, true, [unwrapKey, wrapKey])\n[PASS] Success: generateKey({length: 256, name: Aes-gcm}, false, [unwrapKey])\n[PASS] Success: generateKey({length: 256, name: Aes-gcm}, true, [unwrapKey])\n[PASS] Success: generateKey({length: 256, name: Aes-gcm}, false, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] Success: generateKey({length: 256, name: Aes-gcm}, true, [encrypt, decrypt, wrapKey, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, empty salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, empty salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, empty salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, empty salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({length: 128, name: AES-KW}, false, [wrapKey])\n[PASS] Success: generateKey({length: 128, name: AES-KW}, true, [wrapKey])\n[PASS] Success: generateKey({length: 128, name: AES-KW}, false, [unwrapKey, wrapKey])\n[PASS] Success: generateKey({length: 128, name: AES-KW}, true, [unwrapKey, wrapKey])\n[PASS] Success: generateKey({length: 128, name: AES-KW}, false, [unwrapKey])\n[PASS] Success: generateKey({length: 128, name: AES-KW}, true, [unwrapKey])\n[PASS] Success: generateKey({length: 128, name: AES-KW}, false, [wrapKey, unwrapKey, wrapKey, unwrapKey])\n[PASS] Success: generateKey({length: 128, name: AES-KW}, true, [wrapKey, unwrapKey, wrapKey, unwrapKey])\n[PASS] Success: generateKey({length: 192, name: AES-KW}, false, [wrapKey])\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, long salt, SHA-384, with 100000 iterations\n[PASS] Success: generateKey({length: 192, name: AES-KW}, true, [wrapKey])\n[PASS] Success: generateKey({length: 192, name: AES-KW}, false, [unwrapKey, wrapKey])\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, long salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, long salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Success: generateKey({length: 192, name: AES-KW}, true, [unwrapKey, wrapKey])\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, long salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({length: 192, name: AES-KW}, false, [unwrapKey])\n[PASS] Success: generateKey({length: 192, name: AES-KW}, true, [unwrapKey])\n[PASS] Success: generateKey({length: 192, name: AES-KW}, false, [wrapKey, unwrapKey, wrapKey, unwrapKey])\n[PASS] Success: generateKey({length: 192, name: AES-KW}, true, [wrapKey, unwrapKey, wrapKey, unwrapKey])\n[PASS] Success: generateKey({length: 256, name: AES-KW}, false, [wrapKey])\n[PASS] Success: generateKey({length: 256, name: AES-KW}, true, [wrapKey])\n[PASS] Success: generateKey({length: 256, name: AES-KW}, false, [unwrapKey, wrapKey])\n[PASS] Success: generateKey({length: 256, name: AES-KW}, true, [unwrapKey, wrapKey])\n[PASS] Success: generateKey({length: 256, name: AES-KW}, false, [unwrapKey])\n[PASS] Success: generateKey({length: 256, name: AES-KW}, true, [unwrapKey])\n[PASS] Success: generateKey({length: 256, name: AES-KW}, false, [wrapKey, unwrapKey, wrapKey, unwrapKey])\n[PASS] Success: generateKey({length: 256, name: AES-KW}, true, [wrapKey, unwrapKey, wrapKey, unwrapKey])\n[PASS] Success: generateKey({length: 128, name: aes-kw}, false, [wrapKey])\n[PASS] Success: generateKey({length: 128, name: aes-kw}, true, [wrapKey])\n[PASS] Success: generateKey({length: 128, name: aes-kw}, false, [unwrapKey, wrapKey])\n[PASS] Success: generateKey({length: 128, name: aes-kw}, true, [unwrapKey, wrapKey])\n[PASS] Success: generateKey({name: ECDH, namedCurve: P-256}, false, [deriveKey])\n[PASS] Success: generateKey({length: 128, name: aes-kw}, false, [unwrapKey])\n[PASS] Success: generateKey({length: 128, name: aes-kw}, true, [unwrapKey])\n[PASS] Success: generateKey({length: 128, name: aes-kw}, false, [wrapKey, unwrapKey, wrapKey, unwrapKey])\n[PASS] Success: generateKey({length: 128, name: aes-kw}, true, [wrapKey, unwrapKey, wrapKey, unwrapKey])\n[PASS] Success: generateKey({name: ECDH, namedCurve: P-256}, true, [deriveKey])\n[PASS] Success: generateKey({length: 192, name: aes-kw}, false, [wrapKey])\n[PASS] Success: generateKey({length: 192, name: aes-kw}, true, [wrapKey])\n[PASS] Success: generateKey({length: 192, name: aes-kw}, false, [unwrapKey, wrapKey])\n[PASS] Success: generateKey({name: ECDH, namedCurve: P-256}, false, [deriveBits, deriveKey])\n[PASS] Success: generateKey({length: 192, name: aes-kw}, true, [unwrapKey, wrapKey])\n[PASS] Success: generateKey({length: 192, name: aes-kw}, false, [unwrapKey])\n[PASS] Success: generateKey({length: 192, name: aes-kw}, true, [unwrapKey])\n[PASS] Success: generateKey({name: ECDH, namedCurve: P-256}, true, [deriveBits, deriveKey])\n[PASS] Success: generateKey({length: 192, name: aes-kw}, false, [wrapKey, unwrapKey, wrapKey, unwrapKey])\n[PASS] Success: generateKey({length: 192, name: aes-kw}, true, [wrapKey, unwrapKey, wrapKey, unwrapKey])\n[PASS] Success: generateKey({length: 256, name: aes-kw}, false, [wrapKey])\n[PASS] Success: generateKey({name: ECDH, namedCurve: P-256}, false, [deriveBits])\n[PASS] Success: generateKey({length: 256, name: aes-kw}, true, [wrapKey])\n[PASS] Success: generateKey({length: 256, name: aes-kw}, false, [unwrapKey, wrapKey])\n[PASS] Success: generateKey({name: ECDH, namedCurve: P-256}, true, [deriveBits])\n[PASS] Success: generateKey({length: 256, name: aes-kw}, true, [unwrapKey, wrapKey])\n[PASS] Success: generateKey({length: 256, name: aes-kw}, false, [unwrapKey])\n[PASS] Success: generateKey({name: ECDH, namedCurve: P-256}, false, [deriveKey, deriveBits, deriveKey, deriveBits, deriveKey, deriveBits])\n[PASS] Success: generateKey({length: 256, name: aes-kw}, true, [unwrapKey])\n[PASS] Success: generateKey({length: 256, name: aes-kw}, false, [wrapKey, unwrapKey, wrapKey, unwrapKey])\n[PASS] Success: generateKey({name: ECDH, namedCurve: P-256}, true, [deriveKey, deriveBits, deriveKey, deriveBits, deriveKey, deriveBits])\n[PASS] Success: generateKey({length: 256, name: aes-kw}, true, [wrapKey, unwrapKey, wrapKey, unwrapKey])\n[PASS] Success: generateKey({length: 128, name: Aes-kw}, false, [wrapKey])\n[PASS] Success: generateKey({length: 128, name: Aes-kw}, true, [wrapKey])\n[PASS] Success: generateKey({length: 128, name: Aes-kw}, false, [unwrapKey, wrapKey])\n[PASS] Success: generateKey({name: ECDH, namedCurve: P-384}, false, [deriveKey])\n[PASS] Success: generateKey({length: 128, name: Aes-kw}, true, [unwrapKey, wrapKey])\n[PASS] Success: generateKey({length: 128, name: Aes-kw}, false, [unwrapKey])\n[PASS] Success: generateKey({length: 128, name: Aes-kw}, true, [unwrapKey])\n[PASS] Success: generateKey({name: ECDH, namedCurve: P-384}, true, [deriveKey])\n[PASS] Success: generateKey({length: 128, name: Aes-kw}, false, [wrapKey, unwrapKey, wrapKey, unwrapKey])\n[PASS] Success: generateKey({length: 128, name: Aes-kw}, true, [wrapKey, unwrapKey, wrapKey, unwrapKey])\n[PASS] Success: generateKey({name: ECDH, namedCurve: P-384}, false, [deriveBits, deriveKey])\n[PASS] Success: generateKey({length: 192, name: Aes-kw}, false, [wrapKey])\n[PASS] Success: generateKey({length: 192, name: Aes-kw}, true, [wrapKey])\n[PASS] Success: generateKey({length: 192, name: Aes-kw}, false, [unwrapKey, wrapKey])\n[PASS] Success: generateKey({name: ECDH, namedCurve: P-384}, true, [deriveBits, deriveKey])\n[PASS] Success: generateKey({length: 192, name: Aes-kw}, true, [unwrapKey, wrapKey])\n[PASS] Success: generateKey({length: 192, name: Aes-kw}, false, [unwrapKey])\n[PASS] Success: generateKey({length: 192, name: Aes-kw}, true, [unwrapKey])\n[PASS] Success: generateKey({name: ECDH, namedCurve: P-384}, false, [deriveBits])\n[PASS] Success: generateKey({length: 192, name: Aes-kw}, false, [wrapKey, unwrapKey, wrapKey, unwrapKey])\n[PASS] Success: generateKey({length: 192, name: Aes-kw}, true, [wrapKey, unwrapKey, wrapKey, unwrapKey])\n[PASS] Success: generateKey({name: ECDH, namedCurve: P-384}, true, [deriveBits])\n[PASS] Success: generateKey({length: 256, name: Aes-kw}, false, [wrapKey])\n[PASS] Success: generateKey({length: 256, name: Aes-kw}, true, [wrapKey])\n[PASS] Success: generateKey({name: ECDH, namedCurve: P-384}, false, [deriveKey, deriveBits, deriveKey, deriveBits, deriveKey, deriveBits])\n[PASS] Success: generateKey({length: 256, name: Aes-kw}, false, [unwrapKey, wrapKey])\n[PASS] Success: generateKey({length: 256, name: Aes-kw}, true, [unwrapKey, wrapKey])\n[PASS] Success: generateKey({name: ECDH, namedCurve: P-384}, true, [deriveKey, deriveBits, deriveKey, deriveBits, deriveKey, deriveBits])\n[PASS] Success: generateKey({length: 256, name: Aes-kw}, false, [unwrapKey])\n[PASS] Success: generateKey({name: ECDSA, namedCurve: P-256}, false, [sign])\n[PASS] Success: generateKey({length: 256, name: Aes-kw}, true, [unwrapKey])\n[PASS] Success: generateKey({name: ECDH, namedCurve: P-521}, false, [deriveKey])\n[PASS] Success: generateKey({length: 256, name: Aes-kw}, false, [wrapKey, unwrapKey, wrapKey, unwrapKey])\n[PASS] Success: generateKey({name: ECDSA, namedCurve: P-256}, true, [sign])\n[PASS] Success: generateKey({name: ECDH, namedCurve: P-521}, true, [deriveKey])\n[PASS] Success: generateKey({length: 256, name: Aes-kw}, true, [wrapKey, unwrapKey, wrapKey, unwrapKey])\n[PASS] Success: generateKey({name: ECDSA, namedCurve: P-256}, false, [verify, sign])\n[PASS] Success: generateKey({name: ECDH, namedCurve: P-521}, false, [deriveBits, deriveKey])\n[PASS] Success: generateKey({name: ECDSA, namedCurve: P-256}, true, [verify, sign])\n[PASS] Success: generateKey({name: ED25519}, false, [sign])\n[PASS] Success: generateKey({name: ED25519}, true, [sign])\n[PASS] Success: generateKey({name: ECDH, namedCurve: P-521}, true, [deriveBits, deriveKey])\n[PASS] Success: generateKey({name: ECDSA, namedCurve: P-256}, false, [sign, verify, sign, sign, verify])\n[PASS] Success: generateKey({name: ECDH, namedCurve: P-521}, false, [deriveBits])\n[PASS] Success: generateKey({name: ED25519}, false, [verify, sign])\n[PASS] Success: generateKey({name: ECDSA, namedCurve: P-256}, true, [sign, verify, sign, sign, verify])\n[PASS] Success: generateKey({name: ECDH, namedCurve: P-521}, true, [deriveBits])\n[PASS] Success: generateKey({name: ED25519}, true, [verify, sign])\n[PASS] Success: generateKey({name: ECDSA, namedCurve: P-384}, false, [sign])\n[PASS] Success: generateKey({name: ECDH, namedCurve: P-521}, false, [deriveKey, deriveBits, deriveKey, deriveBits, deriveKey, deriveBits])\n[PASS] Success: generateKey({name: ED25519}, false, [sign, verify, sign, sign, verify])\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, long salt, SHA-1, with 100000 iterations\n[PASS] Success: generateKey({name: ECDSA, namedCurve: P-384}, true, [sign])\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, long salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Success: generateKey({name: ED25519}, true, [sign, verify, sign, sign, verify])\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, long salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, long salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({name: ed25519}, false, [sign])\n[PASS] Success: generateKey({name: ed25519}, true, [sign])\n[PASS] Success: generateKey({name: ECDSA, namedCurve: P-384}, false, [verify, sign])\n[PASS] Success: generateKey({name: ECDH, namedCurve: P-521}, true, [deriveKey, deriveBits, deriveKey, deriveBits, deriveKey, deriveBits])\n[PASS] Success: generateKey({name: ecdh, namedCurve: P-256}, false, [deriveKey])\n[PASS] Success: generateKey({name: ed25519}, false, [verify, sign])\n[PASS] Success: generateKey({name: ecdh, namedCurve: P-256}, true, [deriveKey])\n[PASS] Success: generateKey({name: ECDSA, namedCurve: P-384}, true, [verify, sign])\n[PASS] Success: generateKey({name: ed25519}, true, [verify, sign])\n[PASS] Success: generateKey({name: ecdh, namedCurve: P-256}, false, [deriveBits, deriveKey])\n[PASS] Success: generateKey({name: ECDSA, namedCurve: P-384}, false, [sign, verify, sign, sign, verify])\n[PASS] Success: generateKey({name: ecdh, namedCurve: P-256}, true, [deriveBits, deriveKey])\n[PASS] Success: generateKey({name: ed25519}, false, [sign, verify, sign, sign, verify])\n[PASS] Success: generateKey({name: ECDSA, namedCurve: P-384}, true, [sign, verify, sign, sign, verify])\n[PASS] Success: generateKey({name: ecdh, namedCurve: P-256}, false, [deriveBits])\n[PASS] Success: generateKey({name: ed25519}, true, [sign, verify, sign, sign, verify])\n[PASS] Success: generateKey({name: ecdh, namedCurve: P-256}, true, [deriveBits])\n[PASS] Success: generateKey({name: Ed25519}, false, [sign])\n[PASS] Success: generateKey({name: ECDSA, namedCurve: P-521}, false, [sign])\n[PASS] Success: generateKey({name: ecdh, namedCurve: P-256}, false, [deriveKey, deriveBits, deriveKey, deriveBits, deriveKey, deriveBits])\n[PASS] Success: generateKey({name: Ed25519}, true, [sign])\n[PASS] Success: generateKey({name: ECDSA, namedCurve: P-521}, true, [sign])\n[PASS] Success: generateKey({name: ecdh, namedCurve: P-256}, true, [deriveKey, deriveBits, deriveKey, deriveBits, deriveKey, deriveBits])\n[PASS] Success: generateKey({name: Ed25519}, false, [verify, sign])\n[PASS] Success: generateKey({name: ECDSA, namedCurve: P-521}, false, [verify, sign])\n[PASS] Success: generateKey({name: ecdh, namedCurve: P-384}, false, [deriveKey])\n[PASS] Success: generateKey({name: Ed25519}, true, [verify, sign])\n[PASS] Success: generateKey({name: ECDSA, namedCurve: P-521}, true, [verify, sign])\n[PASS] Success: generateKey({name: ecdh, namedCurve: P-384}, true, [deriveKey])\n[PASS] Success: generateKey({name: Ed25519}, false, [sign, verify, sign, sign, verify])\n[PASS] Success: generateKey({name: ECDSA, namedCurve: P-521}, false, [sign, verify, sign, sign, verify])\n[PASS] Success: generateKey({name: ecdh, namedCurve: P-384}, false, [deriveBits, deriveKey])\n[PASS] Success: generateKey({name: Ed25519}, true, [sign, verify, sign, sign, verify])\n[PASS] Success: generateKey({name: ECDSA, namedCurve: P-521}, true, [sign, verify, sign, sign, verify])\n[PASS] Success: generateKey({name: ecdh, namedCurve: P-384}, true, [deriveBits, deriveKey])\n[PASS] Success: generateKey({name: ecdsa, namedCurve: P-256}, false, [sign])\n[PASS] Success: generateKey({name: ecdh, namedCurve: P-384}, false, [deriveBits])\n[PASS] Success: generateKey({name: ecdh, namedCurve: P-384}, true, [deriveBits])\n[PASS] Success: generateKey({name: ecdsa, namedCurve: P-256}, true, [sign])\n[PASS] Success: generateKey({name: ecdsa, namedCurve: P-256}, false, [verify, sign])\n[PASS] Success: generateKey({name: ecdh, namedCurve: P-384}, false, [deriveKey, deriveBits, deriveKey, deriveBits, deriveKey, deriveBits])\n[PASS] Success: generateKey({name: ecdsa, namedCurve: P-256}, true, [verify, sign])\n[PASS] Success: generateKey({name: ecdh, namedCurve: P-384}, true, [deriveKey, deriveBits, deriveKey, deriveBits, deriveKey, deriveBits])\n[PASS] Success: generateKey({name: ecdsa, namedCurve: P-256}, false, [sign, verify, sign, sign, verify])\n[PASS] Success: generateKey({name: ecdh, namedCurve: P-521}, false, [deriveKey])\n[PASS] Success: generateKey({name: ecdsa, namedCurve: P-256}, true, [sign, verify, sign, sign, verify])\n[PASS] Success: generateKey({name: ecdh, namedCurve: P-521}, true, [deriveKey])\n[PASS] Success: generateKey({name: ecdsa, namedCurve: P-384}, false, [sign])\n[PASS] Success: generateKey({name: ecdh, namedCurve: P-521}, false, [deriveBits, deriveKey])\n[PASS] Success: generateKey({name: ecdsa, namedCurve: P-384}, true, [sign])\n[PASS] Success: generateKey({name: ecdh, namedCurve: P-521}, true, [deriveBits, deriveKey])\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, empty salt, SHA-1, with 100000 iterations\n[PASS] Success: generateKey({name: ecdsa, namedCurve: P-384}, false, [verify, sign])\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, empty salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, empty salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, empty salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({name: ecdsa, namedCurve: P-384}, true, [verify, sign])\n[PASS] Success: generateKey({name: ecdh, namedCurve: P-521}, false, [deriveBits])\n[PASS] Success: generateKey({name: ecdsa, namedCurve: P-384}, false, [sign, verify, sign, sign, verify])\n[PASS] Success: generateKey({name: ecdh, namedCurve: P-521}, true, [deriveBits])\n[PASS] Success: generateKey({name: ecdsa, namedCurve: P-384}, true, [sign, verify, sign, sign, verify])\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, long salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, long salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, long salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, long salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({name: ecdh, namedCurve: P-521}, false, [deriveKey, deriveBits, deriveKey, deriveBits, deriveKey, deriveBits])\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, long salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, long salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, long salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Success: generateKey({name: ecdsa, namedCurve: P-521}, false, [sign])\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, long salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({name: ecdh, namedCurve: P-521}, true, [deriveKey, deriveBits, deriveKey, deriveBits, deriveKey, deriveBits])\n[PASS] Success: generateKey({name: ecdsa, namedCurve: P-521}, true, [sign])\n[PASS] Success: generateKey({name: Ecdh, namedCurve: P-256}, false, [deriveKey])\n[PASS] Success: generateKey({name: ecdsa, namedCurve: P-521}, false, [verify, sign])\n[PASS] Success: generateKey({name: Ecdh, namedCurve: P-256}, true, [deriveKey])\n[PASS] Success: generateKey({name: ecdsa, namedCurve: P-521}, true, [verify, sign])\n[PASS] Success: generateKey({name: Ecdh, namedCurve: P-256}, false, [deriveBits, deriveKey])\n[PASS] Success: generateKey({name: ecdsa, namedCurve: P-521}, false, [sign, verify, sign, sign, verify])\n[PASS] Success: generateKey({name: Ecdh, namedCurve: P-256}, true, [deriveBits, deriveKey])\n[PASS] Success: generateKey({name: ED448}, false, [sign])\n[PASS] Success: generateKey({name: ecdsa, namedCurve: P-521}, true, [sign, verify, sign, sign, verify])\n[PASS] Success: generateKey({name: Ecdh, namedCurve: P-256}, false, [deriveBits])\n[PASS] Success: generateKey({name: Ecdsa, namedCurve: P-256}, false, [sign])\n[PASS] Success: generateKey({name: Ecdh, namedCurve: P-256}, true, [deriveBits])\n[PASS] Success: generateKey({name: ED448}, true, [sign])\n[PASS] Success: generateKey({name: Ecdsa, namedCurve: P-256}, true, [sign])\n[PASS] Success: generateKey({name: ED448}, false, [verify, sign])\n[PASS] Success: generateKey({name: Ecdh, namedCurve: P-256}, false, [deriveKey, deriveBits, deriveKey, deriveBits, deriveKey, deriveBits])\n[PASS] Success: generateKey({name: Ecdsa, namedCurve: P-256}, false, [verify, sign])\n[PASS] Success: generateKey({name: Ecdh, namedCurve: P-256}, true, [deriveKey, deriveBits, deriveKey, deriveBits, deriveKey, deriveBits])\n[PASS] Success: generateKey({name: Ecdsa, namedCurve: P-256}, true, [verify, sign])\n[PASS] Success: generateKey({name: ED448}, true, [verify, sign])\n[PASS] Success: generateKey({name: Ecdh, namedCurve: P-384}, false, [deriveKey])\n[PASS] Success: generateKey({name: Ecdsa, namedCurve: P-256}, false, [sign, verify, sign, sign, verify])\n[PASS] Success: generateKey({name: ED448}, false, [sign, verify, sign, sign, verify])\n[PASS] Success: generateKey({name: Ecdsa, namedCurve: P-256}, true, [sign, verify, sign, sign, verify])\n[PASS] Success: generateKey({name: Ecdh, namedCurve: P-384}, true, [deriveKey])\n[PASS] Success: generateKey({name: ED448}, true, [sign, verify, sign, sign, verify])\n[PASS] Success: generateKey({name: Ecdsa, namedCurve: P-384}, false, [sign])\n[PASS] Success: generateKey({name: Ecdh, namedCurve: P-384}, false, [deriveBits, deriveKey])\n[PASS] Success: generateKey({name: ed448}, false, [sign])\n[PASS] Success: generateKey({name: Ecdsa, namedCurve: P-384}, true, [sign])\n[PASS] Success: generateKey({name: Ecdh, namedCurve: P-384}, true, [deriveBits, deriveKey])\n[PASS] Success: generateKey({name: ed448}, true, [sign])\n[PASS] Success: generateKey({name: Ecdsa, namedCurve: P-384}, false, [verify, sign])\n[PASS] Success: generateKey({name: Ecdh, namedCurve: P-384}, false, [deriveBits])\n[PASS] Success: generateKey({name: ed448}, false, [verify, sign])\n[PASS] Success: generateKey({name: Ecdsa, namedCurve: P-384}, true, [verify, sign])\n[PASS] Success: generateKey({name: Ecdh, namedCurve: P-384}, true, [deriveBits])\n[PASS] Success: generateKey({name: ed448}, true, [verify, sign])\n[PASS] Success: generateKey({name: Ecdsa, namedCurve: P-384}, false, [sign, verify, sign, sign, verify])\n[PASS] Success: generateKey({name: Ecdh, namedCurve: P-384}, false, [deriveKey, deriveBits, deriveKey, deriveBits, deriveKey, deriveBits])\n[PASS] Success: generateKey({name: ed448}, false, [sign, verify, sign, sign, verify])\n[PASS] Success: generateKey({name: Ecdsa, namedCurve: P-384}, true, [sign, verify, sign, sign, verify])\n[PASS] Success: generateKey({name: Ecdh, namedCurve: P-384}, true, [deriveKey, deriveBits, deriveKey, deriveBits, deriveKey, deriveBits])\n[PASS] Success: generateKey({name: ed448}, true, [sign, verify, sign, sign, verify])\n[PASS] Success: generateKey({name: Ecdsa, namedCurve: P-521}, false, [sign])\n[PASS] Success: generateKey({name: Ecdh, namedCurve: P-521}, false, [deriveKey])\n[PASS] Success: generateKey({name: Ed448}, false, [sign])\n[PASS] Success: generateKey({name: Ecdsa, namedCurve: P-521}, true, [sign])\n[PASS] Success: generateKey({name: Ecdh, namedCurve: P-521}, true, [deriveKey])\n[PASS] Success: generateKey({name: Ed448}, true, [sign])\n[PASS] Success: generateKey({name: Ecdsa, namedCurve: P-521}, false, [verify, sign])\n[PASS] Success: generateKey({name: Ecdh, namedCurve: P-521}, false, [deriveBits, deriveKey])\n[PASS] Success: generateKey({name: Ed448}, false, [verify, sign])\n[PASS] Success: generateKey({name: Ecdsa, namedCurve: P-521}, true, [verify, sign])\n[PASS] Success: generateKey({name: Ecdh, namedCurve: P-521}, true, [deriveBits, deriveKey])\n[PASS] Success: generateKey({name: Ed448}, true, [verify, sign])\n[PASS] Success: generateKey({hash: SHA-1, length: 160, name: HMAC}, false, [sign])\n[PASS] Success: generateKey({name: Ecdsa, namedCurve: P-521}, false, [sign, verify, sign, sign, verify])\n[PASS] Success: generateKey({name: Ecdh, namedCurve: P-521}, false, [deriveBits])\n[PASS] Success: generateKey({name: Ed448}, false, [sign, verify, sign, sign, verify])\n[PASS] Success: generateKey({hash: SHA-1, length: 160, name: HMAC}, true, [sign])\n[PASS] Success: generateKey({name: Ecdsa, namedCurve: P-521}, true, [sign, verify, sign, sign, verify])\n[PASS] Success: generateKey({name: Ecdh, namedCurve: P-521}, true, [deriveBits])\n[PASS] Success: generateKey({hash: SHA-1, length: 160, name: HMAC}, false, [verify, sign])\n[PASS] Success: generateKey({name: Ed448}, true, [sign, verify, sign, sign, verify])\n[PASS] Success: generateKey({name: Ecdh, namedCurve: P-521}, false, [deriveKey, deriveBits, deriveKey, deriveBits, deriveKey, deriveBits])\n[PASS] Success: generateKey({name: Ecdh, namedCurve: P-521}, true, [deriveKey, deriveBits, deriveKey, deriveBits, deriveKey, deriveBits])\n[PASS] Success: generateKey({hash: SHA-1, length: 160, name: HMAC}, true, [verify, sign])\n[PASS] Success: generateKey({hash: SHA-1, length: 160, name: HMAC}, false, [verify])\n[PASS] Success: generateKey({hash: SHA-1, length: 160, name: HMAC}, true, [verify])\n[PASS] Success: generateKey({hash: SHA-1, length: 160, name: HMAC}, false, [sign, verify, sign, verify])\n[PASS] Success: generateKey({hash: SHA-1, length: 160, name: HMAC}, true, [sign, verify, sign, verify])\n[PASS] Success: generateKey({hash: SHA-256, length: 256, name: HMAC}, false, [sign])\n[PASS] Success: generateKey({hash: SHA-256, length: 256, name: HMAC}, true, [sign])\n[PASS] Success: generateKey({hash: SHA-256, length: 256, name: HMAC}, false, [verify, sign])\n[PASS] Success: generateKey({hash: SHA-256, length: 256, name: HMAC}, true, [verify, sign])\n[PASS] Success: generateKey({hash: SHA-256, length: 256, name: HMAC}, false, [verify])\n[PASS] Success: generateKey({hash: SHA-256, length: 256, name: HMAC}, true, [verify])\n[PASS] Success: generateKey({hash: SHA-256, length: 256, name: HMAC}, false, [sign, verify, sign, verify])\n[PASS] Success: generateKey({hash: SHA-256, length: 256, name: HMAC}, true, [sign, verify, sign, verify])\n[PASS] Success: generateKey({hash: SHA-384, length: 384, name: HMAC}, false, [sign])\n[PASS] Success: generateKey({hash: SHA-384, length: 384, name: HMAC}, true, [sign])\n[PASS] Success: generateKey({hash: SHA-384, length: 384, name: HMAC}, false, [verify, sign])\n[PASS] Success: generateKey({hash: SHA-384, length: 384, name: HMAC}, true, [verify, sign])\n[PASS] Success: generateKey({hash: SHA-384, length: 384, name: HMAC}, false, [verify])\n[PASS] Success: generateKey({hash: SHA-384, length: 384, name: HMAC}, true, [verify])\n[PASS] Success: generateKey({hash: SHA-384, length: 384, name: HMAC}, false, [sign, verify, sign, verify])\n[PASS] Success: generateKey({hash: SHA-384, length: 384, name: HMAC}, true, [sign, verify, sign, verify])\n[PASS] Success: generateKey({hash: SHA-512, length: 512, name: HMAC}, false, [sign])\n[PASS] Success: generateKey({hash: SHA-512, length: 512, name: HMAC}, true, [sign])\n[PASS] Success: generateKey({hash: SHA-512, length: 512, name: HMAC}, false, [verify, sign])\n[PASS] Success: generateKey({hash: SHA-512, length: 512, name: HMAC}, true, [verify, sign])\n[PASS] Success: generateKey({hash: SHA-512, length: 512, name: HMAC}, false, [verify])\n[PASS] Success: generateKey({hash: SHA-512, length: 512, name: HMAC}, true, [verify])\n[PASS] Success: generateKey({hash: SHA-512, length: 512, name: HMAC}, false, [sign, verify, sign, verify])\n[PASS] Success: generateKey({hash: SHA-512, length: 512, name: HMAC}, true, [sign, verify, sign, verify])\n[PASS] Success: generateKey({hash: SHA-1, name: HMAC}, false, [sign])\n[PASS] Success: generateKey({hash: SHA-1, name: HMAC}, true, [sign])\n[PASS] Success: generateKey({hash: SHA-1, name: HMAC}, false, [verify, sign])\n[PASS] Success: generateKey({hash: SHA-1, name: HMAC}, true, [verify, sign])\n[PASS] Success: generateKey({hash: SHA-1, name: HMAC}, false, [verify])\n[PASS] Success: generateKey({hash: SHA-1, name: HMAC}, true, [verify])\n[PASS] Success: generateKey({hash: SHA-1, name: HMAC}, false, [sign, verify, sign, verify])\n[PASS] Success: generateKey({hash: SHA-1, name: HMAC}, true, [sign, verify, sign, verify])\n[PASS] Success: generateKey({hash: SHA-256, name: HMAC}, false, [sign])\n[PASS] Success: generateKey({hash: SHA-256, name: HMAC}, true, [sign])\n[PASS] Success: generateKey({hash: SHA-256, name: HMAC}, false, [verify, sign])\n[PASS] Success: generateKey({hash: SHA-256, name: HMAC}, true, [verify, sign])\n[PASS] Success: generateKey({hash: SHA-256, name: HMAC}, false, [verify])\n[PASS] Success: generateKey({hash: SHA-256, name: HMAC}, true, [verify])\n[PASS] Success: generateKey({hash: SHA-256, name: HMAC}, false, [sign, verify, sign, verify])\n[PASS] Success: generateKey({hash: SHA-256, name: HMAC}, true, [sign, verify, sign, verify])\n[PASS] Success: generateKey({hash: SHA-384, name: HMAC}, false, [sign])\n[PASS] Success: generateKey({hash: SHA-384, name: HMAC}, true, [sign])\n[PASS] Success: generateKey({hash: SHA-384, name: HMAC}, false, [verify, sign])\n[PASS] Success: generateKey({hash: SHA-384, name: HMAC}, true, [verify, sign])\n[PASS] Success: generateKey({hash: SHA-384, name: HMAC}, false, [verify])\n[PASS] Success: generateKey({hash: SHA-384, name: HMAC}, true, [verify])\n[PASS] Success: generateKey({hash: SHA-384, name: HMAC}, false, [sign, verify, sign, verify])\n[PASS] Success: generateKey({hash: SHA-384, name: HMAC}, true, [sign, verify, sign, verify])\n[PASS] Success: generateKey({hash: SHA-512, name: HMAC}, false, [sign])\n[PASS] Success: generateKey({hash: SHA-512, name: HMAC}, true, [sign])\n[PASS] Success: generateKey({hash: SHA-512, name: HMAC}, false, [verify, sign])\n[PASS] Success: generateKey({hash: SHA-512, name: HMAC}, true, [verify, sign])\n[PASS] Success: generateKey({hash: SHA-512, name: HMAC}, false, [verify])\n[PASS] Success: generateKey({hash: SHA-512, name: HMAC}, true, [verify])\n[PASS] Success: generateKey({hash: SHA-512, name: HMAC}, false, [sign, verify, sign, verify])\n[PASS] Success: generateKey({hash: SHA-512, name: HMAC}, true, [sign, verify, sign, verify])\n[PASS] Success: generateKey({hash: SHA-1, length: 160, name: hmac}, false, [sign])\n[PASS] Success: generateKey({hash: SHA-1, length: 160, name: hmac}, true, [sign])\n[PASS] Success: generateKey({hash: SHA-1, length: 160, name: hmac}, false, [verify, sign])\n[PASS] Success: generateKey({hash: SHA-1, length: 160, name: hmac}, true, [verify, sign])\n[PASS] Success: generateKey({hash: SHA-1, length: 160, name: hmac}, false, [verify])\n[PASS] Success: generateKey({hash: SHA-1, length: 160, name: hmac}, true, [verify])\n[PASS] Success: generateKey({hash: SHA-1, length: 160, name: hmac}, false, [sign, verify, sign, verify])\n[PASS] Success: generateKey({hash: SHA-1, length: 160, name: hmac}, true, [sign, verify, sign, verify])\n[PASS] Success: generateKey({hash: SHA-256, length: 256, name: hmac}, false, [sign])\n[PASS] Success: generateKey({hash: SHA-256, length: 256, name: hmac}, true, [sign])\n[PASS] Success: generateKey({hash: SHA-256, length: 256, name: hmac}, false, [verify, sign])\n[PASS] Success: generateKey({hash: SHA-256, length: 256, name: hmac}, true, [verify, sign])\n[PASS] Success: generateKey({hash: SHA-256, length: 256, name: hmac}, false, [verify])\n[PASS] Success: generateKey({hash: SHA-256, length: 256, name: hmac}, true, [verify])\n[PASS] Success: generateKey({hash: SHA-256, length: 256, name: hmac}, false, [sign, verify, sign, verify])\n[PASS] Success: generateKey({hash: SHA-256, length: 256, name: hmac}, true, [sign, verify, sign, verify])\n[PASS] Success: generateKey({hash: SHA-384, length: 384, name: hmac}, false, [sign])\n[PASS] Success: generateKey({hash: SHA-384, length: 384, name: hmac}, true, [sign])\n[PASS] Success: generateKey({hash: SHA-384, length: 384, name: hmac}, false, [verify, sign])\n[PASS] Success: generateKey({hash: SHA-384, length: 384, name: hmac}, true, [verify, sign])\n[PASS] Success: generateKey({hash: SHA-384, length: 384, name: hmac}, false, [verify])\n[PASS] Success: generateKey({hash: SHA-384, length: 384, name: hmac}, true, [verify])\n[PASS] Success: generateKey({hash: SHA-384, length: 384, name: hmac}, false, [sign, verify, sign, verify])\n[PASS] Success: generateKey({hash: SHA-384, length: 384, name: hmac}, true, [sign, verify, sign, verify])\n[PASS] Success: generateKey({hash: SHA-512, length: 512, name: hmac}, false, [sign])\n[PASS] Success: generateKey({hash: SHA-512, length: 512, name: hmac}, true, [sign])\n[PASS] Success: generateKey({hash: SHA-512, length: 512, name: hmac}, false, [verify, sign])\n[PASS] Success: generateKey({hash: SHA-512, length: 512, name: hmac}, true, [verify, sign])\n[PASS] Success: generateKey({hash: SHA-512, length: 512, name: hmac}, false, [verify])\n[PASS] Success: generateKey({hash: SHA-512, length: 512, name: hmac}, true, [verify])\n[PASS] Success: generateKey({hash: SHA-512, length: 512, name: hmac}, false, [sign, verify, sign, verify])\n[PASS] Success: generateKey({hash: SHA-512, length: 512, name: hmac}, true, [sign, verify, sign, verify])\n[PASS] Success: generateKey({hash: SHA-1, name: hmac}, false, [sign])\n[PASS] Success: generateKey({hash: SHA-1, name: hmac}, true, [sign])\n[PASS] Success: generateKey({hash: SHA-1, name: hmac}, false, [verify, sign])\n[PASS] Success: generateKey({hash: SHA-1, name: hmac}, true, [verify, sign])\n[PASS] Success: generateKey({hash: SHA-1, name: hmac}, false, [verify])\n[PASS] Success: generateKey({hash: SHA-1, name: hmac}, true, [verify])\n[PASS] Success: generateKey({hash: SHA-1, name: hmac}, false, [sign, verify, sign, verify])\n[PASS] Success: generateKey({hash: SHA-1, name: hmac}, true, [sign, verify, sign, verify])\n[PASS] Success: generateKey({hash: SHA-256, name: hmac}, false, [sign])\n[PASS] Success: generateKey({hash: SHA-256, name: hmac}, true, [sign])\n[PASS] Success: generateKey({hash: SHA-256, name: hmac}, false, [verify, sign])\n[PASS] Success: generateKey({hash: SHA-256, name: hmac}, true, [verify, sign])\n[PASS] Success: generateKey({hash: SHA-256, name: hmac}, false, [verify])\n[PASS] Success: generateKey({hash: SHA-256, name: hmac}, true, [verify])\n[PASS] Success: generateKey({hash: SHA-256, name: hmac}, false, [sign, verify, sign, verify])\n[PASS] Success: generateKey({hash: SHA-256, name: hmac}, true, [sign, verify, sign, verify])\n[PASS] Success: generateKey({hash: SHA-384, name: hmac}, false, [sign])\n[PASS] Success: generateKey({hash: SHA-384, name: hmac}, true, [sign])\n[PASS] Success: generateKey({hash: SHA-384, name: hmac}, false, [verify, sign])\n[PASS] Success: generateKey({hash: SHA-384, name: hmac}, true, [verify, sign])\n[PASS] Success: generateKey({hash: SHA-384, name: hmac}, false, [verify])\n[PASS] Success: generateKey({hash: SHA-384, name: hmac}, true, [verify])\n[PASS] Success: generateKey({hash: SHA-384, name: hmac}, false, [sign, verify, sign, verify])\n[PASS] Success: generateKey({hash: SHA-384, name: hmac}, true, [sign, verify, sign, verify])\n[PASS] Success: generateKey({hash: SHA-512, name: hmac}, false, [sign])\n[PASS] Success: generateKey({hash: SHA-512, name: hmac}, true, [sign])\n[PASS] Success: generateKey({hash: SHA-512, name: hmac}, false, [verify, sign])\n[PASS] Success: generateKey({hash: SHA-512, name: hmac}, true, [verify, sign])\n[PASS] Success: generateKey({hash: SHA-512, name: hmac}, false, [verify])\n[PASS] Success: generateKey({hash: SHA-512, name: hmac}, true, [verify])\n[PASS] Success: generateKey({hash: SHA-512, name: hmac}, false, [sign, verify, sign, verify])\n[PASS] Success: generateKey({hash: SHA-512, name: hmac}, true, [sign, verify, sign, verify])\n[PASS] Success: generateKey({hash: SHA-1, length: 160, name: Hmac}, false, [sign])\n[PASS] Success: generateKey({hash: SHA-1, length: 160, name: Hmac}, true, [sign])\n[PASS] Success: generateKey({hash: SHA-1, length: 160, name: Hmac}, false, [verify, sign])\n[PASS] Success: generateKey({hash: SHA-1, length: 160, name: Hmac}, true, [verify, sign])\n[PASS] Success: generateKey({hash: SHA-1, length: 160, name: Hmac}, false, [verify])\n[PASS] Success: generateKey({hash: SHA-1, length: 160, name: Hmac}, true, [verify])\n[PASS] Success: generateKey({hash: SHA-1, length: 160, name: Hmac}, false, [sign, verify, sign, verify])\n[PASS] Success: generateKey({hash: SHA-1, length: 160, name: Hmac}, true, [sign, verify, sign, verify])\n[PASS] Success: generateKey({hash: SHA-256, length: 256, name: Hmac}, false, [sign])\n[PASS] Success: generateKey({hash: SHA-256, length: 256, name: Hmac}, true, [sign])\n[PASS] Success: generateKey({hash: SHA-256, length: 256, name: Hmac}, false, [verify, sign])\n[PASS] Success: generateKey({hash: SHA-256, length: 256, name: Hmac}, true, [verify, sign])\n[PASS] Success: generateKey({hash: SHA-256, length: 256, name: Hmac}, false, [verify])\n[PASS] Success: generateKey({hash: SHA-256, length: 256, name: Hmac}, true, [verify])\n[PASS] Success: generateKey({hash: SHA-256, length: 256, name: Hmac}, false, [sign, verify, sign, verify])\n[PASS] Success: generateKey({hash: SHA-256, length: 256, name: Hmac}, true, [sign, verify, sign, verify])\n[PASS] Success: generateKey({hash: SHA-384, length: 384, name: Hmac}, false, [sign])\n[PASS] Success: generateKey({hash: SHA-384, length: 384, name: Hmac}, true, [sign])\n[PASS] Success: generateKey({hash: SHA-384, length: 384, name: Hmac}, false, [verify, sign])\n[PASS] Success: generateKey({hash: SHA-384, length: 384, name: Hmac}, true, [verify, sign])\n[PASS] Success: generateKey({hash: SHA-384, length: 384, name: Hmac}, false, [verify])\n[PASS] Success: generateKey({hash: SHA-384, length: 384, name: Hmac}, true, [verify])\n[PASS] Success: generateKey({hash: SHA-384, length: 384, name: Hmac}, false, [sign, verify, sign, verify])\n[PASS] Success: generateKey({hash: SHA-384, length: 384, name: Hmac}, true, [sign, verify, sign, verify])\n[PASS] Success: generateKey({hash: SHA-512, length: 512, name: Hmac}, false, [sign])\n[PASS] Success: generateKey({hash: SHA-512, length: 512, name: Hmac}, true, [sign])\n[PASS] Success: generateKey({hash: SHA-512, length: 512, name: Hmac}, false, [verify, sign])\n[PASS] Success: generateKey({hash: SHA-512, length: 512, name: Hmac}, true, [verify, sign])\n[PASS] Success: generateKey({hash: SHA-512, length: 512, name: Hmac}, false, [verify])\n[PASS] Success: generateKey({hash: SHA-512, length: 512, name: Hmac}, true, [verify])\n[PASS] Success: generateKey({hash: SHA-512, length: 512, name: Hmac}, false, [sign, verify, sign, verify])\n[PASS] Success: generateKey({hash: SHA-512, length: 512, name: Hmac}, true, [sign, verify, sign, verify])\n[PASS] Success: generateKey({hash: SHA-1, name: Hmac}, false, [sign])\n[PASS] Success: generateKey({hash: SHA-1, name: Hmac}, true, [sign])\n[PASS] Success: generateKey({hash: SHA-1, name: Hmac}, false, [verify, sign])\n[PASS] Success: generateKey({hash: SHA-1, name: Hmac}, true, [verify, sign])\n[PASS] Success: generateKey({hash: SHA-1, name: Hmac}, false, [verify])\n[PASS] Success: generateKey({hash: SHA-1, name: Hmac}, true, [verify])\n[PASS] Success: generateKey({hash: SHA-1, name: Hmac}, false, [sign, verify, sign, verify])\n[PASS] Success: generateKey({hash: SHA-1, name: Hmac}, true, [sign, verify, sign, verify])\n[PASS] Success: generateKey({hash: SHA-256, name: Hmac}, false, [sign])\n[PASS] Success: generateKey({hash: SHA-256, name: Hmac}, true, [sign])\n[PASS] Success: generateKey({hash: SHA-256, name: Hmac}, false, [verify, sign])\n[PASS] Success: generateKey({hash: SHA-256, name: Hmac}, true, [verify, sign])\n[PASS] Success: generateKey({hash: SHA-256, name: Hmac}, false, [verify])\n[PASS] Success: generateKey({hash: SHA-256, name: Hmac}, true, [verify])\n[PASS] Success: generateKey({hash: SHA-256, name: Hmac}, false, [sign, verify, sign, verify])\n[PASS] Success: generateKey({hash: SHA-256, name: Hmac}, true, [sign, verify, sign, verify])\n[PASS] Success: generateKey({hash: SHA-384, name: Hmac}, false, [sign])\n[PASS] Success: generateKey({hash: SHA-384, name: Hmac}, true, [sign])\n[PASS] Success: generateKey({hash: SHA-384, name: Hmac}, false, [verify, sign])\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, long salt, SHA-384, with 100000 iterations\n[PASS] Success: generateKey({hash: SHA-384, name: Hmac}, true, [verify, sign])\n[PASS] Success: generateKey({hash: SHA-384, name: Hmac}, false, [verify])\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, long salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Success: generateKey({hash: SHA-384, name: Hmac}, true, [verify])\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, long salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Success: generateKey({hash: SHA-384, name: Hmac}, false, [sign, verify, sign, verify])\n[PASS] Success: generateKey({hash: SHA-384, name: Hmac}, true, [sign, verify, sign, verify])\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, long salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({hash: SHA-512, name: Hmac}, false, [sign])\n[PASS] Success: generateKey({hash: SHA-512, name: Hmac}, true, [sign])\n[PASS] Success: generateKey({hash: SHA-512, name: Hmac}, false, [verify, sign])\n[PASS] Success: generateKey({hash: SHA-512, name: Hmac}, true, [verify, sign])\n[PASS] Success: generateKey({hash: SHA-512, name: Hmac}, false, [verify])\n[PASS] Success: generateKey({hash: SHA-512, name: Hmac}, true, [verify])\n[PASS] Success: generateKey({hash: SHA-512, name: Hmac}, false, [sign, verify, sign, verify])\n[PASS] Success: generateKey({hash: SHA-512, name: Hmac}, true, [sign, verify, sign, verify])\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, empty salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, empty salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, empty salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, empty salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, long salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, long salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, long salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, long salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, empty salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, empty salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, empty salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, empty salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, long salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, long salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, long salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, long salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, long salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, long salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, long salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, long salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [unwrapKey, wrapKey])\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, empty salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, empty salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, empty salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, empty salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, long salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, long salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, long salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, long salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [unwrapKey, encrypt])\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [decrypt, encrypt])\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, empty salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, empty salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, empty salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, empty salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, long salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, long salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, long salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, long salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, wrapKey])\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, encrypt])\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [wrapKey, decrypt])\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, empty salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, empty salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, empty salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, empty salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, long salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, long salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, long salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, long salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [decrypt])\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [unwrapKey])\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [decrypt, encrypt])\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, empty salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, empty salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, empty salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, empty salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, long salt, SHA-1, with 100000 iterations\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [wrapKey, decrypt])\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, long salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, long salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, long salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [decrypt])\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [wrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [unwrapKey, decrypt, encrypt])\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, empty salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, empty salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, empty salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, empty salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, long salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, long salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, long salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, long salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey])\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [unwrapKey, wrapKey, decrypt])\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [wrapKey, decrypt])\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, empty salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, empty salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, empty salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, empty salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] empty password, empty salt, SHA-1, with 100000 iterations with null length\n[PASS] empty password, empty salt, SHA-1, with 100000 iterations with 0 length\n[PASS] empty password, empty salt, SHA-1, with 100000 iterations with non-multiple of 8 length\n[PASS] empty password, empty salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] empty password, empty salt, SHA-1, with 100000 iterations with missing deriveBits usage\n[PASS] empty password, empty salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] empty password, empty salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, empty salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, empty salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, empty salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, empty salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, empty salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, empty salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, empty salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, empty salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, empty salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, empty salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, empty salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, empty salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, empty salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, empty salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, empty salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, empty salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, long salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, long salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, long salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, long salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [wrapKey, decrypt, encrypt])\n[PASS] empty password, empty salt, SHA-256, with 1 iterations\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [encrypt, decrypt, wrapKey, unwrapKey, decrypt, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, long salt, SHA-1, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, long salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, long salt, SHA-1, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, long salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] empty password, long salt, SHA-1, with 100000 iterations with null length\n[PASS] empty password, long salt, SHA-1, with 100000 iterations with 0 length\n[PASS] empty password, long salt, SHA-1, with 100000 iterations with non-multiple of 8 length\n[PASS] empty password, long salt, SHA-1, with 100000 iterations with bad hash name SHA1\n[PASS] empty password, long salt, SHA-1, with 100000 iterations with missing deriveBits usage\n[PASS] empty password, long salt, SHA-1, with 100000 iterations with wrong (ECDH) key\n[PASS] empty password, long salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, long salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, long salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, long salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, long salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, long salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, long salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, long salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, long salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, long salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, long salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, long salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, long salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, long salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, long salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, long salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, long salt, SHA-1, with 0 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, empty salt, SHA-256, with 1 iterations\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, decrypt, encrypt])\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, empty salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, empty salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, empty salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] empty password, long salt, SHA-256, with 1 iterations\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, wrapKey, decrypt])\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, empty salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, long salt, SHA-256, with 1 iterations\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [encrypt, decrypt, wrapKey, unwrapKey, decrypt, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, long salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, empty salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, long salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, empty salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, long salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, empty salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, empty salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, long salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, empty salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, long salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [wrapKey, decrypt])\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, empty salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, empty salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, long salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, long salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [unwrapKey, wrapKey, encrypt])\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, empty salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, long salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, empty salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, long salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, long salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, long salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [unwrapKey, decrypt])\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, empty salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, empty salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, wrapKey, encrypt])\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, empty salt, SHA-256, with 1 iterations\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, long salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, empty salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, long salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, empty salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, long salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, empty salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, long salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [unwrapKey, wrapKey, decrypt])\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, empty salt, SHA-256, with 1 iterations\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [unwrapKey, decrypt, encrypt])\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, long salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, empty salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, long salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, empty salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, empty salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, long salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, long salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [decrypt, encrypt])\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, empty salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, long salt, SHA-256, with 1 iterations\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, decrypt])\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, long salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, empty salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, empty salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, long salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, empty salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, long salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, decrypt, encrypt])\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, empty salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, empty salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [unwrapKey, wrapKey])\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, long salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, long salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, empty salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, long salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, empty salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, long salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [unwrapKey, encrypt])\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, empty salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, long salt, SHA-256, with 1 iterations\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [decrypt, encrypt])\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, empty salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, long salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, empty salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, long salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, empty salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, long salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, wrapKey, decrypt])\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, wrapKey])\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, long salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, empty salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, empty salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, long salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, empty salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, long salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, empty salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, long salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, encrypt])\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, long salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, empty salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, empty salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, long salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, long salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, empty salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, long salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [unwrapKey, decrypt])\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, empty salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, empty salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, long salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, empty salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, long salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, empty salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, empty salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, long salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [unwrapKey])\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, long salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, long salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, empty salt, SHA-256, with 1 iterations\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [wrapKey, decrypt, encrypt])\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, empty salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, long salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, long salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, long salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, empty salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, empty salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, decrypt])\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, long salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, empty salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, empty salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, long salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, empty salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, empty salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, long salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, long salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [unwrapKey, wrapKey, encrypt])\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, empty salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, long salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, empty salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, empty salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, long salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, empty salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, long salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, long salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, long salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, empty salt, SHA-256, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, empty salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey])\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, long salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, long salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, long salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, empty salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, empty salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] empty password, empty salt, SHA-256, with 1 iterations with null length\n[PASS] empty password, empty salt, SHA-256, with 1 iterations with 0 length\n[PASS] empty password, empty salt, SHA-256, with 1 iterations with non-multiple of 8 length\n[PASS] empty password, empty salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] empty password, empty salt, SHA-256, with 1 iterations with missing deriveBits usage\n[PASS] empty password, empty salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, long salt, SHA-256, with 1 iterations\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, wrapKey, encrypt])\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, long salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, long salt, SHA-256, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, long salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] empty password, long salt, SHA-256, with 1 iterations with null length\n[PASS] empty password, empty salt, SHA-256, with 1000 iterations\n[PASS] empty password, long salt, SHA-256, with 1 iterations with 0 length\n[PASS] empty password, long salt, SHA-256, with 1 iterations with non-multiple of 8 length\n[PASS] empty password, long salt, SHA-256, with 1 iterations with bad hash name SHA256\n[PASS] empty password, long salt, SHA-256, with 1 iterations with missing deriveBits usage\n[PASS] empty password, long salt, SHA-256, with 1 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, empty salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, empty salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, empty salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, empty salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] empty password, long salt, SHA-256, with 1000 iterations\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [encrypt, decrypt, wrapKey, unwrapKey, decrypt, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, empty salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, empty salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, empty salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, empty salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, long salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, long salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, long salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, long salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [decrypt])\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, empty salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, empty salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, empty salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, long salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, empty salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, long salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, long salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, long salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, empty salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, empty salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, empty salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, empty salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, long salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, long salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, long salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, long salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [unwrapKey, wrapKey, encrypt])\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [wrapKey, decrypt, encrypt])\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, empty salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, empty salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, empty salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, empty salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, long salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, long salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, long salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, long salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [decrypt])\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, empty salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, empty salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, empty salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, empty salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, long salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, long salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, empty salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, long salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, empty salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, empty salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, long salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, empty salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, empty salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, empty salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, empty salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, empty salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, empty salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, empty salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, empty salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, empty salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, long salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, long salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, long salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, long salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, long salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, long salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, long salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, long salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, empty salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, empty salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, empty salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, empty salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, long salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, long salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, long salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, long salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, empty salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, empty salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, empty salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, empty salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, long salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, long salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, long salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, long salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, empty salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, empty salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, empty salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, empty salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, long salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, long salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, long salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, long salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, empty salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, empty salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, empty salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, empty salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, long salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, long salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, long salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, long salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, empty salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, empty salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, empty salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, empty salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, long salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, long salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, long salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, long salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, empty salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, empty salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, empty salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, empty salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, long salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, long salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, long salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, long salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, empty salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, empty salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, empty salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, empty salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] empty password, empty salt, SHA-256, with 1000 iterations with null length\n[PASS] empty password, empty salt, SHA-256, with 1000 iterations with 0 length\n[PASS] empty password, empty salt, SHA-256, with 1000 iterations with non-multiple of 8 length\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, long salt, SHA-256, with 1000 iterations\n[PASS] empty password, empty salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, long salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] empty password, empty salt, SHA-256, with 1000 iterations with missing deriveBits usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, long salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] empty password, empty salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, long salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, long salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, long salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, long salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, long salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [unwrapKey, decrypt])\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, long salt, SHA-256, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, long salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, long salt, SHA-256, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, long salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] empty password, long salt, SHA-256, with 1000 iterations with null length\n[PASS] empty password, long salt, SHA-256, with 1000 iterations with 0 length\n[PASS] empty password, long salt, SHA-256, with 1000 iterations with non-multiple of 8 length\n[PASS] empty password, long salt, SHA-256, with 1000 iterations with bad hash name SHA256\n[PASS] empty password, long salt, SHA-256, with 1000 iterations with missing deriveBits usage\n[PASS] empty password, long salt, SHA-256, with 1000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-OAEP, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [encrypt, decrypt, wrapKey, unwrapKey, decrypt, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] empty password, empty salt, SHA-256, with 100000 iterations\n[PASS] empty password, long salt, SHA-256, with 100000 iterations\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, wrapKey, encrypt])\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [decrypt])\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [decrypt, encrypt])\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, empty salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, empty salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, empty salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, empty salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, long salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, long salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, long salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, long salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [unwrapKey, encrypt])\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [wrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, decrypt])\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, empty salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, empty salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, empty salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, empty salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, long salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, long salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, long salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, long salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [decrypt, encrypt])\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, encrypt])\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [decrypt])\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [wrapKey, decrypt, encrypt])\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, empty salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, empty salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, empty salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, empty salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, long salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, long salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, long salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, long salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [wrapKey, decrypt])\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [unwrapKey, wrapKey])\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [wrapKey, decrypt, encrypt])\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, empty salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, empty salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, empty salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, empty salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, long salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, long salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, long salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, long salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [decrypt])\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [wrapKey, decrypt])\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, empty salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, empty salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, empty salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, empty salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [wrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, wrapKey])\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, long salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, long salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, long salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, long salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, empty salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, empty salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, empty salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, empty salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [unwrapKey])\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, long salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, long salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, long salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, long salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, empty salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, empty salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, empty salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, empty salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [unwrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [decrypt])\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, long salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, long salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, long salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, long salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, empty salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, empty salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, empty salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, empty salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey])\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [unwrapKey, wrapKey, decrypt])\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [wrapKey, decrypt])\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, long salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, long salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, long salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, long salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, empty salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, empty salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, empty salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, empty salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [wrapKey, decrypt])\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, long salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, long salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, long salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, long salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [encrypt, decrypt, wrapKey, unwrapKey, decrypt, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [unwrapKey, decrypt, encrypt])\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, empty salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, empty salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, empty salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, empty salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, long salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, long salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, long salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, long salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [unwrapKey, wrapKey, decrypt])\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, wrapKey, decrypt])\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, empty salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, empty salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, empty salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, empty salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, long salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, long salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, long salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, long salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [encrypt, decrypt, wrapKey, unwrapKey, decrypt, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, wrapKey, decrypt])\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, empty salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, empty salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, empty salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, empty salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [unwrapKey, wrapKey, encrypt])\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, decrypt, encrypt])\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, long salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, long salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, long salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, long salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, empty salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, empty salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, empty salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, empty salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [unwrapKey, decrypt])\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, long salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, long salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, long salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, long salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, empty salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, empty salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, empty salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, empty salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, wrapKey, encrypt])\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [unwrapKey])\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, long salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, long salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, long salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, long salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, empty salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, empty salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, empty salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, empty salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [decrypt, encrypt])\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, decrypt])\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: Rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [unwrapKey, decrypt, encrypt])\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, long salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, long salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, long salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, long salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, empty salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, empty salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, empty salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, empty salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] empty password, empty salt, SHA-256, with 100000 iterations with null length\n[PASS] empty password, empty salt, SHA-256, with 100000 iterations with 0 length\n[PASS] empty password, empty salt, SHA-256, with 100000 iterations with non-multiple of 8 length\n[PASS] empty password, empty salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] empty password, empty salt, SHA-256, with 100000 iterations with missing deriveBits usage\n[PASS] empty password, empty salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] empty password, empty salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, empty salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, empty salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, empty salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, empty salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, empty salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, empty salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, empty salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, empty salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, empty salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, empty salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, empty salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, empty salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, empty salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, empty salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, empty salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, empty salt, SHA-256, with 0 iterations\n[PASS] empty password, empty salt, PBKDF2, with 1 iterations with non-digest algorithm PBKDF2\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, empty salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, empty salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, empty salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, empty salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, empty salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, empty salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, empty salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, empty salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, empty salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, empty salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, empty salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, empty salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, empty salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, empty salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, empty salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, empty salt, PBKDF2, with 1 iterations\n[PASS] empty password, empty salt, PBKDF2, with 1000 iterations with non-digest algorithm PBKDF2\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, empty salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, empty salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, empty salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, empty salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, empty salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, empty salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, empty salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, empty salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, empty salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, empty salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, empty salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, empty salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, empty salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, empty salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, empty salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, empty salt, PBKDF2, with 1000 iterations\n[PASS] empty password, empty salt, PBKDF2, with 100000 iterations with non-digest algorithm PBKDF2\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, empty salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, empty salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, empty salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, empty salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, empty salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, empty salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, empty salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, empty salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, empty salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, empty salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, empty salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, empty salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, empty salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, empty salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, empty salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, empty salt, PBKDF2, with 100000 iterations\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey])\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [unwrapKey, encrypt])\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, long salt, SHA-256, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, long salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, long salt, SHA-256, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, long salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] empty password, long salt, SHA-256, with 100000 iterations with null length\n[PASS] empty password, long salt, SHA-256, with 100000 iterations with 0 length\n[PASS] empty password, long salt, SHA-256, with 100000 iterations with non-multiple of 8 length\n[PASS] empty password, long salt, SHA-256, with 100000 iterations with bad hash name SHA256\n[PASS] empty password, long salt, SHA-256, with 100000 iterations with missing deriveBits usage\n[PASS] empty password, long salt, SHA-256, with 100000 iterations with wrong (ECDH) key\n[PASS] empty password, long salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, long salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, long salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, long salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, long salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, long salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, long salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, long salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, long salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, long salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, long salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, long salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, long salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, long salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, long salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, long salt, SHA-256, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, long salt, SHA-256, with 0 iterations\n[PASS] empty password, long salt, PBKDF2, with 1 iterations with non-digest algorithm PBKDF2\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, long salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, long salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, long salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, long salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, long salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, long salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, long salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, long salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, long salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, long salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, long salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, long salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, long salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, long salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, long salt, PBKDF2, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, long salt, PBKDF2, with 1 iterations\n[PASS] empty password, long salt, PBKDF2, with 1000 iterations with non-digest algorithm PBKDF2\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, long salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, long salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, long salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, long salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, long salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, long salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, long salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, long salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, long salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, long salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, long salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, long salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, long salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, long salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, long salt, PBKDF2, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, long salt, PBKDF2, with 1000 iterations\n[PASS] empty password, long salt, PBKDF2, with 100000 iterations with non-digest algorithm PBKDF2\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, long salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, long salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, long salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, long salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, long salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, long salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, long salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, long salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, long salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, long salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, long salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, long salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, long salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, long salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, long salt, PBKDF2, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, long salt, PBKDF2, with 100000 iterations\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [unwrapKey, wrapKey])\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: Rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, decrypt, encrypt])\n[PASS] empty password, empty salt, SHA-384, with 1 iterations\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [decrypt, encrypt])\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, encrypt])\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, empty salt, SHA-384, with 1 iterations\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [encrypt, decrypt, wrapKey, unwrapKey, decrypt, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, empty salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, empty salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, empty salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: Rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [unwrapKey, wrapKey, encrypt])\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: Rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [unwrapKey, wrapKey, decrypt])\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, empty salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, empty salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, empty salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, empty salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: Rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [unwrapKey, encrypt])\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: Rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [decrypt, encrypt])\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, empty salt, SHA-384, with 1 iterations\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [encrypt, decrypt, wrapKey, unwrapKey, decrypt, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, empty salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, empty salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, empty salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: Rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, wrapKey, decrypt])\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, wrapKey])\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, empty salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, empty salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, empty salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: Rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [decrypt, encrypt])\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, empty salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: Rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, wrapKey, encrypt])\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, empty salt, SHA-384, with 1 iterations\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: Rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, encrypt])\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, empty salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, empty salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, empty salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: Rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [unwrapKey, decrypt])\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: Rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [unwrapKey, wrapKey])\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, empty salt, SHA-384, with 1 iterations\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: Rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [decrypt, encrypt])\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, empty salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, empty salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, empty salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: Rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [decrypt, encrypt])\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: Rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [decrypt])\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, empty salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, empty salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: Rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, decrypt])\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, empty salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, empty salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: Rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [unwrapKey, encrypt])\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: Rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, wrapKey])\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, empty salt, SHA-384, with 1 iterations\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: Rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [wrapKey, decrypt, encrypt])\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, empty salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, empty salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, empty salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: Rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [decrypt])\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: Rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, encrypt])\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, empty salt, SHA-384, with 1 iterations\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: Rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [wrapKey, decrypt, encrypt])\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, empty salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, empty salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, empty salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: Rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [unwrapKey, wrapKey])\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: Rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [wrapKey, decrypt, encrypt])\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, empty salt, SHA-384, with 1 iterations\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: Rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [wrapKey, decrypt, encrypt])\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, empty salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, empty salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, empty salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: Rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [unwrapKey])\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: Rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [decrypt])\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, empty salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, empty salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, empty salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: Rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [wrapKey, decrypt])\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, empty salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: Rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, wrapKey])\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, empty salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, empty salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, empty salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, empty salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: Rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: Rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [decrypt])\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, empty salt, SHA-384, with 1 iterations\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: Rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey])\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, empty salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, empty salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, empty salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: Rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [wrapKey, decrypt])\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: Rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, empty salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, empty salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: Rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [wrapKey, decrypt])\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, empty salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, empty salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: Rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [unwrapKey])\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, empty salt, SHA-384, with 1 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, empty salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, empty salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: Rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, empty salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: Rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [encrypt, decrypt, wrapKey, unwrapKey, decrypt, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, empty salt, SHA-384, with 1 iterations\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: Rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [unwrapKey, wrapKey, decrypt])\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, empty salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, empty salt, SHA-384, with 1 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, empty salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] empty password, empty salt, SHA-384, with 1 iterations with null length\n[PASS] empty password, empty salt, SHA-384, with 1 iterations with 0 length\n[PASS] empty password, empty salt, SHA-384, with 1 iterations with non-multiple of 8 length\n[PASS] empty password, empty salt, SHA-384, with 1 iterations with bad hash name SHA384\n[PASS] empty password, empty salt, SHA-384, with 1 iterations with missing deriveBits usage\n[PASS] empty password, empty salt, SHA-384, with 1 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: Rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [wrapKey, decrypt])\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: Rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey])\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: Rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, wrapKey, decrypt, encrypt])\n[PASS] empty password, empty salt, SHA-384, with 1000 iterations\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [sign])\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: Rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [encrypt, decrypt, wrapKey, unwrapKey, decrypt, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: Rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [encrypt, decrypt, wrapKey, unwrapKey, decrypt, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, empty salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, empty salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, empty salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, empty salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: Rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [unwrapKey, decrypt, encrypt])\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: Rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, wrapKey, decrypt])\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, empty salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, empty salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, empty salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, empty salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [sign, verify, sign, sign, verify])\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: rsa-pss, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [verify, sign])\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: Rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, decrypt, encrypt])\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, empty salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, empty salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, empty salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, empty salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign, verify, sign, sign, verify])\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign])\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: Rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [encrypt, decrypt, wrapKey, unwrapKey, decrypt, unwrapKey, encrypt, decrypt, wrapKey, unwrapKey])\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, empty salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, empty salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, empty salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, empty salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: Rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [unwrapKey, wrapKey, encrypt])\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: Rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [unwrapKey, decrypt])\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, empty salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, empty salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, empty salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, empty salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: rsa-pss, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [sign])\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: rsa-pss, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [verify, sign])\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [verify, sign])\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, empty salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, empty salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, empty salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, empty salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: Rsa-pss, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [sign])\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: Rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, wrapKey, encrypt])\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: Rsa-oaep, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [unwrapKey, decrypt])\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, empty salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, empty salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, empty salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, empty salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: rsa-pss, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign])\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: rsa-pss, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [sign, verify, sign, sign, verify])\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, empty salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, empty salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, empty salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, empty salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: RSASSA-PKCS1-V1_5, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [sign])\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: Rsa-pss, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign])\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, empty salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, empty salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, empty salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, empty salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: RSASSA-PKCS1-V1_5, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [sign, verify, sign, sign, verify])\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [verify, sign])\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: rsa-pss, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [verify, sign])\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, empty salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, empty salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, empty salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, empty salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: rsa-pss, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign, verify, sign, sign, verify])\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [sign, verify, sign, sign, verify])\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: Rsa-pss, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [verify, sign])\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, empty salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, empty salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, empty salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, empty salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: rsa-pss, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [verify, sign])\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: RSASSA-PKCS1-V1_5, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign, verify, sign, sign, verify])\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: RSASSA-PKCS1-V1_5, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign])\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, empty salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, empty salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, empty salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, empty salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: Rsa-pss, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [sign])\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign, verify, sign, sign, verify])\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: rsa-pss, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [sign, verify, sign, sign, verify])\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, empty salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, empty salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, empty salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, empty salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: Rsa-pss, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [verify, sign])\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: Rsa-pss, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign])\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: rsa-pss, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign, verify, sign, sign, verify])\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, empty salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, empty salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, empty salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, empty salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: Rsa-pss, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [sign, verify, sign, sign, verify])\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [sign])\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: rsassa-pkcs1-v1_5, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [sign])\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, empty salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, empty salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, empty salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, empty salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: RSASSA-PKCS1-V1_5, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [verify, sign])\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: Rsa-pss, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign, verify, sign, sign, verify])\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: rsa-pss, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [sign])\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, empty salt, SHA-384, with 1000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, empty salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, empty salt, SHA-384, with 1000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, empty salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] empty password, empty salt, SHA-384, with 1000 iterations with null length\n[PASS] empty password, empty salt, SHA-384, with 1000 iterations with 0 length\n[PASS] empty password, empty salt, SHA-384, with 1000 iterations with non-multiple of 8 length\n[PASS] empty password, empty salt, SHA-384, with 1000 iterations with bad hash name SHA384\n[PASS] empty password, empty salt, SHA-384, with 1000 iterations with missing deriveBits usage\n[PASS] empty password, empty salt, SHA-384, with 1000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: Rsa-pss, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [verify, sign])\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: rsassa-pkcs1-v1_5, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign])\n[PASS] empty password, empty salt, SHA-384, with 100000 iterations\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign])\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: rsa-pss, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign])\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: RSASSA-PKCS1-V1_5, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [verify, sign])\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: rsassa-pkcs1-v1_5, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [verify, sign])\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: rsassa-pkcs1-v1_5, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [verify, sign])\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: Rsa-pss, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [verify, sign])\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, empty salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, empty salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, empty salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, empty salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [verify, sign])\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: Rsassa-pkcs1-v1_5, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [sign])\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: rsassa-pkcs1-v1_5, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [verify, sign])\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, empty salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, empty salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, empty salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, empty salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: rsassa-pkcs1-v1_5, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [verify, sign])\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: Rsa-pss, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [sign, verify, sign, sign, verify])\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: RSA-PSS, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [verify, sign])\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: rsassa-pkcs1-v1_5, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [sign, verify, sign, sign, verify])\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, empty salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, empty salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, empty salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, empty salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: Rsassa-pkcs1-v1_5, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign])\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: rsassa-pkcs1-v1_5, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign, verify, sign, sign, verify])\n[PASS] Success: generateKey({name: X25519}, false, [deriveKey])\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: Rsa-pss, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign, verify, sign, sign, verify])\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, empty salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, empty salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, empty salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, empty salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({name: X25519}, true, [deriveKey])\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: RSASSA-PKCS1-V1_5, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [sign, verify, sign, sign, verify])\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: rsassa-pkcs1-v1_5, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [sign, verify, sign, sign, verify])\n[PASS] Success: generateKey({name: X25519}, false, [deriveBits, deriveKey])\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: Rsassa-pkcs1-v1_5, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [verify, sign])\n[PASS] Success: generateKey({name: X448}, false, [deriveKey])\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, empty salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, empty salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Success: generateKey({name: X25519}, true, [deriveBits, deriveKey])\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, empty salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, empty salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: RSASSA-PKCS1-V1_5, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign, verify, sign, sign, verify])\n[PASS] Success: generateKey({name: X448}, true, [deriveKey])\n[PASS] Success: generateKey({name: X25519}, false, [deriveBits])\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, empty salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, empty salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, empty salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, empty salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: Rsassa-pkcs1-v1_5, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [verify, sign])\n[PASS] Success: generateKey({name: X25519}, true, [deriveBits])\n[PASS] Success: generateKey({name: X448}, false, [deriveBits, deriveKey])\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: rsassa-pkcs1-v1_5, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign, verify, sign, sign, verify])\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: RSASSA-PKCS1-V1_5, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [sign])\n[PASS] Success: generateKey({name: X25519}, false, [deriveKey, deriveBits, deriveKey, deriveBits, deriveKey, deriveBits])\n[PASS] Success: generateKey({name: X448}, true, [deriveBits, deriveKey])\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: rsassa-pkcs1-v1_5, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [sign])\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, empty salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, empty salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Success: generateKey({name: X25519}, true, [deriveKey, deriveBits, deriveKey, deriveBits, deriveKey, deriveBits])\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, empty salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, empty salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({name: X448}, false, [deriveBits])\n[PASS] Success: generateKey({name: x25519}, false, [deriveKey])\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: Rsassa-pkcs1-v1_5, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [sign, verify, sign, sign, verify])\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: RSASSA-PKCS1-V1_5, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign])\n[PASS] Success: generateKey({name: X448}, true, [deriveBits])\n[PASS] Success: generateKey({name: x25519}, true, [deriveKey])\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: Rsassa-pkcs1-v1_5, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [sign])\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, empty salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, empty salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, empty salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, empty salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({name: x25519}, false, [deriveBits, deriveKey])\n[PASS] Success: generateKey({name: X448}, false, [deriveKey, deriveBits, deriveKey, deriveBits, deriveKey, deriveBits])\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: Rsassa-pkcs1-v1_5, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign])\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: Rsassa-pkcs1-v1_5, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign, verify, sign, sign, verify])\n[PASS] Success: generateKey({name: x25519}, true, [deriveBits, deriveKey])\n[PASS] Success: generateKey({name: X448}, true, [deriveKey, deriveBits, deriveKey, deriveBits, deriveKey, deriveBits])\n[PASS] Success: generateKey({name: x25519}, false, [deriveBits])\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: RSASSA-PKCS1-V1_5, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [verify, sign])\n[PASS] Success: generateKey({name: x25519}, true, [deriveBits])\n[PASS] Success: generateKey({name: x25519}, false, [deriveKey, deriveBits, deriveKey, deriveBits, deriveKey, deriveBits])\n[PASS] Success: generateKey({name: x448}, false, [deriveKey])\n[PASS] Success: generateKey({name: x25519}, true, [deriveKey, deriveBits, deriveKey, deriveBits, deriveKey, deriveBits])\n[PASS] Float arrays\n[PASS] DataView\n[PASS] Integer array: Int8Array\n[PASS] Large length: Int8Array\n[PASS] Null arrays: Int8Array\n[PASS] Integer array: Int16Array\n[PASS] Large length: Int16Array\n[PASS] Null arrays: Int16Array\n[PASS] Integer array: Int32Array\n[PASS] Large length: Int32Array\n[PASS] Null arrays: Int32Array\n[PASS] Integer array: BigInt64Array\n[PASS] Large length: BigInt64Array\n[PASS] Null arrays: BigInt64Array\n[PASS] Integer array: Uint8Array\n[PASS] Large length: Uint8Array\n[PASS] Null arrays: Uint8Array\n[PASS] Integer array: Uint8ClampedArray\n[PASS] Large length: Uint8ClampedArray\n[PASS] Null arrays: Uint8ClampedArray\n[PASS] Integer array: Uint16Array\n[PASS] Large length: Uint16Array\n[PASS] Null arrays: Uint16Array\n[PASS] Integer array: Uint32Array\n[PASS] Large length: Uint32Array\n[PASS] Null arrays: Uint32Array\n[PASS] Integer array: BigUint64Array\n[PASS] Large length: BigUint64Array\n[PASS] Null arrays: BigUint64Array\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, empty salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, empty salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, empty salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, empty salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({name: x448}, true, [deriveKey])\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, empty salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, empty salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, empty salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, empty salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({name: x448}, false, [deriveBits, deriveKey])\n[PASS] Good parameters: P-256 bits (spki, buffer(91), {name: ECDSA, namedCurve: P-256}, true, [verify])\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: Rsassa-pkcs1-v1_5, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [verify, sign])\n[PASS] Success: generateKey({name: x448}, true, [deriveBits, deriveKey])\n[PASS] Good parameters: P-256 bits (spki, buffer(59, compressed), {name: ECDSA, namedCurve: P-256}, true, [verify])\n[PASS] Good parameters: P-256 bits (jwk, object(kty, crv, x, y), {name: ECDSA, namedCurve: P-256}, true, [verify])\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, empty salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, empty salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, empty salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, empty salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Good parameters: P-256 bits (raw, buffer(65), {name: ECDSA, namedCurve: P-256}, true, [verify])\n[PASS] Success: generateKey({name: x448}, false, [deriveBits])\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, empty salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, empty salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, empty salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Good parameters: P-256 bits (raw, buffer(33, compressed), {name: ECDSA, namedCurve: P-256}, true, [verify])\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, empty salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Success: generateKey({name: x448}, true, [deriveBits])\n[PASS] Success: generateKey({name: x448}, false, [deriveKey, deriveBits, deriveKey, deriveBits, deriveKey, deriveBits])\n[PASS] Good parameters: P-256 bits (spki, buffer(91), {name: ECDSA, namedCurve: P-256}, true, [])\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: Rsassa-pkcs1-v1_5, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [verify, sign])\n[PASS] Success: generateKey({name: x448}, true, [deriveKey, deriveBits, deriveKey, deriveBits, deriveKey, deriveBits])\n[PASS] idl_test validation\n[PASS] Partial interface mixin WindowOrWorkerGlobalScope: original interface mixin defined\n[PASS] Partial interface mixin WindowOrWorkerGlobalScope: member names are unique\n[PASS] Partial interface Window: member names are unique\n[PASS] Good parameters: P-256 bits (spki, buffer(59, compressed), {name: ECDSA, namedCurve: P-256}, true, [])\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, empty salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, empty salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, empty salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, empty salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Good parameters: P-256 bits (jwk, object(kty, crv, x, y), {name: ECDSA, namedCurve: P-256}, true, [])\n[PASS] Window includes GlobalEventHandlers: member names are unique\n[PASS] Window includes WindowEventHandlers: member names are unique\n[PASS] Window includes WindowOrWorkerGlobalScope: member names are unique\n[PASS] WorkerGlobalScope includes WindowOrWorkerGlobalScope: member names are unique\n[PASS] Window includes AnimationFrameProvider: member names are unique\n[PASS] Window includes WindowSessionStorage: member names are unique\n[PASS] Window includes WindowLocalStorage: member names are unique\n[PASS] Crypto interface: existence and properties of interface object\n[PASS] Crypto interface object length\n[PASS] Crypto interface object name\n[PASS] Crypto interface: existence and properties of interface prototype object\n[PASS] Crypto interface: existence and properties of interface prototype object's \"constructor\" property\n[PASS] Crypto interface: existence and properties of interface prototype object's @@unscopables property\n[PASS] Crypto interface: operation getRandomValues(ArrayBufferView)\n[PASS] Crypto interface: operation randomUUID()\n[PASS] Crypto must be primary interface of crypto\n[PASS] Stringification of crypto\n[PASS] Crypto interface: crypto must inherit property \"subtle\" with the proper type\n[PASS] Crypto interface: crypto must inherit property \"getRandomValues(ArrayBufferView)\" with the proper type\n[PASS] Crypto interface: calling getRandomValues(ArrayBufferView) on crypto with too few arguments must throw TypeError\n[PASS] Crypto interface: crypto must inherit property \"randomUUID()\" with the proper type\n[PASS] CryptoKey interface: existence and properties of interface object\n[PASS] CryptoKey interface object length\n[PASS] CryptoKey interface object name\n[PASS] CryptoKey interface: existence and properties of interface prototype object\n[PASS] CryptoKey interface: existence and properties of interface prototype object's \"constructor\" property\n[PASS] CryptoKey interface: existence and properties of interface prototype object's @@unscopables property\n[PASS] SubtleCrypto interface: existence and properties of interface object\n[PASS] SubtleCrypto interface object length\n[PASS] SubtleCrypto interface object name\n[PASS] SubtleCrypto interface: existence and properties of interface prototype object\n[PASS] SubtleCrypto interface: existence and properties of interface prototype object's \"constructor\" property\n[PASS] SubtleCrypto interface: existence and properties of interface prototype object's @@unscopables property\n[PASS] SubtleCrypto must be primary interface of crypto.subtle\n[PASS] Stringification of crypto.subtle\n[PASS] SubtleCrypto interface: crypto.subtle must inherit property \"encrypt(AlgorithmIdentifier, CryptoKey, BufferSource)\" with the proper type\n[PASS] SubtleCrypto interface: crypto.subtle must inherit property \"decrypt(AlgorithmIdentifier, CryptoKey, BufferSource)\" with the proper type\n[PASS] SubtleCrypto interface: crypto.subtle must inherit property \"sign(AlgorithmIdentifier, CryptoKey, BufferSource)\" with the proper type\n[PASS] SubtleCrypto interface: crypto.subtle must inherit property \"verify(AlgorithmIdentifier, CryptoKey, BufferSource, BufferSource)\" with the proper type\n[PASS] SubtleCrypto interface: crypto.subtle must inherit property \"digest(AlgorithmIdentifier, BufferSource)\" with the proper type\n[PASS] SubtleCrypto interface: crypto.subtle must inherit property \"generateKey(AlgorithmIdentifier, boolean, sequence<KeyUsage>)\" with the proper type\n[PASS] SubtleCrypto interface: crypto.subtle must inherit property \"deriveKey(AlgorithmIdentifier, CryptoKey, AlgorithmIdentifier, boolean, sequence<KeyUsage>)\" with the proper type\n[PASS] SubtleCrypto interface: crypto.subtle must inherit property \"deriveBits(AlgorithmIdentifier, CryptoKey, optional unsigned long?)\" with the proper type\n[PASS] SubtleCrypto interface: crypto.subtle must inherit property \"importKey(KeyFormat, (BufferSource or JsonWebKey), AlgorithmIdentifier, boolean, sequence<KeyUsage>)\" with the proper type\n[PASS] SubtleCrypto interface: crypto.subtle must inherit property \"exportKey(KeyFormat, CryptoKey)\" with the proper type\n[PASS] SubtleCrypto interface: crypto.subtle must inherit property \"wrapKey(KeyFormat, CryptoKey, CryptoKey, AlgorithmIdentifier)\" with the proper type\n[PASS] SubtleCrypto interface: crypto.subtle must inherit property \"unwrapKey(KeyFormat, BufferSource, CryptoKey, AlgorithmIdentifier, AlgorithmIdentifier, boolean, sequence<KeyUsage>)\" with the proper type\n[PASS] Crypto interface: attribute subtle\n[PASS] CryptoKey interface: attribute type\n[PASS] CryptoKey interface: attribute extractable\n[PASS] CryptoKey interface: attribute algorithm\n[PASS] CryptoKey interface: attribute usages\n[PASS] Window interface: attribute crypto\n[PASS] idl_test setup\n[PASS] SubtleCrypto interface: operation encrypt(AlgorithmIdentifier, CryptoKey, BufferSource)\n[PASS] SubtleCrypto interface: operation decrypt(AlgorithmIdentifier, CryptoKey, BufferSource)\n[PASS] SubtleCrypto interface: operation sign(AlgorithmIdentifier, CryptoKey, BufferSource)\n[PASS] SubtleCrypto interface: operation verify(AlgorithmIdentifier, CryptoKey, BufferSource, BufferSource)\n[PASS] SubtleCrypto interface: operation digest(AlgorithmIdentifier, BufferSource)\n[PASS] SubtleCrypto interface: operation generateKey(AlgorithmIdentifier, boolean, sequence<KeyUsage>)\n[PASS] SubtleCrypto interface: operation deriveKey(AlgorithmIdentifier, CryptoKey, AlgorithmIdentifier, boolean, sequence<KeyUsage>)\n[PASS] SubtleCrypto interface: operation deriveBits(AlgorithmIdentifier, CryptoKey, optional unsigned long?)\n[PASS] SubtleCrypto interface: operation importKey(KeyFormat, (BufferSource or JsonWebKey), AlgorithmIdentifier, boolean, sequence<KeyUsage>)\n[PASS] SubtleCrypto interface: operation exportKey(KeyFormat, CryptoKey)\n[PASS] SubtleCrypto interface: operation wrapKey(KeyFormat, CryptoKey, CryptoKey, AlgorithmIdentifier)\n[PASS] SubtleCrypto interface: operation unwrapKey(KeyFormat, BufferSource, CryptoKey, AlgorithmIdentifier, AlgorithmIdentifier, boolean, sequence<KeyUsage>)\n[PASS] SubtleCrypto interface: calling encrypt(AlgorithmIdentifier, CryptoKey, BufferSource) on crypto.subtle with too few arguments must throw TypeError\n[PASS] SubtleCrypto interface: calling decrypt(AlgorithmIdentifier, CryptoKey, BufferSource) on crypto.subtle with too few arguments must throw TypeError\n[PASS] SubtleCrypto interface: calling sign(AlgorithmIdentifier, CryptoKey, BufferSource) on crypto.subtle with too few arguments must throw TypeError\n[PASS] SubtleCrypto interface: calling verify(AlgorithmIdentifier, CryptoKey, BufferSource, BufferSource) on crypto.subtle with too few arguments must throw TypeError\n[PASS] SubtleCrypto interface: calling digest(AlgorithmIdentifier, BufferSource) on crypto.subtle with too few arguments must throw TypeError\n[PASS] SubtleCrypto interface: calling generateKey(AlgorithmIdentifier, boolean, sequence<KeyUsage>) on crypto.subtle with too few arguments must throw TypeError\n[PASS] SubtleCrypto interface: calling deriveKey(AlgorithmIdentifier, CryptoKey, AlgorithmIdentifier, boolean, sequence<KeyUsage>) on crypto.subtle with too few arguments must throw TypeError\n[PASS] SubtleCrypto interface: calling deriveBits(AlgorithmIdentifier, CryptoKey, optional unsigned long?) on crypto.subtle with too few arguments must throw TypeError\n[PASS] SubtleCrypto interface: calling importKey(KeyFormat, (BufferSource or JsonWebKey), AlgorithmIdentifier, boolean, sequence<KeyUsage>) on crypto.subtle with too few arguments must throw TypeError\n[PASS] SubtleCrypto interface: calling exportKey(KeyFormat, CryptoKey) on crypto.subtle with too few arguments must throw TypeError\n[PASS] SubtleCrypto interface: calling wrapKey(KeyFormat, CryptoKey, CryptoKey, AlgorithmIdentifier) on crypto.subtle with too few arguments must throw TypeError\n[PASS] SubtleCrypto interface: calling unwrapKey(KeyFormat, BufferSource, CryptoKey, AlgorithmIdentifier, AlgorithmIdentifier, boolean, sequence<KeyUsage>) on crypto.subtle with too few arguments must throw TypeError\n[PASS] Good parameters: P-256 bits (raw, buffer(65), {name: ECDSA, namedCurve: P-256}, true, [])\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, empty salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, empty salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, empty salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, empty salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Good parameters: P-256 bits (raw, buffer(33, compressed), {name: ECDSA, namedCurve: P-256}, true, [])\n[PASS] Good parameters: Ed25519 bits (spki, buffer(44), {name: Ed25519}, true, [verify])\n[PASS] Good parameters: Ed25519 bits (jwk, object(kty, crv, x), {name: Ed25519}, true, [verify])\n[PASS] Good parameters with ignored JWK alg: Ed25519 (jwk, object(kty, crv, x), {name: Ed25519}, true, [verify])\n[PASS] Good parameters: Ed25519 bits (raw, buffer(32), {name: Ed25519}, true, [verify])\n[PASS] Good parameters: P-256 bits (spki, buffer(91), {name: ECDSA, namedCurve: P-256}, true, [verify, verify])\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: rsassa-pkcs1-v1_5, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign])\n[PASS] Good parameters: Ed25519 bits (spki, buffer(44), {name: Ed25519}, true, [])\n[PASS] Good parameters: P-256 bits (spki, buffer(59, compressed), {name: ECDSA, namedCurve: P-256}, true, [verify, verify])\n[PASS] Good parameters: Ed25519 bits (jwk, object(kty, crv, x), {name: Ed25519}, true, [])\n[PASS] Good parameters: P-256 bits (jwk, object(kty, crv, x, y), {name: ECDSA, namedCurve: P-256}, true, [verify, verify])\n[PASS] Good parameters with ignored JWK alg: Ed25519 (jwk, object(kty, crv, x), {name: Ed25519}, true, [])\n[PASS] Good parameters: P-256 bits (raw, buffer(65), {name: ECDSA, namedCurve: P-256}, true, [verify, verify])\n[PASS] Good parameters: Ed25519 bits (raw, buffer(32), {name: Ed25519}, true, [])\n[PASS] Good parameters: P-256 bits (raw, buffer(33, compressed), {name: ECDSA, namedCurve: P-256}, true, [verify, verify])\n[PASS] Good parameters: Ed25519 bits (spki, buffer(44), {name: Ed25519}, true, [verify, verify])\n[PASS] Good parameters: Ed25519 bits (jwk, object(kty, crv, x), {name: Ed25519}, true, [verify, verify])\n[PASS] Good parameters with ignored JWK alg: Ed25519 (jwk, object(kty, crv, x), {name: Ed25519}, true, [verify, verify])\n[PASS] Good parameters: Ed25519 bits (raw, buffer(32), {name: Ed25519}, true, [verify, verify])\n[PASS] Good parameters: Ed25519 bits (pkcs8, buffer(48), {name: Ed25519}, true, [sign])\n[PASS] Good parameters: Ed25519 bits (jwk, object(crv, d, x, kty), {name: Ed25519}, true, [sign])\n[PASS] Good parameters with ignored JWK alg: Ed25519 (jwk, object(crv, d, x, kty), {name: Ed25519}, true, [sign])\n[PASS] Good parameters: P-256 bits (pkcs8, buffer(138), {name: ECDSA, namedCurve: P-256}, true, [sign])\n[PASS] Good parameters: P-256 bits (pkcs8, buffer(138), {name: ECDSA, namedCurve: P-256}, true, [sign, sign])\n[PASS] Empty Usages: P-256 bits (pkcs8, buffer(138), {name: ECDSA, namedCurve: P-256}, true, [])\n[PASS] Good parameters: P-256 bits (jwk, object(kty, crv, x, y, d), {name: ECDSA, namedCurve: P-256}, true, [sign])\n[PASS] Good parameters: P-256 bits (jwk, object(kty, crv, x, y, d), {name: ECDSA, namedCurve: P-256}, true, [sign, sign])\n[PASS] Good parameters: Ed25519 bits (pkcs8, buffer(48), {name: Ed25519}, true, [sign, sign])\n[PASS] Empty Usages: P-256 bits (jwk, object(kty, crv, x, y, d), {name: ECDSA, namedCurve: P-256}, true, [])\n[PASS] Good parameters: P-256 bits (spki, buffer(91), {name: ECDSA, namedCurve: P-256}, false, [verify])\n[PASS] Good parameters: P-256 bits (spki, buffer(59, compressed), {name: ECDSA, namedCurve: P-256}, false, [verify])\n[PASS] Good parameters: Ed25519 bits (jwk, object(crv, d, x, kty), {name: Ed25519}, true, [sign, sign])\n[PASS] Good parameters with ignored JWK alg: Ed25519 (jwk, object(crv, d, x, kty), {name: Ed25519}, true, [sign, sign])\n[PASS] Good parameters: Ed25519 bits (spki, buffer(44), {name: Ed25519}, false, [verify])\n[PASS] Good parameters: Ed25519 bits (jwk, object(kty, crv, x), {name: Ed25519}, false, [verify])\n[PASS] Good parameters: Ed25519 bits (raw, buffer(32), {name: Ed25519}, false, [verify])\n[PASS] Good parameters: Ed25519 bits (spki, buffer(44), {name: Ed25519}, false, [])\n[PASS] Good parameters: Ed25519 bits (jwk, object(kty, crv, x), {name: Ed25519}, false, [])\n[PASS] Good parameters: P-256 bits (jwk, object(kty, crv, x, y), {name: ECDSA, namedCurve: P-256}, false, [verify])\n[PASS] Good parameters: P-256 bits (raw, buffer(65), {name: ECDSA, namedCurve: P-256}, false, [verify])\n[PASS] Good parameters: P-256 bits (raw, buffer(33, compressed), {name: ECDSA, namedCurve: P-256}, false, [verify])\n[PASS] Good parameters: Ed25519 bits (raw, buffer(32), {name: Ed25519}, false, [])\n[PASS] Good parameters: P-256 bits (spki, buffer(91), {name: ECDSA, namedCurve: P-256}, false, [])\n[PASS] Good parameters: Ed25519 bits (spki, buffer(44), {name: Ed25519}, false, [verify, verify])\n[PASS] Good parameters: Ed25519 bits (jwk, object(kty, crv, x), {name: Ed25519}, false, [verify, verify])\n[PASS] Good parameters: P-256 bits (spki, buffer(59, compressed), {name: ECDSA, namedCurve: P-256}, false, [])\n[PASS] Good parameters: Ed25519 bits (raw, buffer(32), {name: Ed25519}, false, [verify, verify])\n[PASS] Good parameters: P-256 bits (jwk, object(kty, crv, x, y), {name: ECDSA, namedCurve: P-256}, false, [])\n[PASS] Good parameters: P-256 bits (raw, buffer(65), {name: ECDSA, namedCurve: P-256}, false, [])\n[PASS] Good parameters: P-256 bits (raw, buffer(33, compressed), {name: ECDSA, namedCurve: P-256}, false, [])\n[PASS] Good parameters: Ed25519 bits (pkcs8, buffer(48), {name: Ed25519}, false, [sign])\n[PASS] Good parameters: P-256 bits (spki, buffer(91), {name: ECDSA, namedCurve: P-256}, false, [verify, verify])\n[PASS] Good parameters: Ed25519 bits (jwk, object(crv, d, x, kty), {name: Ed25519}, false, [sign])\n[PASS] Good parameters: P-256 bits (spki, buffer(59, compressed), {name: ECDSA, namedCurve: P-256}, false, [verify, verify])\n[PASS] Good parameters: P-256 bits (jwk, object(kty, crv, x, y), {name: ECDSA, namedCurve: P-256}, false, [verify, verify])\n[PASS] Good parameters: Ed25519 bits (pkcs8, buffer(48), {name: Ed25519}, false, [sign, sign])\n[PASS] Good parameters: P-256 bits (raw, buffer(65), {name: ECDSA, namedCurve: P-256}, false, [verify, verify])\n[PASS] Good parameters: Ed25519 bits (jwk, object(crv, d, x, kty), {name: Ed25519}, false, [sign, sign])\n[PASS] Good parameters: P-256 bits (raw, buffer(33, compressed), {name: ECDSA, namedCurve: P-256}, false, [verify, verify])\n[PASS] Bad usages: importKey(spki, {name: Ed25519}, true, [encrypt])\n[PASS] Good parameters: Ed448 bits (spki, buffer(69), {name: Ed448}, true, [verify])\n[PASS] Bad usages: importKey(spki, {name: Ed25519}, false, [encrypt])\n[PASS] Good parameters: P-256 bits (pkcs8, buffer(138), {name: ECDSA, namedCurve: P-256}, false, [sign])\n[PASS] Bad usages: importKey(spki, {name: Ed25519}, true, [verify, encrypt])\n[PASS] Good parameters: Ed448 bits (jwk, object(kty, crv, x), {name: Ed448}, true, [verify])\n[PASS] Bad usages: importKey(spki, {name: Ed25519}, false, [verify, encrypt])\n[PASS] Good parameters with ignored JWK alg: Ed448 (jwk, object(kty, crv, x), {name: Ed448}, true, [verify])\n[PASS] Good parameters: Ed448 bits (raw, buffer(57), {name: Ed448}, true, [verify])\n[PASS] Bad usages: importKey(spki, {name: Ed25519}, true, [verify, verify, encrypt])\n[PASS] Bad usages: importKey(spki, {name: Ed25519}, false, [verify, verify, encrypt])\n[PASS] Good parameters: P-256 bits (pkcs8, buffer(138), {name: ECDSA, namedCurve: P-256}, false, [sign, sign])\n[PASS] Bad usages: importKey(spki, {name: Ed25519}, true, [decrypt])\n[PASS] Good parameters: Ed448 bits (spki, buffer(69), {name: Ed448}, true, [])\n[PASS] Bad usages: importKey(spki, {name: Ed25519}, false, [decrypt])\n[PASS] Good parameters: Ed448 bits (jwk, object(kty, crv, x), {name: Ed448}, true, [])\n[PASS] Good parameters with ignored JWK alg: Ed448 (jwk, object(kty, crv, x), {name: Ed448}, true, [])\n[PASS] Good parameters: Ed448 bits (raw, buffer(57), {name: Ed448}, true, [])\n[PASS] Bad usages: importKey(spki, {name: Ed25519}, true, [verify, decrypt])\n[PASS] Empty Usages: P-256 bits (pkcs8, buffer(138), {name: ECDSA, namedCurve: P-256}, false, [])\n[PASS] Bad usages: importKey(spki, {name: Ed25519}, false, [verify, decrypt])\n[PASS] Good parameters: Ed448 bits (spki, buffer(69), {name: Ed448}, true, [verify, verify])\n[PASS] Bad usages: importKey(spki, {name: Ed25519}, true, [verify, verify, decrypt])\n[PASS] Bad usages: importKey(spki, {name: Ed25519}, false, [verify, verify, decrypt])\n[PASS] Good parameters: Ed448 bits (jwk, object(kty, crv, x), {name: Ed448}, true, [verify, verify])\n[PASS] Good parameters: P-256 bits (jwk, object(kty, crv, x, y, d), {name: ECDSA, namedCurve: P-256}, false, [sign])\n[PASS] Bad usages: importKey(spki, {name: Ed25519}, true, [sign])\n[PASS] Good parameters with ignored JWK alg: Ed448 (jwk, object(kty, crv, x), {name: Ed448}, true, [verify, verify])\n[PASS] Bad usages: importKey(spki, {name: Ed25519}, false, [sign])\n[PASS] Bad usages: importKey(spki, {name: Ed25519}, true, [verify, sign])\n[PASS] Good parameters: Ed448 bits (raw, buffer(57), {name: Ed448}, true, [verify, verify])\n[PASS] Good parameters: P-256 bits (jwk, object(kty, crv, x, y, d), {name: ECDSA, namedCurve: P-256}, false, [sign, sign])\n[PASS] Bad usages: importKey(spki, {name: Ed25519}, false, [verify, sign])\n[PASS] Bad usages: importKey(spki, {name: Ed25519}, true, [verify, verify, sign])\n[PASS] Bad usages: importKey(spki, {name: Ed25519}, false, [verify, verify, sign])\n[PASS] Bad usages: importKey(spki, {name: Ed25519}, true, [wrapKey])\n[PASS] Empty Usages: P-256 bits (jwk, object(kty, crv, x, y, d), {name: ECDSA, namedCurve: P-256}, false, [])\n[PASS] Bad usages: importKey(spki, {name: Ed25519}, false, [wrapKey])\n[PASS] Bad usages: importKey(spki, {name: Ed25519}, true, [verify, wrapKey])\n[PASS] Bad usages: importKey(spki, {name: Ed25519}, false, [verify, wrapKey])\n[PASS] Bad usages: importKey(spki, {name: Ed25519}, true, [verify, verify, wrapKey])\n[PASS] Bad usages: importKey(spki, {name: Ed25519}, false, [verify, verify, wrapKey])\n[PASS] Bad usages: importKey(spki, {name: Ed25519}, true, [unwrapKey])\n[PASS] Good parameters: P-384 bits (spki, buffer(120), {name: ECDSA, namedCurve: P-384}, true, [verify])\n[PASS] Bad usages: importKey(spki, {name: Ed25519}, false, [unwrapKey])\n[PASS] Bad usages: importKey(spki, {name: Ed25519}, true, [verify, unwrapKey])\n[PASS] Bad usages: importKey(spki, {name: Ed25519}, false, [verify, unwrapKey])\n[PASS] Bad usages: importKey(spki, {name: Ed25519}, true, [verify, verify, unwrapKey])\n[PASS] Bad usages: importKey(spki, {name: Ed25519}, false, [verify, verify, unwrapKey])\n[PASS] Bad usages: importKey(spki, {name: Ed25519}, true, [deriveKey])\n[PASS] Good parameters: P-384 bits (spki, buffer(72, compressed), {name: ECDSA, namedCurve: P-384}, true, [verify])\n[PASS] Good parameters: Ed448 bits (pkcs8, buffer(73), {name: Ed448}, true, [sign])\n[PASS] Bad usages: importKey(spki, {name: Ed25519}, false, [deriveKey])\n[PASS] Bad usages: importKey(spki, {name: Ed25519}, true, [verify, deriveKey])\n[PASS] Bad usages: importKey(spki, {name: Ed25519}, false, [verify, deriveKey])\n[PASS] Bad usages: importKey(spki, {name: Ed25519}, true, [verify, verify, deriveKey])\n[PASS] Bad usages: importKey(spki, {name: Ed25519}, false, [verify, verify, deriveKey])\n[PASS] Bad usages: importKey(spki, {name: Ed25519}, true, [deriveBits])\n[PASS] Bad usages: importKey(spki, {name: Ed25519}, false, [deriveBits])\n[PASS] Bad usages: importKey(spki, {name: Ed25519}, true, [verify, deriveBits])\n[PASS] Bad usages: importKey(spki, {name: Ed25519}, false, [verify, deriveBits])\n[PASS] Good parameters: Ed448 bits (jwk, object(crv, d, x, kty), {name: Ed448}, true, [sign])\n[PASS] Bad usages: importKey(spki, {name: Ed25519}, true, [verify, verify, deriveBits])\n[PASS] Good parameters: P-384 bits (jwk, object(kty, crv, x, y), {name: ECDSA, namedCurve: P-384}, true, [verify])\n[PASS] Good parameters: P-384 bits (raw, buffer(97), {name: ECDSA, namedCurve: P-384}, true, [verify])\n[PASS] Good parameters: P-384 bits (raw, buffer(49, compressed), {name: ECDSA, namedCurve: P-384}, true, [verify])\n[PASS] Good parameters with ignored JWK alg: Ed448 (jwk, object(crv, d, x, kty), {name: Ed448}, true, [sign])\n[PASS] Bad usages: importKey(spki, {name: Ed25519}, false, [verify, verify, deriveBits])\n[PASS] Bad usages: importKey(pkcs8, {name: Ed25519}, true, [encrypt])\n[PASS] Bad usages: importKey(pkcs8, {name: Ed25519}, false, [encrypt])\n[PASS] Bad usages: importKey(pkcs8, {name: Ed25519}, true, [sign, encrypt])\n[PASS] Bad usages: importKey(pkcs8, {name: Ed25519}, false, [sign, encrypt])\n[PASS] Good parameters: P-384 bits (spki, buffer(120), {name: ECDSA, namedCurve: P-384}, true, [])\n[PASS] Bad usages: importKey(pkcs8, {name: Ed25519}, true, [sign, sign, encrypt])\n[PASS] Bad usages: importKey(pkcs8, {name: Ed25519}, false, [sign, sign, encrypt])\n[PASS] Bad usages: importKey(pkcs8, {name: Ed25519}, true, [decrypt])\n[PASS] Bad usages: importKey(pkcs8, {name: Ed25519}, false, [decrypt])\n[PASS] Bad usages: importKey(pkcs8, {name: Ed25519}, true, [sign, decrypt])\n[PASS] Bad usages: importKey(pkcs8, {name: Ed25519}, false, [sign, decrypt])\n[PASS] Bad usages: importKey(pkcs8, {name: Ed25519}, true, [sign, sign, decrypt])\n[PASS] Good parameters: P-384 bits (spki, buffer(72, compressed), {name: ECDSA, namedCurve: P-384}, true, [])\n[PASS] Bad usages: importKey(pkcs8, {name: Ed25519}, false, [sign, sign, decrypt])\n[PASS] Bad usages: importKey(pkcs8, {name: Ed25519}, true, [verify])\n[PASS] Bad usages: importKey(pkcs8, {name: Ed25519}, false, [verify])\n[PASS] Bad usages: importKey(pkcs8, {name: Ed25519}, true, [sign, verify])\n[PASS] Bad usages: importKey(pkcs8, {name: Ed25519}, false, [sign, verify])\n[PASS] Good parameters: Ed448 bits (pkcs8, buffer(73), {name: Ed448}, true, [sign, sign])\n[PASS] Bad usages: importKey(pkcs8, {name: Ed25519}, true, [sign, sign, verify])\n[PASS] Bad usages: importKey(pkcs8, {name: Ed25519}, false, [sign, sign, verify])\n[PASS] Good parameters: P-384 bits (jwk, object(kty, crv, x, y), {name: ECDSA, namedCurve: P-384}, true, [])\n[PASS] Bad usages: importKey(pkcs8, {name: Ed25519}, true, [wrapKey])\n[PASS] Bad usages: importKey(pkcs8, {name: Ed25519}, false, [wrapKey])\n[PASS] Good parameters: Ed448 bits (jwk, object(crv, d, x, kty), {name: Ed448}, true, [sign, sign])\n[PASS] Bad usages: importKey(pkcs8, {name: Ed25519}, true, [sign, wrapKey])\n[PASS] Good parameters: P-384 bits (raw, buffer(97), {name: ECDSA, namedCurve: P-384}, true, [])\n[PASS] Bad usages: importKey(pkcs8, {name: Ed25519}, false, [sign, wrapKey])\n[PASS] Bad usages: importKey(pkcs8, {name: Ed25519}, true, [sign, sign, wrapKey])\n[PASS] Bad usages: importKey(pkcs8, {name: Ed25519}, false, [sign, sign, wrapKey])\n[PASS] Good parameters: P-384 bits (raw, buffer(49, compressed), {name: ECDSA, namedCurve: P-384}, true, [])\n[PASS] Bad usages: importKey(pkcs8, {name: Ed25519}, true, [unwrapKey])\n[PASS] Good parameters with ignored JWK alg: Ed448 (jwk, object(crv, d, x, kty), {name: Ed448}, true, [sign, sign])\n[PASS] Bad usages: importKey(pkcs8, {name: Ed25519}, false, [unwrapKey])\n[PASS] Bad usages: importKey(pkcs8, {name: Ed25519}, true, [sign, unwrapKey])\n[PASS] Bad usages: importKey(pkcs8, {name: Ed25519}, false, [sign, unwrapKey])\n[PASS] Bad usages: importKey(pkcs8, {name: Ed25519}, true, [sign, sign, unwrapKey])\n[PASS] Good parameters: Ed448 bits (spki, buffer(69), {name: Ed448}, false, [verify])\n[PASS] Bad usages: importKey(pkcs8, {name: Ed25519}, false, [sign, sign, unwrapKey])\n[PASS] Good parameters: Ed448 bits (jwk, object(kty, crv, x), {name: Ed448}, false, [verify])\n[PASS] Bad usages: importKey(pkcs8, {name: Ed25519}, true, [deriveKey])\n[PASS] Good parameters: P-384 bits (spki, buffer(120), {name: ECDSA, namedCurve: P-384}, true, [verify, verify])\n[PASS] Good parameters: Ed448 bits (raw, buffer(57), {name: Ed448}, false, [verify])\n[PASS] Bad usages: importKey(pkcs8, {name: Ed25519}, false, [deriveKey])\n[PASS] Bad usages: importKey(pkcs8, {name: Ed25519}, true, [sign, deriveKey])\n[PASS] Bad usages: importKey(pkcs8, {name: Ed25519}, false, [sign, deriveKey])\n[PASS] Bad usages: importKey(pkcs8, {name: Ed25519}, true, [sign, sign, deriveKey])\n[PASS] Good parameters: Ed448 bits (spki, buffer(69), {name: Ed448}, false, [])\n[PASS] Bad usages: importKey(pkcs8, {name: Ed25519}, false, [sign, sign, deriveKey])\n[PASS] Good parameters: Ed448 bits (jwk, object(kty, crv, x), {name: Ed448}, false, [])\n[PASS] Bad usages: importKey(pkcs8, {name: Ed25519}, true, [deriveBits])\n[PASS] Good parameters: P-384 bits (spki, buffer(72, compressed), {name: ECDSA, namedCurve: P-384}, true, [verify, verify])\n[PASS] Good parameters: Ed448 bits (raw, buffer(57), {name: Ed448}, false, [])\n[PASS] Bad usages: importKey(pkcs8, {name: Ed25519}, false, [deriveBits])\n[PASS] Bad usages: importKey(pkcs8, {name: Ed25519}, true, [sign, deriveBits])\n[PASS] Bad usages: importKey(pkcs8, {name: Ed25519}, false, [sign, deriveBits])\n[PASS] Good parameters: Ed448 bits (spki, buffer(69), {name: Ed448}, false, [verify, verify])\n[PASS] Bad usages: importKey(pkcs8, {name: Ed25519}, true, [sign, sign, deriveBits])\n[PASS] Good parameters: Ed448 bits (jwk, object(kty, crv, x), {name: Ed448}, false, [verify, verify])\n[PASS] Bad usages: importKey(pkcs8, {name: Ed25519}, false, [sign, sign, deriveBits])\n[PASS] Good parameters: Ed448 bits (raw, buffer(57), {name: Ed448}, false, [verify, verify])\n[PASS] Bad usages: importKey(raw, {name: Ed25519}, true, [encrypt])\n[PASS] Bad usages: importKey(raw, {name: Ed25519}, false, [encrypt])\n[PASS] Bad usages: importKey(raw, {name: Ed25519}, true, [verify, encrypt])\n[PASS] Bad usages: importKey(raw, {name: Ed25519}, false, [verify, encrypt])\n[PASS] Good parameters: P-384 bits (jwk, object(kty, crv, x, y), {name: ECDSA, namedCurve: P-384}, true, [verify, verify])\n[PASS] Bad usages: importKey(raw, {name: Ed25519}, true, [verify, verify, encrypt])\n[PASS] Bad usages: importKey(raw, {name: Ed25519}, false, [verify, verify, encrypt])\n[PASS] Good parameters: P-384 bits (raw, buffer(97), {name: ECDSA, namedCurve: P-384}, true, [verify, verify])\n[PASS] Bad usages: importKey(raw, {name: Ed25519}, true, [decrypt])\n[PASS] Bad usages: importKey(raw, {name: Ed25519}, false, [decrypt])\n[PASS] Bad usages: importKey(raw, {name: Ed25519}, true, [verify, decrypt])\n[PASS] Good parameters: P-384 bits (raw, buffer(49, compressed), {name: ECDSA, namedCurve: P-384}, true, [verify, verify])\n[PASS] Bad usages: importKey(raw, {name: Ed25519}, false, [verify, decrypt])\n[PASS] Bad usages: importKey(raw, {name: Ed25519}, true, [verify, verify, decrypt])\n[PASS] Good parameters: Ed448 bits (pkcs8, buffer(73), {name: Ed448}, false, [sign])\n[PASS] Bad usages: importKey(raw, {name: Ed25519}, false, [verify, verify, decrypt])\n[PASS] Bad usages: importKey(raw, {name: Ed25519}, true, [sign])\n[PASS] Bad usages: importKey(raw, {name: Ed25519}, false, [sign])\n[PASS] Bad usages: importKey(raw, {name: Ed25519}, true, [verify, sign])\n[PASS] Bad usages: importKey(raw, {name: Ed25519}, false, [verify, sign])\n[PASS] Bad usages: importKey(raw, {name: Ed25519}, true, [verify, verify, sign])\n[PASS] Bad usages: importKey(raw, {name: Ed25519}, false, [verify, verify, sign])\n[PASS] Bad usages: importKey(raw, {name: Ed25519}, true, [wrapKey])\n[PASS] Bad usages: importKey(raw, {name: Ed25519}, false, [wrapKey])\n[PASS] Bad usages: importKey(raw, {name: Ed25519}, true, [verify, wrapKey])\n[PASS] Bad usages: importKey(raw, {name: Ed25519}, false, [verify, wrapKey])\n[PASS] Bad usages: importKey(raw, {name: Ed25519}, true, [verify, verify, wrapKey])\n[PASS] Bad usages: importKey(raw, {name: Ed25519}, false, [verify, verify, wrapKey])\n[PASS] Good parameters: Ed448 bits (jwk, object(crv, d, x, kty), {name: Ed448}, false, [sign])\n[PASS] Success: generateKey({hash: SHA-256, modulusLength: 2048, name: RSASSA-PKCS1-V1_5, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [verify, sign])\n[PASS] Bad usages: importKey(raw, {name: Ed25519}, true, [unwrapKey])\n[PASS] Bad usages: importKey(raw, {name: Ed25519}, false, [unwrapKey])\n[PASS] Bad usages: importKey(raw, {name: Ed25519}, true, [verify, unwrapKey])\n[PASS] Bad usages: importKey(raw, {name: Ed25519}, false, [verify, unwrapKey])\n[PASS] Good parameters: Ed448 bits (pkcs8, buffer(73), {name: Ed448}, false, [sign, sign])\n[PASS] Bad usages: importKey(raw, {name: Ed25519}, true, [verify, verify, unwrapKey])\n[PASS] Bad usages: importKey(raw, {name: Ed25519}, false, [verify, verify, unwrapKey])\n[PASS] Bad usages: importKey(raw, {name: Ed25519}, true, [deriveKey])\n[PASS] Bad usages: importKey(raw, {name: Ed25519}, false, [deriveKey])\n[PASS] Bad usages: importKey(raw, {name: Ed25519}, true, [verify, deriveKey])\n[PASS] Good parameters: Ed448 bits (jwk, object(crv, d, x, kty), {name: Ed448}, false, [sign, sign])\n[PASS] Bad usages: importKey(raw, {name: Ed25519}, false, [verify, deriveKey])\n[PASS] Bad usages: importKey(raw, {name: Ed25519}, true, [verify, verify, deriveKey])\n[PASS] Good parameters: P-384 bits (pkcs8, buffer(185), {name: ECDSA, namedCurve: P-384}, true, [sign])\n[PASS] Bad usages: importKey(raw, {name: Ed25519}, false, [verify, verify, deriveKey])\n[PASS] Bad usages: importKey(raw, {name: Ed25519}, true, [deriveBits])\n[PASS] Bad usages: importKey(raw, {name: Ed25519}, false, [deriveBits])\n[PASS] Bad usages: importKey(raw, {name: Ed25519}, true, [verify, deriveBits])\n[PASS] Bad usages: importKey(raw, {name: Ed25519}, false, [verify, deriveBits])\n[PASS] Good parameters: X25519 bits (spki, buffer(44), {name: X25519}, true, [])\n[PASS] Bad usages: importKey(raw, {name: Ed25519}, true, [verify, verify, deriveBits])\n[PASS] Good parameters: X25519 bits (jwk, object(kty, crv, x), {name: X25519}, true, [])\n[PASS] Bad usages: importKey(raw, {name: Ed25519}, false, [verify, verify, deriveBits])\n[PASS] Good parameters with ignored JWK alg: X25519 (jwk, object(kty, crv, x), {name: X25519}, true, [])\n[PASS] Bad usages: importKey(jwk(private), {name: Ed25519}, true, [encrypt])\n[PASS] Bad usages: importKey(jwk(private), {name: Ed25519}, false, [encrypt])\n[PASS] Bad usages: importKey(jwk(private), {name: Ed25519}, true, [sign, encrypt])\n[PASS] Bad usages: importKey(jwk(private), {name: Ed25519}, false, [sign, encrypt])\n[PASS] Bad usages: importKey(jwk(private), {name: Ed25519}, true, [sign, sign, encrypt])\n[PASS] Bad usages: importKey(jwk(private), {name: Ed25519}, false, [sign, sign, encrypt])\n[PASS] Bad usages: importKey(jwk(private), {name: Ed25519}, true, [decrypt])\n[PASS] Bad usages: importKey(jwk(private), {name: Ed25519}, false, [decrypt])\n[PASS] Bad usages: importKey(jwk(private), {name: Ed25519}, true, [sign, decrypt])\n[PASS] Bad usages: importKey(jwk(private), {name: Ed25519}, false, [sign, decrypt])\n[PASS] Bad usages: importKey(jwk(private), {name: Ed25519}, true, [sign, sign, decrypt])\n[PASS] Bad usages: importKey(jwk(private), {name: Ed25519}, false, [sign, sign, decrypt])\n[PASS] Bad usages: importKey(jwk(private), {name: Ed25519}, true, [verify])\n[PASS] Bad usages: importKey(jwk(private), {name: Ed25519}, false, [verify])\n[PASS] Bad usages: importKey(jwk(private), {name: Ed25519}, true, [sign, verify])\n[PASS] Bad usages: importKey(jwk(private), {name: Ed25519}, false, [sign, verify])\n[PASS] Bad usages: importKey(jwk(private), {name: Ed25519}, true, [sign, sign, verify])\n[PASS] Bad usages: importKey(jwk(private), {name: Ed25519}, false, [sign, sign, verify])\n[PASS] Bad usages: importKey(jwk(private), {name: Ed25519}, true, [wrapKey])\n[PASS] Bad usages: importKey(jwk(private), {name: Ed25519}, false, [wrapKey])\n[PASS] Bad usages: importKey(jwk(private), {name: Ed25519}, true, [sign, wrapKey])\n[PASS] Bad usages: importKey(jwk(private), {name: Ed25519}, false, [sign, wrapKey])\n[PASS] Bad usages: importKey(jwk(private), {name: Ed25519}, true, [sign, sign, wrapKey])\n[PASS] Bad usages: importKey(jwk(private), {name: Ed25519}, false, [sign, sign, wrapKey])\n[PASS] Bad usages: importKey(jwk(private), {name: Ed25519}, true, [unwrapKey])\n[PASS] Bad usages: importKey(jwk(private), {name: Ed25519}, false, [unwrapKey])\n[PASS] Bad usages: importKey(jwk(private), {name: Ed25519}, true, [sign, unwrapKey])\n[PASS] Bad usages: importKey(jwk(private), {name: Ed25519}, false, [sign, unwrapKey])\n[PASS] Bad usages: importKey(jwk(private), {name: Ed25519}, true, [sign, sign, unwrapKey])\n[PASS] Bad usages: importKey(jwk(private), {name: Ed25519}, false, [sign, sign, unwrapKey])\n[PASS] Bad usages: importKey(jwk(private), {name: Ed25519}, true, [deriveKey])\n[PASS] Bad usages: importKey(jwk(private), {name: Ed25519}, false, [deriveKey])\n[PASS] Bad usages: importKey(jwk(private), {name: Ed25519}, true, [sign, deriveKey])\n[PASS] Bad usages: importKey(jwk(private), {name: Ed25519}, false, [sign, deriveKey])\n[PASS] Bad usages: importKey(jwk(private), {name: Ed25519}, true, [sign, sign, deriveKey])\n[PASS] Bad usages: importKey(jwk(private), {name: Ed25519}, false, [sign, sign, deriveKey])\n[PASS] Bad usages: importKey(jwk(private), {name: Ed25519}, true, [deriveBits])\n[PASS] Bad usages: importKey(jwk(private), {name: Ed25519}, false, [deriveBits])\n[PASS] Bad usages: importKey(jwk(private), {name: Ed25519}, true, [sign, deriveBits])\n[PASS] Bad usages: importKey(jwk(private), {name: Ed25519}, false, [sign, deriveBits])\n[PASS] Bad usages: importKey(jwk(private), {name: Ed25519}, true, [sign, sign, deriveBits])\n[PASS] Bad usages: importKey(jwk(private), {name: Ed25519}, false, [sign, sign, deriveBits])\n[PASS] Bad usages: importKey(jwk (public) , {name: Ed25519}, true, [encrypt])\n[PASS] Bad usages: importKey(jwk (public) , {name: Ed25519}, false, [encrypt])\n[PASS] Bad usages: importKey(jwk (public) , {name: Ed25519}, true, [verify, encrypt])\n[PASS] Bad usages: importKey(jwk (public) , {name: Ed25519}, false, [verify, encrypt])\n[PASS] Bad usages: importKey(jwk (public) , {name: Ed25519}, true, [verify, verify, encrypt])\n[PASS] Bad usages: importKey(jwk (public) , {name: Ed25519}, false, [verify, verify, encrypt])\n[PASS] Bad usages: importKey(jwk (public) , {name: Ed25519}, true, [decrypt])\n[PASS] Bad usages: importKey(jwk (public) , {name: Ed25519}, false, [decrypt])\n[PASS] Bad usages: importKey(jwk (public) , {name: Ed25519}, true, [verify, decrypt])\n[PASS] Bad usages: importKey(jwk (public) , {name: Ed25519}, false, [verify, decrypt])\n[PASS] Bad usages: importKey(jwk (public) , {name: Ed25519}, true, [verify, verify, decrypt])\n[PASS] Bad usages: importKey(jwk (public) , {name: Ed25519}, false, [verify, verify, decrypt])\n[PASS] Bad usages: importKey(jwk (public) , {name: Ed25519}, true, [sign])\n[PASS] Bad usages: importKey(jwk (public) , {name: Ed25519}, false, [sign])\n[PASS] Bad usages: importKey(jwk (public) , {name: Ed25519}, true, [verify, sign])\n[PASS] Bad usages: importKey(jwk (public) , {name: Ed25519}, false, [verify, sign])\n[PASS] Bad usages: importKey(jwk (public) , {name: Ed25519}, true, [verify, verify, sign])\n[PASS] Bad usages: importKey(jwk (public) , {name: Ed25519}, false, [verify, verify, sign])\n[PASS] Bad usages: importKey(jwk (public) , {name: Ed25519}, true, [wrapKey])\n[PASS] Bad usages: importKey(jwk (public) , {name: Ed25519}, false, [wrapKey])\n[PASS] Bad usages: importKey(jwk (public) , {name: Ed25519}, true, [verify, wrapKey])\n[PASS] Bad usages: importKey(jwk (public) , {name: Ed25519}, false, [verify, wrapKey])\n[PASS] Bad usages: importKey(jwk (public) , {name: Ed25519}, true, [verify, verify, wrapKey])\n[PASS] Bad usages: importKey(jwk (public) , {name: Ed25519}, false, [verify, verify, wrapKey])\n[PASS] Bad usages: importKey(jwk (public) , {name: Ed25519}, true, [unwrapKey])\n[PASS] Bad usages: importKey(jwk (public) , {name: Ed25519}, false, [unwrapKey])\n[PASS] Bad usages: importKey(jwk (public) , {name: Ed25519}, true, [verify, unwrapKey])\n[PASS] Bad usages: importKey(jwk (public) , {name: Ed25519}, false, [verify, unwrapKey])\n[PASS] Bad usages: importKey(jwk (public) , {name: Ed25519}, true, [verify, verify, unwrapKey])\n[PASS] Bad usages: importKey(jwk (public) , {name: Ed25519}, false, [verify, verify, unwrapKey])\n[PASS] Bad usages: importKey(jwk (public) , {name: Ed25519}, true, [deriveKey])\n[PASS] Bad usages: importKey(jwk (public) , {name: Ed25519}, false, [deriveKey])\n[PASS] Bad usages: importKey(jwk (public) , {name: Ed25519}, true, [verify, deriveKey])\n[PASS] Bad usages: importKey(jwk (public) , {name: Ed25519}, false, [verify, deriveKey])\n[PASS] Bad usages: importKey(jwk (public) , {name: Ed25519}, true, [verify, verify, deriveKey])\n[PASS] Bad usages: importKey(jwk (public) , {name: Ed25519}, false, [verify, verify, deriveKey])\n[PASS] Bad usages: importKey(jwk (public) , {name: Ed25519}, true, [deriveBits])\n[PASS] Bad usages: importKey(jwk (public) , {name: Ed25519}, false, [deriveBits])\n[PASS] Bad usages: importKey(jwk (public) , {name: Ed25519}, true, [verify, deriveBits])\n[PASS] Bad usages: importKey(jwk (public) , {name: Ed25519}, false, [verify, deriveBits])\n[PASS] Good parameters: X25519 bits (raw, buffer(32), {name: X25519}, true, [])\n[PASS] Good parameters: X25519 bits (pkcs8, buffer(48), {name: X25519}, true, [deriveKey])\n[PASS] Good parameters: X25519 bits (jwk, object(crv, d, x, kty), {name: X25519}, true, [deriveKey])\n[PASS] Good parameters with ignored JWK alg: X25519 (jwk, object(crv, d, x, kty), {name: X25519}, true, [deriveKey])\n[PASS] Good parameters: X25519 bits (pkcs8, buffer(48), {name: X25519}, true, [deriveBits, deriveKey])\n[PASS] Good parameters: X25519 bits (jwk, object(crv, d, x, kty), {name: X25519}, true, [deriveBits, deriveKey])\n[PASS] Good parameters with ignored JWK alg: X25519 (jwk, object(crv, d, x, kty), {name: X25519}, true, [deriveBits, deriveKey])\n[PASS] Good parameters: X25519 bits (pkcs8, buffer(48), {name: X25519}, true, [deriveBits])\n[PASS] Good parameters: X25519 bits (jwk, object(crv, d, x, kty), {name: X25519}, true, [deriveBits])\n[PASS] Good parameters with ignored JWK alg: X25519 (jwk, object(crv, d, x, kty), {name: X25519}, true, [deriveBits])\n[PASS] Good parameters: X25519 bits (pkcs8, buffer(48), {name: X25519}, true, [deriveKey, deriveBits, deriveKey, deriveBits])\n[PASS] Good parameters: X25519 bits (jwk, object(crv, d, x, kty), {name: X25519}, true, [deriveKey, deriveBits, deriveKey, deriveBits])\n[PASS] Good parameters with ignored JWK alg: X25519 (jwk, object(crv, d, x, kty), {name: X25519}, true, [deriveKey, deriveBits, deriveKey, deriveBits])\n[PASS] Good parameters: X25519 bits (spki, buffer(44), {name: X25519}, false, [])\n[PASS] Good parameters: X25519 bits (jwk, object(kty, crv, x), {name: X25519}, false, [])\n[PASS] Good parameters: X25519 bits (raw, buffer(32), {name: X25519}, false, [])\n[PASS] Good parameters: X25519 bits (pkcs8, buffer(48), {name: X25519}, false, [deriveKey])\n[PASS] Good parameters: X25519 bits (jwk, object(crv, d, x, kty), {name: X25519}, false, [deriveKey])\n[PASS] Bad usages: importKey(jwk (public) , {name: Ed25519}, true, [verify, verify, deriveBits])\n[PASS] Bad usages: importKey(jwk (public) , {name: Ed25519}, false, [verify, verify, deriveBits])\n[PASS] Good parameters: P-384 bits (pkcs8, buffer(185), {name: ECDSA, namedCurve: P-384}, true, [sign, sign])\n[PASS] Empty Usages: P-384 bits (pkcs8, buffer(185), {name: ECDSA, namedCurve: P-384}, true, [])\n[PASS] Good parameters: P-384 bits (jwk, object(kty, crv, x, y, d), {name: ECDSA, namedCurve: P-384}, true, [sign])\n[PASS] Good parameters: X25519 bits (pkcs8, buffer(48), {name: X25519}, false, [deriveBits, deriveKey])\n[PASS] Good parameters: X25519 bits (jwk, object(crv, d, x, kty), {name: X25519}, false, [deriveBits, deriveKey])\n[PASS] Empty usages: importKey(pkcs8, {name: Ed25519}, true, [])\n[PASS] Good parameters: X25519 bits (pkcs8, buffer(48), {name: X25519}, false, [deriveBits])\n[PASS] Good parameters: X25519 bits (jwk, object(crv, d, x, kty), {name: X25519}, false, [deriveBits])\n[PASS] Empty usages: importKey(pkcs8, {name: Ed25519}, false, [])\n[PASS] Good parameters: X25519 bits (pkcs8, buffer(48), {name: X25519}, false, [deriveKey, deriveBits, deriveKey, deriveBits])\n[PASS] Good parameters: P-384 bits (jwk, object(kty, crv, x, y, d), {name: ECDSA, namedCurve: P-384}, true, [sign, sign])\n[PASS] Good parameters: X25519 bits (jwk, object(crv, d, x, kty), {name: X25519}, false, [deriveKey, deriveBits, deriveKey, deriveBits])\n[PASS] Empty usages: importKey(jwk(private), {name: Ed25519}, true, [])\n[PASS] Good parameters: X448 bits (spki, buffer(68), {name: X448}, true, [])\n[PASS] Good parameters: X448 bits (jwk, object(kty, crv, x), {name: X448}, true, [])\n[PASS] Empty usages: importKey(jwk(private), {name: Ed25519}, false, [])\n[PASS] Good parameters with ignored JWK alg: X448 (jwk, object(kty, crv, x), {name: X448}, true, [])\n[PASS] Bad key length: importKey(spki, {name: Ed25519}, true, [verify])\n[PASS] Good parameters: X448 bits (raw, buffer(56), {name: X448}, true, [])\n[PASS] Bad key length: importKey(spki, {name: Ed25519}, false, [verify])\n[PASS] Bad key length: importKey(spki, {name: Ed25519}, true, [verify, verify])\n[PASS] Bad key length: importKey(spki, {name: Ed25519}, false, [verify, verify])\n[PASS] Bad key length: importKey(pkcs8, {name: Ed25519}, true, [sign])\n[PASS] Bad key length: importKey(pkcs8, {name: Ed25519}, false, [sign])\n[PASS] Bad key length: importKey(pkcs8, {name: Ed25519}, true, [sign, sign])\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: Rsassa-pkcs1-v1_5, publicExponent: {0: 1, 1: 0, 2: 1}}, false, [sign, verify, sign, sign, verify])\n[PASS] Bad key length: importKey(pkcs8, {name: Ed25519}, false, [sign, sign])\n[PASS] Empty Usages: P-384 bits (jwk, object(kty, crv, x, y, d), {name: ECDSA, namedCurve: P-384}, true, [])\n[PASS] Bad key length: importKey(raw, {name: Ed25519}, true, [verify])\n[PASS] Bad key length: importKey(raw, {name: Ed25519}, false, [verify])\n[PASS] Bad key length: importKey(raw, {name: Ed25519}, true, [verify, verify])\n[PASS] Good parameters: X448 bits (pkcs8, buffer(72), {name: X448}, true, [deriveKey])\n[PASS] Bad key length: importKey(raw, {name: Ed25519}, false, [verify, verify])\n[PASS] Bad key length: importKey(jwk(private), {name: Ed25519}, true, [sign])\n[PASS] Good parameters: P-384 bits (spki, buffer(120), {name: ECDSA, namedCurve: P-384}, false, [verify])\n[PASS] Bad key length: importKey(jwk(private), {name: Ed25519}, false, [sign])\n[PASS] Bad key length: importKey(jwk(private), {name: Ed25519}, true, [sign, sign])\n[PASS] Good parameters: X448 bits (jwk, object(crv, d, x, kty), {name: X448}, true, [deriveKey])\n[PASS] Bad key length: importKey(jwk(private), {name: Ed25519}, false, [sign, sign])\n[PASS] Good parameters: P-384 bits (spki, buffer(72, compressed), {name: ECDSA, namedCurve: P-384}, false, [verify])\n[PASS] Bad key length: importKey(jwk (public) , {name: Ed25519}, true, [verify])\n[PASS] Bad key length: importKey(jwk (public) , {name: Ed25519}, false, [verify])\n[PASS] Bad key length: importKey(jwk (public) , {name: Ed25519}, true, [verify, verify])\n[PASS] Bad key length: importKey(jwk (public) , {name: Ed25519}, false, [verify, verify])\n[PASS] Missing JWK 'x' parameter: importKey(jwk(private), {name: Ed25519}, true, [sign])\n[PASS] Missing JWK 'x' parameter: importKey(jwk(private), {name: Ed25519}, false, [sign])\n[PASS] Missing JWK 'x' parameter: importKey(jwk(private), {name: Ed25519}, true, [sign, sign])\n[PASS] Missing JWK 'x' parameter: importKey(jwk(private), {name: Ed25519}, false, [sign, sign])\n[PASS] Missing JWK 'kty' parameter: importKey(jwk(private), {name: Ed25519}, true, [sign])\n[PASS] Missing JWK 'kty' parameter: importKey(jwk(private), {name: Ed25519}, false, [sign])\n[PASS] Good parameters with ignored JWK alg: X448 (jwk, object(crv, d, x, kty), {name: X448}, true, [deriveKey])\n[PASS] Good parameters: P-384 bits (jwk, object(kty, crv, x, y), {name: ECDSA, namedCurve: P-384}, false, [verify])\n[PASS] Good parameters: P-384 bits (raw, buffer(97), {name: ECDSA, namedCurve: P-384}, false, [verify])\n[PASS] Missing JWK 'kty' parameter: importKey(jwk(private), {name: Ed25519}, true, [sign, sign])\n[PASS] Missing JWK 'kty' parameter: importKey(jwk(private), {name: Ed25519}, false, [sign, sign])\n[PASS] Missing JWK 'crv' parameter: importKey(jwk (public) , {name: Ed25519}, true, [verify])\n[PASS] Missing JWK 'crv' parameter: importKey(jwk (public) , {name: Ed25519}, false, [verify])\n[PASS] Missing JWK 'crv' parameter: importKey(jwk (public) , {name: Ed25519}, true, [verify, verify])\n[PASS] Missing JWK 'crv' parameter: importKey(jwk (public) , {name: Ed25519}, false, [verify, verify])\n[PASS] Invalid key pair: importKey(jwk(private), {name: Ed25519}, true, [sign])\n[PASS] Invalid key pair: importKey(jwk(private), {name: Ed25519}, true, [sign, sign])\n[PASS] Good parameters: P-384 bits (raw, buffer(49, compressed), {name: ECDSA, namedCurve: P-384}, false, [verify])\n[PASS] Good parameters: X448 bits (pkcs8, buffer(72), {name: X448}, true, [deriveBits, deriveKey])\n[PASS] Good parameters: P-384 bits (spki, buffer(120), {name: ECDSA, namedCurve: P-384}, false, [])\n[PASS] Good parameters: P-384 bits (spki, buffer(72, compressed), {name: ECDSA, namedCurve: P-384}, false, [])\n[PASS] Good parameters: X448 bits (jwk, object(crv, d, x, kty), {name: X448}, true, [deriveBits, deriveKey])\n[PASS] Good parameters with ignored JWK alg: X448 (jwk, object(crv, d, x, kty), {name: X448}, true, [deriveBits, deriveKey])\n[PASS] Good parameters: P-384 bits (jwk, object(kty, crv, x, y), {name: ECDSA, namedCurve: P-384}, false, [])\n[PASS] Good parameters: P-384 bits (raw, buffer(97), {name: ECDSA, namedCurve: P-384}, false, [])\n[PASS] Good parameters: P-384 bits (raw, buffer(49, compressed), {name: ECDSA, namedCurve: P-384}, false, [])\n[PASS] Good parameters: P-384 bits (spki, buffer(120), {name: ECDSA, namedCurve: P-384}, false, [verify, verify])\n[PASS] Good parameters: P-384 bits (spki, buffer(72, compressed), {name: ECDSA, namedCurve: P-384}, false, [verify, verify])\n[PASS] Good parameters: P-384 bits (jwk, object(kty, crv, x, y), {name: ECDSA, namedCurve: P-384}, false, [verify, verify])\n[PASS] Good parameters: P-384 bits (raw, buffer(97), {name: ECDSA, namedCurve: P-384}, false, [verify, verify])\n[PASS] Good parameters: P-384 bits (raw, buffer(49, compressed), {name: ECDSA, namedCurve: P-384}, false, [verify, verify])\n[PASS] Good parameters: X448 bits (pkcs8, buffer(72), {name: X448}, true, [deriveBits])\n[PASS] Good parameters: X448 bits (jwk, object(crv, d, x, kty), {name: X448}, true, [deriveBits])\n[PASS] Good parameters with ignored JWK alg: X448 (jwk, object(crv, d, x, kty), {name: X448}, true, [deriveBits])\n[PASS] Good parameters: X448 bits (pkcs8, buffer(72), {name: X448}, true, [deriveKey, deriveBits, deriveKey, deriveBits])\n[PASS] Good parameters: X448 bits (jwk, object(crv, d, x, kty), {name: X448}, true, [deriveKey, deriveBits, deriveKey, deriveBits])\n[PASS] Good parameters with ignored JWK alg: X448 (jwk, object(crv, d, x, kty), {name: X448}, true, [deriveKey, deriveBits, deriveKey, deriveBits])\n[PASS] Good parameters: X448 bits (spki, buffer(68), {name: X448}, false, [])\n[PASS] Good parameters: P-384 bits (pkcs8, buffer(185), {name: ECDSA, namedCurve: P-384}, false, [sign])\n[PASS] Good parameters: X448 bits (jwk, object(kty, crv, x), {name: X448}, false, [])\n[PASS] Good parameters: X448 bits (raw, buffer(56), {name: X448}, false, [])\n[PASS] Good parameters: X448 bits (pkcs8, buffer(72), {name: X448}, false, [deriveKey])\n[PASS] Good parameters: P-384 bits (pkcs8, buffer(185), {name: ECDSA, namedCurve: P-384}, false, [sign, sign])\n[PASS] Good parameters: X448 bits (jwk, object(crv, d, x, kty), {name: X448}, false, [deriveKey])\n[PASS] Good parameters: X448 bits (pkcs8, buffer(72), {name: X448}, false, [deriveBits, deriveKey])\n[PASS] Empty Usages: P-384 bits (pkcs8, buffer(185), {name: ECDSA, namedCurve: P-384}, false, [])\n[PASS] Good parameters: X448 bits (jwk, object(crv, d, x, kty), {name: X448}, false, [deriveBits, deriveKey])\n[PASS] Good parameters: X448 bits (pkcs8, buffer(72), {name: X448}, false, [deriveBits])\n[PASS] Good parameters: X448 bits (jwk, object(crv, d, x, kty), {name: X448}, false, [deriveBits])\n[PASS] Good parameters: P-384 bits (jwk, object(kty, crv, x, y, d), {name: ECDSA, namedCurve: P-384}, false, [sign])\n[PASS] Good parameters: X448 bits (pkcs8, buffer(72), {name: X448}, false, [deriveKey, deriveBits, deriveKey, deriveBits])\n[PASS] Good parameters: X448 bits (jwk, object(crv, d, x, kty), {name: X448}, false, [deriveKey, deriveBits, deriveKey, deriveBits])\n[PASS] Good parameters: P-384 bits (jwk, object(kty, crv, x, y, d), {name: ECDSA, namedCurve: P-384}, false, [sign, sign])\n[PASS] Empty Usages: P-384 bits (jwk, object(kty, crv, x, y, d), {name: ECDSA, namedCurve: P-384}, false, [])\n[PASS] Good parameters: P-521 bits (spki, buffer(158), {name: ECDSA, namedCurve: P-521}, true, [verify])\n[PASS] Good parameters: P-521 bits (spki, buffer(90, compressed), {name: ECDSA, namedCurve: P-521}, true, [verify])\n[PASS] Good parameters: P-521 bits (jwk, object(kty, crv, x, y), {name: ECDSA, namedCurve: P-521}, true, [verify])\n[PASS] Good parameters: P-521 bits (raw, buffer(133), {name: ECDSA, namedCurve: P-521}, true, [verify])\n[PASS] Good parameters: P-521 bits (raw, buffer(67, compressed), {name: ECDSA, namedCurve: P-521}, true, [verify])\n[PASS] Good parameters: P-521 bits (spki, buffer(158), {name: ECDSA, namedCurve: P-521}, true, [])\n[PASS] Good parameters: P-521 bits (spki, buffer(90, compressed), {name: ECDSA, namedCurve: P-521}, true, [])\n[PASS] Good parameters: P-521 bits (jwk, object(kty, crv, x, y), {name: ECDSA, namedCurve: P-521}, true, [])\n[PASS] Good parameters: P-521 bits (raw, buffer(133), {name: ECDSA, namedCurve: P-521}, true, [])\n[PASS] Good parameters: P-521 bits (raw, buffer(67, compressed), {name: ECDSA, namedCurve: P-521}, true, [])\n[PASS] Good parameters: P-521 bits (spki, buffer(158), {name: ECDSA, namedCurve: P-521}, true, [verify, verify])\n[PASS] Good parameters: P-521 bits (spki, buffer(90, compressed), {name: ECDSA, namedCurve: P-521}, true, [verify, verify])\n[PASS] Good parameters: P-521 bits (jwk, object(kty, crv, x, y), {name: ECDSA, namedCurve: P-521}, true, [verify, verify])\n[PASS] Good parameters: P-521 bits (raw, buffer(133), {name: ECDSA, namedCurve: P-521}, true, [verify, verify])\n[PASS] Good parameters: P-521 bits (raw, buffer(67, compressed), {name: ECDSA, namedCurve: P-521}, true, [verify, verify])\n[PASS] Good parameters: P-521 bits (pkcs8, buffer(241), {name: ECDSA, namedCurve: P-521}, true, [sign])\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, empty salt, SHA-384, with 100000 iterations\n[PASS] Bad usages: importKey(spki, {name: Ed448}, true, [encrypt])\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, empty salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, empty salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Bad usages: importKey(spki, {name: Ed448}, false, [encrypt])\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, empty salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] Bad usages: importKey(spki, {name: Ed448}, true, [verify, encrypt])\n[PASS] Bad usages: importKey(spki, {name: Ed448}, false, [verify, encrypt])\n[PASS] Bad usages: importKey(spki, {name: Ed448}, true, [verify, verify, encrypt])\n[PASS] Bad usages: importKey(spki, {name: Ed448}, false, [verify, verify, encrypt])\n[PASS] Bad usages: importKey(spki, {name: Ed448}, true, [decrypt])\n[PASS] Bad usages: importKey(spki, {name: Ed448}, false, [decrypt])\n[PASS] Bad usages: importKey(spki, {name: Ed448}, true, [verify, decrypt])\n[PASS] Bad usages: importKey(spki, {name: Ed448}, false, [verify, decrypt])\n[PASS] Bad usages: importKey(spki, {name: Ed448}, true, [verify, verify, decrypt])\n[PASS] Bad usages: importKey(spki, {name: Ed448}, false, [verify, verify, decrypt])\n[PASS] Bad usages: importKey(spki, {name: Ed448}, true, [sign])\n[PASS] Good parameters: P-521 bits (pkcs8, buffer(241), {name: ECDSA, namedCurve: P-521}, true, [sign, sign])\n[PASS] Bad usages: importKey(spki, {name: Ed448}, false, [sign])\n[PASS] Bad usages: importKey(spki, {name: Ed448}, true, [verify, sign])\n[PASS] Bad usages: importKey(spki, {name: Ed448}, false, [verify, sign])\n[PASS] Bad usages: importKey(spki, {name: Ed448}, true, [verify, verify, sign])\n[PASS] Bad usages: importKey(spki, {name: Ed448}, false, [verify, verify, sign])\n[PASS] Bad usages: importKey(spki, {name: Ed448}, true, [wrapKey])\n[PASS] Bad usages: importKey(spki, {name: Ed448}, false, [wrapKey])\n[PASS] Bad usages: importKey(spki, {name: Ed448}, true, [verify, wrapKey])\n[PASS] Bad usages: importKey(spki, {name: Ed448}, false, [verify, wrapKey])\n[PASS] Bad usages: importKey(spki, {name: Ed448}, true, [verify, verify, wrapKey])\n[PASS] Bad usages: importKey(spki, {name: Ed448}, false, [verify, verify, wrapKey])\n[PASS] Bad usages: importKey(spki, {name: Ed448}, true, [unwrapKey])\n[PASS] Bad usages: importKey(spki, {name: Ed448}, false, [unwrapKey])\n[PASS] Bad usages: importKey(spki, {name: Ed448}, true, [verify, unwrapKey])\n[PASS] Bad usages: importKey(spki, {name: Ed448}, false, [verify, unwrapKey])\n[PASS] Bad usages: importKey(spki, {name: Ed448}, true, [verify, verify, unwrapKey])\n[PASS] Bad usages: importKey(spki, {name: Ed448}, false, [verify, verify, unwrapKey])\n[PASS] Bad usages: importKey(spki, {name: Ed448}, true, [deriveKey])\n[PASS] Bad usages: importKey(spki, {name: Ed448}, false, [deriveKey])\n[PASS] Bad usages: importKey(spki, {name: Ed448}, true, [verify, deriveKey])\n[PASS] Bad usages: importKey(spki, {name: Ed448}, false, [verify, deriveKey])\n[PASS] Bad usages: importKey(spki, {name: Ed448}, true, [verify, verify, deriveKey])\n[PASS] Bad usages: importKey(spki, {name: Ed448}, false, [verify, verify, deriveKey])\n[PASS] Bad usages: importKey(spki, {name: Ed448}, true, [deriveBits])\n[PASS] Bad usages: importKey(spki, {name: Ed448}, false, [deriveBits])\n[PASS] Bad usages: importKey(spki, {name: Ed448}, true, [verify, deriveBits])\n[PASS] Bad usages: importKey(spki, {name: Ed448}, false, [verify, deriveBits])\n[PASS] Bad usages: importKey(spki, {name: Ed448}, true, [verify, verify, deriveBits])\n[PASS] Empty Usages: P-521 bits (pkcs8, buffer(241), {name: ECDSA, namedCurve: P-521}, true, [])\n[PASS] Bad usages: importKey(spki, {name: Ed448}, false, [verify, verify, deriveBits])\n[PASS] Bad usages: importKey(pkcs8, {name: Ed448}, true, [encrypt])\n[PASS] Bad usages: importKey(pkcs8, {name: Ed448}, false, [encrypt])\n[PASS] Bad usages: importKey(pkcs8, {name: Ed448}, true, [sign, encrypt])\n[PASS] Bad usages: importKey(pkcs8, {name: Ed448}, false, [sign, encrypt])\n[PASS] Bad usages: importKey(pkcs8, {name: Ed448}, true, [sign, sign, encrypt])\n[PASS] Bad usages: importKey(pkcs8, {name: Ed448}, false, [sign, sign, encrypt])\n[PASS] Bad usages: importKey(pkcs8, {name: Ed448}, true, [decrypt])\n[PASS] Bad usages: importKey(pkcs8, {name: Ed448}, false, [decrypt])\n[PASS] Bad usages: importKey(pkcs8, {name: Ed448}, true, [sign, decrypt])\n[PASS] Bad usages: importKey(pkcs8, {name: Ed448}, false, [sign, decrypt])\n[PASS] Bad usages: importKey(pkcs8, {name: Ed448}, true, [sign, sign, decrypt])\n[PASS] Bad usages: importKey(pkcs8, {name: Ed448}, false, [sign, sign, decrypt])\n[PASS] Bad usages: importKey(pkcs8, {name: Ed448}, true, [verify])\n[PASS] Bad usages: importKey(pkcs8, {name: Ed448}, false, [verify])\n[PASS] Bad usages: importKey(pkcs8, {name: Ed448}, true, [sign, verify])\n[PASS] Bad usages: importKey(pkcs8, {name: Ed448}, false, [sign, verify])\n[PASS] Bad usages: importKey(pkcs8, {name: Ed448}, true, [sign, sign, verify])\n[PASS] Bad usages: importKey(pkcs8, {name: Ed448}, false, [sign, sign, verify])\n[PASS] Bad usages: importKey(pkcs8, {name: Ed448}, true, [wrapKey])\n[PASS] Bad usages: importKey(pkcs8, {name: Ed448}, false, [wrapKey])\n[PASS] Bad usages: importKey(pkcs8, {name: Ed448}, true, [sign, wrapKey])\n[PASS] Bad usages: importKey(pkcs8, {name: Ed448}, false, [sign, wrapKey])\n[PASS] Bad usages: importKey(pkcs8, {name: Ed448}, true, [sign, sign, wrapKey])\n[PASS] Bad usages: importKey(pkcs8, {name: Ed448}, false, [sign, sign, wrapKey])\n[PASS] Bad usages: importKey(pkcs8, {name: Ed448}, true, [unwrapKey])\n[PASS] Bad usages: importKey(pkcs8, {name: Ed448}, false, [unwrapKey])\n[PASS] Bad usages: importKey(pkcs8, {name: Ed448}, true, [sign, unwrapKey])\n[PASS] Bad usages: importKey(pkcs8, {name: Ed448}, false, [sign, unwrapKey])\n[PASS] Bad usages: importKey(pkcs8, {name: Ed448}, true, [sign, sign, unwrapKey])\n[PASS] Bad usages: importKey(pkcs8, {name: Ed448}, false, [sign, sign, unwrapKey])\n[PASS] Bad usages: importKey(pkcs8, {name: Ed448}, true, [deriveKey])\n[PASS] Bad usages: importKey(pkcs8, {name: Ed448}, false, [deriveKey])\n[PASS] Bad usages: importKey(pkcs8, {name: Ed448}, true, [sign, deriveKey])\n[PASS] Bad usages: importKey(pkcs8, {name: Ed448}, false, [sign, deriveKey])\n[PASS] Bad usages: importKey(pkcs8, {name: Ed448}, true, [sign, sign, deriveKey])\n[PASS] Bad usages: importKey(pkcs8, {name: Ed448}, false, [sign, sign, deriveKey])\n[PASS] Bad usages: importKey(pkcs8, {name: Ed448}, true, [deriveBits])\n[PASS] Bad usages: importKey(pkcs8, {name: Ed448}, false, [deriveBits])\n[PASS] Bad usages: importKey(pkcs8, {name: Ed448}, true, [sign, deriveBits])\n[PASS] Bad usages: importKey(pkcs8, {name: Ed448}, false, [sign, deriveBits])\n[PASS] Bad usages: importKey(pkcs8, {name: Ed448}, true, [sign, sign, deriveBits])\n[PASS] Bad usages: importKey(pkcs8, {name: Ed448}, false, [sign, sign, deriveBits])\n[PASS] Bad usages: importKey(raw, {name: Ed448}, true, [encrypt])\n[PASS] Bad usages: importKey(raw, {name: Ed448}, false, [encrypt])\n[PASS] Bad usages: importKey(raw, {name: Ed448}, true, [verify, encrypt])\n[PASS] Bad usages: importKey(raw, {name: Ed448}, false, [verify, encrypt])\n[PASS] Bad usages: importKey(raw, {name: Ed448}, true, [verify, verify, encrypt])\n[PASS] Bad usages: importKey(raw, {name: Ed448}, false, [verify, verify, encrypt])\n[PASS] Bad usages: importKey(raw, {name: Ed448}, true, [decrypt])\n[PASS] Bad usages: importKey(raw, {name: Ed448}, false, [decrypt])\n[PASS] Bad usages: importKey(raw, {name: Ed448}, true, [verify, decrypt])\n[PASS] Good parameters: P-521 bits (jwk, object(kty, crv, x, y, d), {name: ECDSA, namedCurve: P-521}, true, [sign])\n[PASS] Bad usages: importKey(raw, {name: Ed448}, false, [verify, decrypt])\n[PASS] Bad usages: importKey(raw, {name: Ed448}, true, [verify, verify, decrypt])\n[PASS] Bad usages: importKey(raw, {name: Ed448}, false, [verify, verify, decrypt])\n[PASS] Bad usages: importKey(raw, {name: Ed448}, true, [sign])\n[PASS] Bad usages: importKey(raw, {name: Ed448}, false, [sign])\n[PASS] Bad usages: importKey(raw, {name: Ed448}, true, [verify, sign])\n[PASS] Bad usages: importKey(raw, {name: Ed448}, false, [verify, sign])\n[PASS] Bad usages: importKey(raw, {name: Ed448}, true, [verify, verify, sign])\n[PASS] Bad usages: importKey(raw, {name: Ed448}, false, [verify, verify, sign])\n[PASS] Bad usages: importKey(raw, {name: Ed448}, true, [wrapKey])\n[PASS] Bad usages: importKey(raw, {name: Ed448}, false, [wrapKey])\n[PASS] Bad usages: importKey(raw, {name: Ed448}, true, [verify, wrapKey])\n[PASS] Bad usages: importKey(raw, {name: Ed448}, false, [verify, wrapKey])\n[PASS] Bad usages: importKey(raw, {name: Ed448}, true, [verify, verify, wrapKey])\n[PASS] Bad usages: importKey(raw, {name: Ed448}, false, [verify, verify, wrapKey])\n[PASS] Bad usages: importKey(raw, {name: Ed448}, true, [unwrapKey])\n[PASS] Bad usages: importKey(raw, {name: Ed448}, false, [unwrapKey])\n[PASS] Bad usages: importKey(raw, {name: Ed448}, true, [verify, unwrapKey])\n[PASS] Bad usages: importKey(raw, {name: Ed448}, false, [verify, unwrapKey])\n[PASS] Bad usages: importKey(raw, {name: Ed448}, true, [verify, verify, unwrapKey])\n[PASS] Bad usages: importKey(raw, {name: Ed448}, false, [verify, verify, unwrapKey])\n[PASS] Bad usages: importKey(raw, {name: Ed448}, true, [deriveKey])\n[PASS] Bad usages: importKey(raw, {name: Ed448}, false, [deriveKey])\n[PASS] Bad usages: importKey(raw, {name: Ed448}, true, [verify, deriveKey])\n[PASS] Bad usages: importKey(raw, {name: Ed448}, false, [verify, deriveKey])\n[PASS] Bad usages: importKey(raw, {name: Ed448}, true, [verify, verify, deriveKey])\n[PASS] Bad usages: importKey(raw, {name: Ed448}, false, [verify, verify, deriveKey])\n[PASS] Bad usages: importKey(raw, {name: Ed448}, true, [deriveBits])\n[PASS] Bad usages: importKey(raw, {name: Ed448}, false, [deriveBits])\n[PASS] Bad usages: importKey(raw, {name: Ed448}, true, [verify, deriveBits])\n[PASS] Bad usages: importKey(raw, {name: Ed448}, false, [verify, deriveBits])\n[PASS] Bad usages: importKey(raw, {name: Ed448}, true, [verify, verify, deriveBits])\n[PASS] Bad usages: importKey(raw, {name: Ed448}, false, [verify, verify, deriveBits])\n[PASS] Bad usages: importKey(jwk(private), {name: Ed448}, true, [encrypt])\n[PASS] Bad usages: importKey(jwk(private), {name: Ed448}, false, [encrypt])\n[PASS] Bad usages: importKey(jwk(private), {name: Ed448}, true, [sign, encrypt])\n[PASS] Bad usages: importKey(jwk(private), {name: Ed448}, false, [sign, encrypt])\n[PASS] Bad usages: importKey(jwk(private), {name: Ed448}, true, [sign, sign, encrypt])\n[PASS] Bad usages: importKey(jwk(private), {name: Ed448}, false, [sign, sign, encrypt])\n[PASS] Bad usages: importKey(jwk(private), {name: Ed448}, true, [decrypt])\n[PASS] Bad usages: importKey(jwk(private), {name: Ed448}, false, [decrypt])\n[PASS] Bad usages: importKey(jwk(private), {name: Ed448}, true, [sign, decrypt])\n[PASS] Bad usages: importKey(jwk(private), {name: Ed448}, false, [sign, decrypt])\n[PASS] Bad usages: importKey(jwk(private), {name: Ed448}, true, [sign, sign, decrypt])\n[PASS] Bad usages: importKey(jwk(private), {name: Ed448}, false, [sign, sign, decrypt])\n[PASS] Bad usages: importKey(jwk(private), {name: Ed448}, true, [verify])\n[PASS] Bad usages: importKey(jwk(private), {name: Ed448}, false, [verify])\n[PASS] Good parameters: P-521 bits (jwk, object(kty, crv, x, y, d), {name: ECDSA, namedCurve: P-521}, true, [sign, sign])\n[PASS] Bad usages: importKey(jwk(private), {name: Ed448}, true, [sign, verify])\n[PASS] Bad usages: importKey(jwk(private), {name: Ed448}, false, [sign, verify])\n[PASS] Bad usages: importKey(jwk(private), {name: Ed448}, true, [sign, sign, verify])\n[PASS] Bad usages: importKey(jwk(private), {name: Ed448}, false, [sign, sign, verify])\n[PASS] Bad usages: importKey(jwk(private), {name: Ed448}, true, [wrapKey])\n[PASS] Bad usages: importKey(jwk(private), {name: Ed448}, false, [wrapKey])\n[PASS] Bad usages: importKey(jwk(private), {name: Ed448}, true, [sign, wrapKey])\n[PASS] Bad usages: importKey(jwk(private), {name: Ed448}, false, [sign, wrapKey])\n[PASS] Bad usages: importKey(jwk(private), {name: Ed448}, true, [sign, sign, wrapKey])\n[PASS] Bad usages: importKey(jwk(private), {name: Ed448}, false, [sign, sign, wrapKey])\n[PASS] Bad usages: importKey(jwk(private), {name: Ed448}, true, [unwrapKey])\n[PASS] Bad usages: importKey(jwk(private), {name: Ed448}, false, [unwrapKey])\n[PASS] Bad usages: importKey(jwk(private), {name: Ed448}, true, [sign, unwrapKey])\n[PASS] Bad usages: importKey(jwk(private), {name: Ed448}, false, [sign, unwrapKey])\n[PASS] Bad usages: importKey(jwk(private), {name: Ed448}, true, [sign, sign, unwrapKey])\n[PASS] Bad usages: importKey(jwk(private), {name: Ed448}, false, [sign, sign, unwrapKey])\n[PASS] Bad usages: importKey(jwk(private), {name: Ed448}, true, [deriveKey])\n[PASS] Bad usages: importKey(jwk(private), {name: Ed448}, false, [deriveKey])\n[PASS] Bad usages: importKey(jwk(private), {name: Ed448}, true, [sign, deriveKey])\n[PASS] Bad usages: importKey(jwk(private), {name: Ed448}, false, [sign, deriveKey])\n[PASS] Bad usages: importKey(jwk(private), {name: Ed448}, true, [sign, sign, deriveKey])\n[PASS] Bad usages: importKey(jwk(private), {name: Ed448}, false, [sign, sign, deriveKey])\n[PASS] Bad usages: importKey(jwk(private), {name: Ed448}, true, [deriveBits])\n[PASS] Bad usages: importKey(jwk(private), {name: Ed448}, false, [deriveBits])\n[PASS] Bad usages: importKey(jwk(private), {name: Ed448}, true, [sign, deriveBits])\n[PASS] Bad usages: importKey(jwk(private), {name: Ed448}, false, [sign, deriveBits])\n[PASS] Bad usages: importKey(jwk(private), {name: Ed448}, true, [sign, sign, deriveBits])\n[PASS] Bad usages: importKey(jwk(private), {name: Ed448}, false, [sign, sign, deriveBits])\n[PASS] Bad usages: importKey(jwk (public) , {name: Ed448}, true, [encrypt])\n[PASS] Bad usages: importKey(jwk (public) , {name: Ed448}, false, [encrypt])\n[PASS] Bad usages: importKey(jwk (public) , {name: Ed448}, true, [verify, encrypt])\n[PASS] Bad usages: importKey(jwk (public) , {name: Ed448}, false, [verify, encrypt])\n[PASS] Bad usages: importKey(jwk (public) , {name: Ed448}, true, [verify, verify, encrypt])\n[PASS] Bad usages: importKey(jwk (public) , {name: Ed448}, false, [verify, verify, encrypt])\n[PASS] Bad usages: importKey(jwk (public) , {name: Ed448}, true, [decrypt])\n[PASS] Bad usages: importKey(jwk (public) , {name: Ed448}, false, [decrypt])\n[PASS] Bad usages: importKey(jwk (public) , {name: Ed448}, true, [verify, decrypt])\n[PASS] Bad usages: importKey(jwk (public) , {name: Ed448}, false, [verify, decrypt])\n[PASS] Bad usages: importKey(jwk (public) , {name: Ed448}, true, [verify, verify, decrypt])\n[PASS] Bad usages: importKey(jwk (public) , {name: Ed448}, false, [verify, verify, decrypt])\n[PASS] Bad usages: importKey(jwk (public) , {name: Ed448}, true, [sign])\n[PASS] Bad usages: importKey(jwk (public) , {name: Ed448}, false, [sign])\n[PASS] Bad usages: importKey(jwk (public) , {name: Ed448}, true, [verify, sign])\n[PASS] Bad usages: importKey(jwk (public) , {name: Ed448}, false, [verify, sign])\n[PASS] Empty Usages: P-521 bits (jwk, object(kty, crv, x, y, d), {name: ECDSA, namedCurve: P-521}, true, [])\n[PASS] Bad usages: importKey(jwk (public) , {name: Ed448}, true, [verify, verify, sign])\n[PASS] Bad usages: importKey(jwk (public) , {name: Ed448}, false, [verify, verify, sign])\n[PASS] Bad usages: importKey(jwk (public) , {name: Ed448}, true, [wrapKey])\n[PASS] Bad usages: importKey(jwk (public) , {name: Ed448}, false, [wrapKey])\n[PASS] Bad usages: importKey(jwk (public) , {name: Ed448}, true, [verify, wrapKey])\n[PASS] Good parameters: P-521 bits (spki, buffer(158), {name: ECDSA, namedCurve: P-521}, false, [verify])\n[PASS] Good parameters: P-521 bits (spki, buffer(90, compressed), {name: ECDSA, namedCurve: P-521}, false, [verify])\n[PASS] Bad usages: importKey(jwk (public) , {name: Ed448}, false, [verify, wrapKey])\n[PASS] Bad usages: importKey(jwk (public) , {name: Ed448}, true, [verify, verify, wrapKey])\n[PASS] Bad usages: importKey(jwk (public) , {name: Ed448}, false, [verify, verify, wrapKey])\n[PASS] Bad usages: importKey(jwk (public) , {name: Ed448}, true, [unwrapKey])\n[PASS] Bad usages: importKey(jwk (public) , {name: Ed448}, false, [unwrapKey])\n[PASS] Bad usages: importKey(jwk (public) , {name: Ed448}, true, [verify, unwrapKey])\n[PASS] Bad usages: importKey(jwk (public) , {name: Ed448}, false, [verify, unwrapKey])\n[PASS] Bad usages: importKey(jwk (public) , {name: Ed448}, true, [verify, verify, unwrapKey])\n[PASS] Bad usages: importKey(jwk (public) , {name: Ed448}, false, [verify, verify, unwrapKey])\n[PASS] Bad usages: importKey(jwk (public) , {name: Ed448}, true, [deriveKey])\n[PASS] Good parameters: P-521 bits (jwk, object(kty, crv, x, y), {name: ECDSA, namedCurve: P-521}, false, [verify])\n[PASS] Bad usages: importKey(jwk (public) , {name: Ed448}, false, [deriveKey])\n[PASS] Bad usages: importKey(jwk (public) , {name: Ed448}, true, [verify, deriveKey])\n[PASS] Good parameters: P-521 bits (raw, buffer(133), {name: ECDSA, namedCurve: P-521}, false, [verify])\n[PASS] Bad usages: importKey(jwk (public) , {name: Ed448}, false, [verify, deriveKey])\n[PASS] Bad usages: importKey(jwk (public) , {name: Ed448}, true, [verify, verify, deriveKey])\n[PASS] Good parameters: P-521 bits (raw, buffer(67, compressed), {name: ECDSA, namedCurve: P-521}, false, [verify])\n[PASS] Bad usages: importKey(jwk (public) , {name: Ed448}, false, [verify, verify, deriveKey])\n[PASS] Bad usages: importKey(jwk (public) , {name: Ed448}, true, [deriveBits])\n[PASS] Bad usages: importKey(jwk (public) , {name: Ed448}, false, [deriveBits])\n[PASS] Bad usages: importKey(jwk (public) , {name: Ed448}, true, [verify, deriveBits])\n[PASS] Bad usages: importKey(jwk (public) , {name: Ed448}, false, [verify, deriveBits])\n[PASS] Good parameters: P-521 bits (spki, buffer(158), {name: ECDSA, namedCurve: P-521}, false, [])\n[PASS] Bad usages: importKey(jwk (public) , {name: Ed448}, true, [verify, verify, deriveBits])\n[PASS] Bad usages: importKey(jwk (public) , {name: Ed448}, false, [verify, verify, deriveBits])\n[PASS] Good parameters: P-521 bits (spki, buffer(90, compressed), {name: ECDSA, namedCurve: P-521}, false, [])\n[PASS] Bad usages: importKey(spki, {name: X25519}, true, [encrypt])\n[PASS] Good parameters: P-521 bits (jwk, object(kty, crv, x, y), {name: ECDSA, namedCurve: P-521}, false, [])\n[PASS] Bad usages: importKey(spki, {name: X25519}, false, [encrypt])\n[PASS] Good parameters: P-521 bits (raw, buffer(133), {name: ECDSA, namedCurve: P-521}, false, [])\n[PASS] Bad usages: importKey(spki, {name: X25519}, true, [decrypt])\n[PASS] Empty usages: importKey(pkcs8, {name: Ed448}, true, [])\n[PASS] Good parameters: P-521 bits (raw, buffer(67, compressed), {name: ECDSA, namedCurve: P-521}, false, [])\n[PASS] Bad usages: importKey(spki, {name: X25519}, false, [decrypt])\n[PASS] Bad usages: importKey(spki, {name: X25519}, true, [sign])\n[PASS] Bad usages: importKey(spki, {name: X25519}, false, [sign])\n[PASS] Good parameters: P-521 bits (spki, buffer(158), {name: ECDSA, namedCurve: P-521}, false, [verify, verify])\n[PASS] Bad usages: importKey(spki, {name: X25519}, true, [verify])\n[PASS] Bad usages: importKey(spki, {name: X25519}, false, [verify])\n[PASS] Good parameters: P-521 bits (spki, buffer(90, compressed), {name: ECDSA, namedCurve: P-521}, false, [verify, verify])\n[PASS] Bad usages: importKey(spki, {name: X25519}, true, [wrapKey])\n[PASS] Empty usages: importKey(pkcs8, {name: Ed448}, false, [])\n[PASS] Bad usages: importKey(spki, {name: X25519}, false, [wrapKey])\n[PASS] Bad usages: importKey(spki, {name: X25519}, true, [unwrapKey])\n[PASS] Bad usages: importKey(spki, {name: X25519}, false, [unwrapKey])\n[PASS] Bad usages: importKey(spki, {name: X25519}, true, [deriveKey])\n[PASS] Bad usages: importKey(spki, {name: X25519}, false, [deriveKey])\n[PASS] Bad usages: importKey(spki, {name: X25519}, true, [deriveBits])\n[PASS] Empty usages: importKey(jwk(private), {name: Ed448}, true, [])\n[PASS] Good parameters: P-521 bits (jwk, object(kty, crv, x, y), {name: ECDSA, namedCurve: P-521}, false, [verify, verify])\n[PASS] Bad usages: importKey(spki, {name: X25519}, false, [deriveBits])\n[PASS] Bad usages: importKey(pkcs8, {name: X25519}, true, [encrypt])\n[PASS] Good parameters: P-521 bits (raw, buffer(133), {name: ECDSA, namedCurve: P-521}, false, [verify, verify])\n[PASS] Bad usages: importKey(pkcs8, {name: X25519}, false, [encrypt])\n[PASS] Bad usages: importKey(pkcs8, {name: X25519}, true, [deriveKey, encrypt])\n[PASS] Empty usages: importKey(jwk(private), {name: Ed448}, false, [])\n[PASS] Good parameters: P-521 bits (raw, buffer(67, compressed), {name: ECDSA, namedCurve: P-521}, false, [verify, verify])\n[PASS] Bad usages: importKey(pkcs8, {name: X25519}, false, [deriveKey, encrypt])\n[PASS] Bad usages: importKey(pkcs8, {name: X25519}, true, [deriveBits, deriveKey, encrypt])\n[PASS] Bad key length: importKey(spki, {name: Ed448}, true, [verify])\n[PASS] Bad usages: importKey(pkcs8, {name: X25519}, false, [deriveBits, deriveKey, encrypt])\n[PASS] Bad key length: importKey(spki, {name: Ed448}, false, [verify])\n[PASS] Bad usages: importKey(pkcs8, {name: X25519}, true, [deriveBits, encrypt])\n[PASS] Bad key length: importKey(spki, {name: Ed448}, true, [verify, verify])\n[PASS] Bad key length: importKey(spki, {name: Ed448}, false, [verify, verify])\n[PASS] Bad usages: importKey(pkcs8, {name: X25519}, false, [deriveBits, encrypt])\n[PASS] Bad key length: importKey(pkcs8, {name: Ed448}, true, [sign])\n[PASS] Bad usages: importKey(pkcs8, {name: X25519}, true, [deriveKey, deriveBits, deriveKey, deriveBits, encrypt])\n[PASS] Bad key length: importKey(pkcs8, {name: Ed448}, false, [sign])\n[PASS] Bad usages: importKey(pkcs8, {name: X25519}, false, [deriveKey, deriveBits, deriveKey, deriveBits, encrypt])\n[PASS] Bad usages: importKey(pkcs8, {name: X25519}, true, [decrypt])\n[PASS] Bad key length: importKey(pkcs8, {name: Ed448}, true, [sign, sign])\n[PASS] Bad usages: importKey(pkcs8, {name: X25519}, false, [decrypt])\n[PASS] Bad key length: importKey(pkcs8, {name: Ed448}, false, [sign, sign])\n[PASS] Bad usages: importKey(pkcs8, {name: X25519}, true, [deriveKey, decrypt])\n[PASS] Bad key length: importKey(raw, {name: Ed448}, true, [verify])\n[PASS] Bad usages: importKey(pkcs8, {name: X25519}, false, [deriveKey, decrypt])\n[PASS] Bad key length: importKey(raw, {name: Ed448}, false, [verify])\n[PASS] Bad usages: importKey(pkcs8, {name: X25519}, true, [deriveBits, deriveKey, decrypt])\n[PASS] Bad key length: importKey(raw, {name: Ed448}, true, [verify, verify])\n[PASS] Bad usages: importKey(pkcs8, {name: X25519}, false, [deriveBits, deriveKey, decrypt])\n[PASS] Bad key length: importKey(raw, {name: Ed448}, false, [verify, verify])\n[PASS] Bad usages: importKey(pkcs8, {name: X25519}, true, [deriveBits, decrypt])\n[PASS] Bad key length: importKey(jwk(private), {name: Ed448}, true, [sign])\n[PASS] Bad usages: importKey(pkcs8, {name: X25519}, false, [deriveBits, decrypt])\n[PASS] Bad usages: importKey(pkcs8, {name: X25519}, true, [deriveKey, deriveBits, deriveKey, deriveBits, decrypt])\n[PASS] Bad key length: importKey(jwk(private), {name: Ed448}, false, [sign])\n[PASS] Bad usages: importKey(pkcs8, {name: X25519}, false, [deriveKey, deriveBits, deriveKey, deriveBits, decrypt])\n[PASS] Bad key length: importKey(jwk(private), {name: Ed448}, true, [sign, sign])\n[PASS] Bad usages: importKey(pkcs8, {name: X25519}, true, [sign])\n[PASS] Bad usages: importKey(pkcs8, {name: X25519}, false, [sign])\n[PASS] Bad key length: importKey(jwk(private), {name: Ed448}, false, [sign, sign])\n[PASS] Bad usages: importKey(pkcs8, {name: X25519}, true, [deriveKey, sign])\n[PASS] Bad key length: importKey(jwk (public) , {name: Ed448}, true, [verify])\n[PASS] Bad key length: importKey(jwk (public) , {name: Ed448}, false, [verify])\n[PASS] Bad key length: importKey(jwk (public) , {name: Ed448}, true, [verify, verify])\n[PASS] Bad key length: importKey(jwk (public) , {name: Ed448}, false, [verify, verify])\n[PASS] Bad usages: importKey(pkcs8, {name: X25519}, false, [deriveKey, sign])\n[PASS] Bad usages: importKey(pkcs8, {name: X25519}, true, [deriveBits, deriveKey, sign])\n[PASS] Bad usages: importKey(pkcs8, {name: X25519}, false, [deriveBits, deriveKey, sign])\n[PASS] Bad usages: importKey(pkcs8, {name: X25519}, true, [deriveBits, sign])\n[PASS] Bad usages: importKey(pkcs8, {name: X25519}, false, [deriveBits, sign])\n[PASS] Bad usages: importKey(pkcs8, {name: X25519}, true, [deriveKey, deriveBits, deriveKey, deriveBits, sign])\n[PASS] Missing JWK 'x' parameter: importKey(jwk(private), {name: Ed448}, true, [sign])\n[PASS] Missing JWK 'x' parameter: importKey(jwk(private), {name: Ed448}, false, [sign])\n[PASS] Missing JWK 'x' parameter: importKey(jwk(private), {name: Ed448}, true, [sign, sign])\n[PASS] Bad usages: importKey(pkcs8, {name: X25519}, false, [deriveKey, deriveBits, deriveKey, deriveBits, sign])\n[PASS] Bad usages: importKey(pkcs8, {name: X25519}, true, [verify])\n[PASS] Missing JWK 'x' parameter: importKey(jwk(private), {name: Ed448}, false, [sign, sign])\n[PASS] Missing JWK 'kty' parameter: importKey(jwk(private), {name: Ed448}, true, [sign])\n[PASS] Bad usages: importKey(pkcs8, {name: X25519}, false, [verify])\n[PASS] Missing JWK 'kty' parameter: importKey(jwk(private), {name: Ed448}, false, [sign])\n[PASS] Missing JWK 'kty' parameter: importKey(jwk(private), {name: Ed448}, true, [sign, sign])\n[PASS] Missing JWK 'kty' parameter: importKey(jwk(private), {name: Ed448}, false, [sign, sign])\n[PASS] Missing JWK 'crv' parameter: importKey(jwk(private), {name: Ed448}, true, [sign])\n[PASS] Missing JWK 'crv' parameter: importKey(jwk(private), {name: Ed448}, false, [sign])\n[PASS] Missing JWK 'crv' parameter: importKey(jwk(private), {name: Ed448}, true, [sign, sign])\n[PASS] Missing JWK 'crv' parameter: importKey(jwk(private), {name: Ed448}, false, [sign, sign])\n[PASS] Bad usages: importKey(pkcs8, {name: X25519}, true, [deriveKey, verify])\n[PASS] Bad usages: importKey(pkcs8, {name: X25519}, false, [deriveKey, verify])\n[PASS] Bad usages: importKey(pkcs8, {name: X25519}, true, [deriveBits, deriveKey, verify])\n[PASS] Bad usages: importKey(pkcs8, {name: X25519}, false, [deriveBits, deriveKey, verify])\n[PASS] Bad usages: importKey(pkcs8, {name: X25519}, true, [deriveBits, verify])\n[PASS] Bad usages: importKey(pkcs8, {name: X25519}, false, [deriveBits, verify])\n[PASS] Bad usages: importKey(pkcs8, {name: X25519}, true, [deriveKey, deriveBits, deriveKey, deriveBits, verify])\n[PASS] Bad usages: importKey(pkcs8, {name: X25519}, false, [deriveKey, deriveBits, deriveKey, deriveBits, verify])\n[PASS] Bad usages: importKey(pkcs8, {name: X25519}, true, [wrapKey])\n[PASS] Bad usages: importKey(pkcs8, {name: X25519}, false, [wrapKey])\n[PASS] Bad usages: importKey(pkcs8, {name: X25519}, true, [deriveKey, wrapKey])\n[PASS] Bad usages: importKey(pkcs8, {name: X25519}, false, [deriveKey, wrapKey])\n[PASS] Bad usages: importKey(pkcs8, {name: X25519}, true, [deriveBits, deriveKey, wrapKey])\n[PASS] Bad usages: importKey(pkcs8, {name: X25519}, false, [deriveBits, deriveKey, wrapKey])\n[PASS] Good parameters: P-521 bits (pkcs8, buffer(241), {name: ECDSA, namedCurve: P-521}, false, [sign])\n[PASS] Bad usages: importKey(pkcs8, {name: X25519}, true, [deriveBits, wrapKey])\n[PASS] Invalid key pair: importKey(jwk(private), {name: Ed448}, true, [sign])\n[PASS] Bad usages: importKey(pkcs8, {name: X25519}, false, [deriveBits, wrapKey])\n[PASS] Invalid key pair: importKey(jwk(private), {name: Ed448}, true, [sign, sign])\n[PASS] Bad usages: importKey(pkcs8, {name: X25519}, true, [deriveKey, deriveBits, deriveKey, deriveBits, wrapKey])\n[PASS] Bad usages: importKey(pkcs8, {name: X25519}, false, [deriveKey, deriveBits, deriveKey, deriveBits, wrapKey])\n[PASS] Bad usages: importKey(pkcs8, {name: X25519}, true, [unwrapKey])\n[PASS] Bad usages: importKey(pkcs8, {name: X25519}, false, [unwrapKey])\n[PASS] Bad usages: importKey(pkcs8, {name: X25519}, true, [deriveKey, unwrapKey])\n[PASS] Bad usages: importKey(pkcs8, {name: X25519}, false, [deriveKey, unwrapKey])\n[PASS] Bad usages: importKey(pkcs8, {name: X25519}, true, [deriveBits, deriveKey, unwrapKey])\n[PASS] Bad usages: importKey(pkcs8, {name: X25519}, false, [deriveBits, deriveKey, unwrapKey])\n[PASS] Bad usages: importKey(pkcs8, {name: X25519}, true, [deriveBits, unwrapKey])\n[PASS] Bad usages: importKey(pkcs8, {name: X25519}, false, [deriveBits, unwrapKey])\n[PASS] Bad usages: importKey(pkcs8, {name: X25519}, true, [deriveKey, deriveBits, deriveKey, deriveBits, unwrapKey])\n[PASS] Bad usages: importKey(pkcs8, {name: X25519}, false, [deriveKey, deriveBits, deriveKey, deriveBits, unwrapKey])\n[PASS] Bad usages: importKey(raw, {name: X25519}, true, [encrypt])\n[PASS] Bad usages: importKey(raw, {name: X25519}, false, [encrypt])\n[PASS] Bad usages: importKey(raw, {name: X25519}, true, [decrypt])\n[PASS] Bad usages: importKey(raw, {name: X25519}, false, [decrypt])\n[PASS] Bad usages: importKey(raw, {name: X25519}, true, [sign])\n[PASS] Bad usages: importKey(raw, {name: X25519}, false, [sign])\n[PASS] Bad usages: importKey(raw, {name: X25519}, true, [verify])\n[PASS] Bad usages: importKey(raw, {name: X25519}, false, [verify])\n[PASS] Bad usages: importKey(raw, {name: X25519}, true, [wrapKey])\n[PASS] Bad usages: importKey(raw, {name: X25519}, false, [wrapKey])\n[PASS] Bad usages: importKey(raw, {name: X25519}, true, [unwrapKey])\n[PASS] Bad usages: importKey(raw, {name: X25519}, false, [unwrapKey])\n[PASS] Bad usages: importKey(raw, {name: X25519}, true, [deriveKey])\n[PASS] Bad usages: importKey(raw, {name: X25519}, false, [deriveKey])\n[PASS] Bad usages: importKey(raw, {name: X25519}, true, [deriveBits])\n[PASS] Bad usages: importKey(raw, {name: X25519}, false, [deriveBits])\n[PASS] Bad usages: importKey(jwk(private), {name: X25519}, true, [encrypt])\n[PASS] Bad usages: importKey(jwk(private), {name: X25519}, false, [encrypt])\n[PASS] Good parameters: P-521 bits (pkcs8, buffer(241), {name: ECDSA, namedCurve: P-521}, false, [sign, sign])\n[PASS] Bad usages: importKey(jwk(private), {name: X25519}, true, [deriveKey, encrypt])\n[PASS] Bad usages: importKey(jwk(private), {name: X25519}, false, [deriveKey, encrypt])\n[PASS] Bad usages: importKey(jwk(private), {name: X25519}, true, [deriveBits, deriveKey, encrypt])\n[PASS] Bad usages: importKey(jwk(private), {name: X25519}, false, [deriveBits, deriveKey, encrypt])\n[PASS] Bad usages: importKey(jwk(private), {name: X25519}, true, [deriveBits, encrypt])\n[PASS] Bad usages: importKey(jwk(private), {name: X25519}, false, [deriveBits, encrypt])\n[PASS] Bad usages: importKey(jwk(private), {name: X25519}, true, [deriveKey, deriveBits, deriveKey, deriveBits, encrypt])\n[PASS] Bad usages: importKey(jwk(private), {name: X25519}, false, [deriveKey, deriveBits, deriveKey, deriveBits, encrypt])\n[PASS] Bad usages: importKey(jwk(private), {name: X25519}, true, [decrypt])\n[PASS] Bad usages: importKey(jwk(private), {name: X25519}, false, [decrypt])\n[PASS] Bad usages: importKey(jwk(private), {name: X25519}, true, [deriveKey, decrypt])\n[PASS] Bad usages: importKey(jwk(private), {name: X25519}, false, [deriveKey, decrypt])\n[PASS] Bad usages: importKey(jwk(private), {name: X25519}, true, [deriveBits, deriveKey, decrypt])\n[PASS] Bad usages: importKey(jwk(private), {name: X25519}, false, [deriveBits, deriveKey, decrypt])\n[PASS] Bad usages: importKey(jwk(private), {name: X25519}, true, [deriveBits, decrypt])\n[PASS] Bad usages: importKey(jwk(private), {name: X25519}, false, [deriveBits, decrypt])\n[PASS] Bad usages: importKey(jwk(private), {name: X25519}, true, [deriveKey, deriveBits, deriveKey, deriveBits, decrypt])\n[PASS] Bad usages: importKey(jwk(private), {name: X25519}, false, [deriveKey, deriveBits, deriveKey, deriveBits, decrypt])\n[PASS] Bad usages: importKey(jwk(private), {name: X25519}, true, [sign])\n[PASS] Bad usages: importKey(jwk(private), {name: X25519}, false, [sign])\n[PASS] Bad usages: importKey(jwk(private), {name: X25519}, true, [deriveKey, sign])\n[PASS] Bad usages: importKey(jwk(private), {name: X25519}, false, [deriveKey, sign])\n[PASS] Bad usages: importKey(jwk(private), {name: X25519}, true, [deriveBits, deriveKey, sign])\n[PASS] Bad usages: importKey(jwk(private), {name: X25519}, false, [deriveBits, deriveKey, sign])\n[PASS] Bad usages: importKey(jwk(private), {name: X25519}, true, [deriveBits, sign])\n[PASS] Bad usages: importKey(jwk(private), {name: X25519}, false, [deriveBits, sign])\n[PASS] Bad usages: importKey(jwk(private), {name: X25519}, true, [deriveKey, deriveBits, deriveKey, deriveBits, sign])\n[PASS] Bad usages: importKey(jwk(private), {name: X25519}, false, [deriveKey, deriveBits, deriveKey, deriveBits, sign])\n[PASS] Bad usages: importKey(jwk(private), {name: X25519}, true, [verify])\n[PASS] Bad usages: importKey(jwk(private), {name: X25519}, false, [verify])\n[PASS] Bad usages: importKey(jwk(private), {name: X25519}, true, [deriveKey, verify])\n[PASS] Bad usages: importKey(jwk(private), {name: X25519}, false, [deriveKey, verify])\n[PASS] Bad usages: importKey(jwk(private), {name: X25519}, true, [deriveBits, deriveKey, verify])\n[PASS] Bad usages: importKey(jwk(private), {name: X25519}, false, [deriveBits, deriveKey, verify])\n[PASS] Bad usages: importKey(jwk(private), {name: X25519}, true, [deriveBits, verify])\n[PASS] Bad usages: importKey(jwk(private), {name: X25519}, false, [deriveBits, verify])\n[PASS] Bad usages: importKey(jwk(private), {name: X25519}, true, [deriveKey, deriveBits, deriveKey, deriveBits, verify])\n[PASS] Bad usages: importKey(jwk(private), {name: X25519}, false, [deriveKey, deriveBits, deriveKey, deriveBits, verify])\n[PASS] Bad usages: importKey(jwk(private), {name: X25519}, true, [wrapKey])\n[PASS] Bad usages: importKey(jwk(private), {name: X25519}, false, [wrapKey])\n[PASS] Bad usages: importKey(jwk(private), {name: X25519}, true, [deriveKey, wrapKey])\n[PASS] Bad usages: importKey(jwk(private), {name: X25519}, false, [deriveKey, wrapKey])\n[PASS] Bad usages: importKey(jwk(private), {name: X25519}, true, [deriveBits, deriveKey, wrapKey])\n[PASS] Bad usages: importKey(jwk(private), {name: X25519}, false, [deriveBits, deriveKey, wrapKey])\n[PASS] Bad usages: importKey(jwk(private), {name: X25519}, true, [deriveBits, wrapKey])\n[PASS] Bad usages: importKey(spki, {name: X448}, true, [encrypt])\n[PASS] Bad usages: importKey(spki, {name: X448}, false, [encrypt])\n[PASS] Bad usages: importKey(spki, {name: X448}, true, [decrypt])\n[PASS] Bad usages: importKey(spki, {name: X448}, false, [decrypt])\n[PASS] Bad usages: importKey(spki, {name: X448}, true, [sign])\n[PASS] Bad usages: importKey(spki, {name: X448}, false, [sign])\n[PASS] Bad usages: importKey(spki, {name: X448}, true, [verify])\n[PASS] Bad usages: importKey(spki, {name: X448}, false, [verify])\n[PASS] Bad usages: importKey(spki, {name: X448}, true, [wrapKey])\n[PASS] Bad usages: importKey(spki, {name: X448}, false, [wrapKey])\n[PASS] Empty Usages: P-521 bits (pkcs8, buffer(241), {name: ECDSA, namedCurve: P-521}, false, [])\n[PASS] Bad usages: importKey(jwk(private), {name: X25519}, false, [deriveBits, wrapKey])\n[PASS] Bad usages: importKey(jwk(private), {name: X25519}, true, [deriveKey, deriveBits, deriveKey, deriveBits, wrapKey])\n[PASS] Bad usages: importKey(jwk(private), {name: X25519}, false, [deriveKey, deriveBits, deriveKey, deriveBits, wrapKey])\n[PASS] Bad usages: importKey(jwk(private), {name: X25519}, true, [unwrapKey])\n[PASS] Bad usages: importKey(jwk(private), {name: X25519}, false, [unwrapKey])\n[PASS] Bad usages: importKey(spki, {name: X448}, true, [unwrapKey])\n[PASS] Bad usages: importKey(spki, {name: X448}, false, [unwrapKey])\n[PASS] Bad usages: importKey(jwk(private), {name: X25519}, true, [deriveKey, unwrapKey])\n[PASS] Bad usages: importKey(spki, {name: X448}, true, [deriveKey])\n[PASS] Bad usages: importKey(jwk(private), {name: X25519}, false, [deriveKey, unwrapKey])\n[PASS] Bad usages: importKey(spki, {name: X448}, false, [deriveKey])\n[PASS] Bad usages: importKey(jwk(private), {name: X25519}, true, [deriveBits, deriveKey, unwrapKey])\n[PASS] Bad usages: importKey(spki, {name: X448}, true, [deriveBits])\n[PASS] Bad usages: importKey(jwk(private), {name: X25519}, false, [deriveBits, deriveKey, unwrapKey])\n[PASS] Bad usages: importKey(spki, {name: X448}, false, [deriveBits])\n[PASS] Bad usages: importKey(jwk(private), {name: X25519}, true, [deriveBits, unwrapKey])\n[PASS] Bad usages: importKey(pkcs8, {name: X448}, true, [encrypt])\n[PASS] Bad usages: importKey(jwk(private), {name: X25519}, false, [deriveBits, unwrapKey])\n[PASS] Bad usages: importKey(pkcs8, {name: X448}, false, [encrypt])\n[PASS] Bad usages: importKey(pkcs8, {name: X448}, true, [deriveKey, encrypt])\n[PASS] Bad usages: importKey(jwk(private), {name: X25519}, true, [deriveKey, deriveBits, deriveKey, deriveBits, unwrapKey])\n[PASS] Bad usages: importKey(pkcs8, {name: X448}, false, [deriveKey, encrypt])\n[PASS] Bad usages: importKey(jwk(private), {name: X25519}, false, [deriveKey, deriveBits, deriveKey, deriveBits, unwrapKey])\n[PASS] Bad usages: importKey(pkcs8, {name: X448}, true, [deriveBits, deriveKey, encrypt])\n[PASS] Bad usages: importKey(jwk (public) , {name: X25519}, true, [encrypt])\n[PASS] Bad usages: importKey(pkcs8, {name: X448}, false, [deriveBits, deriveKey, encrypt])\n[PASS] Bad usages: importKey(jwk (public) , {name: X25519}, false, [encrypt])\n[PASS] Bad usages: importKey(pkcs8, {name: X448}, true, [deriveBits, encrypt])\n[PASS] Bad usages: importKey(jwk (public) , {name: X25519}, true, [decrypt])\n[PASS] Bad usages: importKey(pkcs8, {name: X448}, false, [deriveBits, encrypt])\n[PASS] Bad usages: importKey(jwk (public) , {name: X25519}, false, [decrypt])\n[PASS] Bad usages: importKey(pkcs8, {name: X448}, true, [deriveKey, deriveBits, deriveKey, deriveBits, encrypt])\n[PASS] Bad usages: importKey(jwk (public) , {name: X25519}, true, [sign])\n[PASS] Bad usages: importKey(pkcs8, {name: X448}, false, [deriveKey, deriveBits, deriveKey, deriveBits, encrypt])\n[PASS] Bad usages: importKey(jwk (public) , {name: X25519}, false, [sign])\n[PASS] Bad usages: importKey(pkcs8, {name: X448}, true, [decrypt])\n[PASS] Bad usages: importKey(jwk (public) , {name: X25519}, true, [verify])\n[PASS] Bad usages: importKey(jwk (public) , {name: X25519}, false, [verify])\n[PASS] Bad usages: importKey(pkcs8, {name: X448}, false, [decrypt])\n[PASS] Bad usages: importKey(pkcs8, {name: X448}, true, [deriveKey, decrypt])\n[PASS] Bad usages: importKey(pkcs8, {name: X448}, false, [deriveKey, decrypt])\n[PASS] Bad usages: importKey(pkcs8, {name: X448}, true, [deriveBits, deriveKey, decrypt])\n[PASS] Bad usages: importKey(pkcs8, {name: X448}, false, [deriveBits, deriveKey, decrypt])\n[PASS] Bad usages: importKey(jwk (public) , {name: X25519}, true, [wrapKey])\n[PASS] Bad usages: importKey(jwk (public) , {name: X25519}, false, [wrapKey])\n[PASS] Bad usages: importKey(jwk (public) , {name: X25519}, true, [unwrapKey])\n[PASS] Bad usages: importKey(pkcs8, {name: X448}, true, [deriveBits, decrypt])\n[PASS] Bad usages: importKey(pkcs8, {name: X448}, false, [deriveBits, decrypt])\n[PASS] Bad usages: importKey(jwk (public) , {name: X25519}, false, [unwrapKey])\n[PASS] Bad usages: importKey(jwk (public) , {name: X25519}, true, [deriveKey])\n[PASS] Bad usages: importKey(pkcs8, {name: X448}, true, [deriveKey, deriveBits, deriveKey, deriveBits, decrypt])\n[PASS] Bad usages: importKey(jwk (public) , {name: X25519}, false, [deriveKey])\n[PASS] Bad usages: importKey(pkcs8, {name: X448}, false, [deriveKey, deriveBits, deriveKey, deriveBits, decrypt])\n[PASS] Bad usages: importKey(jwk (public) , {name: X25519}, true, [deriveBits])\n[PASS] Bad usages: importKey(pkcs8, {name: X448}, true, [sign])\n[PASS] Bad usages: importKey(pkcs8, {name: X448}, false, [sign])\n[PASS] Bad usages: importKey(jwk (public) , {name: X25519}, false, [deriveBits])\n[PASS] Bad usages: importKey(pkcs8, {name: X448}, true, [deriveKey, sign])\n[PASS] Bad usages: importKey(pkcs8, {name: X448}, false, [deriveKey, sign])\n[PASS] Bad usages: importKey(pkcs8, {name: X448}, true, [deriveBits, deriveKey, sign])\n[PASS] Bad usages: importKey(pkcs8, {name: X448}, false, [deriveBits, deriveKey, sign])\n[PASS] Bad usages: importKey(pkcs8, {name: X448}, true, [deriveBits, sign])\n[PASS] Good parameters: P-521 bits (jwk, object(kty, crv, x, y, d), {name: ECDSA, namedCurve: P-521}, false, [sign])\n[PASS] Bad usages: importKey(pkcs8, {name: X448}, false, [deriveBits, sign])\n[PASS] Bad usages: importKey(pkcs8, {name: X448}, true, [deriveKey, deriveBits, deriveKey, deriveBits, sign])\n[PASS] Bad usages: importKey(pkcs8, {name: X448}, false, [deriveKey, deriveBits, deriveKey, deriveBits, sign])\n[PASS] Bad usages: importKey(pkcs8, {name: X448}, true, [verify])\n[PASS] Bad usages: importKey(pkcs8, {name: X448}, false, [verify])\n[PASS] Bad usages: importKey(pkcs8, {name: X448}, true, [deriveKey, verify])\n[PASS] Bad usages: importKey(pkcs8, {name: X448}, false, [deriveKey, verify])\n[PASS] Bad usages: importKey(pkcs8, {name: X448}, true, [deriveBits, deriveKey, verify])\n[PASS] Bad usages: importKey(pkcs8, {name: X448}, false, [deriveBits, deriveKey, verify])\n[PASS] Bad usages: importKey(pkcs8, {name: X448}, true, [deriveBits, verify])\n[PASS] Empty usages: importKey(pkcs8, {name: X25519}, true, [])\n[PASS] Bad usages: importKey(pkcs8, {name: X448}, false, [deriveBits, verify])\n[PASS] Bad usages: importKey(pkcs8, {name: X448}, true, [deriveKey, deriveBits, deriveKey, deriveBits, verify])\n[PASS] Bad usages: importKey(pkcs8, {name: X448}, false, [deriveKey, deriveBits, deriveKey, deriveBits, verify])\n[PASS] Bad usages: importKey(pkcs8, {name: X448}, true, [wrapKey])\n[PASS] Bad usages: importKey(pkcs8, {name: X448}, false, [wrapKey])\n[PASS] Bad usages: importKey(pkcs8, {name: X448}, true, [deriveKey, wrapKey])\n[PASS] Bad usages: importKey(pkcs8, {name: X448}, false, [deriveKey, wrapKey])\n[PASS] Bad usages: importKey(pkcs8, {name: X448}, true, [deriveBits, deriveKey, wrapKey])\n[PASS] Empty usages: importKey(pkcs8, {name: X25519}, false, [])\n[PASS] Bad usages: importKey(pkcs8, {name: X448}, false, [deriveBits, deriveKey, wrapKey])\n[PASS] Bad usages: importKey(pkcs8, {name: X448}, true, [deriveBits, wrapKey])\n[PASS] Bad usages: importKey(pkcs8, {name: X448}, false, [deriveBits, wrapKey])\n[PASS] Bad usages: importKey(pkcs8, {name: X448}, true, [deriveKey, deriveBits, deriveKey, deriveBits, wrapKey])\n[PASS] Bad usages: importKey(pkcs8, {name: X448}, false, [deriveKey, deriveBits, deriveKey, deriveBits, wrapKey])\n[PASS] Bad usages: importKey(pkcs8, {name: X448}, true, [unwrapKey])\n[PASS] Bad usages: importKey(pkcs8, {name: X448}, false, [unwrapKey])\n[PASS] Bad usages: importKey(pkcs8, {name: X448}, true, [deriveKey, unwrapKey])\n[PASS] Bad usages: importKey(pkcs8, {name: X448}, false, [deriveKey, unwrapKey])\n[PASS] Bad usages: importKey(pkcs8, {name: X448}, true, [deriveBits, deriveKey, unwrapKey])\n[PASS] Bad usages: importKey(pkcs8, {name: X448}, false, [deriveBits, deriveKey, unwrapKey])\n[PASS] Empty usages: importKey(jwk(private), {name: X25519}, true, [])\n[PASS] Bad usages: importKey(pkcs8, {name: X448}, true, [deriveBits, unwrapKey])\n[PASS] Bad usages: importKey(pkcs8, {name: X448}, false, [deriveBits, unwrapKey])\n[PASS] Bad usages: importKey(pkcs8, {name: X448}, true, [deriveKey, deriveBits, deriveKey, deriveBits, unwrapKey])\n[PASS] Empty usages: importKey(jwk(private), {name: X25519}, false, [])\n[PASS] Bad usages: importKey(pkcs8, {name: X448}, false, [deriveKey, deriveBits, deriveKey, deriveBits, unwrapKey])\n[PASS] Bad usages: importKey(raw, {name: X448}, true, [encrypt])\n[PASS] Bad key length: importKey(spki, {name: X25519}, true, [])\n[PASS] Bad usages: importKey(raw, {name: X448}, false, [encrypt])\n[PASS] Bad usages: importKey(raw, {name: X448}, true, [decrypt])\n[PASS] Bad key length: importKey(spki, {name: X25519}, false, [])\n[PASS] Bad usages: importKey(raw, {name: X448}, false, [decrypt])\n[PASS] Bad usages: importKey(raw, {name: X448}, true, [sign])\n[PASS] Bad key length: importKey(pkcs8, {name: X25519}, true, [deriveKey])\n[PASS] Bad usages: importKey(raw, {name: X448}, false, [sign])\n[PASS] Bad usages: importKey(raw, {name: X448}, true, [verify])\n[PASS] Bad key length: importKey(pkcs8, {name: X25519}, false, [deriveKey])\n[PASS] Bad usages: importKey(raw, {name: X448}, false, [verify])\n[PASS] Bad usages: importKey(raw, {name: X448}, true, [wrapKey])\n[PASS] Bad key length: importKey(pkcs8, {name: X25519}, true, [deriveBits, deriveKey])\n[PASS] Bad usages: importKey(raw, {name: X448}, false, [wrapKey])\n[PASS] Bad usages: importKey(raw, {name: X448}, true, [unwrapKey])\n[PASS] Bad key length: importKey(pkcs8, {name: X25519}, false, [deriveBits, deriveKey])\n[PASS] Bad usages: importKey(raw, {name: X448}, false, [unwrapKey])\n[PASS] Bad usages: importKey(raw, {name: X448}, true, [deriveKey])\n[PASS] Bad usages: importKey(raw, {name: X448}, false, [deriveKey])\n[PASS] Good parameters: P-521 bits (jwk, object(kty, crv, x, y, d), {name: ECDSA, namedCurve: P-521}, false, [sign, sign])\n[PASS] Bad usages: importKey(raw, {name: X448}, true, [deriveBits])\n[PASS] Bad usages: importKey(raw, {name: X448}, false, [deriveBits])\n[PASS] Bad key length: importKey(pkcs8, {name: X25519}, true, [deriveBits])\n[PASS] Bad usages: importKey(jwk(private), {name: X448}, true, [encrypt])\n[PASS] Bad usages: importKey(jwk(private), {name: X448}, false, [encrypt])\n[PASS] Bad usages: importKey(jwk(private), {name: X448}, true, [deriveKey, encrypt])\n[PASS] Bad usages: importKey(jwk(private), {name: X448}, false, [deriveKey, encrypt])\n[PASS] Bad key length: importKey(pkcs8, {name: X25519}, false, [deriveBits])\n[PASS] Bad key length: importKey(pkcs8, {name: X25519}, true, [deriveKey, deriveBits, deriveKey, deriveBits])\n[PASS] Bad usages: importKey(jwk(private), {name: X448}, true, [deriveBits, deriveKey, encrypt])\n[PASS] Bad usages: importKey(jwk(private), {name: X448}, false, [deriveBits, deriveKey, encrypt])\n[PASS] Bad key length: importKey(pkcs8, {name: X25519}, false, [deriveKey, deriveBits, deriveKey, deriveBits])\n[PASS] Bad usages: importKey(jwk(private), {name: X448}, true, [deriveBits, encrypt])\n[PASS] Bad key length: importKey(raw, {name: X25519}, true, [])\n[PASS] Bad key length: importKey(raw, {name: X25519}, false, [])\n[PASS] Bad usages: importKey(jwk(private), {name: X448}, false, [deriveBits, encrypt])\n[PASS] Bad usages: importKey(jwk(private), {name: X448}, true, [deriveKey, deriveBits, deriveKey, deriveBits, encrypt])\n[PASS] Bad usages: importKey(jwk(private), {name: X448}, false, [deriveKey, deriveBits, deriveKey, deriveBits, encrypt])\n[PASS] Bad usages: importKey(jwk(private), {name: X448}, true, [decrypt])\n[PASS] Bad usages: importKey(jwk(private), {name: X448}, false, [decrypt])\n[PASS] Bad key length: importKey(jwk (public) , {name: X25519}, true, [])\n[PASS] Bad usages: importKey(jwk(private), {name: X448}, true, [deriveKey, decrypt])\n[PASS] Bad usages: importKey(jwk(private), {name: X448}, false, [deriveKey, decrypt])\n[PASS] Bad usages: importKey(jwk(private), {name: X448}, true, [deriveBits, deriveKey, decrypt])\n[PASS] Bad key length: importKey(jwk (public) , {name: X25519}, false, [])\n[PASS] Bad usages: importKey(jwk(private), {name: X448}, false, [deriveBits, deriveKey, decrypt])\n[PASS] Bad usages: importKey(jwk(private), {name: X448}, true, [deriveBits, decrypt])\n[PASS] Bad usages: importKey(jwk(private), {name: X448}, false, [deriveBits, decrypt])\n[PASS] Bad usages: importKey(jwk(private), {name: X448}, true, [deriveKey, deriveBits, deriveKey, deriveBits, decrypt])\n[PASS] Bad key length: importKey(jwk(private), {name: X25519}, true, [deriveKey])\n[PASS] Bad usages: importKey(jwk(private), {name: X448}, false, [deriveKey, deriveBits, deriveKey, deriveBits, decrypt])\n[PASS] Bad usages: importKey(jwk(private), {name: X448}, true, [sign])\n[PASS] Bad key length: importKey(jwk(private), {name: X25519}, false, [deriveKey])\n[PASS] Bad key length: importKey(jwk(private), {name: X25519}, true, [deriveBits, deriveKey])\n[PASS] Bad usages: importKey(jwk(private), {name: X448}, false, [sign])\n[PASS] Bad usages: importKey(jwk(private), {name: X448}, true, [deriveKey, sign])\n[PASS] Bad usages: importKey(jwk(private), {name: X448}, false, [deriveKey, sign])\n[PASS] Bad key length: importKey(jwk(private), {name: X25519}, false, [deriveBits, deriveKey])\n[PASS] Bad usages: importKey(jwk(private), {name: X448}, true, [deriveBits, deriveKey, sign])\n[PASS] Bad usages: importKey(jwk(private), {name: X448}, false, [deriveBits, deriveKey, sign])\n[PASS] Bad key length: importKey(jwk(private), {name: X25519}, true, [deriveBits])\n[PASS] Bad usages: importKey(jwk(private), {name: X448}, true, [deriveBits, sign])\n[PASS] Bad usages: importKey(jwk(private), {name: X448}, false, [deriveBits, sign])\n[PASS] Bad key length: importKey(jwk(private), {name: X25519}, false, [deriveBits])\n[PASS] Bad usages: importKey(jwk(private), {name: X448}, true, [deriveKey, deriveBits, deriveKey, deriveBits, sign])\n[PASS] Bad usages: importKey(jwk(private), {name: X448}, false, [deriveKey, deriveBits, deriveKey, deriveBits, sign])\n[PASS] Bad usages: importKey(jwk(private), {name: X448}, true, [verify])\n[PASS] Bad usages: importKey(jwk(private), {name: X448}, false, [verify])\n[PASS] Bad usages: importKey(jwk(private), {name: X448}, true, [deriveKey, verify])\n[PASS] Bad usages: importKey(jwk(private), {name: X448}, false, [deriveKey, verify])\n[PASS] Bad usages: importKey(jwk(private), {name: X448}, true, [deriveBits, deriveKey, verify])\n[PASS] Bad key length: importKey(jwk(private), {name: X25519}, true, [deriveKey, deriveBits, deriveKey, deriveBits])\n[PASS] Bad key length: importKey(jwk(private), {name: X25519}, false, [deriveKey, deriveBits, deriveKey, deriveBits])\n[PASS] Missing JWK 'x' parameter: importKey(jwk(private), {name: X25519}, true, [deriveKey])\n[PASS] Missing JWK 'x' parameter: importKey(jwk(private), {name: X25519}, false, [deriveKey])\n[PASS] Missing JWK 'x' parameter: importKey(jwk(private), {name: X25519}, true, [deriveBits, deriveKey])\n[PASS] Bad usages: importKey(jwk(private), {name: X448}, false, [deriveBits, deriveKey, verify])\n[PASS] Bad usages: importKey(jwk(private), {name: X448}, true, [deriveBits, verify])\n[PASS] Missing JWK 'x' parameter: importKey(jwk(private), {name: X25519}, false, [deriveBits, deriveKey])\n[PASS] Bad usages: importKey(jwk(private), {name: X448}, false, [deriveBits, verify])\n[PASS] Bad usages: importKey(jwk(private), {name: X448}, true, [deriveKey, deriveBits, deriveKey, deriveBits, verify])\n[PASS] Bad usages: importKey(jwk(private), {name: X448}, false, [deriveKey, deriveBits, deriveKey, deriveBits, verify])\n[PASS] Bad usages: importKey(jwk(private), {name: X448}, true, [wrapKey])\n[PASS] Bad usages: importKey(jwk(private), {name: X448}, false, [wrapKey])\n[PASS] Bad usages: importKey(jwk(private), {name: X448}, true, [deriveKey, wrapKey])\n[PASS] Bad usages: importKey(jwk(private), {name: X448}, false, [deriveKey, wrapKey])\n[PASS] Bad usages: importKey(jwk(private), {name: X448}, true, [deriveBits, deriveKey, wrapKey])\n[PASS] Bad usages: importKey(jwk(private), {name: X448}, false, [deriveBits, deriveKey, wrapKey])\n[PASS] Bad usages: importKey(jwk(private), {name: X448}, true, [deriveBits, wrapKey])\n[PASS] Bad usages: importKey(jwk(private), {name: X448}, false, [deriveBits, wrapKey])\n[PASS] Bad usages: importKey(jwk(private), {name: X448}, true, [deriveKey, deriveBits, deriveKey, deriveBits, wrapKey])\n[PASS] Missing JWK 'x' parameter: importKey(jwk(private), {name: X25519}, true, [deriveBits])\n[PASS] Missing JWK 'x' parameter: importKey(jwk(private), {name: X25519}, false, [deriveBits])\n[PASS] Missing JWK 'x' parameter: importKey(jwk(private), {name: X25519}, true, [deriveKey, deriveBits, deriveKey, deriveBits])\n[PASS] Missing JWK 'x' parameter: importKey(jwk(private), {name: X25519}, false, [deriveKey, deriveBits, deriveKey, deriveBits])\n[PASS] Missing JWK 'kty' parameter: importKey(jwk(private), {name: X25519}, true, [deriveKey])\n[PASS] Missing JWK 'kty' parameter: importKey(jwk(private), {name: X25519}, false, [deriveKey])\n[PASS] Missing JWK 'kty' parameter: importKey(jwk(private), {name: X25519}, true, [deriveBits, deriveKey])\n[PASS] Bad usages: importKey(jwk(private), {name: X448}, false, [deriveKey, deriveBits, deriveKey, deriveBits, wrapKey])\n[PASS] Bad usages: importKey(jwk(private), {name: X448}, true, [unwrapKey])\n[PASS] Bad usages: importKey(jwk(private), {name: X448}, false, [unwrapKey])\n[PASS] Bad usages: importKey(jwk(private), {name: X448}, true, [deriveKey, unwrapKey])\n[PASS] Bad usages: importKey(jwk(private), {name: X448}, false, [deriveKey, unwrapKey])\n[PASS] Bad usages: importKey(jwk(private), {name: X448}, true, [deriveBits, deriveKey, unwrapKey])\n[PASS] Bad usages: importKey(jwk(private), {name: X448}, false, [deriveBits, deriveKey, unwrapKey])\n[PASS] Bad usages: importKey(jwk(private), {name: X448}, true, [deriveBits, unwrapKey])\n[PASS] Missing JWK 'kty' parameter: importKey(jwk(private), {name: X25519}, false, [deriveBits, deriveKey])\n[PASS] Missing JWK 'kty' parameter: importKey(jwk(private), {name: X25519}, true, [deriveBits])\n[PASS] Missing JWK 'kty' parameter: importKey(jwk(private), {name: X25519}, false, [deriveBits])\n[PASS] Missing JWK 'kty' parameter: importKey(jwk(private), {name: X25519}, true, [deriveKey, deriveBits, deriveKey, deriveBits])\n[PASS] Bad usages: importKey(jwk(private), {name: X448}, false, [deriveBits, unwrapKey])\n[PASS] Bad usages: importKey(jwk(private), {name: X448}, true, [deriveKey, deriveBits, deriveKey, deriveBits, unwrapKey])\n[PASS] Bad usages: importKey(jwk(private), {name: X448}, false, [deriveKey, deriveBits, deriveKey, deriveBits, unwrapKey])\n[PASS] Bad usages: importKey(jwk (public) , {name: X448}, true, [encrypt])\n[PASS] Empty Usages: P-521 bits (jwk, object(kty, crv, x, y, d), {name: ECDSA, namedCurve: P-521}, false, [])\n[PASS] Good parameters: P-256 bits (spki, buffer(91), {name: ECDH, namedCurve: P-256}, true, [])\n[PASS] Bad usages: importKey(jwk (public) , {name: X448}, false, [encrypt])\n[PASS] Bad usages: importKey(jwk (public) , {name: X448}, true, [decrypt])\n[PASS] Missing JWK 'kty' parameter: importKey(jwk(private), {name: X25519}, false, [deriveKey, deriveBits, deriveKey, deriveBits])\n[PASS] Missing JWK 'crv' parameter: importKey(jwk (public) , {name: X25519}, true, [])\n[PASS] Missing JWK 'crv' parameter: importKey(jwk (public) , {name: X25519}, false, [])\n[PASS] Bad usages: importKey(jwk (public) , {name: X448}, false, [decrypt])\n[PASS] Bad usages: importKey(jwk (public) , {name: X448}, true, [sign])\n[PASS] Bad usages: importKey(jwk (public) , {name: X448}, false, [sign])\n[PASS] Bad usages: importKey(jwk (public) , {name: X448}, true, [verify])\n[PASS] Bad usages: importKey(jwk (public) , {name: X448}, false, [verify])\n[PASS] Bad usages: importKey(jwk (public) , {name: X448}, true, [wrapKey])\n[PASS] Bad usages: importKey(jwk (public) , {name: X448}, false, [wrapKey])\n[PASS] Invalid key pair: importKey(jwk(private), {name: X25519}, true, [deriveKey])\n[PASS] Invalid key pair: importKey(jwk(private), {name: X25519}, true, [deriveBits, deriveKey])\n[PASS] Bad usages: importKey(jwk (public) , {name: X448}, true, [unwrapKey])\n[PASS] Bad usages: importKey(jwk (public) , {name: X448}, false, [unwrapKey])\n[PASS] Good parameters: P-256 bits (spki, buffer(59, compressed), {name: ECDH, namedCurve: P-256}, true, [])\n[PASS] Invalid key pair: importKey(jwk(private), {name: X25519}, true, [deriveBits])\n[PASS] Good parameters: P-256 bits (jwk, object(kty, crv, x, y), {name: ECDH, namedCurve: P-256}, true, [])\n[PASS] Bad usages: importKey(jwk (public) , {name: X448}, true, [deriveKey])\n[PASS] Invalid key pair: importKey(jwk(private), {name: X25519}, true, [deriveKey, deriveBits, deriveKey, deriveBits])\n[PASS] Bad usages: importKey(jwk (public) , {name: X448}, false, [deriveKey])\n[PASS] Bad usages: importKey(jwk (public) , {name: X448}, true, [deriveBits])\n[PASS] Bad usages: importKey(jwk (public) , {name: X448}, false, [deriveBits])\n[PASS] ECDH any JWK alg: P-256 bits (jwk, object(kty, crv, x, y, alg), {name: ECDH, namedCurve: P-256}, true, [])\n[PASS] Good parameters: P-256 bits (raw, buffer(65), {name: ECDH, namedCurve: P-256}, true, [])\n[PASS] Good parameters: P-256 bits (raw, buffer(33, compressed), {name: ECDH, namedCurve: P-256}, true, [])\n[PASS] Empty usages: importKey(pkcs8, {name: X448}, true, [])\n[PASS] Good parameters: P-256 bits (pkcs8, buffer(138), {name: ECDH, namedCurve: P-256}, true, [deriveKey])\n[PASS] Good parameters: P-256 bits (pkcs8, buffer(138), {name: ECDH, namedCurve: P-256}, true, [deriveBits, deriveKey])\n[PASS] Good parameters: P-256 bits (pkcs8, buffer(138), {name: ECDH, namedCurve: P-256}, true, [deriveBits])\n[PASS] Empty usages: importKey(pkcs8, {name: X448}, false, [])\n[PASS] Empty usages: importKey(jwk(private), {name: X448}, true, [])\n[PASS] Good parameters: P-256 bits (pkcs8, buffer(138), {name: ECDH, namedCurve: P-256}, true, [deriveKey, deriveBits, deriveKey, deriveBits])\n[PASS] Empty usages: importKey(jwk(private), {name: X448}, false, [])\n[PASS] Bad key length: importKey(spki, {name: X448}, true, [])\n[PASS] Bad key length: importKey(spki, {name: X448}, false, [])\n[PASS] Bad key length: importKey(pkcs8, {name: X448}, true, [deriveKey])\n[PASS] Bad key length: importKey(pkcs8, {name: X448}, false, [deriveKey])\n[PASS] Empty Usages: P-256 bits (pkcs8, buffer(138), {name: ECDH, namedCurve: P-256}, true, [])\n[PASS] Bad key length: importKey(pkcs8, {name: X448}, true, [deriveBits, deriveKey])\n[PASS] Bad key length: importKey(pkcs8, {name: X448}, false, [deriveBits, deriveKey])\n[PASS] Good parameters: P-256 bits (jwk, object(kty, crv, x, y, d), {name: ECDH, namedCurve: P-256}, true, [deriveKey])\n[PASS] Bad key length: importKey(pkcs8, {name: X448}, true, [deriveBits])\n[PASS] Bad key length: importKey(pkcs8, {name: X448}, false, [deriveBits])\n[PASS] Bad key length: importKey(pkcs8, {name: X448}, true, [deriveKey, deriveBits, deriveKey, deriveBits])\n[PASS] ECDH any JWK alg: P-256 bits (jwk, object(kty, crv, x, y, d, alg), {name: ECDH, namedCurve: P-256}, true, [deriveKey])\n[PASS] Bad key length: importKey(pkcs8, {name: X448}, false, [deriveKey, deriveBits, deriveKey, deriveBits])\n[PASS] Bad key length: importKey(raw, {name: X448}, true, [])\n[PASS] Bad key length: importKey(raw, {name: X448}, false, [])\n[PASS] Bad key length: importKey(jwk(private), {name: X448}, true, [deriveKey])\n[PASS] Good parameters: P-256 bits (jwk, object(kty, crv, x, y, d), {name: ECDH, namedCurve: P-256}, true, [deriveBits, deriveKey])\n[PASS] Bad key length: importKey(jwk(private), {name: X448}, false, [deriveKey])\n[PASS] ECDH any JWK alg: P-256 bits (jwk, object(kty, crv, x, y, d, alg), {name: ECDH, namedCurve: P-256}, true, [deriveBits, deriveKey])\n[PASS] Bad key length: importKey(jwk(private), {name: X448}, true, [deriveBits, deriveKey])\n[PASS] Bad key length: importKey(jwk(private), {name: X448}, false, [deriveBits, deriveKey])\n[PASS] Bad key length: importKey(jwk(private), {name: X448}, true, [deriveBits])\n[PASS] Good parameters: P-256 bits (jwk, object(kty, crv, x, y, d), {name: ECDH, namedCurve: P-256}, true, [deriveBits])\n[PASS] Bad key length: importKey(jwk(private), {name: X448}, false, [deriveBits])\n[PASS] Bad key length: importKey(jwk(private), {name: X448}, true, [deriveKey, deriveBits, deriveKey, deriveBits])\n[PASS] ECDH any JWK alg: P-256 bits (jwk, object(kty, crv, x, y, d, alg), {name: ECDH, namedCurve: P-256}, true, [deriveBits])\n[PASS] Bad key length: importKey(jwk(private), {name: X448}, false, [deriveKey, deriveBits, deriveKey, deriveBits])\n[PASS] Bad key length: importKey(jwk (public) , {name: X448}, true, [])\n[PASS] Bad key length: importKey(jwk (public) , {name: X448}, false, [])\n[PASS] Missing JWK 'x' parameter: importKey(jwk(private), {name: X448}, true, [deriveKey])\n[PASS] Missing JWK 'x' parameter: importKey(jwk(private), {name: X448}, false, [deriveKey])\n[PASS] Missing JWK 'x' parameter: importKey(jwk(private), {name: X448}, true, [deriveBits, deriveKey])\n[PASS] Good parameters: P-256 bits (jwk, object(kty, crv, x, y, d), {name: ECDH, namedCurve: P-256}, true, [deriveKey, deriveBits, deriveKey, deriveBits])\n[PASS] ECDH any JWK alg: P-256 bits (jwk, object(kty, crv, x, y, d, alg), {name: ECDH, namedCurve: P-256}, true, [deriveKey, deriveBits, deriveKey, deriveBits])\n[PASS] Empty Usages: P-256 bits (jwk, object(kty, crv, x, y, d), {name: ECDH, namedCurve: P-256}, true, [])\n[PASS] Missing JWK 'x' parameter: importKey(jwk(private), {name: X448}, false, [deriveBits, deriveKey])\n[PASS] Missing JWK 'x' parameter: importKey(jwk(private), {name: X448}, true, [deriveBits])\n[PASS] Good parameters: P-256 bits (spki, buffer(91), {name: ECDH, namedCurve: P-256}, false, [])\n[PASS] Missing JWK 'x' parameter: importKey(jwk(private), {name: X448}, false, [deriveBits])\n[PASS] Missing JWK 'x' parameter: importKey(jwk(private), {name: X448}, true, [deriveKey, deriveBits, deriveKey, deriveBits])\n[PASS] Missing JWK 'x' parameter: importKey(jwk(private), {name: X448}, false, [deriveKey, deriveBits, deriveKey, deriveBits])\n[PASS] Missing JWK 'kty' parameter: importKey(jwk(private), {name: X448}, true, [deriveKey])\n[PASS] Missing JWK 'kty' parameter: importKey(jwk(private), {name: X448}, false, [deriveKey])\n[PASS] Good parameters: P-256 bits (spki, buffer(59, compressed), {name: ECDH, namedCurve: P-256}, false, [])\n[PASS] Missing JWK 'kty' parameter: importKey(jwk(private), {name: X448}, true, [deriveBits, deriveKey])\n[PASS] Missing JWK 'kty' parameter: importKey(jwk(private), {name: X448}, false, [deriveBits, deriveKey])\n[PASS] Missing JWK 'kty' parameter: importKey(jwk(private), {name: X448}, true, [deriveBits])\n[PASS] Good parameters: P-256 bits (jwk, object(kty, crv, x, y), {name: ECDH, namedCurve: P-256}, false, [])\n[PASS] Missing JWK 'kty' parameter: importKey(jwk(private), {name: X448}, false, [deriveBits])\n[PASS] Missing JWK 'kty' parameter: importKey(jwk(private), {name: X448}, true, [deriveKey, deriveBits, deriveKey, deriveBits])\n[PASS] Good parameters: 1024 bits (spki, buffer(162), {hash: SHA-1, name: RSA-OAEP}, true, [encrypt])\n[PASS] Missing JWK 'kty' parameter: importKey(jwk(private), {name: X448}, false, [deriveKey, deriveBits, deriveKey, deriveBits])\n[PASS] Missing JWK 'crv' parameter: importKey(jwk (public) , {name: X448}, true, [])\n[PASS] ECDH any JWK alg: P-256 bits (jwk, object(kty, crv, x, y, alg), {name: ECDH, namedCurve: P-256}, false, [])\n[PASS] Good parameters: P-256 bits (raw, buffer(65), {name: ECDH, namedCurve: P-256}, false, [])\n[PASS] Missing JWK 'crv' parameter: importKey(jwk (public) , {name: X448}, false, [])\n[PASS] Good parameters: P-256 bits (raw, buffer(33, compressed), {name: ECDH, namedCurve: P-256}, false, [])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e), {hash: SHA-1, name: RSA-OAEP}, true, [encrypt])\n[PASS] Invalid key pair: importKey(jwk(private), {name: X448}, true, [deriveKey])\n[PASS] Invalid key pair: importKey(jwk(private), {name: X448}, true, [deriveBits, deriveKey])\n[PASS] Good parameters: P-256 bits (pkcs8, buffer(138), {name: ECDH, namedCurve: P-256}, false, [deriveKey])\n[PASS] Good parameters: 1024 bits (spki, buffer(162), {hash: SHA-1, name: RSA-OAEP}, true, [wrapKey, encrypt])\n[PASS] Invalid key pair: importKey(jwk(private), {name: X448}, true, [deriveBits])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e), {hash: SHA-1, name: RSA-OAEP}, true, [wrapKey, encrypt])\n[PASS] Invalid key pair: importKey(jwk(private), {name: X448}, true, [deriveKey, deriveBits, deriveKey, deriveBits])\n[PASS] Good parameters: P-256 bits (pkcs8, buffer(138), {name: ECDH, namedCurve: P-256}, false, [deriveBits, deriveKey])\n[PASS] Good parameters: 1024 bits (spki, buffer(162), {hash: SHA-1, name: RSA-OAEP}, true, [wrapKey])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e), {hash: SHA-1, name: RSA-OAEP}, true, [wrapKey])\n[PASS] Good parameters: P-256 bits (pkcs8, buffer(138), {name: ECDH, namedCurve: P-256}, false, [deriveBits])\n[PASS] Good parameters: 1024 bits (spki, buffer(162), {hash: SHA-1, name: RSA-OAEP}, true, [])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e), {hash: SHA-1, name: RSA-OAEP}, true, [])\n[PASS] Good parameters: P-256 bits (pkcs8, buffer(138), {name: ECDH, namedCurve: P-256}, false, [deriveKey, deriveBits, deriveKey, deriveBits])\n[PASS] Good parameters: 1024 bits (spki, buffer(162), {hash: SHA-1, name: RSA-OAEP}, true, [encrypt, wrapKey, encrypt, wrapKey])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e), {hash: SHA-1, name: RSA-OAEP}, true, [encrypt, wrapKey, encrypt, wrapKey])\n[PASS] Empty Usages: P-256 bits (pkcs8, buffer(138), {name: ECDH, namedCurve: P-256}, false, [])\n[PASS] Good parameters: P-256 bits (jwk, object(kty, crv, x, y, d), {name: ECDH, namedCurve: P-256}, false, [deriveKey])\n[PASS] ECDH any JWK alg: P-256 bits (jwk, object(kty, crv, x, y, d, alg), {name: ECDH, namedCurve: P-256}, false, [deriveKey])\n[PASS] Good parameters: P-256 bits (jwk, object(kty, crv, x, y, d), {name: ECDH, namedCurve: P-256}, false, [deriveBits, deriveKey])\n[PASS] ECDH any JWK alg: P-256 bits (jwk, object(kty, crv, x, y, d, alg), {name: ECDH, namedCurve: P-256}, false, [deriveBits, deriveKey])\n[PASS] Good parameters: P-256 bits (jwk, object(kty, crv, x, y, d), {name: ECDH, namedCurve: P-256}, false, [deriveBits])\n[PASS] ECDH any JWK alg: P-256 bits (jwk, object(kty, crv, x, y, d, alg), {name: ECDH, namedCurve: P-256}, false, [deriveBits])\n[PASS] Good parameters: P-256 bits (jwk, object(kty, crv, x, y, d), {name: ECDH, namedCurve: P-256}, false, [deriveKey, deriveBits, deriveKey, deriveBits])\n[PASS] Good parameters: 1024 bits (pkcs8, buffer(636), {hash: SHA-1, name: RSA-OAEP}, true, [decrypt])\n[PASS] ECDH any JWK alg: P-256 bits (jwk, object(kty, crv, x, y, d, alg), {name: ECDH, namedCurve: P-256}, false, [deriveKey, deriveBits, deriveKey, deriveBits])\n[PASS] Good parameters: 1024 bits (pkcs8, buffer(636), {hash: SHA-1, name: RSA-OAEP}, true, [unwrapKey, decrypt])\n[PASS] Empty Usages: P-256 bits (jwk, object(kty, crv, x, y, d), {name: ECDH, namedCurve: P-256}, false, [])\n[PASS] Good parameters: 1024 bits (pkcs8, buffer(636), {hash: SHA-1, name: RSA-OAEP}, true, [unwrapKey])\n[PASS] Good parameters: P-384 bits (spki, buffer(120), {name: ECDH, namedCurve: P-384}, true, [])\n[PASS] Good parameters: P-384 bits (spki, buffer(72, compressed), {name: ECDH, namedCurve: P-384}, true, [])\n[PASS] Good parameters: 1024 bits (pkcs8, buffer(636), {hash: SHA-1, name: RSA-OAEP}, true, [decrypt, unwrapKey, decrypt, unwrapKey])\n[PASS] Good parameters: P-384 bits (jwk, object(kty, crv, x, y), {name: ECDH, namedCurve: P-384}, true, [])\n[PASS] Empty Usages: 1024 bits (pkcs8, object(spki, pkcs8, jwk), {hash: SHA-1, name: RSA-OAEP}, true, [])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-1, name: RSA-OAEP}, true, [decrypt])\n[PASS] ECDH any JWK alg: P-384 bits (jwk, object(kty, crv, x, y, alg), {name: ECDH, namedCurve: P-384}, true, [])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-1, name: RSA-OAEP}, true, [unwrapKey, decrypt])\n[PASS] Good parameters: P-384 bits (raw, buffer(97), {name: ECDH, namedCurve: P-384}, true, [])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-1, name: RSA-OAEP}, true, [unwrapKey])\n[PASS] Good parameters: P-384 bits (raw, buffer(49, compressed), {name: ECDH, namedCurve: P-384}, true, [])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-1, name: RSA-OAEP}, true, [decrypt, unwrapKey, decrypt, unwrapKey])\n[PASS] Empty Usages: 1024 bits (jwk, object(spki, pkcs8, jwk), {hash: SHA-1, name: RSA-OAEP}, true, [])\n[PASS] Good parameters: 1024 bits (spki, buffer(162), {hash: SHA-1, name: RSA-OAEP}, false, [encrypt])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e), {hash: SHA-1, name: RSA-OAEP}, false, [encrypt])\n[PASS] Good parameters: 1024 bits (spki, buffer(162), {hash: SHA-1, name: RSA-OAEP}, false, [wrapKey, encrypt])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e), {hash: SHA-1, name: RSA-OAEP}, false, [wrapKey, encrypt])\n[PASS] Good parameters: 1024 bits (spki, buffer(162), {hash: SHA-1, name: RSA-OAEP}, false, [wrapKey])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e), {hash: SHA-1, name: RSA-OAEP}, false, [wrapKey])\n[PASS] Good parameters: 1024 bits (spki, buffer(162), {hash: SHA-1, name: RSA-OAEP}, false, [])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e), {hash: SHA-1, name: RSA-OAEP}, false, [])\n[PASS] Good parameters: 1024 bits (spki, buffer(162), {hash: SHA-1, name: RSA-OAEP}, false, [encrypt, wrapKey, encrypt, wrapKey])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e), {hash: SHA-1, name: RSA-OAEP}, false, [encrypt, wrapKey, encrypt, wrapKey])\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, empty salt, SHA-384, with 100000 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, empty salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] Good parameters: P-384 bits (pkcs8, buffer(185), {name: ECDH, namedCurve: P-384}, true, [deriveKey])\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, empty salt, SHA-384, with 100000 iterations with missing deriveKey usage\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, empty salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] empty password, empty salt, SHA-384, with 100000 iterations with null length\n[PASS] empty password, empty salt, SHA-384, with 100000 iterations with 0 length\n[PASS] empty password, empty salt, SHA-384, with 100000 iterations with non-multiple of 8 length\n[PASS] empty password, empty salt, SHA-384, with 100000 iterations with bad hash name SHA384\n[PASS] empty password, empty salt, SHA-384, with 100000 iterations with missing deriveBits usage\n[PASS] empty password, empty salt, SHA-384, with 100000 iterations with wrong (ECDH) key\n[PASS] empty password, empty salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, empty salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-CBC length: 192  using empty password, empty salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-CBC length: 256  using empty password, empty salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-CTR length: 128  using empty password, empty salt, SHA-384, with 0 iterations\n[PASS] Good parameters: 1024 bits (pkcs8, buffer(636), {hash: SHA-1, name: RSA-OAEP}, false, [decrypt])\n[PASS] Derived key of type name: AES-CTR length: 192  using empty password, empty salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-CTR length: 256  using empty password, empty salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 128  using empty password, empty salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 192  using empty password, empty salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-GCM length: 256  using empty password, empty salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 128  using empty password, empty salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: AES-KW length: 192  using empty password, empty salt, SHA-384, with 0 iterations\n[PASS] Good parameters: 1024 bits (pkcs8, buffer(636), {hash: SHA-1, name: RSA-OAEP}, false, [unwrapKey, decrypt])\n[PASS] Derived key of type name: AES-KW length: 256  using empty password, empty salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-1 length: 256  using empty password, empty salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-256 length: 256  using empty password, empty salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-384 length: 256  using empty password, empty salt, SHA-384, with 0 iterations\n[PASS] Derived key of type name: HMAC hash: SHA-512 length: 256  using empty password, empty salt, SHA-384, with 0 iterations\n[PASS] empty password, empty salt, SHA-512, with 1 iterations\n[PASS] Good parameters: P-384 bits (pkcs8, buffer(185), {name: ECDH, namedCurve: P-384}, true, [deriveBits, deriveKey])\n[PASS] Good parameters: 1024 bits (pkcs8, buffer(636), {hash: SHA-1, name: RSA-OAEP}, false, [unwrapKey])\n[PASS] Derived key of type name: AES-CBC length: 128  using empty password, empty salt, SHA-512, with 1 iterations\n[PASS] Good parameters: 1024 bits (pkcs8, buffer(636), {hash: SHA-1, name: RSA-OAEP}, false, [decrypt, unwrapKey, decrypt, unwrapKey])\n[PASS] Empty Usages: 1024 bits (pkcs8, object(spki, pkcs8, jwk), {hash: SHA-1, name: RSA-OAEP}, false, [])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-1, name: RSA-OAEP}, false, [decrypt])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-1, name: RSA-OAEP}, false, [unwrapKey, decrypt])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-1, name: RSA-OAEP}, false, [unwrapKey])\n[PASS] Good parameters: P-384 bits (pkcs8, buffer(185), {name: ECDH, namedCurve: P-384}, true, [deriveBits])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-1, name: RSA-OAEP}, false, [decrypt, unwrapKey, decrypt, unwrapKey])\n[PASS] Empty Usages: 1024 bits (jwk, object(spki, pkcs8, jwk), {hash: SHA-1, name: RSA-OAEP}, false, [])\n[PASS] Good parameters: 1024 bits (spki, buffer(162), {hash: SHA-256, name: RSA-OAEP}, true, [encrypt])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e), {hash: SHA-256, name: RSA-OAEP}, true, [encrypt])\n[PASS] Good parameters: 1024 bits (spki, buffer(162), {hash: SHA-256, name: RSA-OAEP}, true, [wrapKey, encrypt])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e), {hash: SHA-256, name: RSA-OAEP}, true, [wrapKey, encrypt])\n[PASS] Good parameters: 1024 bits (spki, buffer(162), {hash: SHA-256, name: RSA-OAEP}, true, [wrapKey])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e), {hash: SHA-256, name: RSA-OAEP}, true, [wrapKey])\n[PASS] Good parameters: P-384 bits (pkcs8, buffer(185), {name: ECDH, namedCurve: P-384}, true, [deriveKey, deriveBits, deriveKey, deriveBits])\n[PASS] Good parameters: 1024 bits (spki, buffer(162), {hash: SHA-256, name: RSA-OAEP}, true, [])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e), {hash: SHA-256, name: RSA-OAEP}, true, [])\n[PASS] Empty Usages: P-384 bits (pkcs8, buffer(185), {name: ECDH, namedCurve: P-384}, true, [])\n[PASS] Good parameters: 1024 bits (spki, buffer(162), {hash: SHA-256, name: RSA-OAEP}, true, [encrypt, wrapKey, encrypt, wrapKey])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e), {hash: SHA-256, name: RSA-OAEP}, true, [encrypt, wrapKey, encrypt, wrapKey])\n[PASS] Good parameters: 1024 bits (pkcs8, buffer(636), {hash: SHA-256, name: RSA-OAEP}, true, [decrypt])\n[PASS] Good parameters: P-384 bits (jwk, object(kty, crv, x, y, d), {name: ECDH, namedCurve: P-384}, true, [deriveKey])\n[PASS] Good parameters: 1024 bits (pkcs8, buffer(636), {hash: SHA-256, name: RSA-OAEP}, true, [unwrapKey, decrypt])\n[PASS] Good parameters: 1024 bits (pkcs8, buffer(636), {hash: SHA-256, name: RSA-OAEP}, true, [unwrapKey])\n[PASS] ECDH any JWK alg: P-384 bits (jwk, object(kty, crv, x, y, d, alg), {name: ECDH, namedCurve: P-384}, true, [deriveKey])\n[PASS] Good parameters: 1024 bits (pkcs8, buffer(636), {hash: SHA-256, name: RSA-OAEP}, true, [decrypt, unwrapKey, decrypt, unwrapKey])\n[PASS] Empty Usages: 1024 bits (pkcs8, object(spki, pkcs8, jwk), {hash: SHA-256, name: RSA-OAEP}, true, [])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-256, name: RSA-OAEP}, true, [decrypt])\n[PASS] Good parameters: P-384 bits (jwk, object(kty, crv, x, y, d), {name: ECDH, namedCurve: P-384}, true, [deriveBits, deriveKey])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-256, name: RSA-OAEP}, true, [unwrapKey, decrypt])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-256, name: RSA-OAEP}, true, [unwrapKey])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-256, name: RSA-OAEP}, true, [decrypt, unwrapKey, decrypt, unwrapKey])\n[PASS] Empty Usages: 1024 bits (jwk, object(spki, pkcs8, jwk), {hash: SHA-256, name: RSA-OAEP}, true, [])\n[PASS] Good parameters: 1024 bits (spki, buffer(162), {hash: SHA-256, name: RSA-OAEP}, false, [encrypt])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e), {hash: SHA-256, name: RSA-OAEP}, false, [encrypt])\n[PASS] Good parameters: 1024 bits (spki, buffer(162), {hash: SHA-256, name: RSA-OAEP}, false, [wrapKey, encrypt])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e), {hash: SHA-256, name: RSA-OAEP}, false, [wrapKey, encrypt])\n[PASS] Good parameters: 1024 bits (spki, buffer(162), {hash: SHA-256, name: RSA-OAEP}, false, [wrapKey])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e), {hash: SHA-256, name: RSA-OAEP}, false, [wrapKey])\n[PASS] Good parameters: 1024 bits (spki, buffer(162), {hash: SHA-256, name: RSA-OAEP}, false, [])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e), {hash: SHA-256, name: RSA-OAEP}, false, [])\n[PASS] ECDH any JWK alg: P-384 bits (jwk, object(kty, crv, x, y, d, alg), {name: ECDH, namedCurve: P-384}, true, [deriveBits, deriveKey])\n[PASS] Good parameters: 1024 bits (spki, buffer(162), {hash: SHA-256, name: RSA-OAEP}, false, [encrypt, wrapKey, encrypt, wrapKey])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e), {hash: SHA-256, name: RSA-OAEP}, false, [encrypt, wrapKey, encrypt, wrapKey])\n[PASS] Good parameters: 1024 bits (pkcs8, buffer(636), {hash: SHA-256, name: RSA-OAEP}, false, [decrypt])\n[PASS] Good parameters: 1024 bits (pkcs8, buffer(636), {hash: SHA-256, name: RSA-OAEP}, false, [unwrapKey, decrypt])\n[PASS] Good parameters: P-384 bits (jwk, object(kty, crv, x, y, d), {name: ECDH, namedCurve: P-384}, true, [deriveBits])\n[PASS] Good parameters: 1024 bits (pkcs8, buffer(636), {hash: SHA-256, name: RSA-OAEP}, false, [unwrapKey])\n[PASS] Good parameters: 1024 bits (pkcs8, buffer(636), {hash: SHA-256, name: RSA-OAEP}, false, [decrypt, unwrapKey, decrypt, unwrapKey])\n[PASS] ECDH any JWK alg: P-384 bits (jwk, object(kty, crv, x, y, d, alg), {name: ECDH, namedCurve: P-384}, true, [deriveBits])\n[PASS] Empty Usages: 1024 bits (pkcs8, object(spki, pkcs8, jwk), {hash: SHA-256, name: RSA-OAEP}, false, [])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-256, name: RSA-OAEP}, false, [decrypt])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-256, name: RSA-OAEP}, false, [unwrapKey, decrypt])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-256, name: RSA-OAEP}, false, [unwrapKey])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-256, name: RSA-OAEP}, false, [decrypt, unwrapKey, decrypt, unwrapKey])\n[PASS] Empty Usages: 1024 bits (jwk, object(spki, pkcs8, jwk), {hash: SHA-256, name: RSA-OAEP}, false, [])\n[PASS] Good parameters: 1024 bits (spki, buffer(162), {hash: SHA-384, name: RSA-OAEP}, true, [encrypt])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e), {hash: SHA-384, name: RSA-OAEP}, true, [encrypt])\n[PASS] Good parameters: P-384 bits (jwk, object(kty, crv, x, y, d), {name: ECDH, namedCurve: P-384}, true, [deriveKey, deriveBits, deriveKey, deriveBits])\n[PASS] Good parameters: 1024 bits (spki, buffer(162), {hash: SHA-384, name: RSA-OAEP}, true, [wrapKey, encrypt])\n[PASS] ECDH any JWK alg: P-384 bits (jwk, object(kty, crv, x, y, d, alg), {name: ECDH, namedCurve: P-384}, true, [deriveKey, deriveBits, deriveKey, deriveBits])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e), {hash: SHA-384, name: RSA-OAEP}, true, [wrapKey, encrypt])\n[PASS] Good parameters: 128 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-CTR}, true, [encrypt])\n[PASS] Good parameters: 1024 bits (spki, buffer(162), {hash: SHA-384, name: RSA-OAEP}, true, [wrapKey])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e), {hash: SHA-384, name: RSA-OAEP}, true, [wrapKey])\n[PASS] Good parameters: 128 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-CTR}, true, [decrypt, encrypt])\n[PASS] Good parameters: 128 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-CTR}, true, [decrypt])\n[PASS] Good parameters: 128 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-CTR}, true, [encrypt, decrypt, encrypt, decrypt])\n[PASS] Good parameters: 1024 bits (spki, buffer(162), {hash: SHA-384, name: RSA-OAEP}, true, [])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e), {hash: SHA-384, name: RSA-OAEP}, true, [])\n[PASS] Empty Usages: 128 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-CTR}, true, [])\n[PASS] Empty Usages: P-384 bits (jwk, object(kty, crv, x, y, d), {name: ECDH, namedCurve: P-384}, true, [])\n[PASS] Good parameters: 128 bits (jwk, {alg: A128CTR, k: AQIDBAUGBwgJCgsMDQ4PEA, kty: oct}, {name: AES-CTR}, true, [encrypt])\n[PASS] Good parameters: 128 bits (jwk, {alg: A128CTR, k: AQIDBAUGBwgJCgsMDQ4PEA, kty: oct}, {name: AES-CTR}, true, [decrypt, encrypt])\n[PASS] Good parameters: 1024 bits (spki, buffer(162), {hash: SHA-384, name: RSA-OAEP}, true, [encrypt, wrapKey, encrypt, wrapKey])\n[PASS] Good parameters: P-384 bits (spki, buffer(120), {name: ECDH, namedCurve: P-384}, false, [])\n[PASS] Good parameters: 128 bits (jwk, {alg: A128CTR, k: AQIDBAUGBwgJCgsMDQ4PEA, kty: oct}, {name: AES-CTR}, true, [decrypt])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e), {hash: SHA-384, name: RSA-OAEP}, true, [encrypt, wrapKey, encrypt, wrapKey])\n[PASS] Good parameters: P-384 bits (spki, buffer(72, compressed), {name: ECDH, namedCurve: P-384}, false, [])\n[PASS] Good parameters: 128 bits (jwk, {alg: A128CTR, k: AQIDBAUGBwgJCgsMDQ4PEA, kty: oct}, {name: AES-CTR}, true, [encrypt, decrypt, encrypt, decrypt])\n[PASS] Empty Usages: 128 bits (jwk, {alg: A128CTR, k: AQIDBAUGBwgJCgsMDQ4PEA, kty: oct}, {name: AES-CTR}, true, [])\n[PASS] Good parameters: P-384 bits (jwk, object(kty, crv, x, y), {name: ECDH, namedCurve: P-384}, false, [])\n[PASS] Good parameters: 128 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-CTR}, false, [encrypt])\n[PASS] Good parameters: 128 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-CTR}, false, [decrypt, encrypt])\n[PASS] Good parameters: 1024 bits (pkcs8, buffer(636), {hash: SHA-384, name: RSA-OAEP}, true, [decrypt])\n[PASS] Good parameters: 128 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-CTR}, false, [decrypt])\n[PASS] Good parameters: 128 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-CTR}, false, [encrypt, decrypt, encrypt, decrypt])\n[PASS] Empty Usages: 128 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-CTR}, false, [])\n[PASS] ECDH any JWK alg: P-384 bits (jwk, object(kty, crv, x, y, alg), {name: ECDH, namedCurve: P-384}, false, [])\n[PASS] Good parameters: 128 bits (jwk, {alg: A128CTR, k: AQIDBAUGBwgJCgsMDQ4PEA, kty: oct}, {name: AES-CTR}, false, [encrypt])\n[PASS] Good parameters: 128 bits (jwk, {alg: A128CTR, k: AQIDBAUGBwgJCgsMDQ4PEA, kty: oct}, {name: AES-CTR}, false, [decrypt, encrypt])\n[PASS] Good parameters: P-384 bits (raw, buffer(97), {name: ECDH, namedCurve: P-384}, false, [])\n[PASS] Good parameters: 128 bits (jwk, {alg: A128CTR, k: AQIDBAUGBwgJCgsMDQ4PEA, kty: oct}, {name: AES-CTR}, false, [decrypt])\n[PASS] Good parameters: 128 bits (jwk, {alg: A128CTR, k: AQIDBAUGBwgJCgsMDQ4PEA, kty: oct}, {name: AES-CTR}, false, [encrypt, decrypt, encrypt, decrypt])\n[PASS] Good parameters: P-384 bits (raw, buffer(49, compressed), {name: ECDH, namedCurve: P-384}, false, [])\n[PASS] Empty Usages: 128 bits (jwk, {alg: A128CTR, k: AQIDBAUGBwgJCgsMDQ4PEA, kty: oct}, {name: AES-CTR}, false, [])\n[PASS] Good parameters: 192 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-CTR}, true, [encrypt])\n[PASS] Good parameters: 1024 bits (pkcs8, buffer(636), {hash: SHA-384, name: RSA-OAEP}, true, [unwrapKey, decrypt])\n[PASS] Good parameters: 192 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-CTR}, true, [decrypt, encrypt])\n[PASS] Good parameters: 192 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-CTR}, true, [decrypt])\n[PASS] Good parameters: 192 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-CTR}, true, [encrypt, decrypt, encrypt, decrypt])\n[PASS] Empty Usages: 192 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-CTR}, true, [])\n[PASS] Good parameters: 192 bits (jwk, {alg: A192CTR, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcY, kty: oct}, {name: AES-CTR}, true, [encrypt])\n[PASS] Good parameters: 192 bits (jwk, {alg: A192CTR, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcY, kty: oct}, {name: AES-CTR}, true, [decrypt, encrypt])\n[PASS] Good parameters: 192 bits (jwk, {alg: A192CTR, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcY, kty: oct}, {name: AES-CTR}, true, [decrypt])\n[PASS] Good parameters: 192 bits (jwk, {alg: A192CTR, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcY, kty: oct}, {name: AES-CTR}, true, [encrypt, decrypt, encrypt, decrypt])\n[PASS] Empty Usages: 192 bits (jwk, {alg: A192CTR, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcY, kty: oct}, {name: AES-CTR}, true, [])\n[PASS] Good parameters: 192 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-CTR}, false, [encrypt])\n[PASS] Good parameters: 192 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-CTR}, false, [decrypt, encrypt])\n[PASS] Good parameters: 192 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-CTR}, false, [decrypt])\n[PASS] Good parameters: 192 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-CTR}, false, [encrypt, decrypt, encrypt, decrypt])\n[PASS] Good parameters: 1024 bits (pkcs8, buffer(636), {hash: SHA-384, name: RSA-OAEP}, true, [unwrapKey])\n[PASS] Empty Usages: 192 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-CTR}, false, [])\n[PASS] Good parameters: 192 bits (jwk, {alg: A192CTR, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcY, kty: oct}, {name: AES-CTR}, false, [encrypt])\n[PASS] Good parameters: 192 bits (jwk, {alg: A192CTR, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcY, kty: oct}, {name: AES-CTR}, false, [decrypt, encrypt])\n[PASS] Good parameters: 192 bits (jwk, {alg: A192CTR, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcY, kty: oct}, {name: AES-CTR}, false, [decrypt])\n[PASS] Good parameters: 192 bits (jwk, {alg: A192CTR, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcY, kty: oct}, {name: AES-CTR}, false, [encrypt, decrypt, encrypt, decrypt])\n[PASS] Good parameters: P-384 bits (pkcs8, buffer(185), {name: ECDH, namedCurve: P-384}, false, [deriveKey])\n[PASS] Empty Usages: 192 bits (jwk, {alg: A192CTR, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcY, kty: oct}, {name: AES-CTR}, false, [])\n[PASS] Good parameters: 256 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 24: 25, 25: 26, 26: 27, 27: 28, 28: 29, 29: 30, 3: 4, 30: 31, 31: 32, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-CTR}, true, [encrypt])\n[PASS] Good parameters: 256 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 24: 25, 25: 26, 26: 27, 27: 28, 28: 29, 29: 30, 3: 4, 30: 31, 31: 32, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-CTR}, true, [decrypt, encrypt])\n[PASS] Good parameters: 256 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 24: 25, 25: 26, 26: 27, 27: 28, 28: 29, 29: 30, 3: 4, 30: 31, 31: 32, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-CTR}, true, [decrypt])\n[PASS] Good parameters: 256 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 24: 25, 25: 26, 26: 27, 27: 28, 28: 29, 29: 30, 3: 4, 30: 31, 31: 32, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-CTR}, true, [encrypt, decrypt, encrypt, decrypt])\n[PASS] Empty Usages: 256 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 24: 25, 25: 26, 26: 27, 27: 28, 28: 29, 29: 30, 3: 4, 30: 31, 31: 32, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-CTR}, true, [])\n[PASS] Good parameters: 1024 bits (pkcs8, buffer(636), {hash: SHA-384, name: RSA-OAEP}, true, [decrypt, unwrapKey, decrypt, unwrapKey])\n[PASS] Good parameters: 256 bits (jwk, {alg: A256CTR, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobHB0eHyA, kty: oct}, {name: AES-CTR}, true, [encrypt])\n[PASS] Good parameters: 256 bits (jwk, {alg: A256CTR, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobHB0eHyA, kty: oct}, {name: AES-CTR}, true, [decrypt, encrypt])\n[PASS] Good parameters: 256 bits (jwk, {alg: A256CTR, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobHB0eHyA, kty: oct}, {name: AES-CTR}, true, [decrypt])\n[PASS] Good parameters: 256 bits (jwk, {alg: A256CTR, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobHB0eHyA, kty: oct}, {name: AES-CTR}, true, [encrypt, decrypt, encrypt, decrypt])\n[PASS] Empty Usages: 256 bits (jwk, {alg: A256CTR, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobHB0eHyA, kty: oct}, {name: AES-CTR}, true, [])\n[PASS] Good parameters: 256 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 24: 25, 25: 26, 26: 27, 27: 28, 28: 29, 29: 30, 3: 4, 30: 31, 31: 32, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-CTR}, false, [encrypt])\n[PASS] Good parameters: 256 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 24: 25, 25: 26, 26: 27, 27: 28, 28: 29, 29: 30, 3: 4, 30: 31, 31: 32, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-CTR}, false, [decrypt, encrypt])\n[PASS] Good parameters: 256 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 24: 25, 25: 26, 26: 27, 27: 28, 28: 29, 29: 30, 3: 4, 30: 31, 31: 32, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-CTR}, false, [decrypt])\n[PASS] Good parameters: 256 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 24: 25, 25: 26, 26: 27, 27: 28, 28: 29, 29: 30, 3: 4, 30: 31, 31: 32, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-CTR}, false, [encrypt, decrypt, encrypt, decrypt])\n[PASS] Empty Usages: 256 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 24: 25, 25: 26, 26: 27, 27: 28, 28: 29, 29: 30, 3: 4, 30: 31, 31: 32, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-CTR}, false, [])\n[PASS] Good parameters: 256 bits (jwk, {alg: A256CTR, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobHB0eHyA, kty: oct}, {name: AES-CTR}, false, [encrypt])\n[PASS] Good parameters: 256 bits (jwk, {alg: A256CTR, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobHB0eHyA, kty: oct}, {name: AES-CTR}, false, [decrypt, encrypt])\n[PASS] Empty Usages: 1024 bits (pkcs8, object(spki, pkcs8, jwk), {hash: SHA-384, name: RSA-OAEP}, true, [])\n[PASS] Good parameters: 256 bits (jwk, {alg: A256CTR, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobHB0eHyA, kty: oct}, {name: AES-CTR}, false, [decrypt])\n[PASS] Good parameters: 256 bits (jwk, {alg: A256CTR, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobHB0eHyA, kty: oct}, {name: AES-CTR}, false, [encrypt, decrypt, encrypt, decrypt])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-384, name: RSA-OAEP}, true, [decrypt])\n[PASS] Empty Usages: 256 bits (jwk, {alg: A256CTR, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobHB0eHyA, kty: oct}, {name: AES-CTR}, false, [])\n[PASS] Good parameters: 128 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-CBC}, true, [encrypt])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-384, name: RSA-OAEP}, true, [unwrapKey, decrypt])\n[PASS] Good parameters: P-384 bits (pkcs8, buffer(185), {name: ECDH, namedCurve: P-384}, false, [deriveBits, deriveKey])\n[PASS] Good parameters: 128 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-CBC}, true, [decrypt, encrypt])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-384, name: RSA-OAEP}, true, [unwrapKey])\n[PASS] Good parameters: 128 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-CBC}, true, [decrypt])\n[PASS] Good parameters: 128 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-CBC}, true, [encrypt, decrypt, encrypt, decrypt])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-384, name: RSA-OAEP}, true, [decrypt, unwrapKey, decrypt, unwrapKey])\n[PASS] Empty Usages: 128 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-CBC}, true, [])\n[PASS] Empty Usages: 1024 bits (jwk, object(spki, pkcs8, jwk), {hash: SHA-384, name: RSA-OAEP}, true, [])\n[PASS] Good parameters: 128 bits (jwk, {alg: A128CBC, k: AQIDBAUGBwgJCgsMDQ4PEA, kty: oct}, {name: AES-CBC}, true, [encrypt])\n[PASS] Good parameters: 128 bits (jwk, {alg: A128CBC, k: AQIDBAUGBwgJCgsMDQ4PEA, kty: oct}, {name: AES-CBC}, true, [decrypt, encrypt])\n[PASS] Good parameters: 128 bits (jwk, {alg: A128CBC, k: AQIDBAUGBwgJCgsMDQ4PEA, kty: oct}, {name: AES-CBC}, true, [decrypt])\n[PASS] Good parameters: 1024 bits (spki, buffer(162), {hash: SHA-384, name: RSA-OAEP}, false, [encrypt])\n[PASS] Good parameters: 128 bits (jwk, {alg: A128CBC, k: AQIDBAUGBwgJCgsMDQ4PEA, kty: oct}, {name: AES-CBC}, true, [encrypt, decrypt, encrypt, decrypt])\n[PASS] Empty Usages: 128 bits (jwk, {alg: A128CBC, k: AQIDBAUGBwgJCgsMDQ4PEA, kty: oct}, {name: AES-CBC}, true, [])\n[PASS] Good parameters: 128 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-CBC}, false, [encrypt])\n[PASS] Good parameters: 128 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-CBC}, false, [decrypt, encrypt])\n[PASS] Good parameters: 128 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-CBC}, false, [decrypt])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e), {hash: SHA-384, name: RSA-OAEP}, false, [encrypt])\n[PASS] Good parameters: 128 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-CBC}, false, [encrypt, decrypt, encrypt, decrypt])\n[PASS] Empty Usages: 128 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-CBC}, false, [])\n[PASS] Good parameters: 128 bits (jwk, {alg: A128CBC, k: AQIDBAUGBwgJCgsMDQ4PEA, kty: oct}, {name: AES-CBC}, false, [encrypt])\n[PASS] Good parameters: 128 bits (jwk, {alg: A128CBC, k: AQIDBAUGBwgJCgsMDQ4PEA, kty: oct}, {name: AES-CBC}, false, [decrypt, encrypt])\n[PASS] Good parameters: 128 bits (jwk, {alg: A128CBC, k: AQIDBAUGBwgJCgsMDQ4PEA, kty: oct}, {name: AES-CBC}, false, [decrypt])\n[PASS] Good parameters: 128 bits (jwk, {alg: A128CBC, k: AQIDBAUGBwgJCgsMDQ4PEA, kty: oct}, {name: AES-CBC}, false, [encrypt, decrypt, encrypt, decrypt])\n[PASS] Good parameters: 1024 bits (spki, buffer(162), {hash: SHA-384, name: RSA-OAEP}, false, [wrapKey, encrypt])\n[PASS] Empty Usages: 128 bits (jwk, {alg: A128CBC, k: AQIDBAUGBwgJCgsMDQ4PEA, kty: oct}, {name: AES-CBC}, false, [])\n[PASS] Good parameters: 192 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-CBC}, true, [encrypt])\n[PASS] Good parameters: 192 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-CBC}, true, [decrypt, encrypt])\n[PASS] Good parameters: P-384 bits (pkcs8, buffer(185), {name: ECDH, namedCurve: P-384}, false, [deriveBits])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e), {hash: SHA-384, name: RSA-OAEP}, false, [wrapKey, encrypt])\n[PASS] Good parameters: 192 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-CBC}, true, [decrypt])\n[PASS] Good parameters: 192 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-CBC}, true, [encrypt, decrypt, encrypt, decrypt])\n[PASS] Empty Usages: 192 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-CBC}, true, [])\n[PASS] Good parameters: 1024 bits (spki, buffer(162), {hash: SHA-384, name: RSA-OAEP}, false, [wrapKey])\n[PASS] Good parameters: 192 bits (jwk, {alg: A192CBC, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcY, kty: oct}, {name: AES-CBC}, true, [encrypt])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e), {hash: SHA-384, name: RSA-OAEP}, false, [wrapKey])\n[PASS] Good parameters: 192 bits (jwk, {alg: A192CBC, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcY, kty: oct}, {name: AES-CBC}, true, [decrypt, encrypt])\n[PASS] Good parameters: 192 bits (jwk, {alg: A192CBC, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcY, kty: oct}, {name: AES-CBC}, true, [decrypt])\n[PASS] Good parameters: 1024 bits (spki, buffer(162), {hash: SHA-384, name: RSA-OAEP}, false, [])\n[PASS] Good parameters: 192 bits (jwk, {alg: A192CBC, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcY, kty: oct}, {name: AES-CBC}, true, [encrypt, decrypt, encrypt, decrypt])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e), {hash: SHA-384, name: RSA-OAEP}, false, [])\n[PASS] Empty Usages: 192 bits (jwk, {alg: A192CBC, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcY, kty: oct}, {name: AES-CBC}, true, [])\n[PASS] Good parameters: 192 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-CBC}, false, [encrypt])\n[PASS] Good parameters: 192 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-CBC}, false, [decrypt, encrypt])\n[PASS] Good parameters: 192 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-CBC}, false, [decrypt])\n[PASS] Good parameters: 1024 bits (spki, buffer(162), {hash: SHA-384, name: RSA-OAEP}, false, [encrypt, wrapKey, encrypt, wrapKey])\n[PASS] Good parameters: 192 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-CBC}, false, [encrypt, decrypt, encrypt, decrypt])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e), {hash: SHA-384, name: RSA-OAEP}, false, [encrypt, wrapKey, encrypt, wrapKey])\n[PASS] Empty Usages: 192 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-CBC}, false, [])\n[PASS] Good parameters: 192 bits (jwk, {alg: A192CBC, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcY, kty: oct}, {name: AES-CBC}, false, [encrypt])\n[PASS] Good parameters: 192 bits (jwk, {alg: A192CBC, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcY, kty: oct}, {name: AES-CBC}, false, [decrypt, encrypt])\n[PASS] Good parameters: 192 bits (jwk, {alg: A192CBC, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcY, kty: oct}, {name: AES-CBC}, false, [decrypt])\n[PASS] Good parameters: P-384 bits (pkcs8, buffer(185), {name: ECDH, namedCurve: P-384}, false, [deriveKey, deriveBits, deriveKey, deriveBits])\n[PASS] Good parameters: 1024 bits (pkcs8, buffer(636), {hash: SHA-384, name: RSA-OAEP}, false, [decrypt])\n[PASS] Good parameters: 192 bits (jwk, {alg: A192CBC, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcY, kty: oct}, {name: AES-CBC}, false, [encrypt, decrypt, encrypt, decrypt])\n[PASS] Empty Usages: 192 bits (jwk, {alg: A192CBC, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcY, kty: oct}, {name: AES-CBC}, false, [])\n[PASS] Good parameters: 256 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 24: 25, 25: 26, 26: 27, 27: 28, 28: 29, 29: 30, 3: 4, 30: 31, 31: 32, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-CBC}, true, [encrypt])\n[PASS] Good parameters: 256 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 24: 25, 25: 26, 26: 27, 27: 28, 28: 29, 29: 30, 3: 4, 30: 31, 31: 32, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-CBC}, true, [decrypt, encrypt])\n[PASS] Good parameters: 256 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 24: 25, 25: 26, 26: 27, 27: 28, 28: 29, 29: 30, 3: 4, 30: 31, 31: 32, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-CBC}, true, [decrypt])\n[PASS] Good parameters: 256 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 24: 25, 25: 26, 26: 27, 27: 28, 28: 29, 29: 30, 3: 4, 30: 31, 31: 32, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-CBC}, true, [encrypt, decrypt, encrypt, decrypt])\n[PASS] Empty Usages: 256 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 24: 25, 25: 26, 26: 27, 27: 28, 28: 29, 29: 30, 3: 4, 30: 31, 31: 32, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-CBC}, true, [])\n[PASS] Good parameters: 256 bits (jwk, {alg: A256CBC, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobHB0eHyA, kty: oct}, {name: AES-CBC}, true, [encrypt])\n[PASS] Good parameters: 256 bits (jwk, {alg: A256CBC, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobHB0eHyA, kty: oct}, {name: AES-CBC}, true, [decrypt, encrypt])\n[PASS] Good parameters: 1024 bits (pkcs8, buffer(636), {hash: SHA-384, name: RSA-OAEP}, false, [unwrapKey, decrypt])\n[PASS] Good parameters: 256 bits (jwk, {alg: A256CBC, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobHB0eHyA, kty: oct}, {name: AES-CBC}, true, [decrypt])\n[PASS] Good parameters: 256 bits (jwk, {alg: A256CBC, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobHB0eHyA, kty: oct}, {name: AES-CBC}, true, [encrypt, decrypt, encrypt, decrypt])\n[PASS] Empty Usages: 256 bits (jwk, {alg: A256CBC, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobHB0eHyA, kty: oct}, {name: AES-CBC}, true, [])\n[PASS] Good parameters: 256 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 24: 25, 25: 26, 26: 27, 27: 28, 28: 29, 29: 30, 3: 4, 30: 31, 31: 32, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-CBC}, false, [encrypt])\n[PASS] Good parameters: 256 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 24: 25, 25: 26, 26: 27, 27: 28, 28: 29, 29: 30, 3: 4, 30: 31, 31: 32, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-CBC}, false, [decrypt, encrypt])\n[PASS] Good parameters: 256 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 24: 25, 25: 26, 26: 27, 27: 28, 28: 29, 29: 30, 3: 4, 30: 31, 31: 32, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-CBC}, false, [decrypt])\n[PASS] Good parameters: 256 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 24: 25, 25: 26, 26: 27, 27: 28, 28: 29, 29: 30, 3: 4, 30: 31, 31: 32, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-CBC}, false, [encrypt, decrypt, encrypt, decrypt])\n[PASS] Empty Usages: P-384 bits (pkcs8, buffer(185), {name: ECDH, namedCurve: P-384}, false, [])\n[PASS] Empty Usages: 256 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 24: 25, 25: 26, 26: 27, 27: 28, 28: 29, 29: 30, 3: 4, 30: 31, 31: 32, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-CBC}, false, [])\n[PASS] Good parameters: 256 bits (jwk, {alg: A256CBC, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobHB0eHyA, kty: oct}, {name: AES-CBC}, false, [encrypt])\n[PASS] namespace format\n[PASS] Good parameters: 1024 bits (pkcs8, buffer(636), {hash: SHA-384, name: RSA-OAEP}, false, [unwrapKey])\n[PASS] Good parameters: 256 bits (jwk, {alg: A256CBC, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobHB0eHyA, kty: oct}, {name: AES-CBC}, false, [decrypt, encrypt])\n[PASS] Good parameters: 256 bits (jwk, {alg: A256CBC, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobHB0eHyA, kty: oct}, {name: AES-CBC}, false, [decrypt])\n[PASS] Good parameters: 256 bits (jwk, {alg: A256CBC, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobHB0eHyA, kty: oct}, {name: AES-CBC}, false, [encrypt, decrypt, encrypt, decrypt])\n[PASS] Empty Usages: 256 bits (jwk, {alg: A256CBC, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobHB0eHyA, kty: oct}, {name: AES-CBC}, false, [])\n[PASS] Good parameters: 128 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-GCM}, true, [encrypt])\n[PASS] Good parameters: 128 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-GCM}, true, [decrypt, encrypt])\n[PASS] Good parameters: 1024 bits (pkcs8, buffer(636), {hash: SHA-384, name: RSA-OAEP}, false, [decrypt, unwrapKey, decrypt, unwrapKey])\n[PASS] Good parameters: 128 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-GCM}, true, [decrypt])\n[PASS] Good parameters: 128 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-GCM}, true, [encrypt, decrypt, encrypt, decrypt])\n[PASS] version set\n[PASS] Empty Usages: 128 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-GCM}, true, [])\n[PASS] Good parameters: 128 bits (jwk, {alg: A128GCM, k: AQIDBAUGBwgJCgsMDQ4PEA, kty: oct}, {name: AES-GCM}, true, [encrypt])\n[PASS] Empty Usages: 1024 bits (pkcs8, object(spki, pkcs8, jwk), {hash: SHA-384, name: RSA-OAEP}, false, [])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-384, name: RSA-OAEP}, false, [decrypt])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-384, name: RSA-OAEP}, false, [unwrapKey, decrypt])\n[PASS] variant set\n[PASS] Good parameters: P-384 bits (jwk, object(kty, crv, x, y, d), {name: ECDH, namedCurve: P-384}, false, [deriveKey])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-384, name: RSA-OAEP}, false, [unwrapKey])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-384, name: RSA-OAEP}, false, [decrypt, unwrapKey, decrypt, unwrapKey])\n[PASS] Good parameters: 128 bits (jwk, {alg: A128GCM, k: AQIDBAUGBwgJCgsMDQ4PEA, kty: oct}, {name: AES-GCM}, true, [decrypt, encrypt])\n[PASS] Empty Usages: 1024 bits (jwk, object(spki, pkcs8, jwk), {hash: SHA-384, name: RSA-OAEP}, false, [])\n[PASS] Good parameters: 128 bits (jwk, {alg: A128GCM, k: AQIDBAUGBwgJCgsMDQ4PEA, kty: oct}, {name: AES-GCM}, true, [decrypt])\n[PASS] Good parameters: 128 bits (jwk, {alg: A128GCM, k: AQIDBAUGBwgJCgsMDQ4PEA, kty: oct}, {name: AES-GCM}, true, [encrypt, decrypt, encrypt, decrypt])\n[PASS] Empty Usages: 128 bits (jwk, {alg: A128GCM, k: AQIDBAUGBwgJCgsMDQ4PEA, kty: oct}, {name: AES-GCM}, true, [])\n[PASS] Good parameters: 128 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-GCM}, false, [encrypt])\n[PASS] Good parameters: 128 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-GCM}, false, [decrypt, encrypt])\n[PASS] Good parameters: 128 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-GCM}, false, [decrypt])\n[PASS] Good parameters: 128 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-GCM}, false, [encrypt, decrypt, encrypt, decrypt])\n[PASS] Empty Usages: 128 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-GCM}, false, [])\n[PASS] Good parameters: 128 bits (jwk, {alg: A128GCM, k: AQIDBAUGBwgJCgsMDQ4PEA, kty: oct}, {name: AES-GCM}, false, [encrypt])\n[PASS] Good parameters: 128 bits (jwk, {alg: A128GCM, k: AQIDBAUGBwgJCgsMDQ4PEA, kty: oct}, {name: AES-GCM}, false, [decrypt, encrypt])\n[PASS] Good parameters: 128 bits (jwk, {alg: A128GCM, k: AQIDBAUGBwgJCgsMDQ4PEA, kty: oct}, {name: AES-GCM}, false, [decrypt])\n[PASS] Good parameters: 128 bits (jwk, {alg: A128GCM, k: AQIDBAUGBwgJCgsMDQ4PEA, kty: oct}, {name: AES-GCM}, false, [encrypt, decrypt, encrypt, decrypt])\n[PASS] Empty Usages: 128 bits (jwk, {alg: A128GCM, k: AQIDBAUGBwgJCgsMDQ4PEA, kty: oct}, {name: AES-GCM}, false, [])\n[PASS] Good parameters: 192 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-GCM}, true, [encrypt])\n[PASS] ECDH any JWK alg: P-384 bits (jwk, object(kty, crv, x, y, d, alg), {name: ECDH, namedCurve: P-384}, false, [deriveKey])\n[PASS] Good parameters: 192 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-GCM}, true, [decrypt, encrypt])\n[PASS] Good parameters: 192 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-GCM}, true, [decrypt])\n[PASS] Good parameters: 192 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-GCM}, true, [encrypt, decrypt, encrypt, decrypt])\n[PASS] Empty Usages: 192 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-GCM}, true, [])\n[PASS] Good parameters: 192 bits (jwk, {alg: A192GCM, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcY, kty: oct}, {name: AES-GCM}, true, [encrypt])\n[PASS] Good parameters: 192 bits (jwk, {alg: A192GCM, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcY, kty: oct}, {name: AES-GCM}, true, [decrypt, encrypt])\n[PASS] Good parameters: 192 bits (jwk, {alg: A192GCM, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcY, kty: oct}, {name: AES-GCM}, true, [decrypt])\n[PASS] Good parameters: 192 bits (jwk, {alg: A192GCM, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcY, kty: oct}, {name: AES-GCM}, true, [encrypt, decrypt, encrypt, decrypt])\n[PASS] Empty Usages: 192 bits (jwk, {alg: A192GCM, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcY, kty: oct}, {name: AES-GCM}, true, [])\n[PASS] Good parameters: 192 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-GCM}, false, [encrypt])\n[PASS] Good parameters: 192 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-GCM}, false, [decrypt, encrypt])\n[PASS] Good parameters: 192 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-GCM}, false, [decrypt])\n[PASS] Good parameters: 192 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-GCM}, false, [encrypt, decrypt, encrypt, decrypt])\n[PASS] Empty Usages: 192 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-GCM}, false, [])\n[PASS] Good parameters: 192 bits (jwk, {alg: A192GCM, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcY, kty: oct}, {name: AES-GCM}, false, [encrypt])\n[PASS] Good parameters: 192 bits (jwk, {alg: A192GCM, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcY, kty: oct}, {name: AES-GCM}, false, [decrypt, encrypt])\n[PASS] Good parameters: 192 bits (jwk, {alg: A192GCM, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcY, kty: oct}, {name: AES-GCM}, false, [decrypt])\n[PASS] Good parameters: 192 bits (jwk, {alg: A192GCM, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcY, kty: oct}, {name: AES-GCM}, false, [encrypt, decrypt, encrypt, decrypt])\n[PASS] Empty Usages: 192 bits (jwk, {alg: A192GCM, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcY, kty: oct}, {name: AES-GCM}, false, [])\n[PASS] Good parameters: 256 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 24: 25, 25: 26, 26: 27, 27: 28, 28: 29, 29: 30, 3: 4, 30: 31, 31: 32, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-GCM}, true, [encrypt])\n[PASS] Good parameters: 256 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 24: 25, 25: 26, 26: 27, 27: 28, 28: 29, 29: 30, 3: 4, 30: 31, 31: 32, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-GCM}, true, [decrypt, encrypt])\n[PASS] Good parameters: 256 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 24: 25, 25: 26, 26: 27, 27: 28, 28: 29, 29: 30, 3: 4, 30: 31, 31: 32, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-GCM}, true, [decrypt])\n[PASS] Good parameters: 256 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 24: 25, 25: 26, 26: 27, 27: 28, 28: 29, 29: 30, 3: 4, 30: 31, 31: 32, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-GCM}, true, [encrypt, decrypt, encrypt, decrypt])\n[PASS] Empty Usages: 256 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 24: 25, 25: 26, 26: 27, 27: 28, 28: 29, 29: 30, 3: 4, 30: 31, 31: 32, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-GCM}, true, [])\n[PASS] Good parameters: 256 bits (jwk, {alg: A256GCM, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobHB0eHyA, kty: oct}, {name: AES-GCM}, true, [encrypt])\n[PASS] Good parameters: 256 bits (jwk, {alg: A256GCM, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobHB0eHyA, kty: oct}, {name: AES-GCM}, true, [decrypt, encrypt])\n[PASS] Good parameters: 256 bits (jwk, {alg: A256GCM, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobHB0eHyA, kty: oct}, {name: AES-GCM}, true, [decrypt])\n[PASS] Good parameters: 256 bits (jwk, {alg: A256GCM, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobHB0eHyA, kty: oct}, {name: AES-GCM}, true, [encrypt, decrypt, encrypt, decrypt])\n[PASS] Empty Usages: 256 bits (jwk, {alg: A256GCM, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobHB0eHyA, kty: oct}, {name: AES-GCM}, true, [])\n[PASS] Good parameters: 1024 bits (spki, buffer(162), {hash: SHA-512, name: RSA-OAEP}, true, [encrypt])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e), {hash: SHA-512, name: RSA-OAEP}, true, [encrypt])\n[PASS] Good parameters: 1024 bits (spki, buffer(162), {hash: SHA-512, name: RSA-OAEP}, true, [wrapKey, encrypt])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e), {hash: SHA-512, name: RSA-OAEP}, true, [wrapKey, encrypt])\n[PASS] Good parameters: 1024 bits (spki, buffer(162), {hash: SHA-512, name: RSA-OAEP}, true, [wrapKey])\n[PASS] Good parameters: 256 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 24: 25, 25: 26, 26: 27, 27: 28, 28: 29, 29: 30, 3: 4, 30: 31, 31: 32, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-GCM}, false, [encrypt])\n[PASS] Good parameters: 256 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 24: 25, 25: 26, 26: 27, 27: 28, 28: 29, 29: 30, 3: 4, 30: 31, 31: 32, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-GCM}, false, [decrypt, encrypt])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e), {hash: SHA-512, name: RSA-OAEP}, true, [wrapKey])\n[PASS] Good parameters: P-384 bits (jwk, object(kty, crv, x, y, d), {name: ECDH, namedCurve: P-384}, false, [deriveBits, deriveKey])\n[PASS] Good parameters: 256 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 24: 25, 25: 26, 26: 27, 27: 28, 28: 29, 29: 30, 3: 4, 30: 31, 31: 32, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-GCM}, false, [decrypt])\n[PASS] Good parameters: 256 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 24: 25, 25: 26, 26: 27, 27: 28, 28: 29, 29: 30, 3: 4, 30: 31, 31: 32, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-GCM}, false, [encrypt, decrypt, encrypt, decrypt])\n[PASS] Empty Usages: 256 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 24: 25, 25: 26, 26: 27, 27: 28, 28: 29, 29: 30, 3: 4, 30: 31, 31: 32, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-GCM}, false, [])\n[PASS] Good parameters: 256 bits (jwk, {alg: A256GCM, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobHB0eHyA, kty: oct}, {name: AES-GCM}, false, [encrypt])\n[PASS] Good parameters: 256 bits (jwk, {alg: A256GCM, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobHB0eHyA, kty: oct}, {name: AES-GCM}, false, [decrypt, encrypt])\n[PASS] Good parameters: 1024 bits (spki, buffer(162), {hash: SHA-512, name: RSA-OAEP}, true, [])\n[PASS] Good parameters: 256 bits (jwk, {alg: A256GCM, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobHB0eHyA, kty: oct}, {name: AES-GCM}, false, [decrypt])\n[PASS] Good parameters: 256 bits (jwk, {alg: A256GCM, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobHB0eHyA, kty: oct}, {name: AES-GCM}, false, [encrypt, decrypt, encrypt, decrypt])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e), {hash: SHA-512, name: RSA-OAEP}, true, [])\n[PASS] Empty Usages: 256 bits (jwk, {alg: A256GCM, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobHB0eHyA, kty: oct}, {name: AES-GCM}, false, [])\n[PASS] Good parameters: 128 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-KW}, true, [wrapKey])\n[PASS] Good parameters: 128 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-KW}, true, [unwrapKey, wrapKey])\n[PASS] Good parameters: 128 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-KW}, true, [unwrapKey])\n[PASS] Good parameters: 128 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-KW}, true, [wrapKey, unwrapKey, wrapKey, unwrapKey])\n[PASS] Empty Usages: 128 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-KW}, true, [])\n[PASS] Good parameters: 128 bits (jwk, {alg: A128KW, k: AQIDBAUGBwgJCgsMDQ4PEA, kty: oct}, {name: AES-KW}, true, [wrapKey])\n[PASS] Good parameters: 1024 bits (spki, buffer(162), {hash: SHA-512, name: RSA-OAEP}, true, [encrypt, wrapKey, encrypt, wrapKey])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e), {hash: SHA-512, name: RSA-OAEP}, true, [encrypt, wrapKey, encrypt, wrapKey])\n[PASS] Good parameters: 128 bits (jwk, {alg: A128KW, k: AQIDBAUGBwgJCgsMDQ4PEA, kty: oct}, {name: AES-KW}, true, [unwrapKey, wrapKey])\n[PASS] Good parameters: 128 bits (jwk, {alg: A128KW, k: AQIDBAUGBwgJCgsMDQ4PEA, kty: oct}, {name: AES-KW}, true, [unwrapKey])\n[PASS] Good parameters: 128 bits (jwk, {alg: A128KW, k: AQIDBAUGBwgJCgsMDQ4PEA, kty: oct}, {name: AES-KW}, true, [wrapKey, unwrapKey, wrapKey, unwrapKey])\n[PASS] Empty Usages: 128 bits (jwk, {alg: A128KW, k: AQIDBAUGBwgJCgsMDQ4PEA, kty: oct}, {name: AES-KW}, true, [])\n[PASS] Good parameters: 128 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-KW}, false, [wrapKey])\n[PASS] Good parameters: 128 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-KW}, false, [unwrapKey, wrapKey])\n[PASS] Good parameters: 128 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-KW}, false, [unwrapKey])\n[PASS] Good parameters: 128 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-KW}, false, [wrapKey, unwrapKey, wrapKey, unwrapKey])\n[PASS] Empty Usages: 128 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-KW}, false, [])\n[PASS] Good parameters: 128 bits (jwk, {alg: A128KW, k: AQIDBAUGBwgJCgsMDQ4PEA, kty: oct}, {name: AES-KW}, false, [wrapKey])\n[PASS] Good parameters: 128 bits (jwk, {alg: A128KW, k: AQIDBAUGBwgJCgsMDQ4PEA, kty: oct}, {name: AES-KW}, false, [unwrapKey, wrapKey])\n[PASS] Good parameters: 1024 bits (pkcs8, buffer(636), {hash: SHA-512, name: RSA-OAEP}, true, [decrypt])\n[PASS] Good parameters: 128 bits (jwk, {alg: A128KW, k: AQIDBAUGBwgJCgsMDQ4PEA, kty: oct}, {name: AES-KW}, false, [unwrapKey])\n[PASS] ECDH any JWK alg: P-384 bits (jwk, object(kty, crv, x, y, d, alg), {name: ECDH, namedCurve: P-384}, false, [deriveBits, deriveKey])\n[PASS] Good parameters: 128 bits (jwk, {alg: A128KW, k: AQIDBAUGBwgJCgsMDQ4PEA, kty: oct}, {name: AES-KW}, false, [wrapKey, unwrapKey, wrapKey, unwrapKey])\n[PASS] Empty Usages: 128 bits (jwk, {alg: A128KW, k: AQIDBAUGBwgJCgsMDQ4PEA, kty: oct}, {name: AES-KW}, false, [])\n[PASS] Good parameters: 192 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-KW}, true, [wrapKey])\n[PASS] Good parameters: 1024 bits (pkcs8, buffer(636), {hash: SHA-512, name: RSA-OAEP}, true, [unwrapKey, decrypt])\n[PASS] Good parameters: 192 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-KW}, true, [unwrapKey, wrapKey])\n[PASS] Good parameters: 192 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-KW}, true, [unwrapKey])\n[PASS] Good parameters: 192 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-KW}, true, [wrapKey, unwrapKey, wrapKey, unwrapKey])\n[PASS] Empty Usages: 192 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-KW}, true, [])\n[PASS] Good parameters: 192 bits (jwk, {alg: A192KW, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcY, kty: oct}, {name: AES-KW}, true, [wrapKey])\n[PASS] Good parameters: 192 bits (jwk, {alg: A192KW, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcY, kty: oct}, {name: AES-KW}, true, [unwrapKey, wrapKey])\n[PASS] Good parameters: 192 bits (jwk, {alg: A192KW, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcY, kty: oct}, {name: AES-KW}, true, [unwrapKey])\n[PASS] Good parameters: 192 bits (jwk, {alg: A192KW, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcY, kty: oct}, {name: AES-KW}, true, [wrapKey, unwrapKey, wrapKey, unwrapKey])\n[PASS] Empty Usages: 192 bits (jwk, {alg: A192KW, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcY, kty: oct}, {name: AES-KW}, true, [])\n[PASS] Good parameters: 192 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-KW}, false, [wrapKey])\n[PASS] Good parameters: 192 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-KW}, false, [unwrapKey, wrapKey])\n[PASS] Good parameters: 1024 bits (pkcs8, buffer(636), {hash: SHA-512, name: RSA-OAEP}, true, [unwrapKey])\n[PASS] Good parameters: 192 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-KW}, false, [unwrapKey])\n[PASS] Good parameters: P-384 bits (jwk, object(kty, crv, x, y, d), {name: ECDH, namedCurve: P-384}, false, [deriveBits])\n[PASS] Good parameters: 192 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-KW}, false, [wrapKey, unwrapKey, wrapKey, unwrapKey])\n[PASS] Empty Usages: 192 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-KW}, false, [])\n[PASS] Good parameters: 192 bits (jwk, {alg: A192KW, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcY, kty: oct}, {name: AES-KW}, false, [wrapKey])\n[PASS] Good parameters: 192 bits (jwk, {alg: A192KW, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcY, kty: oct}, {name: AES-KW}, false, [unwrapKey, wrapKey])\n[PASS] Good parameters: 192 bits (jwk, {alg: A192KW, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcY, kty: oct}, {name: AES-KW}, false, [unwrapKey])\n[PASS] Good parameters: 192 bits (jwk, {alg: A192KW, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcY, kty: oct}, {name: AES-KW}, false, [wrapKey, unwrapKey, wrapKey, unwrapKey])\n[PASS] Empty Usages: 192 bits (jwk, {alg: A192KW, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcY, kty: oct}, {name: AES-KW}, false, [])\n[PASS] Good parameters: 256 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 24: 25, 25: 26, 26: 27, 27: 28, 28: 29, 29: 30, 3: 4, 30: 31, 31: 32, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-KW}, true, [wrapKey])\n[PASS] Good parameters: 256 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 24: 25, 25: 26, 26: 27, 27: 28, 28: 29, 29: 30, 3: 4, 30: 31, 31: 32, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-KW}, true, [unwrapKey, wrapKey])\n[PASS] Good parameters: 256 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 24: 25, 25: 26, 26: 27, 27: 28, 28: 29, 29: 30, 3: 4, 30: 31, 31: 32, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-KW}, true, [unwrapKey])\n[PASS] Good parameters: 256 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 24: 25, 25: 26, 26: 27, 27: 28, 28: 29, 29: 30, 3: 4, 30: 31, 31: 32, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-KW}, true, [wrapKey, unwrapKey, wrapKey, unwrapKey])\n[PASS] Good parameters: 1024 bits (pkcs8, buffer(636), {hash: SHA-512, name: RSA-OAEP}, true, [decrypt, unwrapKey, decrypt, unwrapKey])\n[PASS] Empty Usages: 256 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 24: 25, 25: 26, 26: 27, 27: 28, 28: 29, 29: 30, 3: 4, 30: 31, 31: 32, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-KW}, true, [])\n[PASS] Good parameters: 256 bits (jwk, {alg: A256KW, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobHB0eHyA, kty: oct}, {name: AES-KW}, true, [wrapKey])\n[PASS] Good parameters: 256 bits (jwk, {alg: A256KW, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobHB0eHyA, kty: oct}, {name: AES-KW}, true, [unwrapKey, wrapKey])\n[PASS] Good parameters: 256 bits (jwk, {alg: A256KW, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobHB0eHyA, kty: oct}, {name: AES-KW}, true, [unwrapKey])\n[PASS] Good parameters: 256 bits (jwk, {alg: A256KW, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobHB0eHyA, kty: oct}, {name: AES-KW}, true, [wrapKey, unwrapKey, wrapKey, unwrapKey])\n[PASS] Empty Usages: 256 bits (jwk, {alg: A256KW, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobHB0eHyA, kty: oct}, {name: AES-KW}, true, [])\n[PASS] Good parameters: 256 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 24: 25, 25: 26, 26: 27, 27: 28, 28: 29, 29: 30, 3: 4, 30: 31, 31: 32, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-KW}, false, [wrapKey])\n[PASS] Good parameters: 256 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 24: 25, 25: 26, 26: 27, 27: 28, 28: 29, 29: 30, 3: 4, 30: 31, 31: 32, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-KW}, false, [unwrapKey, wrapKey])\n[PASS] Good parameters: 256 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 24: 25, 25: 26, 26: 27, 27: 28, 28: 29, 29: 30, 3: 4, 30: 31, 31: 32, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-KW}, false, [unwrapKey])\n[PASS] Empty Usages: 1024 bits (pkcs8, object(spki, pkcs8, jwk), {hash: SHA-512, name: RSA-OAEP}, true, [])\n[PASS] Good parameters: 256 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 24: 25, 25: 26, 26: 27, 27: 28, 28: 29, 29: 30, 3: 4, 30: 31, 31: 32, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-KW}, false, [wrapKey, unwrapKey, wrapKey, unwrapKey])\n[PASS] Empty Usages: 256 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 24: 25, 25: 26, 26: 27, 27: 28, 28: 29, 29: 30, 3: 4, 30: 31, 31: 32, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: AES-KW}, false, [])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-512, name: RSA-OAEP}, true, [decrypt])\n[PASS] Good parameters: 256 bits (jwk, {alg: A256KW, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobHB0eHyA, kty: oct}, {name: AES-KW}, false, [wrapKey])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-512, name: RSA-OAEP}, true, [unwrapKey, decrypt])\n[PASS] Good parameters: 256 bits (jwk, {alg: A256KW, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobHB0eHyA, kty: oct}, {name: AES-KW}, false, [unwrapKey, wrapKey])\n[PASS] Good parameters: 256 bits (jwk, {alg: A256KW, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobHB0eHyA, kty: oct}, {name: AES-KW}, false, [unwrapKey])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-512, name: RSA-OAEP}, true, [unwrapKey])\n[PASS] Good parameters: 256 bits (jwk, {alg: A256KW, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobHB0eHyA, kty: oct}, {name: AES-KW}, false, [wrapKey, unwrapKey, wrapKey, unwrapKey])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-512, name: RSA-OAEP}, true, [decrypt, unwrapKey, decrypt, unwrapKey])\n[PASS] Empty Usages: 256 bits (jwk, {alg: A256KW, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobHB0eHyA, kty: oct}, {name: AES-KW}, false, [])\n[PASS] ECDH any JWK alg: P-384 bits (jwk, object(kty, crv, x, y, d, alg), {name: ECDH, namedCurve: P-384}, false, [deriveBits])\n[PASS] Empty Usages: 1024 bits (jwk, object(spki, pkcs8, jwk), {hash: SHA-512, name: RSA-OAEP}, true, [])\n[PASS] Good parameters: 128 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {hash: SHA-1, name: HMAC}, false, [sign])\n[PASS] Good parameters: 128 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {hash: SHA-1, name: HMAC}, false, [verify, sign])\n[PASS] Good parameters: 1024 bits (spki, buffer(162), {hash: SHA-512, name: RSA-OAEP}, false, [encrypt])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e), {hash: SHA-512, name: RSA-OAEP}, false, [encrypt])\n[PASS] Good parameters: 128 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {hash: SHA-1, name: HMAC}, false, [verify])\n[PASS] Good parameters: 128 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {hash: SHA-1, name: HMAC}, false, [sign, verify, sign, verify])\n[PASS] Empty Usages: 128 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {hash: SHA-1, name: HMAC}, false, [])\n[PASS] Good parameters: 1024 bits (spki, buffer(162), {hash: SHA-512, name: RSA-OAEP}, false, [wrapKey, encrypt])\n[PASS] Good parameters: 128 bits (jwk, {alg: HS1, k: AQIDBAUGBwgJCgsMDQ4PEA, kty: oct}, {hash: SHA-1, name: HMAC}, false, [sign])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e), {hash: SHA-512, name: RSA-OAEP}, false, [wrapKey, encrypt])\n[PASS] Good parameters: 128 bits (jwk, {alg: HS1, k: AQIDBAUGBwgJCgsMDQ4PEA, kty: oct}, {hash: SHA-1, name: HMAC}, false, [verify, sign])\n[PASS] Good parameters: 128 bits (jwk, {alg: HS1, k: AQIDBAUGBwgJCgsMDQ4PEA, kty: oct}, {hash: SHA-1, name: HMAC}, false, [verify])\n[PASS] Good parameters: 1024 bits (spki, buffer(162), {hash: SHA-512, name: RSA-OAEP}, false, [wrapKey])\n[PASS] Good parameters: 128 bits (jwk, {alg: HS1, k: AQIDBAUGBwgJCgsMDQ4PEA, kty: oct}, {hash: SHA-1, name: HMAC}, false, [sign, verify, sign, verify])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e), {hash: SHA-512, name: RSA-OAEP}, false, [wrapKey])\n[PASS] Empty Usages: 128 bits (jwk, {alg: HS1, k: AQIDBAUGBwgJCgsMDQ4PEA, kty: oct}, {hash: SHA-1, name: HMAC}, false, [])\n[PASS] Good parameters: 192 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {hash: SHA-1, name: HMAC}, false, [sign])\n[PASS] Good parameters: 192 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {hash: SHA-1, name: HMAC}, false, [verify, sign])\n[PASS] Good parameters: 192 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {hash: SHA-1, name: HMAC}, false, [verify])\n[PASS] Good parameters: 192 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {hash: SHA-1, name: HMAC}, false, [sign, verify, sign, verify])\n[PASS] Empty Usages: 192 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {hash: SHA-1, name: HMAC}, false, [])\n[PASS] Good parameters: 1024 bits (spki, buffer(162), {hash: SHA-512, name: RSA-OAEP}, false, [])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e), {hash: SHA-512, name: RSA-OAEP}, false, [])\n[PASS] Good parameters: 1024 bits (spki, buffer(162), {hash: SHA-512, name: RSA-OAEP}, false, [encrypt, wrapKey, encrypt, wrapKey])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e), {hash: SHA-512, name: RSA-OAEP}, false, [encrypt, wrapKey, encrypt, wrapKey])\n[PASS] Good parameters: 192 bits (jwk, {alg: HS1, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcY, kty: oct}, {hash: SHA-1, name: HMAC}, false, [sign])\n[PASS] Good parameters: 192 bits (jwk, {alg: HS1, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcY, kty: oct}, {hash: SHA-1, name: HMAC}, false, [verify, sign])\n[PASS] Good parameters: 192 bits (jwk, {alg: HS1, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcY, kty: oct}, {hash: SHA-1, name: HMAC}, false, [verify])\n[PASS] Good parameters: 192 bits (jwk, {alg: HS1, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcY, kty: oct}, {hash: SHA-1, name: HMAC}, false, [sign, verify, sign, verify])\n[PASS] Empty Usages: 192 bits (jwk, {alg: HS1, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcY, kty: oct}, {hash: SHA-1, name: HMAC}, false, [])\n[PASS] Good parameters: 256 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 24: 25, 25: 26, 26: 27, 27: 28, 28: 29, 29: 30, 3: 4, 30: 31, 31: 32, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {hash: SHA-1, name: HMAC}, false, [sign])\n[PASS] Good parameters: 256 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 24: 25, 25: 26, 26: 27, 27: 28, 28: 29, 29: 30, 3: 4, 30: 31, 31: 32, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {hash: SHA-1, name: HMAC}, false, [verify, sign])\n[PASS] Good parameters: 256 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 24: 25, 25: 26, 26: 27, 27: 28, 28: 29, 29: 30, 3: 4, 30: 31, 31: 32, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {hash: SHA-1, name: HMAC}, false, [verify])\n[PASS] Good parameters: 256 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 24: 25, 25: 26, 26: 27, 27: 28, 28: 29, 29: 30, 3: 4, 30: 31, 31: 32, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {hash: SHA-1, name: HMAC}, false, [sign, verify, sign, verify])\n[PASS] Empty Usages: 256 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 24: 25, 25: 26, 26: 27, 27: 28, 28: 29, 29: 30, 3: 4, 30: 31, 31: 32, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {hash: SHA-1, name: HMAC}, false, [])\n[PASS] Good parameters: 256 bits (jwk, {alg: HS1, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobHB0eHyA, kty: oct}, {hash: SHA-1, name: HMAC}, false, [sign])\n[PASS] Good parameters: 256 bits (jwk, {alg: HS1, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobHB0eHyA, kty: oct}, {hash: SHA-1, name: HMAC}, false, [verify, sign])\n[PASS] Good parameters: 256 bits (jwk, {alg: HS1, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobHB0eHyA, kty: oct}, {hash: SHA-1, name: HMAC}, false, [verify])\n[PASS] Good parameters: 256 bits (jwk, {alg: HS1, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobHB0eHyA, kty: oct}, {hash: SHA-1, name: HMAC}, false, [sign, verify, sign, verify])\n[PASS] Empty Usages: 256 bits (jwk, {alg: HS1, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobHB0eHyA, kty: oct}, {hash: SHA-1, name: HMAC}, false, [])\n[PASS] Good parameters: 128 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {hash: SHA-256, name: HMAC}, false, [sign])\n[PASS] Good parameters: 128 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {hash: SHA-256, name: HMAC}, false, [verify, sign])\n[PASS] Good parameters: 128 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {hash: SHA-256, name: HMAC}, false, [verify])\n[PASS] Good parameters: P-384 bits (jwk, object(kty, crv, x, y, d), {name: ECDH, namedCurve: P-384}, false, [deriveKey, deriveBits, deriveKey, deriveBits])\n[PASS] Good parameters: 1024 bits (pkcs8, buffer(636), {hash: SHA-512, name: RSA-OAEP}, false, [decrypt])\n[PASS] Good parameters: 128 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {hash: SHA-256, name: HMAC}, false, [sign, verify, sign, verify])\n[PASS] ECDH any JWK alg: P-384 bits (jwk, object(kty, crv, x, y, d, alg), {name: ECDH, namedCurve: P-384}, false, [deriveKey, deriveBits, deriveKey, deriveBits])\n[PASS] Empty Usages: 128 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {hash: SHA-256, name: HMAC}, false, [])\n[PASS] Good parameters: 128 bits (jwk, {alg: HS256, k: AQIDBAUGBwgJCgsMDQ4PEA, kty: oct}, {hash: SHA-256, name: HMAC}, false, [sign])\n[PASS] Good parameters: 128 bits (jwk, {alg: HS256, k: AQIDBAUGBwgJCgsMDQ4PEA, kty: oct}, {hash: SHA-256, name: HMAC}, false, [verify, sign])\n[PASS] Good parameters: 128 bits (jwk, {alg: HS256, k: AQIDBAUGBwgJCgsMDQ4PEA, kty: oct}, {hash: SHA-256, name: HMAC}, false, [verify])\n[PASS] Good parameters: 128 bits (jwk, {alg: HS256, k: AQIDBAUGBwgJCgsMDQ4PEA, kty: oct}, {hash: SHA-256, name: HMAC}, false, [sign, verify, sign, verify])\n[PASS] Empty Usages: 128 bits (jwk, {alg: HS256, k: AQIDBAUGBwgJCgsMDQ4PEA, kty: oct}, {hash: SHA-256, name: HMAC}, false, [])\n[PASS] Good parameters: 192 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {hash: SHA-256, name: HMAC}, false, [sign])\n[PASS] Good parameters: 192 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {hash: SHA-256, name: HMAC}, false, [verify, sign])\n[PASS] Good parameters: 192 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {hash: SHA-256, name: HMAC}, false, [verify])\n[PASS] Good parameters: 192 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {hash: SHA-256, name: HMAC}, false, [sign, verify, sign, verify])\n[PASS] Empty Usages: 192 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {hash: SHA-256, name: HMAC}, false, [])\n[PASS] Good parameters: 192 bits (jwk, {alg: HS256, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcY, kty: oct}, {hash: SHA-256, name: HMAC}, false, [sign])\n[PASS] Good parameters: 1024 bits (pkcs8, buffer(636), {hash: SHA-512, name: RSA-OAEP}, false, [unwrapKey, decrypt])\n[PASS] Good parameters: 192 bits (jwk, {alg: HS256, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcY, kty: oct}, {hash: SHA-256, name: HMAC}, false, [verify, sign])\n[PASS] Good parameters: 192 bits (jwk, {alg: HS256, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcY, kty: oct}, {hash: SHA-256, name: HMAC}, false, [verify])\n[PASS] Good parameters: 192 bits (jwk, {alg: HS256, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcY, kty: oct}, {hash: SHA-256, name: HMAC}, false, [sign, verify, sign, verify])\n[PASS] Empty Usages: 192 bits (jwk, {alg: HS256, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcY, kty: oct}, {hash: SHA-256, name: HMAC}, false, [])\n[PASS] Good parameters: 256 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 24: 25, 25: 26, 26: 27, 27: 28, 28: 29, 29: 30, 3: 4, 30: 31, 31: 32, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {hash: SHA-256, name: HMAC}, false, [sign])\n[PASS] Good parameters: 1024 bits (pkcs8, buffer(636), {hash: SHA-512, name: RSA-OAEP}, false, [unwrapKey])\n[PASS] Good parameters: 256 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 24: 25, 25: 26, 26: 27, 27: 28, 28: 29, 29: 30, 3: 4, 30: 31, 31: 32, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {hash: SHA-256, name: HMAC}, false, [verify, sign])\n[PASS] Good parameters: 256 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 24: 25, 25: 26, 26: 27, 27: 28, 28: 29, 29: 30, 3: 4, 30: 31, 31: 32, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {hash: SHA-256, name: HMAC}, false, [verify])\n[PASS] Good parameters: 256 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 24: 25, 25: 26, 26: 27, 27: 28, 28: 29, 29: 30, 3: 4, 30: 31, 31: 32, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {hash: SHA-256, name: HMAC}, false, [sign, verify, sign, verify])\n[PASS] Empty Usages: 256 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 24: 25, 25: 26, 26: 27, 27: 28, 28: 29, 29: 30, 3: 4, 30: 31, 31: 32, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {hash: SHA-256, name: HMAC}, false, [])\n[PASS] Good parameters: 256 bits (jwk, {alg: HS256, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobHB0eHyA, kty: oct}, {hash: SHA-256, name: HMAC}, false, [sign])\n[PASS] Empty Usages: P-384 bits (jwk, object(kty, crv, x, y, d), {name: ECDH, namedCurve: P-384}, false, [])\n[PASS] Good parameters: 256 bits (jwk, {alg: HS256, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobHB0eHyA, kty: oct}, {hash: SHA-256, name: HMAC}, false, [verify, sign])\n[PASS] Good parameters: 256 bits (jwk, {alg: HS256, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobHB0eHyA, kty: oct}, {hash: SHA-256, name: HMAC}, false, [verify])\n[PASS] Good parameters: 256 bits (jwk, {alg: HS256, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobHB0eHyA, kty: oct}, {hash: SHA-256, name: HMAC}, false, [sign, verify, sign, verify])\n[PASS] Empty Usages: 256 bits (jwk, {alg: HS256, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobHB0eHyA, kty: oct}, {hash: SHA-256, name: HMAC}, false, [])\n[PASS] Good parameters: 128 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {hash: SHA-384, name: HMAC}, false, [sign])\n[PASS] Good parameters: 128 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {hash: SHA-384, name: HMAC}, false, [verify, sign])\n[PASS] Good parameters: P-521 bits (spki, buffer(158), {name: ECDH, namedCurve: P-521}, true, [])\n[PASS] Good parameters: 128 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {hash: SHA-384, name: HMAC}, false, [verify])\n[PASS] Good parameters: 1024 bits (pkcs8, buffer(636), {hash: SHA-512, name: RSA-OAEP}, false, [decrypt, unwrapKey, decrypt, unwrapKey])\n[PASS] Good parameters: 128 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {hash: SHA-384, name: HMAC}, false, [sign, verify, sign, verify])\n[PASS] Empty Usages: 128 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {hash: SHA-384, name: HMAC}, false, [])\n[PASS] Good parameters: 128 bits (jwk, {alg: HS384, k: AQIDBAUGBwgJCgsMDQ4PEA, kty: oct}, {hash: SHA-384, name: HMAC}, false, [sign])\n[PASS] Good parameters: 128 bits (jwk, {alg: HS384, k: AQIDBAUGBwgJCgsMDQ4PEA, kty: oct}, {hash: SHA-384, name: HMAC}, false, [verify, sign])\n[PASS] Good parameters: 128 bits (jwk, {alg: HS384, k: AQIDBAUGBwgJCgsMDQ4PEA, kty: oct}, {hash: SHA-384, name: HMAC}, false, [verify])\n[PASS] Good parameters: P-521 bits (spki, buffer(90, compressed), {name: ECDH, namedCurve: P-521}, true, [])\n[PASS] Good parameters: 128 bits (jwk, {alg: HS384, k: AQIDBAUGBwgJCgsMDQ4PEA, kty: oct}, {hash: SHA-384, name: HMAC}, false, [sign, verify, sign, verify])\n[PASS] Empty Usages: 128 bits (jwk, {alg: HS384, k: AQIDBAUGBwgJCgsMDQ4PEA, kty: oct}, {hash: SHA-384, name: HMAC}, false, [])\n[PASS] Good parameters: 192 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {hash: SHA-384, name: HMAC}, false, [sign])\n[PASS] Good parameters: 192 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {hash: SHA-384, name: HMAC}, false, [verify, sign])\n[PASS] Good parameters: 192 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {hash: SHA-384, name: HMAC}, false, [verify])\n[PASS] Good parameters: 192 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {hash: SHA-384, name: HMAC}, false, [sign, verify, sign, verify])\n[PASS] Empty Usages: 192 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {hash: SHA-384, name: HMAC}, false, [])\n[PASS] Good parameters: 192 bits (jwk, {alg: HS384, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcY, kty: oct}, {hash: SHA-384, name: HMAC}, false, [sign])\n[PASS] Good parameters: 192 bits (jwk, {alg: HS384, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcY, kty: oct}, {hash: SHA-384, name: HMAC}, false, [verify, sign])\n[PASS] Good parameters: 192 bits (jwk, {alg: HS384, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcY, kty: oct}, {hash: SHA-384, name: HMAC}, false, [verify])\n[PASS] Good parameters: 192 bits (jwk, {alg: HS384, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcY, kty: oct}, {hash: SHA-384, name: HMAC}, false, [sign, verify, sign, verify])\n[PASS] Empty Usages: 192 bits (jwk, {alg: HS384, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcY, kty: oct}, {hash: SHA-384, name: HMAC}, false, [])\n[PASS] Empty Usages: 1024 bits (pkcs8, object(spki, pkcs8, jwk), {hash: SHA-512, name: RSA-OAEP}, false, [])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-512, name: RSA-OAEP}, false, [decrypt])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-512, name: RSA-OAEP}, false, [unwrapKey, decrypt])\n[PASS] Good parameters: 256 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 24: 25, 25: 26, 26: 27, 27: 28, 28: 29, 29: 30, 3: 4, 30: 31, 31: 32, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {hash: SHA-384, name: HMAC}, false, [sign])\n[PASS] Good parameters: 256 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 24: 25, 25: 26, 26: 27, 27: 28, 28: 29, 29: 30, 3: 4, 30: 31, 31: 32, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {hash: SHA-384, name: HMAC}, false, [verify, sign])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-512, name: RSA-OAEP}, false, [unwrapKey])\n[PASS] Good parameters: P-521 bits (jwk, object(kty, crv, x, y), {name: ECDH, namedCurve: P-521}, true, [])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-512, name: RSA-OAEP}, false, [decrypt, unwrapKey, decrypt, unwrapKey])\n[PASS] Empty Usages: 1024 bits (jwk, object(spki, pkcs8, jwk), {hash: SHA-512, name: RSA-OAEP}, false, [])\n[PASS] Good parameters: 256 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 24: 25, 25: 26, 26: 27, 27: 28, 28: 29, 29: 30, 3: 4, 30: 31, 31: 32, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {hash: SHA-384, name: HMAC}, false, [verify])\n[PASS] Good parameters: 256 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 24: 25, 25: 26, 26: 27, 27: 28, 28: 29, 29: 30, 3: 4, 30: 31, 31: 32, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {hash: SHA-384, name: HMAC}, false, [sign, verify, sign, verify])\n[PASS] Good parameters: 2048 bits (spki, buffer(294), {hash: SHA-1, name: RSA-OAEP}, true, [encrypt])\n[PASS] Empty Usages: 256 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 24: 25, 25: 26, 26: 27, 27: 28, 28: 29, 29: 30, 3: 4, 30: 31, 31: 32, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {hash: SHA-384, name: HMAC}, false, [])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e), {hash: SHA-1, name: RSA-OAEP}, true, [encrypt])\n[PASS] Good parameters: 256 bits (jwk, {alg: HS384, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobHB0eHyA, kty: oct}, {hash: SHA-384, name: HMAC}, false, [sign])\n[PASS] Good parameters: 256 bits (jwk, {alg: HS384, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobHB0eHyA, kty: oct}, {hash: SHA-384, name: HMAC}, false, [verify, sign])\n[PASS] Good parameters: 256 bits (jwk, {alg: HS384, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobHB0eHyA, kty: oct}, {hash: SHA-384, name: HMAC}, false, [verify])\n[PASS] Good parameters: 256 bits (jwk, {alg: HS384, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobHB0eHyA, kty: oct}, {hash: SHA-384, name: HMAC}, false, [sign, verify, sign, verify])\n[PASS] Empty Usages: 256 bits (jwk, {alg: HS384, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobHB0eHyA, kty: oct}, {hash: SHA-384, name: HMAC}, false, [])\n[PASS] Good parameters: 128 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {hash: SHA-512, name: HMAC}, false, [sign])\n[PASS] Good parameters: 128 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {hash: SHA-512, name: HMAC}, false, [verify, sign])\n[PASS] Good parameters: 128 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {hash: SHA-512, name: HMAC}, false, [verify])\n[PASS] Good parameters: 128 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {hash: SHA-512, name: HMAC}, false, [sign, verify, sign, verify])\n[PASS] Empty Usages: 128 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {hash: SHA-512, name: HMAC}, false, [])\n[PASS] Good parameters: 128 bits (jwk, {alg: HS512, k: AQIDBAUGBwgJCgsMDQ4PEA, kty: oct}, {hash: SHA-512, name: HMAC}, false, [sign])\n[PASS] Good parameters: 128 bits (jwk, {alg: HS512, k: AQIDBAUGBwgJCgsMDQ4PEA, kty: oct}, {hash: SHA-512, name: HMAC}, false, [verify, sign])\n[PASS] Good parameters: 128 bits (jwk, {alg: HS512, k: AQIDBAUGBwgJCgsMDQ4PEA, kty: oct}, {hash: SHA-512, name: HMAC}, false, [verify])\n[PASS] Good parameters: 128 bits (jwk, {alg: HS512, k: AQIDBAUGBwgJCgsMDQ4PEA, kty: oct}, {hash: SHA-512, name: HMAC}, false, [sign, verify, sign, verify])\n[PASS] Empty Usages: 128 bits (jwk, {alg: HS512, k: AQIDBAUGBwgJCgsMDQ4PEA, kty: oct}, {hash: SHA-512, name: HMAC}, false, [])\n[PASS] Good parameters: 192 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {hash: SHA-512, name: HMAC}, false, [sign])\n[PASS] Good parameters: 192 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {hash: SHA-512, name: HMAC}, false, [verify, sign])\n[PASS] Good parameters: 192 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {hash: SHA-512, name: HMAC}, false, [verify])\n[PASS] Good parameters: 192 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {hash: SHA-512, name: HMAC}, false, [sign, verify, sign, verify])\n[PASS] Empty Usages: 192 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {hash: SHA-512, name: HMAC}, false, [])\n[PASS] Good parameters: 192 bits (jwk, {alg: HS512, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcY, kty: oct}, {hash: SHA-512, name: HMAC}, false, [sign])\n[PASS] Good parameters: 192 bits (jwk, {alg: HS512, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcY, kty: oct}, {hash: SHA-512, name: HMAC}, false, [verify, sign])\n[PASS] Good parameters: 192 bits (jwk, {alg: HS512, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcY, kty: oct}, {hash: SHA-512, name: HMAC}, false, [verify])\n[PASS] Good parameters: 192 bits (jwk, {alg: HS512, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcY, kty: oct}, {hash: SHA-512, name: HMAC}, false, [sign, verify, sign, verify])\n[PASS] Empty Usages: 192 bits (jwk, {alg: HS512, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcY, kty: oct}, {hash: SHA-512, name: HMAC}, false, [])\n[PASS] Good parameters: 256 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 24: 25, 25: 26, 26: 27, 27: 28, 28: 29, 29: 30, 3: 4, 30: 31, 31: 32, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {hash: SHA-512, name: HMAC}, false, [sign])\n[PASS] Good parameters: 256 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 24: 25, 25: 26, 26: 27, 27: 28, 28: 29, 29: 30, 3: 4, 30: 31, 31: 32, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {hash: SHA-512, name: HMAC}, false, [verify, sign])\n[PASS] Good parameters: 256 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 24: 25, 25: 26, 26: 27, 27: 28, 28: 29, 29: 30, 3: 4, 30: 31, 31: 32, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {hash: SHA-512, name: HMAC}, false, [verify])\n[PASS] Good parameters: 256 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 24: 25, 25: 26, 26: 27, 27: 28, 28: 29, 29: 30, 3: 4, 30: 31, 31: 32, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {hash: SHA-512, name: HMAC}, false, [sign, verify, sign, verify])\n[PASS] Empty Usages: 256 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 24: 25, 25: 26, 26: 27, 27: 28, 28: 29, 29: 30, 3: 4, 30: 31, 31: 32, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {hash: SHA-512, name: HMAC}, false, [])\n[PASS] Good parameters: 256 bits (jwk, {alg: HS512, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobHB0eHyA, kty: oct}, {hash: SHA-512, name: HMAC}, false, [sign])\n[PASS] Good parameters: 256 bits (jwk, {alg: HS512, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobHB0eHyA, kty: oct}, {hash: SHA-512, name: HMAC}, false, [verify, sign])\n[PASS] Good parameters: 256 bits (jwk, {alg: HS512, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobHB0eHyA, kty: oct}, {hash: SHA-512, name: HMAC}, false, [verify])\n[PASS] Good parameters: 256 bits (jwk, {alg: HS512, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobHB0eHyA, kty: oct}, {hash: SHA-512, name: HMAC}, false, [sign, verify, sign, verify])\n[PASS] Empty Usages: 256 bits (jwk, {alg: HS512, k: AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobHB0eHyA, kty: oct}, {hash: SHA-512, name: HMAC}, false, [])\n[PASS] ECDH any JWK alg: P-521 bits (jwk, object(kty, crv, x, y, alg), {name: ECDH, namedCurve: P-521}, true, [])\n[PASS] Good parameters: P-521 bits (raw, buffer(133), {name: ECDH, namedCurve: P-521}, true, [])\n[PASS] Good parameters: P-521 bits (raw, buffer(67, compressed), {name: ECDH, namedCurve: P-521}, true, [])\n[PASS] Good parameters: 2048 bits (spki, buffer(294), {hash: SHA-1, name: RSA-OAEP}, true, [wrapKey, encrypt])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e), {hash: SHA-1, name: RSA-OAEP}, true, [wrapKey, encrypt])\n[PASS] Good parameters: 2048 bits (spki, buffer(294), {hash: SHA-1, name: RSA-OAEP}, true, [wrapKey])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e), {hash: SHA-1, name: RSA-OAEP}, true, [wrapKey])\n[PASS] Good parameters: 2048 bits (spki, buffer(294), {hash: SHA-1, name: RSA-OAEP}, true, [])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e), {hash: SHA-1, name: RSA-OAEP}, true, [])\n[PASS] Good parameters: 128 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: HKDF}, false, [deriveBits])\n[PASS] Good parameters: 128 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: HKDF}, false, [deriveKey, deriveBits])\n[PASS] Good parameters: 128 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: HKDF}, false, [deriveKey])\n[PASS] Good parameters: 128 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: HKDF}, false, [deriveBits, deriveKey, deriveBits, deriveKey])\n[PASS] Empty Usages: 128 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: HKDF}, false, [])\n[PASS] Good parameters: 192 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: HKDF}, false, [deriveBits])\n[PASS] Good parameters: 192 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: HKDF}, false, [deriveKey, deriveBits])\n[PASS] Good parameters: 192 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: HKDF}, false, [deriveKey])\n[PASS] Good parameters: 192 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: HKDF}, false, [deriveBits, deriveKey, deriveBits, deriveKey])\n[PASS] Empty Usages: 192 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: HKDF}, false, [])\n[PASS] Good parameters: 256 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 24: 25, 25: 26, 26: 27, 27: 28, 28: 29, 29: 30, 3: 4, 30: 31, 31: 32, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: HKDF}, false, [deriveBits])\n[PASS] Good parameters: 2048 bits (spki, buffer(294), {hash: SHA-1, name: RSA-OAEP}, true, [encrypt, wrapKey, encrypt, wrapKey])\n[PASS] Good parameters: 256 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 24: 25, 25: 26, 26: 27, 27: 28, 28: 29, 29: 30, 3: 4, 30: 31, 31: 32, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: HKDF}, false, [deriveKey, deriveBits])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e), {hash: SHA-1, name: RSA-OAEP}, true, [encrypt, wrapKey, encrypt, wrapKey])\n[PASS] Good parameters: 256 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 24: 25, 25: 26, 26: 27, 27: 28, 28: 29, 29: 30, 3: 4, 30: 31, 31: 32, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: HKDF}, false, [deriveKey])\n[PASS] Good parameters: 256 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 24: 25, 25: 26, 26: 27, 27: 28, 28: 29, 29: 30, 3: 4, 30: 31, 31: 32, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: HKDF}, false, [deriveBits, deriveKey, deriveBits, deriveKey])\n[PASS] Empty Usages: 256 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 24: 25, 25: 26, 26: 27, 27: 28, 28: 29, 29: 30, 3: 4, 30: 31, 31: 32, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: HKDF}, false, [])\n[PASS] Good parameters: 128 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: PBKDF2}, false, [deriveBits])\n[PASS] Good parameters: 128 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: PBKDF2}, false, [deriveKey, deriveBits])\n[PASS] Good parameters: 128 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: PBKDF2}, false, [deriveKey])\n[PASS] Good parameters: 128 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: PBKDF2}, false, [deriveBits, deriveKey, deriveBits, deriveKey])\n[PASS] Empty Usages: 128 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: PBKDF2}, false, [])\n[PASS] Good parameters: 192 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: PBKDF2}, false, [deriveBits])\n[PASS] Good parameters: 192 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: PBKDF2}, false, [deriveKey, deriveBits])\n[PASS] Good parameters: 192 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: PBKDF2}, false, [deriveKey])\n[PASS] Good parameters: 192 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: PBKDF2}, false, [deriveBits, deriveKey, deriveBits, deriveKey])\n[PASS] Empty Usages: 192 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: PBKDF2}, false, [])\n[PASS] Good parameters: 256 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 24: 25, 25: 26, 26: 27, 27: 28, 28: 29, 29: 30, 3: 4, 30: 31, 31: 32, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: PBKDF2}, false, [deriveBits])\n[PASS] Good parameters: 256 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 24: 25, 25: 26, 26: 27, 27: 28, 28: 29, 29: 30, 3: 4, 30: 31, 31: 32, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: PBKDF2}, false, [deriveKey, deriveBits])\n[PASS] Good parameters: 256 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 24: 25, 25: 26, 26: 27, 27: 28, 28: 29, 29: 30, 3: 4, 30: 31, 31: 32, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: PBKDF2}, false, [deriveKey])\n[PASS] Good parameters: 256 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 24: 25, 25: 26, 26: 27, 27: 28, 28: 29, 29: 30, 3: 4, 30: 31, 31: 32, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: PBKDF2}, false, [deriveBits, deriveKey, deriveBits, deriveKey])\n[PASS] Empty Usages: 256 bits (raw, {0: 1, 1: 2, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 2: 3, 20: 21, 21: 22, 22: 23, 23: 24, 24: 25, 25: 26, 26: 27, 27: 28, 28: 29, 29: 30, 3: 4, 30: 31, 31: 32, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}, {name: PBKDF2}, false, [])\n[PASS] Good parameters: 2048 bits (pkcs8, buffer(1218), {hash: SHA-1, name: RSA-OAEP}, true, [decrypt])\n[PASS] Good parameters: P-521 bits (pkcs8, buffer(241), {name: ECDH, namedCurve: P-521}, true, [deriveKey])\n[PASS] Good parameters: 2048 bits (pkcs8, buffer(1218), {hash: SHA-1, name: RSA-OAEP}, true, [unwrapKey, decrypt])\n[PASS] Good parameters: 2048 bits (pkcs8, buffer(1218), {hash: SHA-1, name: RSA-OAEP}, true, [unwrapKey])\n[PASS] Good parameters: 2048 bits (pkcs8, buffer(1218), {hash: SHA-1, name: RSA-OAEP}, true, [decrypt, unwrapKey, decrypt, unwrapKey])\n[PASS] Good parameters: P-521 bits (pkcs8, buffer(241), {name: ECDH, namedCurve: P-521}, true, [deriveBits, deriveKey])\n[PASS] Empty Usages: 2048 bits (pkcs8, object(spki, pkcs8, jwk), {hash: SHA-1, name: RSA-OAEP}, true, [])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-1, name: RSA-OAEP}, true, [decrypt])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-1, name: RSA-OAEP}, true, [unwrapKey, decrypt])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-1, name: RSA-OAEP}, true, [unwrapKey])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-1, name: RSA-OAEP}, true, [decrypt, unwrapKey, decrypt, unwrapKey])\n[PASS] Empty Usages: 2048 bits (jwk, object(spki, pkcs8, jwk), {hash: SHA-1, name: RSA-OAEP}, true, [])\n[PASS] Good parameters: 2048 bits (spki, buffer(294), {hash: SHA-1, name: RSA-OAEP}, false, [encrypt])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e), {hash: SHA-1, name: RSA-OAEP}, false, [encrypt])\n[PASS] Good parameters: 2048 bits (spki, buffer(294), {hash: SHA-1, name: RSA-OAEP}, false, [wrapKey, encrypt])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e), {hash: SHA-1, name: RSA-OAEP}, false, [wrapKey, encrypt])\n[PASS] Good parameters: 2048 bits (spki, buffer(294), {hash: SHA-1, name: RSA-OAEP}, false, [wrapKey])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e), {hash: SHA-1, name: RSA-OAEP}, false, [wrapKey])\n[PASS] Good parameters: 2048 bits (spki, buffer(294), {hash: SHA-1, name: RSA-OAEP}, false, [])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e), {hash: SHA-1, name: RSA-OAEP}, false, [])\n[PASS] Good parameters: 2048 bits (spki, buffer(294), {hash: SHA-1, name: RSA-OAEP}, false, [encrypt, wrapKey, encrypt, wrapKey])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e), {hash: SHA-1, name: RSA-OAEP}, false, [encrypt, wrapKey, encrypt, wrapKey])\n[PASS] Good parameters: 2048 bits (pkcs8, buffer(1218), {hash: SHA-1, name: RSA-OAEP}, false, [decrypt])\n[PASS] Good parameters: P-521 bits (pkcs8, buffer(241), {name: ECDH, namedCurve: P-521}, true, [deriveBits])\n[PASS] Good parameters: 2048 bits (pkcs8, buffer(1218), {hash: SHA-1, name: RSA-OAEP}, false, [unwrapKey, decrypt])\n[PASS] Good parameters: 2048 bits (pkcs8, buffer(1218), {hash: SHA-1, name: RSA-OAEP}, false, [unwrapKey])\n[PASS] Good parameters: 2048 bits (pkcs8, buffer(1218), {hash: SHA-1, name: RSA-OAEP}, false, [decrypt, unwrapKey, decrypt, unwrapKey])\n[PASS] Good parameters: P-521 bits (pkcs8, buffer(241), {name: ECDH, namedCurve: P-521}, true, [deriveKey, deriveBits, deriveKey, deriveBits])\n[PASS] Empty Usages: 2048 bits (pkcs8, object(spki, pkcs8, jwk), {hash: SHA-1, name: RSA-OAEP}, false, [])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-1, name: RSA-OAEP}, false, [decrypt])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-1, name: RSA-OAEP}, false, [unwrapKey, decrypt])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-1, name: RSA-OAEP}, false, [unwrapKey])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-1, name: RSA-OAEP}, false, [decrypt, unwrapKey, decrypt, unwrapKey])\n[PASS] Empty Usages: 2048 bits (jwk, object(spki, pkcs8, jwk), {hash: SHA-1, name: RSA-OAEP}, false, [])\n[PASS] Good parameters: 2048 bits (spki, buffer(294), {hash: SHA-256, name: RSA-OAEP}, true, [encrypt])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e), {hash: SHA-256, name: RSA-OAEP}, true, [encrypt])\n[PASS] Good parameters: 2048 bits (spki, buffer(294), {hash: SHA-256, name: RSA-OAEP}, true, [wrapKey, encrypt])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e), {hash: SHA-256, name: RSA-OAEP}, true, [wrapKey, encrypt])\n[PASS] Empty Usages: P-521 bits (pkcs8, buffer(241), {name: ECDH, namedCurve: P-521}, true, [])\n[PASS] Good parameters: 2048 bits (spki, buffer(294), {hash: SHA-256, name: RSA-OAEP}, true, [wrapKey])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e), {hash: SHA-256, name: RSA-OAEP}, true, [wrapKey])\n[PASS] Good parameters: 2048 bits (spki, buffer(294), {hash: SHA-256, name: RSA-OAEP}, true, [])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e), {hash: SHA-256, name: RSA-OAEP}, true, [])\n[PASS] Good parameters: 2048 bits (spki, buffer(294), {hash: SHA-256, name: RSA-OAEP}, true, [encrypt, wrapKey, encrypt, wrapKey])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e), {hash: SHA-256, name: RSA-OAEP}, true, [encrypt, wrapKey, encrypt, wrapKey])\n[PASS] Good parameters: P-521 bits (jwk, object(kty, crv, x, y, d), {name: ECDH, namedCurve: P-521}, true, [deriveKey])\n[PASS] Good parameters: 2048 bits (pkcs8, buffer(1218), {hash: SHA-256, name: RSA-OAEP}, true, [decrypt])\n[PASS] Good parameters: 2048 bits (pkcs8, buffer(1218), {hash: SHA-256, name: RSA-OAEP}, true, [unwrapKey, decrypt])\n[PASS] Good parameters: 2048 bits (pkcs8, buffer(1218), {hash: SHA-256, name: RSA-OAEP}, true, [unwrapKey])\n[PASS] ECDH any JWK alg: P-521 bits (jwk, object(kty, crv, x, y, d, alg), {name: ECDH, namedCurve: P-521}, true, [deriveKey])\n[PASS] Good parameters: 2048 bits (pkcs8, buffer(1218), {hash: SHA-256, name: RSA-OAEP}, true, [decrypt, unwrapKey, decrypt, unwrapKey])\n[PASS] Empty Usages: 2048 bits (pkcs8, object(spki, pkcs8, jwk), {hash: SHA-256, name: RSA-OAEP}, true, [])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-256, name: RSA-OAEP}, true, [decrypt])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-256, name: RSA-OAEP}, true, [unwrapKey, decrypt])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-256, name: RSA-OAEP}, true, [unwrapKey])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-256, name: RSA-OAEP}, true, [decrypt, unwrapKey, decrypt, unwrapKey])\n[PASS] Empty Usages: 2048 bits (jwk, object(spki, pkcs8, jwk), {hash: SHA-256, name: RSA-OAEP}, true, [])\n[PASS] Good parameters: 2048 bits (spki, buffer(294), {hash: SHA-256, name: RSA-OAEP}, false, [encrypt])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e), {hash: SHA-256, name: RSA-OAEP}, false, [encrypt])\n[PASS] Good parameters: 2048 bits (spki, buffer(294), {hash: SHA-256, name: RSA-OAEP}, false, [wrapKey, encrypt])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e), {hash: SHA-256, name: RSA-OAEP}, false, [wrapKey, encrypt])\n[PASS] Good parameters: P-521 bits (jwk, object(kty, crv, x, y, d), {name: ECDH, namedCurve: P-521}, true, [deriveBits, deriveKey])\n[PASS] Good parameters: 2048 bits (spki, buffer(294), {hash: SHA-256, name: RSA-OAEP}, false, [wrapKey])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e), {hash: SHA-256, name: RSA-OAEP}, false, [wrapKey])\n[PASS] Good parameters: 2048 bits (spki, buffer(294), {hash: SHA-256, name: RSA-OAEP}, false, [])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e), {hash: SHA-256, name: RSA-OAEP}, false, [])\n[PASS] Good parameters: 2048 bits (spki, buffer(294), {hash: SHA-256, name: RSA-OAEP}, false, [encrypt, wrapKey, encrypt, wrapKey])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e), {hash: SHA-256, name: RSA-OAEP}, false, [encrypt, wrapKey, encrypt, wrapKey])\n[PASS] Good parameters: 2048 bits (pkcs8, buffer(1218), {hash: SHA-256, name: RSA-OAEP}, false, [decrypt])\n[PASS] setup\n[PASS] Good parameters: 2048 bits (pkcs8, buffer(1218), {hash: SHA-256, name: RSA-OAEP}, false, [unwrapKey, decrypt])\n[PASS] Sign and verify using generated Ed25519 keys.\n[PASS] Good parameters: 2048 bits (pkcs8, buffer(1218), {hash: SHA-256, name: RSA-OAEP}, false, [unwrapKey])\n[PASS] ECDH any JWK alg: P-521 bits (jwk, object(kty, crv, x, y, d, alg), {name: ECDH, namedCurve: P-521}, true, [deriveBits, deriveKey])\n[PASS] Good parameters: 2048 bits (pkcs8, buffer(1218), {hash: SHA-256, name: RSA-OAEP}, false, [decrypt, unwrapKey, decrypt, unwrapKey])\n[PASS] Empty Usages: 2048 bits (pkcs8, object(spki, pkcs8, jwk), {hash: SHA-256, name: RSA-OAEP}, false, [])\n[PASS] Sign and verify using generated Ed448 keys.\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-256, name: RSA-OAEP}, false, [decrypt])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-256, name: RSA-OAEP}, false, [unwrapKey, decrypt])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-256, name: RSA-OAEP}, false, [unwrapKey])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-256, name: RSA-OAEP}, false, [decrypt, unwrapKey, decrypt, unwrapKey])\n[PASS] Empty Usages: 2048 bits (jwk, object(spki, pkcs8, jwk), {hash: SHA-256, name: RSA-OAEP}, false, [])\n[PASS] EdDSA Ed25519 verification\n[PASS] EdDSA Ed448 verification\n[PASS] Good parameters: 2048 bits (spki, buffer(294), {hash: SHA-384, name: RSA-OAEP}, true, [encrypt])\n[PASS] EdDSA Ed25519 verification with altered signature after call\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e), {hash: SHA-384, name: RSA-OAEP}, true, [encrypt])\n[PASS] EdDSA Ed448 verification with altered signature after call\n[PASS] Good parameters: 2048 bits (spki, buffer(294), {hash: SHA-384, name: RSA-OAEP}, true, [wrapKey, encrypt])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e), {hash: SHA-384, name: RSA-OAEP}, true, [wrapKey, encrypt])\n[PASS] EdDSA Ed25519 with altered data after call\n[PASS] Good parameters: P-521 bits (jwk, object(kty, crv, x, y, d), {name: ECDH, namedCurve: P-521}, true, [deriveBits])\n[PASS] Good parameters: 2048 bits (spki, buffer(294), {hash: SHA-384, name: RSA-OAEP}, true, [wrapKey])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e), {hash: SHA-384, name: RSA-OAEP}, true, [wrapKey])\n[PASS] EdDSA Ed448 with altered data after call\n[PASS] Good parameters: 2048 bits (spki, buffer(294), {hash: SHA-384, name: RSA-OAEP}, true, [])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e), {hash: SHA-384, name: RSA-OAEP}, true, [])\n[PASS] EdDSA Ed25519 using privateKey to verify\n[PASS] EdDSA Ed448 using privateKey to verify\n[PASS] Good parameters: 2048 bits (spki, buffer(294), {hash: SHA-384, name: RSA-OAEP}, true, [encrypt, wrapKey, encrypt, wrapKey])\n[PASS] EdDSA Ed25519 using publicKey to sign\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e), {hash: SHA-384, name: RSA-OAEP}, true, [encrypt, wrapKey, encrypt, wrapKey])\n[PASS] EdDSA Ed448 using publicKey to sign\n[PASS] EdDSA Ed25519 no verify usage\n[PASS] EdDSA Ed448 no verify usage\n[PASS] EdDSA Ed25519 round trip\n[PASS] Good parameters: 2048 bits (pkcs8, buffer(1218), {hash: SHA-384, name: RSA-OAEP}, true, [decrypt])\n[PASS] Good parameters: 2048 bits (pkcs8, buffer(1218), {hash: SHA-384, name: RSA-OAEP}, true, [unwrapKey, decrypt])\n[PASS] EdDSA Ed448 round trip\n[PASS] EdDSA Ed25519 verification failure due to altered signature\n[PASS] ECDH any JWK alg: P-521 bits (jwk, object(kty, crv, x, y, d, alg), {name: ECDH, namedCurve: P-521}, true, [deriveBits])\n[PASS] Good parameters: 2048 bits (pkcs8, buffer(1218), {hash: SHA-384, name: RSA-OAEP}, true, [unwrapKey])\n[PASS] EdDSA Ed448 verification failure due to altered signature\n[PASS] EdDSA Ed25519 verification failure due to shortened signature\n[PASS] EdDSA Ed448 verification failure due to shortened signature\n[PASS] EdDSA Ed25519 verification failure due to altered data\n[PASS] Good parameters: 2048 bits (pkcs8, buffer(1218), {hash: SHA-384, name: RSA-OAEP}, true, [decrypt, unwrapKey, decrypt, unwrapKey])\n[PASS] EdDSA Ed448 verification failure due to altered data\n[PASS] EdDSA Ed25519 signing with wrong algorithm name\n[PASS] EdDSA Ed448 signing with wrong algorithm name\n[PASS] Empty Usages: 2048 bits (pkcs8, object(spki, pkcs8, jwk), {hash: SHA-384, name: RSA-OAEP}, true, [])\n[PASS] EdDSA Ed25519 verifying with wrong algorithm name\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-384, name: RSA-OAEP}, true, [decrypt])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-384, name: RSA-OAEP}, true, [unwrapKey, decrypt])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-384, name: RSA-OAEP}, true, [unwrapKey])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-384, name: RSA-OAEP}, true, [decrypt, unwrapKey, decrypt, unwrapKey])\n[PASS] Empty Usages: 2048 bits (jwk, object(spki, pkcs8, jwk), {hash: SHA-384, name: RSA-OAEP}, true, [])\n[PASS] EdDSA Ed448 verifying with wrong algorithm name\n[PASS] Good parameters: 2048 bits (spki, buffer(294), {hash: SHA-384, name: RSA-OAEP}, false, [encrypt])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e), {hash: SHA-384, name: RSA-OAEP}, false, [encrypt])\n[PASS] Good parameters: 2048 bits (spki, buffer(294), {hash: SHA-384, name: RSA-OAEP}, false, [wrapKey, encrypt])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e), {hash: SHA-384, name: RSA-OAEP}, false, [wrapKey, encrypt])\n[PASS] Good parameters: 2048 bits (spki, buffer(294), {hash: SHA-384, name: RSA-OAEP}, false, [wrapKey])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e), {hash: SHA-384, name: RSA-OAEP}, false, [wrapKey])\n[PASS] Good parameters: 2048 bits (spki, buffer(294), {hash: SHA-384, name: RSA-OAEP}, false, [])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e), {hash: SHA-384, name: RSA-OAEP}, false, [])\n[PASS] Good parameters: P-521 bits (jwk, object(kty, crv, x, y, d), {name: ECDH, namedCurve: P-521}, true, [deriveKey, deriveBits, deriveKey, deriveBits])\n[PASS] setup\n[PASS] HMAC with SHA-1 verification\n[PASS] HMAC with SHA-256 verification\n[PASS] HMAC with SHA-384 verification\n[PASS] HMAC with SHA-512 verification\n[PASS] HMAC with SHA-1 verification with altered signature after call\n[PASS] Good parameters: 2048 bits (spki, buffer(294), {hash: SHA-384, name: RSA-OAEP}, false, [encrypt, wrapKey, encrypt, wrapKey])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e), {hash: SHA-384, name: RSA-OAEP}, false, [encrypt, wrapKey, encrypt, wrapKey])\n[PASS] Good parameters: 2048 bits (pkcs8, buffer(1218), {hash: SHA-384, name: RSA-OAEP}, false, [decrypt])\n[PASS] HMAC with SHA-256 verification with altered signature after call\n[PASS] HMAC with SHA-384 verification with altered signature after call\n[PASS] Good parameters: 2048 bits (pkcs8, buffer(1218), {hash: SHA-384, name: RSA-OAEP}, false, [unwrapKey, decrypt])\n[PASS] HMAC with SHA-512 verification with altered signature after call\n[PASS] ECDH any JWK alg: P-521 bits (jwk, object(kty, crv, x, y, d, alg), {name: ECDH, namedCurve: P-521}, true, [deriveKey, deriveBits, deriveKey, deriveBits])\n[PASS] HMAC with SHA-1 with altered plaintext after call\n[PASS] Good parameters: 2048 bits (pkcs8, buffer(1218), {hash: SHA-384, name: RSA-OAEP}, false, [unwrapKey])\n[PASS] HMAC with SHA-256 with altered plaintext after call\n[PASS] HMAC with SHA-384 with altered plaintext after call\n[PASS] HMAC with SHA-512 with altered plaintext after call\n[PASS] HMAC with SHA-1 no verify usage\n[PASS] HMAC with SHA-256 no verify usage\n[PASS] Good parameters: 2048 bits (pkcs8, buffer(1218), {hash: SHA-384, name: RSA-OAEP}, false, [decrypt, unwrapKey, decrypt, unwrapKey])\n[PASS] HMAC with SHA-384 no verify usage\n[PASS] HMAC with SHA-512 no verify usage\n[PASS] HMAC with SHA-1 round trip\n[PASS] HMAC with SHA-256 round trip\n[PASS] Empty Usages: 2048 bits (pkcs8, object(spki, pkcs8, jwk), {hash: SHA-384, name: RSA-OAEP}, false, [])\n[PASS] HMAC with SHA-384 round trip\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-384, name: RSA-OAEP}, false, [decrypt])\n[PASS] HMAC with SHA-512 round trip\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-384, name: RSA-OAEP}, false, [unwrapKey, decrypt])\n[PASS] HMAC with SHA-1 verification failure due to wrong plaintext\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-384, name: RSA-OAEP}, false, [unwrapKey])\n[PASS] HMAC with SHA-256 verification failure due to wrong plaintext\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-384, name: RSA-OAEP}, false, [decrypt, unwrapKey, decrypt, unwrapKey])\n[PASS] HMAC with SHA-384 verification failure due to wrong plaintext\n[PASS] HMAC with SHA-512 verification failure due to wrong plaintext\n[PASS] Empty Usages: 2048 bits (jwk, object(spki, pkcs8, jwk), {hash: SHA-384, name: RSA-OAEP}, false, [])\n[PASS] HMAC with SHA-1 verification failure due to wrong signature\n[PASS] HMAC with SHA-256 verification failure due to wrong signature\n[PASS] HMAC with SHA-384 verification failure due to wrong signature\n[PASS] HMAC with SHA-512 verification failure due to wrong signature\n[PASS] HMAC with SHA-1 verification failure due to short signature\n[PASS] HMAC with SHA-256 verification failure due to short signature\n[PASS] Good parameters: 2048 bits (spki, buffer(294), {hash: SHA-512, name: RSA-OAEP}, true, [encrypt])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e), {hash: SHA-512, name: RSA-OAEP}, true, [encrypt])\n[PASS] HMAC with SHA-384 verification failure due to short signature\n[PASS] HMAC with SHA-512 verification failure due to short signature\n[PASS] HMAC with SHA-1 signing with wrong algorithm name\n[PASS] HMAC with SHA-256 signing with wrong algorithm name\n[PASS] HMAC with SHA-384 signing with wrong algorithm name\n[PASS] HMAC with SHA-512 signing with wrong algorithm name\n[PASS] Empty Usages: P-521 bits (jwk, object(kty, crv, x, y, d), {name: ECDH, namedCurve: P-521}, true, [])\n[PASS] HMAC with SHA-1 verifying with wrong algorithm name\n[PASS] HMAC with SHA-256 verifying with wrong algorithm name\n[PASS] HMAC with SHA-384 verifying with wrong algorithm name\n[PASS] Good parameters: 2048 bits (spki, buffer(294), {hash: SHA-512, name: RSA-OAEP}, true, [wrapKey, encrypt])\n[PASS] HMAC with SHA-512 verifying with wrong algorithm name\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e), {hash: SHA-512, name: RSA-OAEP}, true, [wrapKey, encrypt])\n[PASS] Good parameters: P-521 bits (spki, buffer(158), {name: ECDH, namedCurve: P-521}, false, [])\n[PASS] Good parameters: P-521 bits (spki, buffer(90, compressed), {name: ECDH, namedCurve: P-521}, false, [])\n[PASS] Good parameters: 2048 bits (spki, buffer(294), {hash: SHA-512, name: RSA-OAEP}, true, [wrapKey])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e), {hash: SHA-512, name: RSA-OAEP}, true, [wrapKey])\n[PASS] Good parameters: 2048 bits (spki, buffer(294), {hash: SHA-512, name: RSA-OAEP}, true, [])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e), {hash: SHA-512, name: RSA-OAEP}, true, [])\n[PASS] Good parameters: P-521 bits (jwk, object(kty, crv, x, y), {name: ECDH, namedCurve: P-521}, false, [])\n[PASS] Good parameters: 2048 bits (spki, buffer(294), {hash: SHA-512, name: RSA-OAEP}, true, [encrypt, wrapKey, encrypt, wrapKey])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e), {hash: SHA-512, name: RSA-OAEP}, true, [encrypt, wrapKey, encrypt, wrapKey])\n[PASS] ECDH any JWK alg: P-521 bits (jwk, object(kty, crv, x, y, alg), {name: ECDH, namedCurve: P-521}, false, [])\n[PASS] Good parameters: P-521 bits (raw, buffer(133), {name: ECDH, namedCurve: P-521}, false, [])\n[PASS] Good parameters: P-521 bits (raw, buffer(67, compressed), {name: ECDH, namedCurve: P-521}, false, [])\n[PASS] Good parameters: 2048 bits (pkcs8, buffer(1218), {hash: SHA-512, name: RSA-OAEP}, true, [decrypt])\n[PASS] Good parameters: 2048 bits (pkcs8, buffer(1218), {hash: SHA-512, name: RSA-OAEP}, true, [unwrapKey, decrypt])\n[PASS] Good parameters: 2048 bits (pkcs8, buffer(1218), {hash: SHA-512, name: RSA-OAEP}, true, [unwrapKey])\n[PASS] Good parameters: P-521 bits (pkcs8, buffer(241), {name: ECDH, namedCurve: P-521}, false, [deriveKey])\n[PASS] Good parameters: 2048 bits (pkcs8, buffer(1218), {hash: SHA-512, name: RSA-OAEP}, true, [decrypt, unwrapKey, decrypt, unwrapKey])\n[PASS] Empty Usages: 2048 bits (pkcs8, object(spki, pkcs8, jwk), {hash: SHA-512, name: RSA-OAEP}, true, [])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-512, name: RSA-OAEP}, true, [decrypt])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-512, name: RSA-OAEP}, true, [unwrapKey, decrypt])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-512, name: RSA-OAEP}, true, [unwrapKey])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-512, name: RSA-OAEP}, true, [decrypt, unwrapKey, decrypt, unwrapKey])\n[PASS] Empty Usages: 2048 bits (jwk, object(spki, pkcs8, jwk), {hash: SHA-512, name: RSA-OAEP}, true, [])\n[PASS] Good parameters: 2048 bits (spki, buffer(294), {hash: SHA-512, name: RSA-OAEP}, false, [encrypt])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e), {hash: SHA-512, name: RSA-OAEP}, false, [encrypt])\n[PASS] Good parameters: 2048 bits (spki, buffer(294), {hash: SHA-512, name: RSA-OAEP}, false, [wrapKey, encrypt])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e), {hash: SHA-512, name: RSA-OAEP}, false, [wrapKey, encrypt])\n[PASS] Good parameters: 2048 bits (spki, buffer(294), {hash: SHA-512, name: RSA-OAEP}, false, [wrapKey])\n[PASS] Good parameters: P-521 bits (pkcs8, buffer(241), {name: ECDH, namedCurve: P-521}, false, [deriveBits, deriveKey])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e), {hash: SHA-512, name: RSA-OAEP}, false, [wrapKey])\n[PASS] Good parameters: 2048 bits (spki, buffer(294), {hash: SHA-512, name: RSA-OAEP}, false, [])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e), {hash: SHA-512, name: RSA-OAEP}, false, [])\n[PASS] Good parameters: 2048 bits (spki, buffer(294), {hash: SHA-512, name: RSA-OAEP}, false, [encrypt, wrapKey, encrypt, wrapKey])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e), {hash: SHA-512, name: RSA-OAEP}, false, [encrypt, wrapKey, encrypt, wrapKey])\n[PASS] Good parameters: 2048 bits (pkcs8, buffer(1218), {hash: SHA-512, name: RSA-OAEP}, false, [decrypt])\n[PASS] Good parameters: 2048 bits (pkcs8, buffer(1218), {hash: SHA-512, name: RSA-OAEP}, false, [unwrapKey, decrypt])\n[PASS] Good parameters: P-521 bits (pkcs8, buffer(241), {name: ECDH, namedCurve: P-521}, false, [deriveBits])\n[PASS] Good parameters: 2048 bits (pkcs8, buffer(1218), {hash: SHA-512, name: RSA-OAEP}, false, [unwrapKey])\n[PASS] Good parameters: 2048 bits (pkcs8, buffer(1218), {hash: SHA-512, name: RSA-OAEP}, false, [decrypt, unwrapKey, decrypt, unwrapKey])\n[PASS] Empty Usages: 2048 bits (pkcs8, object(spki, pkcs8, jwk), {hash: SHA-512, name: RSA-OAEP}, false, [])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-512, name: RSA-OAEP}, false, [decrypt])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-512, name: RSA-OAEP}, false, [unwrapKey, decrypt])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-512, name: RSA-OAEP}, false, [unwrapKey])\n[PASS] Good parameters: P-521 bits (pkcs8, buffer(241), {name: ECDH, namedCurve: P-521}, false, [deriveKey, deriveBits, deriveKey, deriveBits])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-512, name: RSA-OAEP}, false, [decrypt, unwrapKey, decrypt, unwrapKey])\n[PASS] Empty Usages: 2048 bits (jwk, object(spki, pkcs8, jwk), {hash: SHA-512, name: RSA-OAEP}, false, [])\n[PASS] Good parameters: 4096 bits (spki, buffer(550), {hash: SHA-1, name: RSA-OAEP}, true, [encrypt])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e), {hash: SHA-1, name: RSA-OAEP}, true, [encrypt])\n[PASS] Good parameters: 4096 bits (spki, buffer(550), {hash: SHA-1, name: RSA-OAEP}, true, [wrapKey, encrypt])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e), {hash: SHA-1, name: RSA-OAEP}, true, [wrapKey, encrypt])\n[PASS] Good parameters: 4096 bits (spki, buffer(550), {hash: SHA-1, name: RSA-OAEP}, true, [wrapKey])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e), {hash: SHA-1, name: RSA-OAEP}, true, [wrapKey])\n[PASS] Good parameters: 4096 bits (spki, buffer(550), {hash: SHA-1, name: RSA-OAEP}, true, [])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e), {hash: SHA-1, name: RSA-OAEP}, true, [])\n[PASS] Empty Usages: P-521 bits (pkcs8, buffer(241), {name: ECDH, namedCurve: P-521}, false, [])\n[PASS] Good parameters: 4096 bits (spki, buffer(550), {hash: SHA-1, name: RSA-OAEP}, true, [encrypt, wrapKey, encrypt, wrapKey])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e), {hash: SHA-1, name: RSA-OAEP}, true, [encrypt, wrapKey, encrypt, wrapKey])\n[PASS] Good parameters: 4096 bits (pkcs8, buffer(2376), {hash: SHA-1, name: RSA-OAEP}, true, [decrypt])\n[PASS] Good parameters: P-521 bits (jwk, object(kty, crv, x, y, d), {name: ECDH, namedCurve: P-521}, false, [deriveKey])\n[PASS] Good parameters: 4096 bits (pkcs8, buffer(2376), {hash: SHA-1, name: RSA-OAEP}, true, [unwrapKey, decrypt])\n[PASS] Good parameters: 4096 bits (pkcs8, buffer(2376), {hash: SHA-1, name: RSA-OAEP}, true, [unwrapKey])\n[PASS] Good parameters: 4096 bits (pkcs8, buffer(2376), {hash: SHA-1, name: RSA-OAEP}, true, [decrypt, unwrapKey, decrypt, unwrapKey])\n[PASS] ECDH any JWK alg: P-521 bits (jwk, object(kty, crv, x, y, d, alg), {name: ECDH, namedCurve: P-521}, false, [deriveKey])\n[PASS] Empty Usages: 4096 bits (pkcs8, object(spki, pkcs8, jwk), {hash: SHA-1, name: RSA-OAEP}, true, [])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-1, name: RSA-OAEP}, true, [decrypt])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-1, name: RSA-OAEP}, true, [unwrapKey, decrypt])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-1, name: RSA-OAEP}, true, [unwrapKey])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-1, name: RSA-OAEP}, true, [decrypt, unwrapKey, decrypt, unwrapKey])\n[PASS] Empty Usages: 4096 bits (jwk, object(spki, pkcs8, jwk), {hash: SHA-1, name: RSA-OAEP}, true, [])\n[PASS] Good parameters: 4096 bits (spki, buffer(550), {hash: SHA-1, name: RSA-OAEP}, false, [encrypt])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e), {hash: SHA-1, name: RSA-OAEP}, false, [encrypt])\n[PASS] Good parameters: 4096 bits (spki, buffer(550), {hash: SHA-1, name: RSA-OAEP}, false, [wrapKey, encrypt])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e), {hash: SHA-1, name: RSA-OAEP}, false, [wrapKey, encrypt])\n[PASS] Good parameters: 4096 bits (spki, buffer(550), {hash: SHA-1, name: RSA-OAEP}, false, [wrapKey])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e), {hash: SHA-1, name: RSA-OAEP}, false, [wrapKey])\n[PASS] Good parameters: 4096 bits (spki, buffer(550), {hash: SHA-1, name: RSA-OAEP}, false, [])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e), {hash: SHA-1, name: RSA-OAEP}, false, [])\n[PASS] Good parameters: 4096 bits (spki, buffer(550), {hash: SHA-1, name: RSA-OAEP}, false, [encrypt, wrapKey, encrypt, wrapKey])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e), {hash: SHA-1, name: RSA-OAEP}, false, [encrypt, wrapKey, encrypt, wrapKey])\n[PASS] Good parameters: P-521 bits (jwk, object(kty, crv, x, y, d), {name: ECDH, namedCurve: P-521}, false, [deriveBits, deriveKey])\n[PASS] Good parameters: 4096 bits (pkcs8, buffer(2376), {hash: SHA-1, name: RSA-OAEP}, false, [decrypt])\n[PASS] Good parameters: 4096 bits (pkcs8, buffer(2376), {hash: SHA-1, name: RSA-OAEP}, false, [unwrapKey, decrypt])\n[PASS] ECDH any JWK alg: P-521 bits (jwk, object(kty, crv, x, y, d, alg), {name: ECDH, namedCurve: P-521}, false, [deriveBits, deriveKey])\n[PASS] Good parameters: 4096 bits (pkcs8, buffer(2376), {hash: SHA-1, name: RSA-OAEP}, false, [unwrapKey])\n[PASS] Good parameters: 4096 bits (pkcs8, buffer(2376), {hash: SHA-1, name: RSA-OAEP}, false, [decrypt, unwrapKey, decrypt, unwrapKey])\n[PASS] Empty Usages: 4096 bits (pkcs8, object(spki, pkcs8, jwk), {hash: SHA-1, name: RSA-OAEP}, false, [])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-1, name: RSA-OAEP}, false, [decrypt])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-1, name: RSA-OAEP}, false, [unwrapKey, decrypt])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-1, name: RSA-OAEP}, false, [unwrapKey])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-1, name: RSA-OAEP}, false, [decrypt, unwrapKey, decrypt, unwrapKey])\n[PASS] Good parameters: P-521 bits (jwk, object(kty, crv, x, y, d), {name: ECDH, namedCurve: P-521}, false, [deriveBits])\n[PASS] Empty Usages: 4096 bits (jwk, object(spki, pkcs8, jwk), {hash: SHA-1, name: RSA-OAEP}, false, [])\n[PASS] Good parameters: 4096 bits (spki, buffer(550), {hash: SHA-256, name: RSA-OAEP}, true, [encrypt])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e), {hash: SHA-256, name: RSA-OAEP}, true, [encrypt])\n[PASS] Good parameters: 4096 bits (spki, buffer(550), {hash: SHA-256, name: RSA-OAEP}, true, [wrapKey, encrypt])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e), {hash: SHA-256, name: RSA-OAEP}, true, [wrapKey, encrypt])\n[PASS] Good parameters: 4096 bits (spki, buffer(550), {hash: SHA-256, name: RSA-OAEP}, true, [wrapKey])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e), {hash: SHA-256, name: RSA-OAEP}, true, [wrapKey])\n[PASS] ECDH any JWK alg: P-521 bits (jwk, object(kty, crv, x, y, d, alg), {name: ECDH, namedCurve: P-521}, false, [deriveBits])\n[PASS] Good parameters: 4096 bits (spki, buffer(550), {hash: SHA-256, name: RSA-OAEP}, true, [])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e), {hash: SHA-256, name: RSA-OAEP}, true, [])\n[PASS] Good parameters: 4096 bits (spki, buffer(550), {hash: SHA-256, name: RSA-OAEP}, true, [encrypt, wrapKey, encrypt, wrapKey])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e), {hash: SHA-256, name: RSA-OAEP}, true, [encrypt, wrapKey, encrypt, wrapKey])\n[PASS] Good parameters: P-521 bits (jwk, object(kty, crv, x, y, d), {name: ECDH, namedCurve: P-521}, false, [deriveKey, deriveBits, deriveKey, deriveBits])\n[PASS] Good parameters: 4096 bits (pkcs8, buffer(2376), {hash: SHA-256, name: RSA-OAEP}, true, [decrypt])\n[PASS] Good parameters: 4096 bits (pkcs8, buffer(2376), {hash: SHA-256, name: RSA-OAEP}, true, [unwrapKey, decrypt])\n[PASS] ECDH any JWK alg: P-521 bits (jwk, object(kty, crv, x, y, d, alg), {name: ECDH, namedCurve: P-521}, false, [deriveKey, deriveBits, deriveKey, deriveBits])\n[PASS] Good parameters: 4096 bits (pkcs8, buffer(2376), {hash: SHA-256, name: RSA-OAEP}, true, [unwrapKey])\n[PASS] Empty Usages: P-521 bits (jwk, object(kty, crv, x, y, d), {name: ECDH, namedCurve: P-521}, false, [])\n[PASS] Good parameters: 4096 bits (pkcs8, buffer(2376), {hash: SHA-256, name: RSA-OAEP}, true, [decrypt, unwrapKey, decrypt, unwrapKey])\n[PASS] Empty Usages: 4096 bits (pkcs8, object(spki, pkcs8, jwk), {hash: SHA-256, name: RSA-OAEP}, true, [])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-256, name: RSA-OAEP}, true, [decrypt])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-256, name: RSA-OAEP}, true, [unwrapKey, decrypt])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-256, name: RSA-OAEP}, true, [unwrapKey])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-256, name: RSA-OAEP}, true, [decrypt, unwrapKey, decrypt, unwrapKey])\n[PASS] Empty Usages: 4096 bits (jwk, object(spki, pkcs8, jwk), {hash: SHA-256, name: RSA-OAEP}, true, [])\n[PASS] Good parameters: 4096 bits (spki, buffer(550), {hash: SHA-256, name: RSA-OAEP}, false, [encrypt])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e), {hash: SHA-256, name: RSA-OAEP}, false, [encrypt])\n[PASS] Good parameters: 4096 bits (spki, buffer(550), {hash: SHA-256, name: RSA-OAEP}, false, [wrapKey, encrypt])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e), {hash: SHA-256, name: RSA-OAEP}, false, [wrapKey, encrypt])\n[PASS] Good parameters: 4096 bits (spki, buffer(550), {hash: SHA-256, name: RSA-OAEP}, false, [wrapKey])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e), {hash: SHA-256, name: RSA-OAEP}, false, [wrapKey])\n[PASS] Good parameters: 4096 bits (spki, buffer(550), {hash: SHA-256, name: RSA-OAEP}, false, [])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e), {hash: SHA-256, name: RSA-OAEP}, false, [])\n[PASS] Good parameters: 4096 bits (spki, buffer(550), {hash: SHA-256, name: RSA-OAEP}, false, [encrypt, wrapKey, encrypt, wrapKey])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e), {hash: SHA-256, name: RSA-OAEP}, false, [encrypt, wrapKey, encrypt, wrapKey])\n[PASS] Good parameters: 4096 bits (pkcs8, buffer(2376), {hash: SHA-256, name: RSA-OAEP}, false, [decrypt])\n[PASS] Good parameters: 4096 bits (pkcs8, buffer(2376), {hash: SHA-256, name: RSA-OAEP}, false, [unwrapKey, decrypt])\n[PASS] Good parameters: 4096 bits (pkcs8, buffer(2376), {hash: SHA-256, name: RSA-OAEP}, false, [unwrapKey])\n[PASS] Good parameters: 4096 bits (pkcs8, buffer(2376), {hash: SHA-256, name: RSA-OAEP}, false, [decrypt, unwrapKey, decrypt, unwrapKey])\n[PASS] Empty Usages: 4096 bits (pkcs8, object(spki, pkcs8, jwk), {hash: SHA-256, name: RSA-OAEP}, false, [])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-256, name: RSA-OAEP}, false, [decrypt])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-256, name: RSA-OAEP}, false, [unwrapKey, decrypt])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-256, name: RSA-OAEP}, false, [unwrapKey])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-256, name: RSA-OAEP}, false, [decrypt, unwrapKey, decrypt, unwrapKey])\n[PASS] Empty Usages: 4096 bits (jwk, object(spki, pkcs8, jwk), {hash: SHA-256, name: RSA-OAEP}, false, [])\n[PASS] Good parameters: 4096 bits (spki, buffer(550), {hash: SHA-384, name: RSA-OAEP}, true, [encrypt])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e), {hash: SHA-384, name: RSA-OAEP}, true, [encrypt])\n[PASS] Good parameters: 4096 bits (spki, buffer(550), {hash: SHA-384, name: RSA-OAEP}, true, [wrapKey, encrypt])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e), {hash: SHA-384, name: RSA-OAEP}, true, [wrapKey, encrypt])\n[PASS] Good parameters: 4096 bits (spki, buffer(550), {hash: SHA-384, name: RSA-OAEP}, true, [wrapKey])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e), {hash: SHA-384, name: RSA-OAEP}, true, [wrapKey])\n[PASS] Good parameters: 4096 bits (spki, buffer(550), {hash: SHA-384, name: RSA-OAEP}, true, [])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e), {hash: SHA-384, name: RSA-OAEP}, true, [])\n[PASS] Good parameters: 4096 bits (spki, buffer(550), {hash: SHA-384, name: RSA-OAEP}, true, [encrypt, wrapKey, encrypt, wrapKey])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e), {hash: SHA-384, name: RSA-OAEP}, true, [encrypt, wrapKey, encrypt, wrapKey])\n[PASS] Good parameters: 4096 bits (pkcs8, buffer(2376), {hash: SHA-384, name: RSA-OAEP}, true, [decrypt])\n[PASS] Good parameters: 4096 bits (pkcs8, buffer(2376), {hash: SHA-384, name: RSA-OAEP}, true, [unwrapKey, decrypt])\n[PASS] Good parameters: 4096 bits (pkcs8, buffer(2376), {hash: SHA-384, name: RSA-OAEP}, true, [unwrapKey])\n[PASS] Good parameters: 4096 bits (pkcs8, buffer(2376), {hash: SHA-384, name: RSA-OAEP}, true, [decrypt, unwrapKey, decrypt, unwrapKey])\n[PASS] setup\n[PASS] Empty Usages: 4096 bits (pkcs8, object(spki, pkcs8, jwk), {hash: SHA-384, name: RSA-OAEP}, true, [])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-384, name: RSA-OAEP}, true, [decrypt])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-384, name: RSA-OAEP}, true, [unwrapKey, decrypt])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-384, name: RSA-OAEP}, true, [unwrapKey])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-384, name: RSA-OAEP}, true, [decrypt, unwrapKey, decrypt, unwrapKey])\n[PASS] Empty Usages: 4096 bits (jwk, object(spki, pkcs8, jwk), {hash: SHA-384, name: RSA-OAEP}, true, [])\n[PASS] Good parameters: 4096 bits (spki, buffer(550), {hash: SHA-384, name: RSA-OAEP}, false, [encrypt])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e), {hash: SHA-384, name: RSA-OAEP}, false, [encrypt])\n[PASS] Good parameters: 4096 bits (spki, buffer(550), {hash: SHA-384, name: RSA-OAEP}, false, [wrapKey, encrypt])\n[PASS] RSASSA-PKCS1-v1_5 with SHA-1 verification\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e), {hash: SHA-384, name: RSA-OAEP}, false, [wrapKey, encrypt])\n[PASS] RSASSA-PKCS1-v1_5 with SHA-256 verification\n[PASS] RSASSA-PKCS1-v1_5 with SHA-384 verification\n[PASS] Good parameters: 4096 bits (spki, buffer(550), {hash: SHA-384, name: RSA-OAEP}, false, [wrapKey])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e), {hash: SHA-384, name: RSA-OAEP}, false, [wrapKey])\n[PASS] RSASSA-PKCS1-v1_5 with SHA-512 verification\n[PASS] RSASSA-PKCS1-v1_5 with SHA-1 verification with altered signature after call\n[PASS] Good parameters: 4096 bits (spki, buffer(550), {hash: SHA-384, name: RSA-OAEP}, false, [])\n[PASS] RSASSA-PKCS1-v1_5 with SHA-256 verification with altered signature after call\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e), {hash: SHA-384, name: RSA-OAEP}, false, [])\n[PASS] RSASSA-PKCS1-v1_5 with SHA-384 verification with altered signature after call\n[PASS] RSASSA-PKCS1-v1_5 with SHA-512 verification with altered signature after call\n[PASS] Good parameters: 4096 bits (spki, buffer(550), {hash: SHA-384, name: RSA-OAEP}, false, [encrypt, wrapKey, encrypt, wrapKey])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e), {hash: SHA-384, name: RSA-OAEP}, false, [encrypt, wrapKey, encrypt, wrapKey])\n[PASS] RSASSA-PKCS1-v1_5 with SHA-1 with altered plaintext after call\n[PASS] RSASSA-PKCS1-v1_5 with SHA-256 with altered plaintext after call\n[PASS] RSASSA-PKCS1-v1_5 with SHA-384 with altered plaintext after call\n[PASS] RSASSA-PKCS1-v1_5 with SHA-512 with altered plaintext after call\n[PASS] Good parameters: 4096 bits (pkcs8, buffer(2376), {hash: SHA-384, name: RSA-OAEP}, false, [decrypt])\n[PASS] RSASSA-PKCS1-v1_5 with SHA-1 using privateKey to verify\n[PASS] RSASSA-PKCS1-v1_5 with SHA-256 using privateKey to verify\n[PASS] RSASSA-PKCS1-v1_5 with SHA-384 using privateKey to verify\n[PASS] RSASSA-PKCS1-v1_5 with SHA-512 using privateKey to verify\n[PASS] RSASSA-PKCS1-v1_5 with SHA-1 using publicKey to sign\n[PASS] RSASSA-PKCS1-v1_5 with SHA-256 using publicKey to sign\n[PASS] RSASSA-PKCS1-v1_5 with SHA-384 using publicKey to sign\n[PASS] RSASSA-PKCS1-v1_5 with SHA-512 using publicKey to sign\n[PASS] RSASSA-PKCS1-v1_5 with SHA-1 no verify usage\n[PASS] RSASSA-PKCS1-v1_5 with SHA-256 no verify usage\n[PASS] Good parameters: 4096 bits (pkcs8, buffer(2376), {hash: SHA-384, name: RSA-OAEP}, false, [unwrapKey, decrypt])\n[PASS] RSASSA-PKCS1-v1_5 with SHA-384 no verify usage\n[PASS] RSASSA-PKCS1-v1_5 with SHA-512 no verify usage\n[PASS] Good parameters: 4096 bits (pkcs8, buffer(2376), {hash: SHA-384, name: RSA-OAEP}, false, [unwrapKey])\n[PASS] Good parameters: 4096 bits (pkcs8, buffer(2376), {hash: SHA-384, name: RSA-OAEP}, false, [decrypt, unwrapKey, decrypt, unwrapKey])\n[PASS] RSASSA-PKCS1-v1_5 with SHA-1 round trip\n[PASS] Empty Usages: 4096 bits (pkcs8, object(spki, pkcs8, jwk), {hash: SHA-384, name: RSA-OAEP}, false, [])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-384, name: RSA-OAEP}, false, [decrypt])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-384, name: RSA-OAEP}, false, [unwrapKey, decrypt])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-384, name: RSA-OAEP}, false, [unwrapKey])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-384, name: RSA-OAEP}, false, [decrypt, unwrapKey, decrypt, unwrapKey])\n[PASS] Empty Usages: 4096 bits (jwk, object(spki, pkcs8, jwk), {hash: SHA-384, name: RSA-OAEP}, false, [])\n[PASS] RSASSA-PKCS1-v1_5 with SHA-256 round trip\n[PASS] Good parameters: 4096 bits (spki, buffer(550), {hash: SHA-512, name: RSA-OAEP}, true, [encrypt])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e), {hash: SHA-512, name: RSA-OAEP}, true, [encrypt])\n[PASS] Good parameters: 4096 bits (spki, buffer(550), {hash: SHA-512, name: RSA-OAEP}, true, [wrapKey, encrypt])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e), {hash: SHA-512, name: RSA-OAEP}, true, [wrapKey, encrypt])\n[PASS] Good parameters: 4096 bits (spki, buffer(550), {hash: SHA-512, name: RSA-OAEP}, true, [wrapKey])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e), {hash: SHA-512, name: RSA-OAEP}, true, [wrapKey])\n[PASS] Good parameters: 4096 bits (spki, buffer(550), {hash: SHA-512, name: RSA-OAEP}, true, [])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e), {hash: SHA-512, name: RSA-OAEP}, true, [])\n[PASS] RSASSA-PKCS1-v1_5 with SHA-384 round trip\n[PASS] RSASSA-PKCS1-v1_5 with SHA-512 round trip\n[PASS] RSASSA-PKCS1-v1_5 with SHA-1 signing with wrong algorithm name\n[PASS] RSASSA-PKCS1-v1_5 with SHA-256 signing with wrong algorithm name\n[PASS] RSASSA-PKCS1-v1_5 with SHA-384 signing with wrong algorithm name\n[PASS] RSASSA-PKCS1-v1_5 with SHA-512 signing with wrong algorithm name\n[PASS] RSASSA-PKCS1-v1_5 with SHA-1 verification with wrong algorithm name\n[PASS] RSASSA-PKCS1-v1_5 with SHA-256 verification with wrong algorithm name\n[PASS] RSASSA-PKCS1-v1_5 with SHA-384 verification with wrong algorithm name\n[PASS] RSASSA-PKCS1-v1_5 with SHA-512 verification with wrong algorithm name\n[PASS] RSASSA-PKCS1-v1_5 with SHA-1 verification failure with altered signature\n[PASS] RSASSA-PKCS1-v1_5 with SHA-256 verification failure with altered signature\n[PASS] RSASSA-PKCS1-v1_5 with SHA-384 verification failure with altered signature\n[PASS] RSASSA-PKCS1-v1_5 with SHA-512 verification failure with altered signature\n[PASS] RSASSA-PKCS1-v1_5 with SHA-1 verification failure with altered plaintext\n[PASS] RSASSA-PKCS1-v1_5 with SHA-256 verification failure with altered plaintext\n[PASS] Good parameters: 4096 bits (spki, buffer(550), {hash: SHA-512, name: RSA-OAEP}, true, [encrypt, wrapKey, encrypt, wrapKey])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e), {hash: SHA-512, name: RSA-OAEP}, true, [encrypt, wrapKey, encrypt, wrapKey])\n[PASS] RSASSA-PKCS1-v1_5 with SHA-384 verification failure with altered plaintext\n[PASS] RSASSA-PKCS1-v1_5 with SHA-512 verification failure with altered plaintext\n[PASS] Good parameters: 4096 bits (pkcs8, buffer(2376), {hash: SHA-512, name: RSA-OAEP}, true, [decrypt])\n[PASS] Good parameters: 4096 bits (pkcs8, buffer(2376), {hash: SHA-512, name: RSA-OAEP}, true, [unwrapKey, decrypt])\n[PASS] Good parameters: 4096 bits (pkcs8, buffer(2376), {hash: SHA-512, name: RSA-OAEP}, true, [unwrapKey])\n[PASS] Success: generateKey({hash: SHA-1, modulusLength: 2048, name: Rsassa-pkcs1-v1_5, publicExponent: {0: 1, 1: 0, 2: 1}}, true, [sign, verify, sign, sign, verify])\n[PASS] Good parameters: 4096 bits (pkcs8, buffer(2376), {hash: SHA-512, name: RSA-OAEP}, true, [decrypt, unwrapKey, decrypt, unwrapKey])\n[PASS] Empty Usages: 4096 bits (pkcs8, object(spki, pkcs8, jwk), {hash: SHA-512, name: RSA-OAEP}, true, [])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-512, name: RSA-OAEP}, true, [decrypt])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-512, name: RSA-OAEP}, true, [unwrapKey, decrypt])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-512, name: RSA-OAEP}, true, [unwrapKey])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-512, name: RSA-OAEP}, true, [decrypt, unwrapKey, decrypt, unwrapKey])\n[PASS] Empty Usages: 4096 bits (jwk, object(spki, pkcs8, jwk), {hash: SHA-512, name: RSA-OAEP}, true, [])\n[PASS] Good parameters: 4096 bits (spki, buffer(550), {hash: SHA-512, name: RSA-OAEP}, false, [encrypt])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e), {hash: SHA-512, name: RSA-OAEP}, false, [encrypt])\n[PASS] Good parameters: 4096 bits (spki, buffer(550), {hash: SHA-512, name: RSA-OAEP}, false, [wrapKey, encrypt])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e), {hash: SHA-512, name: RSA-OAEP}, false, [wrapKey, encrypt])\n[PASS] Good parameters: 4096 bits (spki, buffer(550), {hash: SHA-512, name: RSA-OAEP}, false, [wrapKey])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e), {hash: SHA-512, name: RSA-OAEP}, false, [wrapKey])\n[PASS] Good parameters: 4096 bits (spki, buffer(550), {hash: SHA-512, name: RSA-OAEP}, false, [])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e), {hash: SHA-512, name: RSA-OAEP}, false, [])\n[PASS] Good parameters: 4096 bits (spki, buffer(550), {hash: SHA-512, name: RSA-OAEP}, false, [encrypt, wrapKey, encrypt, wrapKey])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e), {hash: SHA-512, name: RSA-OAEP}, false, [encrypt, wrapKey, encrypt, wrapKey])\n[PASS] Good parameters: 4096 bits (pkcs8, buffer(2376), {hash: SHA-512, name: RSA-OAEP}, false, [decrypt])\n[PASS] Good parameters: 4096 bits (pkcs8, buffer(2376), {hash: SHA-512, name: RSA-OAEP}, false, [unwrapKey, decrypt])\n[PASS] Good parameters: 4096 bits (pkcs8, buffer(2376), {hash: SHA-512, name: RSA-OAEP}, false, [unwrapKey])\n[PASS] Good parameters: 4096 bits (pkcs8, buffer(2376), {hash: SHA-512, name: RSA-OAEP}, false, [decrypt, unwrapKey, decrypt, unwrapKey])\n[PASS] Empty Usages: 4096 bits (pkcs8, object(spki, pkcs8, jwk), {hash: SHA-512, name: RSA-OAEP}, false, [])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-512, name: RSA-OAEP}, false, [decrypt])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-512, name: RSA-OAEP}, false, [unwrapKey, decrypt])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-512, name: RSA-OAEP}, false, [unwrapKey])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-512, name: RSA-OAEP}, false, [decrypt, unwrapKey, decrypt, unwrapKey])\n[PASS] Empty Usages: 4096 bits (jwk, object(spki, pkcs8, jwk), {hash: SHA-512, name: RSA-OAEP}, false, [])\n[PASS] Good parameters: 1024 bits (spki, buffer(162), {hash: SHA-1, name: RSA-PSS}, true, [verify])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e), {hash: SHA-1, name: RSA-PSS}, true, [verify])\n[PASS] Good parameters: 1024 bits (spki, buffer(162), {hash: SHA-1, name: RSA-PSS}, true, [])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e), {hash: SHA-1, name: RSA-PSS}, true, [])\n[PASS] Good parameters: 1024 bits (spki, buffer(162), {hash: SHA-1, name: RSA-PSS}, true, [verify, verify])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e), {hash: SHA-1, name: RSA-PSS}, true, [verify, verify])\n[PASS] Good parameters: 1024 bits (pkcs8, buffer(636), {hash: SHA-1, name: RSA-PSS}, true, [sign])\n[PASS] Good parameters: 1024 bits (pkcs8, buffer(636), {hash: SHA-1, name: RSA-PSS}, true, [sign, sign])\n[PASS] Empty Usages: 1024 bits (pkcs8, object(spki, pkcs8, jwk), {hash: SHA-1, name: RSA-PSS}, true, [])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-1, name: RSA-PSS}, true, [sign])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-1, name: RSA-PSS}, true, [sign, sign])\n[PASS] Empty Usages: 1024 bits (jwk, object(spki, pkcs8, jwk), {hash: SHA-1, name: RSA-PSS}, true, [])\n[PASS] Good parameters: 1024 bits (spki, buffer(162), {hash: SHA-1, name: RSA-PSS}, false, [verify])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e), {hash: SHA-1, name: RSA-PSS}, false, [verify])\n[PASS] Good parameters: 1024 bits (spki, buffer(162), {hash: SHA-1, name: RSA-PSS}, false, [])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e), {hash: SHA-1, name: RSA-PSS}, false, [])\n[PASS] Good parameters: 1024 bits (spki, buffer(162), {hash: SHA-1, name: RSA-PSS}, false, [verify, verify])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e), {hash: SHA-1, name: RSA-PSS}, false, [verify, verify])\n[PASS] Good parameters: 1024 bits (pkcs8, buffer(636), {hash: SHA-1, name: RSA-PSS}, false, [sign])\n[PASS] Good parameters: 1024 bits (pkcs8, buffer(636), {hash: SHA-1, name: RSA-PSS}, false, [sign, sign])\n[PASS] Empty Usages: 1024 bits (pkcs8, object(spki, pkcs8, jwk), {hash: SHA-1, name: RSA-PSS}, false, [])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-1, name: RSA-PSS}, false, [sign])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-1, name: RSA-PSS}, false, [sign, sign])\n[PASS] Empty Usages: 1024 bits (jwk, object(spki, pkcs8, jwk), {hash: SHA-1, name: RSA-PSS}, false, [])\n[PASS] Good parameters: 1024 bits (spki, buffer(162), {hash: SHA-256, name: RSA-PSS}, true, [verify])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e), {hash: SHA-256, name: RSA-PSS}, true, [verify])\n[PASS] Good parameters: 1024 bits (spki, buffer(162), {hash: SHA-256, name: RSA-PSS}, true, [])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e), {hash: SHA-256, name: RSA-PSS}, true, [])\n[PASS] Good parameters: 1024 bits (spki, buffer(162), {hash: SHA-256, name: RSA-PSS}, true, [verify, verify])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e), {hash: SHA-256, name: RSA-PSS}, true, [verify, verify])\n[PASS] Good parameters: 1024 bits (pkcs8, buffer(636), {hash: SHA-256, name: RSA-PSS}, true, [sign])\n[PASS] Good parameters: 1024 bits (pkcs8, buffer(636), {hash: SHA-256, name: RSA-PSS}, true, [sign, sign])\n[PASS] Empty Usages: 1024 bits (pkcs8, object(spki, pkcs8, jwk), {hash: SHA-256, name: RSA-PSS}, true, [])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-256, name: RSA-PSS}, true, [sign])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-256, name: RSA-PSS}, true, [sign, sign])\n[PASS] Empty Usages: 1024 bits (jwk, object(spki, pkcs8, jwk), {hash: SHA-256, name: RSA-PSS}, true, [])\n[PASS] Good parameters: 1024 bits (spki, buffer(162), {hash: SHA-256, name: RSA-PSS}, false, [verify])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e), {hash: SHA-256, name: RSA-PSS}, false, [verify])\n[PASS] Good parameters: 1024 bits (spki, buffer(162), {hash: SHA-256, name: RSA-PSS}, false, [])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e), {hash: SHA-256, name: RSA-PSS}, false, [])\n[PASS] Good parameters: 1024 bits (spki, buffer(162), {hash: SHA-256, name: RSA-PSS}, false, [verify, verify])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e), {hash: SHA-256, name: RSA-PSS}, false, [verify, verify])\n[PASS] Good parameters: 1024 bits (pkcs8, buffer(636), {hash: SHA-256, name: RSA-PSS}, false, [sign])\n[PASS] Good parameters: 1024 bits (pkcs8, buffer(636), {hash: SHA-256, name: RSA-PSS}, false, [sign, sign])\n[PASS] Empty Usages: 1024 bits (pkcs8, object(spki, pkcs8, jwk), {hash: SHA-256, name: RSA-PSS}, false, [])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-256, name: RSA-PSS}, false, [sign])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-256, name: RSA-PSS}, false, [sign, sign])\n[PASS] Empty Usages: 1024 bits (jwk, object(spki, pkcs8, jwk), {hash: SHA-256, name: RSA-PSS}, false, [])\n[PASS] Good parameters: 1024 bits (spki, buffer(162), {hash: SHA-384, name: RSA-PSS}, true, [verify])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e), {hash: SHA-384, name: RSA-PSS}, true, [verify])\n[PASS] Good parameters: 1024 bits (spki, buffer(162), {hash: SHA-384, name: RSA-PSS}, true, [])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e), {hash: SHA-384, name: RSA-PSS}, true, [])\n[PASS] Good parameters: 1024 bits (spki, buffer(162), {hash: SHA-384, name: RSA-PSS}, true, [verify, verify])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e), {hash: SHA-384, name: RSA-PSS}, true, [verify, verify])\n[PASS] Good parameters: 1024 bits (pkcs8, buffer(636), {hash: SHA-384, name: RSA-PSS}, true, [sign])\n[PASS] Good parameters: 1024 bits (pkcs8, buffer(636), {hash: SHA-384, name: RSA-PSS}, true, [sign, sign])\n[PASS] Empty Usages: 1024 bits (pkcs8, object(spki, pkcs8, jwk), {hash: SHA-384, name: RSA-PSS}, true, [])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-384, name: RSA-PSS}, true, [sign])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-384, name: RSA-PSS}, true, [sign, sign])\n[PASS] Empty Usages: 1024 bits (jwk, object(spki, pkcs8, jwk), {hash: SHA-384, name: RSA-PSS}, true, [])\n[PASS] Good parameters: 1024 bits (spki, buffer(162), {hash: SHA-384, name: RSA-PSS}, false, [verify])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e), {hash: SHA-384, name: RSA-PSS}, false, [verify])\n[PASS] Good parameters: 1024 bits (spki, buffer(162), {hash: SHA-384, name: RSA-PSS}, false, [])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e), {hash: SHA-384, name: RSA-PSS}, false, [])\n[PASS] Good parameters: 1024 bits (spki, buffer(162), {hash: SHA-384, name: RSA-PSS}, false, [verify, verify])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e), {hash: SHA-384, name: RSA-PSS}, false, [verify, verify])\n[PASS] Good parameters: 1024 bits (pkcs8, buffer(636), {hash: SHA-384, name: RSA-PSS}, false, [sign])\n[PASS] Good parameters: 1024 bits (pkcs8, buffer(636), {hash: SHA-384, name: RSA-PSS}, false, [sign, sign])\n[PASS] Empty Usages: 1024 bits (pkcs8, object(spki, pkcs8, jwk), {hash: SHA-384, name: RSA-PSS}, false, [])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-384, name: RSA-PSS}, false, [sign])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-384, name: RSA-PSS}, false, [sign, sign])\n[PASS] Empty Usages: 1024 bits (jwk, object(spki, pkcs8, jwk), {hash: SHA-384, name: RSA-PSS}, false, [])\n[PASS] Good parameters: 1024 bits (spki, buffer(162), {hash: SHA-512, name: RSA-PSS}, true, [verify])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e), {hash: SHA-512, name: RSA-PSS}, true, [verify])\n[PASS] Good parameters: 1024 bits (spki, buffer(162), {hash: SHA-512, name: RSA-PSS}, true, [])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e), {hash: SHA-512, name: RSA-PSS}, true, [])\n[PASS] Good parameters: 1024 bits (spki, buffer(162), {hash: SHA-512, name: RSA-PSS}, true, [verify, verify])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e), {hash: SHA-512, name: RSA-PSS}, true, [verify, verify])\n[PASS] Good parameters: 1024 bits (pkcs8, buffer(636), {hash: SHA-512, name: RSA-PSS}, true, [sign])\n[PASS] Good parameters: 1024 bits (pkcs8, buffer(636), {hash: SHA-512, name: RSA-PSS}, true, [sign, sign])\n[PASS] Empty Usages: 1024 bits (pkcs8, object(spki, pkcs8, jwk), {hash: SHA-512, name: RSA-PSS}, true, [])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-512, name: RSA-PSS}, true, [sign])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-512, name: RSA-PSS}, true, [sign, sign])\n[PASS] Empty Usages: 1024 bits (jwk, object(spki, pkcs8, jwk), {hash: SHA-512, name: RSA-PSS}, true, [])\n[PASS] Good parameters: 1024 bits (spki, buffer(162), {hash: SHA-512, name: RSA-PSS}, false, [verify])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e), {hash: SHA-512, name: RSA-PSS}, false, [verify])\n[PASS] Good parameters: 1024 bits (spki, buffer(162), {hash: SHA-512, name: RSA-PSS}, false, [])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e), {hash: SHA-512, name: RSA-PSS}, false, [])\n[PASS] Good parameters: 1024 bits (spki, buffer(162), {hash: SHA-512, name: RSA-PSS}, false, [verify, verify])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e), {hash: SHA-512, name: RSA-PSS}, false, [verify, verify])\n[PASS] Good parameters: 1024 bits (pkcs8, buffer(636), {hash: SHA-512, name: RSA-PSS}, false, [sign])\n[PASS] Good parameters: 1024 bits (pkcs8, buffer(636), {hash: SHA-512, name: RSA-PSS}, false, [sign, sign])\n[PASS] Empty Usages: 1024 bits (pkcs8, object(spki, pkcs8, jwk), {hash: SHA-512, name: RSA-PSS}, false, [])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-512, name: RSA-PSS}, false, [sign])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-512, name: RSA-PSS}, false, [sign, sign])\n[PASS] Empty Usages: 1024 bits (jwk, object(spki, pkcs8, jwk), {hash: SHA-512, name: RSA-PSS}, false, [])\n[PASS] Good parameters: 2048 bits (spki, buffer(294), {hash: SHA-1, name: RSA-PSS}, true, [verify])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e), {hash: SHA-1, name: RSA-PSS}, true, [verify])\n[PASS] Good parameters: 2048 bits (spki, buffer(294), {hash: SHA-1, name: RSA-PSS}, true, [])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e), {hash: SHA-1, name: RSA-PSS}, true, [])\n[PASS] Good parameters: 2048 bits (spki, buffer(294), {hash: SHA-1, name: RSA-PSS}, true, [verify, verify])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e), {hash: SHA-1, name: RSA-PSS}, true, [verify, verify])\n[PASS] Good parameters: 2048 bits (pkcs8, buffer(1218), {hash: SHA-1, name: RSA-PSS}, true, [sign])\n[PASS] Good parameters: 2048 bits (pkcs8, buffer(1218), {hash: SHA-1, name: RSA-PSS}, true, [sign, sign])\n[PASS] Empty Usages: 2048 bits (pkcs8, object(spki, pkcs8, jwk), {hash: SHA-1, name: RSA-PSS}, true, [])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-1, name: RSA-PSS}, true, [sign])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-1, name: RSA-PSS}, true, [sign, sign])\n[PASS] Empty Usages: 2048 bits (jwk, object(spki, pkcs8, jwk), {hash: SHA-1, name: RSA-PSS}, true, [])\n[PASS] Good parameters: 2048 bits (spki, buffer(294), {hash: SHA-1, name: RSA-PSS}, false, [verify])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e), {hash: SHA-1, name: RSA-PSS}, false, [verify])\n[PASS] Good parameters: 2048 bits (spki, buffer(294), {hash: SHA-1, name: RSA-PSS}, false, [])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e), {hash: SHA-1, name: RSA-PSS}, false, [])\n[PASS] Good parameters: 2048 bits (spki, buffer(294), {hash: SHA-1, name: RSA-PSS}, false, [verify, verify])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e), {hash: SHA-1, name: RSA-PSS}, false, [verify, verify])\n[PASS] Good parameters: 2048 bits (pkcs8, buffer(1218), {hash: SHA-1, name: RSA-PSS}, false, [sign])\n[PASS] Good parameters: 2048 bits (pkcs8, buffer(1218), {hash: SHA-1, name: RSA-PSS}, false, [sign, sign])\n[PASS] Empty Usages: 2048 bits (pkcs8, object(spki, pkcs8, jwk), {hash: SHA-1, name: RSA-PSS}, false, [])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-1, name: RSA-PSS}, false, [sign])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-1, name: RSA-PSS}, false, [sign, sign])\n[PASS] Empty Usages: 2048 bits (jwk, object(spki, pkcs8, jwk), {hash: SHA-1, name: RSA-PSS}, false, [])\n[PASS] Good parameters: 2048 bits (spki, buffer(294), {hash: SHA-256, name: RSA-PSS}, true, [verify])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e), {hash: SHA-256, name: RSA-PSS}, true, [verify])\n[PASS] Good parameters: 2048 bits (spki, buffer(294), {hash: SHA-256, name: RSA-PSS}, true, [])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e), {hash: SHA-256, name: RSA-PSS}, true, [])\n[PASS] Good parameters: 2048 bits (spki, buffer(294), {hash: SHA-256, name: RSA-PSS}, true, [verify, verify])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e), {hash: SHA-256, name: RSA-PSS}, true, [verify, verify])\n[PASS] Good parameters: 2048 bits (pkcs8, buffer(1218), {hash: SHA-256, name: RSA-PSS}, true, [sign])\n[PASS] Good parameters: 2048 bits (pkcs8, buffer(1218), {hash: SHA-256, name: RSA-PSS}, true, [sign, sign])\n[PASS] setup\n[PASS] Empty Usages: 2048 bits (pkcs8, object(spki, pkcs8, jwk), {hash: SHA-256, name: RSA-PSS}, true, [])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-256, name: RSA-PSS}, true, [sign])\n[PASS] RSA-PSS with SHA-1 and no salt verification\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-256, name: RSA-PSS}, true, [sign, sign])\n[PASS] Empty Usages: 2048 bits (jwk, object(spki, pkcs8, jwk), {hash: SHA-256, name: RSA-PSS}, true, [])\n[PASS] RSA-PSS with SHA-256 and no salt verification\n[PASS] RSA-PSS with SHA-384 and no salt verification\n[PASS] Good parameters: 2048 bits (spki, buffer(294), {hash: SHA-256, name: RSA-PSS}, false, [verify])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e), {hash: SHA-256, name: RSA-PSS}, false, [verify])\n[PASS] RSA-PSS with SHA-512 and no salt verification\n[PASS] RSA-PSS with SHA-1, salted verification\n[PASS] Good parameters: 2048 bits (spki, buffer(294), {hash: SHA-256, name: RSA-PSS}, false, [])\n[PASS] RSA-PSS with SHA-256, salted verification\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e), {hash: SHA-256, name: RSA-PSS}, false, [])\n[PASS] RSA-PSS with SHA-384, salted verification\n[PASS] Good parameters: 2048 bits (spki, buffer(294), {hash: SHA-256, name: RSA-PSS}, false, [verify, verify])\n[PASS] RSA-PSS with SHA-512, salted verification\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e), {hash: SHA-256, name: RSA-PSS}, false, [verify, verify])\n[PASS] RSA-PSS with SHA-1 and no salt verification with altered signature after call\n[PASS] RSA-PSS with SHA-256 and no salt verification with altered signature after call\n[PASS] Good parameters: 2048 bits (pkcs8, buffer(1218), {hash: SHA-256, name: RSA-PSS}, false, [sign])\n[PASS] RSA-PSS with SHA-384 and no salt verification with altered signature after call\n[PASS] RSA-PSS with SHA-512 and no salt verification with altered signature after call\n[PASS] RSA-PSS with SHA-1, salted verification with altered signature after call\n[PASS] Good parameters: 2048 bits (pkcs8, buffer(1218), {hash: SHA-256, name: RSA-PSS}, false, [sign, sign])\n[PASS] RSA-PSS with SHA-256, salted verification with altered signature after call\n[PASS] RSA-PSS with SHA-384, salted verification with altered signature after call\n[PASS] RSA-PSS with SHA-512, salted verification with altered signature after call\n[PASS] RSA-PSS with SHA-1 and no salt with altered plaintext after call\n[PASS] RSA-PSS with SHA-256 and no salt with altered plaintext after call\n[PASS] RSA-PSS with SHA-384 and no salt with altered plaintext after call\n[PASS] RSA-PSS with SHA-512 and no salt with altered plaintext after call\n[PASS] RSA-PSS with SHA-1, salted with altered plaintext after call\n[PASS] RSA-PSS with SHA-256, salted with altered plaintext after call\n[PASS] Empty Usages: 2048 bits (pkcs8, object(spki, pkcs8, jwk), {hash: SHA-256, name: RSA-PSS}, false, [])\n[PASS] RSA-PSS with SHA-384, salted with altered plaintext after call\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-256, name: RSA-PSS}, false, [sign])\n[PASS] RSA-PSS with SHA-512, salted with altered plaintext after call\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-256, name: RSA-PSS}, false, [sign, sign])\n[PASS] Empty Usages: 2048 bits (jwk, object(spki, pkcs8, jwk), {hash: SHA-256, name: RSA-PSS}, false, [])\n[PASS] RSA-PSS with SHA-1 and no salt using privateKey to verify\n[PASS] RSA-PSS with SHA-256 and no salt using privateKey to verify\n[PASS] RSA-PSS with SHA-384 and no salt using privateKey to verify\n[PASS] RSA-PSS with SHA-512 and no salt using privateKey to verify\n[PASS] RSA-PSS with SHA-1, salted using privateKey to verify\n[PASS] RSA-PSS with SHA-256, salted using privateKey to verify\n[PASS] RSA-PSS with SHA-384, salted using privateKey to verify\n[PASS] Good parameters: 2048 bits (spki, buffer(294), {hash: SHA-384, name: RSA-PSS}, true, [verify])\n[PASS] RSA-PSS with SHA-512, salted using privateKey to verify\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e), {hash: SHA-384, name: RSA-PSS}, true, [verify])\n[PASS] RSA-PSS with SHA-1 and no salt using publicKey to sign\n[PASS] RSA-PSS with SHA-256 and no salt using publicKey to sign\n[PASS] RSA-PSS with SHA-384 and no salt using publicKey to sign\n[PASS] RSA-PSS with SHA-512 and no salt using publicKey to sign\n[PASS] RSA-PSS with SHA-1, salted using publicKey to sign\n[PASS] RSA-PSS with SHA-256, salted using publicKey to sign\n[PASS] RSA-PSS with SHA-384, salted using publicKey to sign\n[PASS] RSA-PSS with SHA-512, salted using publicKey to sign\n[PASS] Good parameters: 2048 bits (spki, buffer(294), {hash: SHA-384, name: RSA-PSS}, true, [])\n[PASS] RSA-PSS with SHA-1 and no salt no verify usage\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e), {hash: SHA-384, name: RSA-PSS}, true, [])\n[PASS] RSA-PSS with SHA-256 and no salt no verify usage\n[PASS] RSA-PSS with SHA-384 and no salt no verify usage\n[PASS] RSA-PSS with SHA-512 and no salt no verify usage\n[PASS] RSA-PSS with SHA-1, salted no verify usage\n[PASS] RSA-PSS with SHA-256, salted no verify usage\n[PASS] RSA-PSS with SHA-384, salted no verify usage\n[PASS] RSA-PSS with SHA-512, salted no verify usage\n[PASS] Good parameters: 2048 bits (spki, buffer(294), {hash: SHA-384, name: RSA-PSS}, true, [verify, verify])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e), {hash: SHA-384, name: RSA-PSS}, true, [verify, verify])\n[PASS] Good parameters: 2048 bits (pkcs8, buffer(1218), {hash: SHA-384, name: RSA-PSS}, true, [sign])\n[PASS] Good parameters: 2048 bits (pkcs8, buffer(1218), {hash: SHA-384, name: RSA-PSS}, true, [sign, sign])\n[PASS] RSA-PSS with SHA-1 and no salt round trip\n[PASS] Empty Usages: 2048 bits (pkcs8, object(spki, pkcs8, jwk), {hash: SHA-384, name: RSA-PSS}, true, [])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-384, name: RSA-PSS}, true, [sign])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-384, name: RSA-PSS}, true, [sign, sign])\n[PASS] Empty Usages: 2048 bits (jwk, object(spki, pkcs8, jwk), {hash: SHA-384, name: RSA-PSS}, true, [])\n[PASS] Good parameters: 2048 bits (spki, buffer(294), {hash: SHA-384, name: RSA-PSS}, false, [verify])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e), {hash: SHA-384, name: RSA-PSS}, false, [verify])\n[PASS] Good parameters: 2048 bits (spki, buffer(294), {hash: SHA-384, name: RSA-PSS}, false, [])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e), {hash: SHA-384, name: RSA-PSS}, false, [])\n[PASS] Good parameters: 2048 bits (spki, buffer(294), {hash: SHA-384, name: RSA-PSS}, false, [verify, verify])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e), {hash: SHA-384, name: RSA-PSS}, false, [verify, verify])\n[PASS] Good parameters: 2048 bits (pkcs8, buffer(1218), {hash: SHA-384, name: RSA-PSS}, false, [sign])\n[PASS] RSA-PSS with SHA-256 and no salt round trip\n[PASS] Good parameters: 2048 bits (pkcs8, buffer(1218), {hash: SHA-384, name: RSA-PSS}, false, [sign, sign])\n[PASS] Empty Usages: 2048 bits (pkcs8, object(spki, pkcs8, jwk), {hash: SHA-384, name: RSA-PSS}, false, [])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-384, name: RSA-PSS}, false, [sign])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-384, name: RSA-PSS}, false, [sign, sign])\n[PASS] Empty Usages: 2048 bits (jwk, object(spki, pkcs8, jwk), {hash: SHA-384, name: RSA-PSS}, false, [])\n[PASS] Good parameters: 2048 bits (spki, buffer(294), {hash: SHA-512, name: RSA-PSS}, true, [verify])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e), {hash: SHA-512, name: RSA-PSS}, true, [verify])\n[PASS] Good parameters: 2048 bits (spki, buffer(294), {hash: SHA-512, name: RSA-PSS}, true, [])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e), {hash: SHA-512, name: RSA-PSS}, true, [])\n[PASS] RSA-PSS with SHA-384 and no salt round trip\n[PASS] Good parameters: 2048 bits (spki, buffer(294), {hash: SHA-512, name: RSA-PSS}, true, [verify, verify])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e), {hash: SHA-512, name: RSA-PSS}, true, [verify, verify])\n[PASS] Good parameters: 2048 bits (pkcs8, buffer(1218), {hash: SHA-512, name: RSA-PSS}, true, [sign])\n[PASS] Good parameters: 2048 bits (pkcs8, buffer(1218), {hash: SHA-512, name: RSA-PSS}, true, [sign, sign])\n[PASS] RSA-PSS with SHA-512 and no salt round trip\n[PASS] Empty Usages: 2048 bits (pkcs8, object(spki, pkcs8, jwk), {hash: SHA-512, name: RSA-PSS}, true, [])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-512, name: RSA-PSS}, true, [sign])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-512, name: RSA-PSS}, true, [sign, sign])\n[PASS] Empty Usages: 2048 bits (jwk, object(spki, pkcs8, jwk), {hash: SHA-512, name: RSA-PSS}, true, [])\n[PASS] Good parameters: 2048 bits (spki, buffer(294), {hash: SHA-512, name: RSA-PSS}, false, [verify])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e), {hash: SHA-512, name: RSA-PSS}, false, [verify])\n[PASS] Good parameters: 2048 bits (spki, buffer(294), {hash: SHA-512, name: RSA-PSS}, false, [])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e), {hash: SHA-512, name: RSA-PSS}, false, [])\n[PASS] Good parameters: 2048 bits (spki, buffer(294), {hash: SHA-512, name: RSA-PSS}, false, [verify, verify])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e), {hash: SHA-512, name: RSA-PSS}, false, [verify, verify])\n[PASS] Good parameters: 2048 bits (pkcs8, buffer(1218), {hash: SHA-512, name: RSA-PSS}, false, [sign])\n[PASS] RSA-PSS with SHA-1, salted round trip\n[PASS] Good parameters: 2048 bits (pkcs8, buffer(1218), {hash: SHA-512, name: RSA-PSS}, false, [sign, sign])\n[PASS] Empty Usages: 2048 bits (pkcs8, object(spki, pkcs8, jwk), {hash: SHA-512, name: RSA-PSS}, false, [])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-512, name: RSA-PSS}, false, [sign])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-512, name: RSA-PSS}, false, [sign, sign])\n[PASS] Empty Usages: 2048 bits (jwk, object(spki, pkcs8, jwk), {hash: SHA-512, name: RSA-PSS}, false, [])\n[PASS] RSA-PSS with SHA-256, salted round trip\n[PASS] Good parameters: 4096 bits (spki, buffer(550), {hash: SHA-1, name: RSA-PSS}, true, [verify])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e), {hash: SHA-1, name: RSA-PSS}, true, [verify])\n[PASS] Good parameters: 4096 bits (spki, buffer(550), {hash: SHA-1, name: RSA-PSS}, true, [])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e), {hash: SHA-1, name: RSA-PSS}, true, [])\n[PASS] Good parameters: 4096 bits (spki, buffer(550), {hash: SHA-1, name: RSA-PSS}, true, [verify, verify])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e), {hash: SHA-1, name: RSA-PSS}, true, [verify, verify])\n[PASS] RSA-PSS with SHA-384, salted round trip\n[PASS] Good parameters: 4096 bits (pkcs8, buffer(2376), {hash: SHA-1, name: RSA-PSS}, true, [sign])\n[PASS] Good parameters: 4096 bits (pkcs8, buffer(2376), {hash: SHA-1, name: RSA-PSS}, true, [sign, sign])\n[PASS] RSA-PSS with SHA-512, salted round trip\n[PASS] RSA-PSS with SHA-1 and no salt signing with wrong algorithm name\n[PASS] RSA-PSS with SHA-256 and no salt signing with wrong algorithm name\n[PASS] RSA-PSS with SHA-384 and no salt signing with wrong algorithm name\n[PASS] RSA-PSS with SHA-512 and no salt signing with wrong algorithm name\n[PASS] RSA-PSS with SHA-1, salted signing with wrong algorithm name\n[PASS] RSA-PSS with SHA-256, salted signing with wrong algorithm name\n[PASS] RSA-PSS with SHA-384, salted signing with wrong algorithm name\n[PASS] RSA-PSS with SHA-512, salted signing with wrong algorithm name\n[PASS] Empty Usages: 4096 bits (pkcs8, object(spki, pkcs8, jwk), {hash: SHA-1, name: RSA-PSS}, true, [])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-1, name: RSA-PSS}, true, [sign])\n[PASS] RSA-PSS with SHA-1 and no salt verification with wrong algorithm name\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-1, name: RSA-PSS}, true, [sign, sign])\n[PASS] RSA-PSS with SHA-256 and no salt verification with wrong algorithm name\n[PASS] RSA-PSS with SHA-384 and no salt verification with wrong algorithm name\n[PASS] Empty Usages: 4096 bits (jwk, object(spki, pkcs8, jwk), {hash: SHA-1, name: RSA-PSS}, true, [])\n[PASS] RSA-PSS with SHA-512 and no salt verification with wrong algorithm name\n[PASS] RSA-PSS with SHA-1, salted verification with wrong algorithm name\n[PASS] RSA-PSS with SHA-256, salted verification with wrong algorithm name\n[PASS] RSA-PSS with SHA-384, salted verification with wrong algorithm name\n[PASS] RSA-PSS with SHA-512, salted verification with wrong algorithm name\n[PASS] Good parameters: 4096 bits (spki, buffer(550), {hash: SHA-1, name: RSA-PSS}, false, [verify])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e), {hash: SHA-1, name: RSA-PSS}, false, [verify])\n[PASS] RSA-PSS with SHA-1 and no salt verification failure with altered signature\n[PASS] RSA-PSS with SHA-256 and no salt verification failure with altered signature\n[PASS] RSA-PSS with SHA-384 and no salt verification failure with altered signature\n[PASS] RSA-PSS with SHA-512 and no salt verification failure with altered signature\n[PASS] Good parameters: 4096 bits (spki, buffer(550), {hash: SHA-1, name: RSA-PSS}, false, [])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e), {hash: SHA-1, name: RSA-PSS}, false, [])\n[PASS] RSA-PSS with SHA-1, salted verification failure with altered signature\n[PASS] RSA-PSS with SHA-256, salted verification failure with altered signature\n[PASS] Good parameters: 4096 bits (spki, buffer(550), {hash: SHA-1, name: RSA-PSS}, false, [verify, verify])\n[PASS] RSA-PSS with SHA-384, salted verification failure with altered signature\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e), {hash: SHA-1, name: RSA-PSS}, false, [verify, verify])\n[PASS] RSA-PSS with SHA-512, salted verification failure with altered signature\n[PASS] RSA-PSS with SHA-1 and no salt verification failure with wrong saltLength\n[PASS] RSA-PSS with SHA-256 and no salt verification failure with wrong saltLength\n[PASS] RSA-PSS with SHA-384 and no salt verification failure with wrong saltLength\n[PASS] RSA-PSS with SHA-512 and no salt verification failure with wrong saltLength\n[PASS] RSA-PSS with SHA-1, salted verification failure with wrong saltLength\n[PASS] RSA-PSS with SHA-256, salted verification failure with wrong saltLength\n[PASS] RSA-PSS with SHA-384, salted verification failure with wrong saltLength\n[PASS] Good parameters: 4096 bits (pkcs8, buffer(2376), {hash: SHA-1, name: RSA-PSS}, false, [sign])\n[PASS] RSA-PSS with SHA-512, salted verification failure with wrong saltLength\n[PASS] RSA-PSS with SHA-1 and no salt verification failure with altered plaintext\n[PASS] RSA-PSS with SHA-256 and no salt verification failure with altered plaintext\n[PASS] Good parameters: 4096 bits (pkcs8, buffer(2376), {hash: SHA-1, name: RSA-PSS}, false, [sign, sign])\n[PASS] RSA-PSS with SHA-384 and no salt verification failure with altered plaintext\n[PASS] RSA-PSS with SHA-512 and no salt verification failure with altered plaintext\n[PASS] RSA-PSS with SHA-1, salted verification failure with altered plaintext\n[PASS] RSA-PSS with SHA-256, salted verification failure with altered plaintext\n[PASS] RSA-PSS with SHA-384, salted verification failure with altered plaintext\n[PASS] RSA-PSS with SHA-512, salted verification failure with altered plaintext\n[PASS] Empty Usages: 4096 bits (pkcs8, object(spki, pkcs8, jwk), {hash: SHA-1, name: RSA-PSS}, false, [])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-1, name: RSA-PSS}, false, [sign])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-1, name: RSA-PSS}, false, [sign, sign])\n[PASS] Empty Usages: 4096 bits (jwk, object(spki, pkcs8, jwk), {hash: SHA-1, name: RSA-PSS}, false, [])\n[PASS] Good parameters: 4096 bits (spki, buffer(550), {hash: SHA-256, name: RSA-PSS}, true, [verify])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e), {hash: SHA-256, name: RSA-PSS}, true, [verify])\n[PASS] Good parameters: 4096 bits (spki, buffer(550), {hash: SHA-256, name: RSA-PSS}, true, [])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e), {hash: SHA-256, name: RSA-PSS}, true, [])\n[PASS] Good parameters: 4096 bits (spki, buffer(550), {hash: SHA-256, name: RSA-PSS}, true, [verify, verify])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e), {hash: SHA-256, name: RSA-PSS}, true, [verify, verify])\n[PASS] Good parameters: 4096 bits (pkcs8, buffer(2376), {hash: SHA-256, name: RSA-PSS}, true, [sign])\n[PASS] Good parameters: 4096 bits (pkcs8, buffer(2376), {hash: SHA-256, name: RSA-PSS}, true, [sign, sign])\n[PASS] Empty Usages: 4096 bits (pkcs8, object(spki, pkcs8, jwk), {hash: SHA-256, name: RSA-PSS}, true, [])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-256, name: RSA-PSS}, true, [sign])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-256, name: RSA-PSS}, true, [sign, sign])\n[PASS] Empty Usages: 4096 bits (jwk, object(spki, pkcs8, jwk), {hash: SHA-256, name: RSA-PSS}, true, [])\n[PASS] Good parameters: 4096 bits (spki, buffer(550), {hash: SHA-256, name: RSA-PSS}, false, [verify])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e), {hash: SHA-256, name: RSA-PSS}, false, [verify])\n[PASS] Good parameters: 4096 bits (spki, buffer(550), {hash: SHA-256, name: RSA-PSS}, false, [])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e), {hash: SHA-256, name: RSA-PSS}, false, [])\n[PASS] Good parameters: 4096 bits (spki, buffer(550), {hash: SHA-256, name: RSA-PSS}, false, [verify, verify])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e), {hash: SHA-256, name: RSA-PSS}, false, [verify, verify])\n[PASS] Good parameters: 4096 bits (pkcs8, buffer(2376), {hash: SHA-256, name: RSA-PSS}, false, [sign])\n[PASS] Good parameters: 4096 bits (pkcs8, buffer(2376), {hash: SHA-256, name: RSA-PSS}, false, [sign, sign])\n[PASS] Empty Usages: 4096 bits (pkcs8, object(spki, pkcs8, jwk), {hash: SHA-256, name: RSA-PSS}, false, [])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-256, name: RSA-PSS}, false, [sign])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-256, name: RSA-PSS}, false, [sign, sign])\n[PASS] Empty Usages: 4096 bits (jwk, object(spki, pkcs8, jwk), {hash: SHA-256, name: RSA-PSS}, false, [])\n[PASS] Good parameters: 4096 bits (spki, buffer(550), {hash: SHA-384, name: RSA-PSS}, true, [verify])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e), {hash: SHA-384, name: RSA-PSS}, true, [verify])\n[PASS] Good parameters: 4096 bits (spki, buffer(550), {hash: SHA-384, name: RSA-PSS}, true, [])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e), {hash: SHA-384, name: RSA-PSS}, true, [])\n[PASS] Good parameters: 4096 bits (spki, buffer(550), {hash: SHA-384, name: RSA-PSS}, true, [verify, verify])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e), {hash: SHA-384, name: RSA-PSS}, true, [verify, verify])\n[PASS] Good parameters: 4096 bits (pkcs8, buffer(2376), {hash: SHA-384, name: RSA-PSS}, true, [sign])\n[PASS] Good parameters: 4096 bits (pkcs8, buffer(2376), {hash: SHA-384, name: RSA-PSS}, true, [sign, sign])\n[PASS] Empty Usages: 4096 bits (pkcs8, object(spki, pkcs8, jwk), {hash: SHA-384, name: RSA-PSS}, true, [])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-384, name: RSA-PSS}, true, [sign])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-384, name: RSA-PSS}, true, [sign, sign])\n[PASS] Empty Usages: 4096 bits (jwk, object(spki, pkcs8, jwk), {hash: SHA-384, name: RSA-PSS}, true, [])\n[PASS] Good parameters: 4096 bits (spki, buffer(550), {hash: SHA-384, name: RSA-PSS}, false, [verify])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e), {hash: SHA-384, name: RSA-PSS}, false, [verify])\n[PASS] Good parameters: 4096 bits (spki, buffer(550), {hash: SHA-384, name: RSA-PSS}, false, [])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e), {hash: SHA-384, name: RSA-PSS}, false, [])\n[PASS] Good parameters: 4096 bits (spki, buffer(550), {hash: SHA-384, name: RSA-PSS}, false, [verify, verify])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e), {hash: SHA-384, name: RSA-PSS}, false, [verify, verify])\n[PASS] Good parameters: 4096 bits (pkcs8, buffer(2376), {hash: SHA-384, name: RSA-PSS}, false, [sign])\n[PASS] Good parameters: 4096 bits (pkcs8, buffer(2376), {hash: SHA-384, name: RSA-PSS}, false, [sign, sign])\n[PASS] Empty Usages: 4096 bits (pkcs8, object(spki, pkcs8, jwk), {hash: SHA-384, name: RSA-PSS}, false, [])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-384, name: RSA-PSS}, false, [sign])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-384, name: RSA-PSS}, false, [sign, sign])\n[PASS] Empty Usages: 4096 bits (jwk, object(spki, pkcs8, jwk), {hash: SHA-384, name: RSA-PSS}, false, [])\n[PASS] Good parameters: 4096 bits (spki, buffer(550), {hash: SHA-512, name: RSA-PSS}, true, [verify])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e), {hash: SHA-512, name: RSA-PSS}, true, [verify])\n[PASS] Good parameters: 4096 bits (spki, buffer(550), {hash: SHA-512, name: RSA-PSS}, true, [])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e), {hash: SHA-512, name: RSA-PSS}, true, [])\n[PASS] Good parameters: 4096 bits (spki, buffer(550), {hash: SHA-512, name: RSA-PSS}, true, [verify, verify])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e), {hash: SHA-512, name: RSA-PSS}, true, [verify, verify])\n[PASS] Good parameters: 4096 bits (pkcs8, buffer(2376), {hash: SHA-512, name: RSA-PSS}, true, [sign])\n[PASS] Good parameters: 4096 bits (pkcs8, buffer(2376), {hash: SHA-512, name: RSA-PSS}, true, [sign, sign])\n[PASS] Empty Usages: 4096 bits (pkcs8, object(spki, pkcs8, jwk), {hash: SHA-512, name: RSA-PSS}, true, [])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-512, name: RSA-PSS}, true, [sign])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-512, name: RSA-PSS}, true, [sign, sign])\n[PASS] Empty Usages: 4096 bits (jwk, object(spki, pkcs8, jwk), {hash: SHA-512, name: RSA-PSS}, true, [])\n[PASS] Good parameters: 4096 bits (spki, buffer(550), {hash: SHA-512, name: RSA-PSS}, false, [verify])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e), {hash: SHA-512, name: RSA-PSS}, false, [verify])\n[PASS] Good parameters: 4096 bits (spki, buffer(550), {hash: SHA-512, name: RSA-PSS}, false, [])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e), {hash: SHA-512, name: RSA-PSS}, false, [])\n[PASS] Good parameters: 4096 bits (spki, buffer(550), {hash: SHA-512, name: RSA-PSS}, false, [verify, verify])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e), {hash: SHA-512, name: RSA-PSS}, false, [verify, verify])\n[PASS] Good parameters: 4096 bits (pkcs8, buffer(2376), {hash: SHA-512, name: RSA-PSS}, false, [sign])\n[PASS] Good parameters: 4096 bits (pkcs8, buffer(2376), {hash: SHA-512, name: RSA-PSS}, false, [sign, sign])\n[PASS] Empty Usages: 4096 bits (pkcs8, object(spki, pkcs8, jwk), {hash: SHA-512, name: RSA-PSS}, false, [])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-512, name: RSA-PSS}, false, [sign])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-512, name: RSA-PSS}, false, [sign, sign])\n[PASS] Empty Usages: 4096 bits (jwk, object(spki, pkcs8, jwk), {hash: SHA-512, name: RSA-PSS}, false, [])\n[PASS] Good parameters: 1024 bits (spki, buffer(162), {hash: SHA-1, name: RSASSA-PKCS1-v1_5}, true, [verify])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e), {hash: SHA-1, name: RSASSA-PKCS1-v1_5}, true, [verify])\n[PASS] Good parameters: 1024 bits (spki, buffer(162), {hash: SHA-1, name: RSASSA-PKCS1-v1_5}, true, [])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e), {hash: SHA-1, name: RSASSA-PKCS1-v1_5}, true, [])\n[PASS] Good parameters: 1024 bits (spki, buffer(162), {hash: SHA-1, name: RSASSA-PKCS1-v1_5}, true, [verify, verify])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e), {hash: SHA-1, name: RSASSA-PKCS1-v1_5}, true, [verify, verify])\n[PASS] Good parameters: 1024 bits (pkcs8, buffer(636), {hash: SHA-1, name: RSASSA-PKCS1-v1_5}, true, [sign])\n[PASS] Good parameters: 1024 bits (pkcs8, buffer(636), {hash: SHA-1, name: RSASSA-PKCS1-v1_5}, true, [sign, sign])\n[PASS] Empty Usages: 1024 bits (pkcs8, object(spki, pkcs8, jwk), {hash: SHA-1, name: RSASSA-PKCS1-v1_5}, true, [])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-1, name: RSASSA-PKCS1-v1_5}, true, [sign])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-1, name: RSASSA-PKCS1-v1_5}, true, [sign, sign])\n[PASS] Empty Usages: 1024 bits (jwk, object(spki, pkcs8, jwk), {hash: SHA-1, name: RSASSA-PKCS1-v1_5}, true, [])\n[PASS] Good parameters: 1024 bits (spki, buffer(162), {hash: SHA-1, name: RSASSA-PKCS1-v1_5}, false, [verify])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e), {hash: SHA-1, name: RSASSA-PKCS1-v1_5}, false, [verify])\n[PASS] Good parameters: 1024 bits (spki, buffer(162), {hash: SHA-1, name: RSASSA-PKCS1-v1_5}, false, [])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e), {hash: SHA-1, name: RSASSA-PKCS1-v1_5}, false, [])\n[PASS] Good parameters: 1024 bits (spki, buffer(162), {hash: SHA-1, name: RSASSA-PKCS1-v1_5}, false, [verify, verify])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e), {hash: SHA-1, name: RSASSA-PKCS1-v1_5}, false, [verify, verify])\n[PASS] Good parameters: 1024 bits (pkcs8, buffer(636), {hash: SHA-1, name: RSASSA-PKCS1-v1_5}, false, [sign])\n[PASS] Good parameters: 1024 bits (pkcs8, buffer(636), {hash: SHA-1, name: RSASSA-PKCS1-v1_5}, false, [sign, sign])\n[PASS] Empty Usages: 1024 bits (pkcs8, object(spki, pkcs8, jwk), {hash: SHA-1, name: RSASSA-PKCS1-v1_5}, false, [])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-1, name: RSASSA-PKCS1-v1_5}, false, [sign])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-1, name: RSASSA-PKCS1-v1_5}, false, [sign, sign])\n[PASS] Empty Usages: 1024 bits (jwk, object(spki, pkcs8, jwk), {hash: SHA-1, name: RSASSA-PKCS1-v1_5}, false, [])\n[PASS] Good parameters: 1024 bits (spki, buffer(162), {hash: SHA-256, name: RSASSA-PKCS1-v1_5}, true, [verify])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e), {hash: SHA-256, name: RSASSA-PKCS1-v1_5}, true, [verify])\n[PASS] Good parameters: 1024 bits (spki, buffer(162), {hash: SHA-256, name: RSASSA-PKCS1-v1_5}, true, [])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e), {hash: SHA-256, name: RSASSA-PKCS1-v1_5}, true, [])\n[PASS] Good parameters: 1024 bits (spki, buffer(162), {hash: SHA-256, name: RSASSA-PKCS1-v1_5}, true, [verify, verify])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e), {hash: SHA-256, name: RSASSA-PKCS1-v1_5}, true, [verify, verify])\n[PASS] Good parameters: 1024 bits (pkcs8, buffer(636), {hash: SHA-256, name: RSASSA-PKCS1-v1_5}, true, [sign])\n[PASS] Good parameters: 1024 bits (pkcs8, buffer(636), {hash: SHA-256, name: RSASSA-PKCS1-v1_5}, true, [sign, sign])\n[PASS] Empty Usages: 1024 bits (pkcs8, object(spki, pkcs8, jwk), {hash: SHA-256, name: RSASSA-PKCS1-v1_5}, true, [])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-256, name: RSASSA-PKCS1-v1_5}, true, [sign])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-256, name: RSASSA-PKCS1-v1_5}, true, [sign, sign])\n[PASS] Empty Usages: 1024 bits (jwk, object(spki, pkcs8, jwk), {hash: SHA-256, name: RSASSA-PKCS1-v1_5}, true, [])\n[PASS] Good parameters: 1024 bits (spki, buffer(162), {hash: SHA-256, name: RSASSA-PKCS1-v1_5}, false, [verify])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e), {hash: SHA-256, name: RSASSA-PKCS1-v1_5}, false, [verify])\n[PASS] Good parameters: 1024 bits (spki, buffer(162), {hash: SHA-256, name: RSASSA-PKCS1-v1_5}, false, [])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e), {hash: SHA-256, name: RSASSA-PKCS1-v1_5}, false, [])\n[PASS] Good parameters: 1024 bits (spki, buffer(162), {hash: SHA-256, name: RSASSA-PKCS1-v1_5}, false, [verify, verify])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e), {hash: SHA-256, name: RSASSA-PKCS1-v1_5}, false, [verify, verify])\n[PASS] Good parameters: 1024 bits (pkcs8, buffer(636), {hash: SHA-256, name: RSASSA-PKCS1-v1_5}, false, [sign])\n[PASS] Good parameters: 1024 bits (pkcs8, buffer(636), {hash: SHA-256, name: RSASSA-PKCS1-v1_5}, false, [sign, sign])\n[PASS] Empty Usages: 1024 bits (pkcs8, object(spki, pkcs8, jwk), {hash: SHA-256, name: RSASSA-PKCS1-v1_5}, false, [])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-256, name: RSASSA-PKCS1-v1_5}, false, [sign])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-256, name: RSASSA-PKCS1-v1_5}, false, [sign, sign])\n[PASS] Empty Usages: 1024 bits (jwk, object(spki, pkcs8, jwk), {hash: SHA-256, name: RSASSA-PKCS1-v1_5}, false, [])\n[PASS] Good parameters: 1024 bits (spki, buffer(162), {hash: SHA-384, name: RSASSA-PKCS1-v1_5}, true, [verify])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e), {hash: SHA-384, name: RSASSA-PKCS1-v1_5}, true, [verify])\n[PASS] Good parameters: 1024 bits (spki, buffer(162), {hash: SHA-384, name: RSASSA-PKCS1-v1_5}, true, [])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e), {hash: SHA-384, name: RSASSA-PKCS1-v1_5}, true, [])\n[PASS] Good parameters: 1024 bits (spki, buffer(162), {hash: SHA-384, name: RSASSA-PKCS1-v1_5}, true, [verify, verify])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e), {hash: SHA-384, name: RSASSA-PKCS1-v1_5}, true, [verify, verify])\n[PASS] Good parameters: 1024 bits (pkcs8, buffer(636), {hash: SHA-384, name: RSASSA-PKCS1-v1_5}, true, [sign])\n[PASS] Good parameters: 1024 bits (pkcs8, buffer(636), {hash: SHA-384, name: RSASSA-PKCS1-v1_5}, true, [sign, sign])\n[PASS] Empty Usages: 1024 bits (pkcs8, object(spki, pkcs8, jwk), {hash: SHA-384, name: RSASSA-PKCS1-v1_5}, true, [])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-384, name: RSASSA-PKCS1-v1_5}, true, [sign])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-384, name: RSASSA-PKCS1-v1_5}, true, [sign, sign])\n[PASS] Empty Usages: 1024 bits (jwk, object(spki, pkcs8, jwk), {hash: SHA-384, name: RSASSA-PKCS1-v1_5}, true, [])\n[PASS] Good parameters: 1024 bits (spki, buffer(162), {hash: SHA-384, name: RSASSA-PKCS1-v1_5}, false, [verify])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e), {hash: SHA-384, name: RSASSA-PKCS1-v1_5}, false, [verify])\n[PASS] Good parameters: 1024 bits (spki, buffer(162), {hash: SHA-384, name: RSASSA-PKCS1-v1_5}, false, [])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e), {hash: SHA-384, name: RSASSA-PKCS1-v1_5}, false, [])\n[PASS] Good parameters: 1024 bits (spki, buffer(162), {hash: SHA-384, name: RSASSA-PKCS1-v1_5}, false, [verify, verify])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e), {hash: SHA-384, name: RSASSA-PKCS1-v1_5}, false, [verify, verify])\n[PASS] Good parameters: 1024 bits (pkcs8, buffer(636), {hash: SHA-384, name: RSASSA-PKCS1-v1_5}, false, [sign])\n[PASS] Good parameters: 1024 bits (pkcs8, buffer(636), {hash: SHA-384, name: RSASSA-PKCS1-v1_5}, false, [sign, sign])\n[PASS] Empty Usages: 1024 bits (pkcs8, object(spki, pkcs8, jwk), {hash: SHA-384, name: RSASSA-PKCS1-v1_5}, false, [])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-384, name: RSASSA-PKCS1-v1_5}, false, [sign])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-384, name: RSASSA-PKCS1-v1_5}, false, [sign, sign])\n[PASS] Empty Usages: 1024 bits (jwk, object(spki, pkcs8, jwk), {hash: SHA-384, name: RSASSA-PKCS1-v1_5}, false, [])\n[PASS] Good parameters: 1024 bits (spki, buffer(162), {hash: SHA-512, name: RSASSA-PKCS1-v1_5}, true, [verify])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e), {hash: SHA-512, name: RSASSA-PKCS1-v1_5}, true, [verify])\n[PASS] Good parameters: 1024 bits (spki, buffer(162), {hash: SHA-512, name: RSASSA-PKCS1-v1_5}, true, [])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e), {hash: SHA-512, name: RSASSA-PKCS1-v1_5}, true, [])\n[PASS] Good parameters: 1024 bits (spki, buffer(162), {hash: SHA-512, name: RSASSA-PKCS1-v1_5}, true, [verify, verify])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e), {hash: SHA-512, name: RSASSA-PKCS1-v1_5}, true, [verify, verify])\n[PASS] Good parameters: 1024 bits (pkcs8, buffer(636), {hash: SHA-512, name: RSASSA-PKCS1-v1_5}, true, [sign])\n[PASS] Good parameters: 1024 bits (pkcs8, buffer(636), {hash: SHA-512, name: RSASSA-PKCS1-v1_5}, true, [sign, sign])\n[PASS] Empty Usages: 1024 bits (pkcs8, object(spki, pkcs8, jwk), {hash: SHA-512, name: RSASSA-PKCS1-v1_5}, true, [])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-512, name: RSASSA-PKCS1-v1_5}, true, [sign])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-512, name: RSASSA-PKCS1-v1_5}, true, [sign, sign])\n[PASS] Empty Usages: 1024 bits (jwk, object(spki, pkcs8, jwk), {hash: SHA-512, name: RSASSA-PKCS1-v1_5}, true, [])\n[PASS] Good parameters: 1024 bits (spki, buffer(162), {hash: SHA-512, name: RSASSA-PKCS1-v1_5}, false, [verify])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e), {hash: SHA-512, name: RSASSA-PKCS1-v1_5}, false, [verify])\n[PASS] Good parameters: 1024 bits (spki, buffer(162), {hash: SHA-512, name: RSASSA-PKCS1-v1_5}, false, [])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e), {hash: SHA-512, name: RSASSA-PKCS1-v1_5}, false, [])\n[PASS] Good parameters: 1024 bits (spki, buffer(162), {hash: SHA-512, name: RSASSA-PKCS1-v1_5}, false, [verify, verify])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e), {hash: SHA-512, name: RSASSA-PKCS1-v1_5}, false, [verify, verify])\n[PASS] Good parameters: 1024 bits (pkcs8, buffer(636), {hash: SHA-512, name: RSASSA-PKCS1-v1_5}, false, [sign])\n[PASS] Good parameters: 1024 bits (pkcs8, buffer(636), {hash: SHA-512, name: RSASSA-PKCS1-v1_5}, false, [sign, sign])\n[PASS] Empty Usages: 1024 bits (pkcs8, object(spki, pkcs8, jwk), {hash: SHA-512, name: RSASSA-PKCS1-v1_5}, false, [])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-512, name: RSASSA-PKCS1-v1_5}, false, [sign])\n[PASS] Good parameters: 1024 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-512, name: RSASSA-PKCS1-v1_5}, false, [sign, sign])\n[PASS] Empty Usages: 1024 bits (jwk, object(spki, pkcs8, jwk), {hash: SHA-512, name: RSASSA-PKCS1-v1_5}, false, [])\n[PASS] Good parameters: 2048 bits (spki, buffer(294), {hash: SHA-1, name: RSASSA-PKCS1-v1_5}, true, [verify])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e), {hash: SHA-1, name: RSASSA-PKCS1-v1_5}, true, [verify])\n[PASS] Good parameters: 2048 bits (spki, buffer(294), {hash: SHA-1, name: RSASSA-PKCS1-v1_5}, true, [])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e), {hash: SHA-1, name: RSASSA-PKCS1-v1_5}, true, [])\n[PASS] Good parameters: 2048 bits (spki, buffer(294), {hash: SHA-1, name: RSASSA-PKCS1-v1_5}, true, [verify, verify])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e), {hash: SHA-1, name: RSASSA-PKCS1-v1_5}, true, [verify, verify])\n[PASS] Good parameters: 2048 bits (pkcs8, buffer(1218), {hash: SHA-1, name: RSASSA-PKCS1-v1_5}, true, [sign])\n[PASS] Good parameters: 2048 bits (pkcs8, buffer(1218), {hash: SHA-1, name: RSASSA-PKCS1-v1_5}, true, [sign, sign])\n[PASS] Empty Usages: 2048 bits (pkcs8, object(spki, pkcs8, jwk), {hash: SHA-1, name: RSASSA-PKCS1-v1_5}, true, [])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-1, name: RSASSA-PKCS1-v1_5}, true, [sign])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-1, name: RSASSA-PKCS1-v1_5}, true, [sign, sign])\n[PASS] Empty Usages: 2048 bits (jwk, object(spki, pkcs8, jwk), {hash: SHA-1, name: RSASSA-PKCS1-v1_5}, true, [])\n[PASS] Good parameters: 2048 bits (spki, buffer(294), {hash: SHA-1, name: RSASSA-PKCS1-v1_5}, false, [verify])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e), {hash: SHA-1, name: RSASSA-PKCS1-v1_5}, false, [verify])\n[PASS] Good parameters: 2048 bits (spki, buffer(294), {hash: SHA-1, name: RSASSA-PKCS1-v1_5}, false, [])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e), {hash: SHA-1, name: RSASSA-PKCS1-v1_5}, false, [])\n[PASS] Good parameters: 2048 bits (spki, buffer(294), {hash: SHA-1, name: RSASSA-PKCS1-v1_5}, false, [verify, verify])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e), {hash: SHA-1, name: RSASSA-PKCS1-v1_5}, false, [verify, verify])\n[PASS] Good parameters: 2048 bits (pkcs8, buffer(1218), {hash: SHA-1, name: RSASSA-PKCS1-v1_5}, false, [sign])\n[PASS] Good parameters: 2048 bits (pkcs8, buffer(1218), {hash: SHA-1, name: RSASSA-PKCS1-v1_5}, false, [sign, sign])\n[PASS] Empty Usages: 2048 bits (pkcs8, object(spki, pkcs8, jwk), {hash: SHA-1, name: RSASSA-PKCS1-v1_5}, false, [])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-1, name: RSASSA-PKCS1-v1_5}, false, [sign])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-1, name: RSASSA-PKCS1-v1_5}, false, [sign, sign])\n[PASS] Empty Usages: 2048 bits (jwk, object(spki, pkcs8, jwk), {hash: SHA-1, name: RSASSA-PKCS1-v1_5}, false, [])\n[PASS] Good parameters: 2048 bits (spki, buffer(294), {hash: SHA-256, name: RSASSA-PKCS1-v1_5}, true, [verify])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e), {hash: SHA-256, name: RSASSA-PKCS1-v1_5}, true, [verify])\n[PASS] Good parameters: 2048 bits (spki, buffer(294), {hash: SHA-256, name: RSASSA-PKCS1-v1_5}, true, [])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e), {hash: SHA-256, name: RSASSA-PKCS1-v1_5}, true, [])\n[PASS] Good parameters: 2048 bits (spki, buffer(294), {hash: SHA-256, name: RSASSA-PKCS1-v1_5}, true, [verify, verify])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e), {hash: SHA-256, name: RSASSA-PKCS1-v1_5}, true, [verify, verify])\n[PASS] Good parameters: 2048 bits (pkcs8, buffer(1218), {hash: SHA-256, name: RSASSA-PKCS1-v1_5}, true, [sign])\n[PASS] Good parameters: 2048 bits (pkcs8, buffer(1218), {hash: SHA-256, name: RSASSA-PKCS1-v1_5}, true, [sign, sign])\n[PASS] Empty Usages: 2048 bits (pkcs8, object(spki, pkcs8, jwk), {hash: SHA-256, name: RSASSA-PKCS1-v1_5}, true, [])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-256, name: RSASSA-PKCS1-v1_5}, true, [sign])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-256, name: RSASSA-PKCS1-v1_5}, true, [sign, sign])\n[PASS] Empty Usages: 2048 bits (jwk, object(spki, pkcs8, jwk), {hash: SHA-256, name: RSASSA-PKCS1-v1_5}, true, [])\n[PASS] Good parameters: 2048 bits (spki, buffer(294), {hash: SHA-256, name: RSASSA-PKCS1-v1_5}, false, [verify])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e), {hash: SHA-256, name: RSASSA-PKCS1-v1_5}, false, [verify])\n[PASS] Good parameters: 2048 bits (spki, buffer(294), {hash: SHA-256, name: RSASSA-PKCS1-v1_5}, false, [])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e), {hash: SHA-256, name: RSASSA-PKCS1-v1_5}, false, [])\n[PASS] Good parameters: 2048 bits (spki, buffer(294), {hash: SHA-256, name: RSASSA-PKCS1-v1_5}, false, [verify, verify])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e), {hash: SHA-256, name: RSASSA-PKCS1-v1_5}, false, [verify, verify])\n[PASS] Good parameters: 2048 bits (pkcs8, buffer(1218), {hash: SHA-256, name: RSASSA-PKCS1-v1_5}, false, [sign])\n[PASS] Good parameters: 2048 bits (pkcs8, buffer(1218), {hash: SHA-256, name: RSASSA-PKCS1-v1_5}, false, [sign, sign])\n[PASS] Empty Usages: 2048 bits (pkcs8, object(spki, pkcs8, jwk), {hash: SHA-256, name: RSASSA-PKCS1-v1_5}, false, [])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-256, name: RSASSA-PKCS1-v1_5}, false, [sign])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-256, name: RSASSA-PKCS1-v1_5}, false, [sign, sign])\n[PASS] Empty Usages: 2048 bits (jwk, object(spki, pkcs8, jwk), {hash: SHA-256, name: RSASSA-PKCS1-v1_5}, false, [])\n[PASS] Good parameters: 2048 bits (spki, buffer(294), {hash: SHA-384, name: RSASSA-PKCS1-v1_5}, true, [verify])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e), {hash: SHA-384, name: RSASSA-PKCS1-v1_5}, true, [verify])\n[PASS] Good parameters: 2048 bits (spki, buffer(294), {hash: SHA-384, name: RSASSA-PKCS1-v1_5}, true, [])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e), {hash: SHA-384, name: RSASSA-PKCS1-v1_5}, true, [])\n[PASS] Good parameters: 2048 bits (spki, buffer(294), {hash: SHA-384, name: RSASSA-PKCS1-v1_5}, true, [verify, verify])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e), {hash: SHA-384, name: RSASSA-PKCS1-v1_5}, true, [verify, verify])\n[PASS] Good parameters: 2048 bits (pkcs8, buffer(1218), {hash: SHA-384, name: RSASSA-PKCS1-v1_5}, true, [sign])\n[PASS] Good parameters: 2048 bits (pkcs8, buffer(1218), {hash: SHA-384, name: RSASSA-PKCS1-v1_5}, true, [sign, sign])\n[PASS] Empty Usages: 2048 bits (pkcs8, object(spki, pkcs8, jwk), {hash: SHA-384, name: RSASSA-PKCS1-v1_5}, true, [])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-384, name: RSASSA-PKCS1-v1_5}, true, [sign])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-384, name: RSASSA-PKCS1-v1_5}, true, [sign, sign])\n[PASS] Empty Usages: 2048 bits (jwk, object(spki, pkcs8, jwk), {hash: SHA-384, name: RSASSA-PKCS1-v1_5}, true, [])\n[PASS] Good parameters: 2048 bits (spki, buffer(294), {hash: SHA-384, name: RSASSA-PKCS1-v1_5}, false, [verify])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e), {hash: SHA-384, name: RSASSA-PKCS1-v1_5}, false, [verify])\n[PASS] Good parameters: 2048 bits (spki, buffer(294), {hash: SHA-384, name: RSASSA-PKCS1-v1_5}, false, [])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e), {hash: SHA-384, name: RSASSA-PKCS1-v1_5}, false, [])\n[PASS] Good parameters: 2048 bits (spki, buffer(294), {hash: SHA-384, name: RSASSA-PKCS1-v1_5}, false, [verify, verify])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e), {hash: SHA-384, name: RSASSA-PKCS1-v1_5}, false, [verify, verify])\n[PASS] Good parameters: 2048 bits (pkcs8, buffer(1218), {hash: SHA-384, name: RSASSA-PKCS1-v1_5}, false, [sign])\n[PASS] Good parameters: 2048 bits (pkcs8, buffer(1218), {hash: SHA-384, name: RSASSA-PKCS1-v1_5}, false, [sign, sign])\n[PASS] Empty Usages: 2048 bits (pkcs8, object(spki, pkcs8, jwk), {hash: SHA-384, name: RSASSA-PKCS1-v1_5}, false, [])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-384, name: RSASSA-PKCS1-v1_5}, false, [sign])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-384, name: RSASSA-PKCS1-v1_5}, false, [sign, sign])\n[PASS] Empty Usages: 2048 bits (jwk, object(spki, pkcs8, jwk), {hash: SHA-384, name: RSASSA-PKCS1-v1_5}, false, [])\n[PASS] Good parameters: 2048 bits (spki, buffer(294), {hash: SHA-512, name: RSASSA-PKCS1-v1_5}, true, [verify])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e), {hash: SHA-512, name: RSASSA-PKCS1-v1_5}, true, [verify])\n[PASS] Good parameters: 2048 bits (spki, buffer(294), {hash: SHA-512, name: RSASSA-PKCS1-v1_5}, true, [])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e), {hash: SHA-512, name: RSASSA-PKCS1-v1_5}, true, [])\n[PASS] Good parameters: 2048 bits (spki, buffer(294), {hash: SHA-512, name: RSASSA-PKCS1-v1_5}, true, [verify, verify])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e), {hash: SHA-512, name: RSASSA-PKCS1-v1_5}, true, [verify, verify])\n[PASS] Good parameters: 2048 bits (pkcs8, buffer(1218), {hash: SHA-512, name: RSASSA-PKCS1-v1_5}, true, [sign])\n[PASS] Good parameters: 2048 bits (pkcs8, buffer(1218), {hash: SHA-512, name: RSASSA-PKCS1-v1_5}, true, [sign, sign])\n[PASS] Empty Usages: 2048 bits (pkcs8, object(spki, pkcs8, jwk), {hash: SHA-512, name: RSASSA-PKCS1-v1_5}, true, [])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-512, name: RSASSA-PKCS1-v1_5}, true, [sign])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-512, name: RSASSA-PKCS1-v1_5}, true, [sign, sign])\n[PASS] Empty Usages: 2048 bits (jwk, object(spki, pkcs8, jwk), {hash: SHA-512, name: RSASSA-PKCS1-v1_5}, true, [])\n[PASS] Good parameters: 2048 bits (spki, buffer(294), {hash: SHA-512, name: RSASSA-PKCS1-v1_5}, false, [verify])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e), {hash: SHA-512, name: RSASSA-PKCS1-v1_5}, false, [verify])\n[PASS] Good parameters: 2048 bits (spki, buffer(294), {hash: SHA-512, name: RSASSA-PKCS1-v1_5}, false, [])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e), {hash: SHA-512, name: RSASSA-PKCS1-v1_5}, false, [])\n[PASS] Good parameters: 2048 bits (spki, buffer(294), {hash: SHA-512, name: RSASSA-PKCS1-v1_5}, false, [verify, verify])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e), {hash: SHA-512, name: RSASSA-PKCS1-v1_5}, false, [verify, verify])\n[PASS] Good parameters: 2048 bits (pkcs8, buffer(1218), {hash: SHA-512, name: RSASSA-PKCS1-v1_5}, false, [sign])\n[PASS] Good parameters: 2048 bits (pkcs8, buffer(1218), {hash: SHA-512, name: RSASSA-PKCS1-v1_5}, false, [sign, sign])\n[PASS] Empty Usages: 2048 bits (pkcs8, object(spki, pkcs8, jwk), {hash: SHA-512, name: RSASSA-PKCS1-v1_5}, false, [])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-512, name: RSASSA-PKCS1-v1_5}, false, [sign])\n[PASS] Good parameters: 2048 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-512, name: RSASSA-PKCS1-v1_5}, false, [sign, sign])\n[PASS] Empty Usages: 2048 bits (jwk, object(spki, pkcs8, jwk), {hash: SHA-512, name: RSASSA-PKCS1-v1_5}, false, [])\n[PASS] Good parameters: 4096 bits (spki, buffer(550), {hash: SHA-1, name: RSASSA-PKCS1-v1_5}, true, [verify])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e), {hash: SHA-1, name: RSASSA-PKCS1-v1_5}, true, [verify])\n[PASS] Good parameters: 4096 bits (spki, buffer(550), {hash: SHA-1, name: RSASSA-PKCS1-v1_5}, true, [])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e), {hash: SHA-1, name: RSASSA-PKCS1-v1_5}, true, [])\n[PASS] Good parameters: 4096 bits (spki, buffer(550), {hash: SHA-1, name: RSASSA-PKCS1-v1_5}, true, [verify, verify])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e), {hash: SHA-1, name: RSASSA-PKCS1-v1_5}, true, [verify, verify])\n[PASS] Good parameters: 4096 bits (pkcs8, buffer(2376), {hash: SHA-1, name: RSASSA-PKCS1-v1_5}, true, [sign])\n[PASS] Good parameters: 4096 bits (pkcs8, buffer(2376), {hash: SHA-1, name: RSASSA-PKCS1-v1_5}, true, [sign, sign])\n[PASS] Empty Usages: 4096 bits (pkcs8, object(spki, pkcs8, jwk), {hash: SHA-1, name: RSASSA-PKCS1-v1_5}, true, [])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-1, name: RSASSA-PKCS1-v1_5}, true, [sign])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-1, name: RSASSA-PKCS1-v1_5}, true, [sign, sign])\n[PASS] Empty Usages: 4096 bits (jwk, object(spki, pkcs8, jwk), {hash: SHA-1, name: RSASSA-PKCS1-v1_5}, true, [])\n[PASS] Good parameters: 4096 bits (spki, buffer(550), {hash: SHA-1, name: RSASSA-PKCS1-v1_5}, false, [verify])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e), {hash: SHA-1, name: RSASSA-PKCS1-v1_5}, false, [verify])\n[PASS] Good parameters: 4096 bits (spki, buffer(550), {hash: SHA-1, name: RSASSA-PKCS1-v1_5}, false, [])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e), {hash: SHA-1, name: RSASSA-PKCS1-v1_5}, false, [])\n[PASS] Good parameters: 4096 bits (spki, buffer(550), {hash: SHA-1, name: RSASSA-PKCS1-v1_5}, false, [verify, verify])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e), {hash: SHA-1, name: RSASSA-PKCS1-v1_5}, false, [verify, verify])\n[PASS] Good parameters: 4096 bits (pkcs8, buffer(2376), {hash: SHA-1, name: RSASSA-PKCS1-v1_5}, false, [sign])\n[PASS] Good parameters: 4096 bits (pkcs8, buffer(2376), {hash: SHA-1, name: RSASSA-PKCS1-v1_5}, false, [sign, sign])\n[PASS] Empty Usages: 4096 bits (pkcs8, object(spki, pkcs8, jwk), {hash: SHA-1, name: RSASSA-PKCS1-v1_5}, false, [])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-1, name: RSASSA-PKCS1-v1_5}, false, [sign])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-1, name: RSASSA-PKCS1-v1_5}, false, [sign, sign])\n[PASS] Empty Usages: 4096 bits (jwk, object(spki, pkcs8, jwk), {hash: SHA-1, name: RSASSA-PKCS1-v1_5}, false, [])\n[PASS] Good parameters: 4096 bits (spki, buffer(550), {hash: SHA-256, name: RSASSA-PKCS1-v1_5}, true, [verify])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e), {hash: SHA-256, name: RSASSA-PKCS1-v1_5}, true, [verify])\n[PASS] Good parameters: 4096 bits (spki, buffer(550), {hash: SHA-256, name: RSASSA-PKCS1-v1_5}, true, [])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e), {hash: SHA-256, name: RSASSA-PKCS1-v1_5}, true, [])\n[PASS] Good parameters: 4096 bits (spki, buffer(550), {hash: SHA-256, name: RSASSA-PKCS1-v1_5}, true, [verify, verify])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e), {hash: SHA-256, name: RSASSA-PKCS1-v1_5}, true, [verify, verify])\n[PASS] Good parameters: 4096 bits (pkcs8, buffer(2376), {hash: SHA-256, name: RSASSA-PKCS1-v1_5}, true, [sign])\n[PASS] Good parameters: 4096 bits (pkcs8, buffer(2376), {hash: SHA-256, name: RSASSA-PKCS1-v1_5}, true, [sign, sign])\n[PASS] Empty Usages: 4096 bits (pkcs8, object(spki, pkcs8, jwk), {hash: SHA-256, name: RSASSA-PKCS1-v1_5}, true, [])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-256, name: RSASSA-PKCS1-v1_5}, true, [sign])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-256, name: RSASSA-PKCS1-v1_5}, true, [sign, sign])\n[PASS] Empty Usages: 4096 bits (jwk, object(spki, pkcs8, jwk), {hash: SHA-256, name: RSASSA-PKCS1-v1_5}, true, [])\n[PASS] Good parameters: 4096 bits (spki, buffer(550), {hash: SHA-256, name: RSASSA-PKCS1-v1_5}, false, [verify])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e), {hash: SHA-256, name: RSASSA-PKCS1-v1_5}, false, [verify])\n[PASS] Good parameters: 4096 bits (spki, buffer(550), {hash: SHA-256, name: RSASSA-PKCS1-v1_5}, false, [])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e), {hash: SHA-256, name: RSASSA-PKCS1-v1_5}, false, [])\n[PASS] Good parameters: 4096 bits (spki, buffer(550), {hash: SHA-256, name: RSASSA-PKCS1-v1_5}, false, [verify, verify])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e), {hash: SHA-256, name: RSASSA-PKCS1-v1_5}, false, [verify, verify])\n[PASS] Good parameters: 4096 bits (pkcs8, buffer(2376), {hash: SHA-256, name: RSASSA-PKCS1-v1_5}, false, [sign])\n[PASS] Good parameters: 4096 bits (pkcs8, buffer(2376), {hash: SHA-256, name: RSASSA-PKCS1-v1_5}, false, [sign, sign])\n[PASS] Empty Usages: 4096 bits (pkcs8, object(spki, pkcs8, jwk), {hash: SHA-256, name: RSASSA-PKCS1-v1_5}, false, [])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-256, name: RSASSA-PKCS1-v1_5}, false, [sign])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-256, name: RSASSA-PKCS1-v1_5}, false, [sign, sign])\n[PASS] Empty Usages: 4096 bits (jwk, object(spki, pkcs8, jwk), {hash: SHA-256, name: RSASSA-PKCS1-v1_5}, false, [])\n[PASS] Good parameters: 4096 bits (spki, buffer(550), {hash: SHA-384, name: RSASSA-PKCS1-v1_5}, true, [verify])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e), {hash: SHA-384, name: RSASSA-PKCS1-v1_5}, true, [verify])\n[PASS] Good parameters: 4096 bits (spki, buffer(550), {hash: SHA-384, name: RSASSA-PKCS1-v1_5}, true, [])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e), {hash: SHA-384, name: RSASSA-PKCS1-v1_5}, true, [])\n[PASS] Good parameters: 4096 bits (spki, buffer(550), {hash: SHA-384, name: RSASSA-PKCS1-v1_5}, true, [verify, verify])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e), {hash: SHA-384, name: RSASSA-PKCS1-v1_5}, true, [verify, verify])\n[PASS] Good parameters: 4096 bits (pkcs8, buffer(2376), {hash: SHA-384, name: RSASSA-PKCS1-v1_5}, true, [sign])\n[PASS] Good parameters: 4096 bits (pkcs8, buffer(2376), {hash: SHA-384, name: RSASSA-PKCS1-v1_5}, true, [sign, sign])\n[PASS] Empty Usages: 4096 bits (pkcs8, object(spki, pkcs8, jwk), {hash: SHA-384, name: RSASSA-PKCS1-v1_5}, true, [])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-384, name: RSASSA-PKCS1-v1_5}, true, [sign])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-384, name: RSASSA-PKCS1-v1_5}, true, [sign, sign])\n[PASS] Empty Usages: 4096 bits (jwk, object(spki, pkcs8, jwk), {hash: SHA-384, name: RSASSA-PKCS1-v1_5}, true, [])\n[PASS] Good parameters: 4096 bits (spki, buffer(550), {hash: SHA-384, name: RSASSA-PKCS1-v1_5}, false, [verify])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e), {hash: SHA-384, name: RSASSA-PKCS1-v1_5}, false, [verify])\n[PASS] Good parameters: 4096 bits (spki, buffer(550), {hash: SHA-384, name: RSASSA-PKCS1-v1_5}, false, [])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e), {hash: SHA-384, name: RSASSA-PKCS1-v1_5}, false, [])\n[PASS] Good parameters: 4096 bits (spki, buffer(550), {hash: SHA-384, name: RSASSA-PKCS1-v1_5}, false, [verify, verify])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e), {hash: SHA-384, name: RSASSA-PKCS1-v1_5}, false, [verify, verify])\n[PASS] Good parameters: 4096 bits (pkcs8, buffer(2376), {hash: SHA-384, name: RSASSA-PKCS1-v1_5}, false, [sign])\n[PASS] Good parameters: 4096 bits (pkcs8, buffer(2376), {hash: SHA-384, name: RSASSA-PKCS1-v1_5}, false, [sign, sign])\n[PASS] Empty Usages: 4096 bits (pkcs8, object(spki, pkcs8, jwk), {hash: SHA-384, name: RSASSA-PKCS1-v1_5}, false, [])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-384, name: RSASSA-PKCS1-v1_5}, false, [sign])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-384, name: RSASSA-PKCS1-v1_5}, false, [sign, sign])\n[PASS] Empty Usages: 4096 bits (jwk, object(spki, pkcs8, jwk), {hash: SHA-384, name: RSASSA-PKCS1-v1_5}, false, [])\n[PASS] Good parameters: 4096 bits (spki, buffer(550), {hash: SHA-512, name: RSASSA-PKCS1-v1_5}, true, [verify])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e), {hash: SHA-512, name: RSASSA-PKCS1-v1_5}, true, [verify])\n[PASS] Good parameters: 4096 bits (spki, buffer(550), {hash: SHA-512, name: RSASSA-PKCS1-v1_5}, true, [])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e), {hash: SHA-512, name: RSASSA-PKCS1-v1_5}, true, [])\n[PASS] Good parameters: 4096 bits (spki, buffer(550), {hash: SHA-512, name: RSASSA-PKCS1-v1_5}, true, [verify, verify])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e), {hash: SHA-512, name: RSASSA-PKCS1-v1_5}, true, [verify, verify])\n[PASS] Good parameters: 4096 bits (pkcs8, buffer(2376), {hash: SHA-512, name: RSASSA-PKCS1-v1_5}, true, [sign])\n[PASS] Good parameters: 4096 bits (pkcs8, buffer(2376), {hash: SHA-512, name: RSASSA-PKCS1-v1_5}, true, [sign, sign])\n[PASS] Empty Usages: 4096 bits (pkcs8, object(spki, pkcs8, jwk), {hash: SHA-512, name: RSASSA-PKCS1-v1_5}, true, [])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-512, name: RSASSA-PKCS1-v1_5}, true, [sign])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-512, name: RSASSA-PKCS1-v1_5}, true, [sign, sign])\n[PASS] Empty Usages: 4096 bits (jwk, object(spki, pkcs8, jwk), {hash: SHA-512, name: RSASSA-PKCS1-v1_5}, true, [])\n[PASS] Good parameters: 4096 bits (spki, buffer(550), {hash: SHA-512, name: RSASSA-PKCS1-v1_5}, false, [verify])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e), {hash: SHA-512, name: RSASSA-PKCS1-v1_5}, false, [verify])\n[PASS] Good parameters: 4096 bits (spki, buffer(550), {hash: SHA-512, name: RSASSA-PKCS1-v1_5}, false, [])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e), {hash: SHA-512, name: RSASSA-PKCS1-v1_5}, false, [])\n[PASS] Good parameters: 4096 bits (spki, buffer(550), {hash: SHA-512, name: RSASSA-PKCS1-v1_5}, false, [verify, verify])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e), {hash: SHA-512, name: RSASSA-PKCS1-v1_5}, false, [verify, verify])\n[PASS] Good parameters: 4096 bits (pkcs8, buffer(2376), {hash: SHA-512, name: RSASSA-PKCS1-v1_5}, false, [sign])\n[PASS] Good parameters: 4096 bits (pkcs8, buffer(2376), {hash: SHA-512, name: RSASSA-PKCS1-v1_5}, false, [sign, sign])\n[PASS] Empty Usages: 4096 bits (pkcs8, object(spki, pkcs8, jwk), {hash: SHA-512, name: RSASSA-PKCS1-v1_5}, false, [])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-512, name: RSASSA-PKCS1-v1_5}, false, [sign])\n[PASS] Good parameters: 4096 bits (jwk, object(kty, n, e, d, p, q, dp, dq, qi), {hash: SHA-512, name: RSASSA-PKCS1-v1_5}, false, [sign, sign])\n[PASS] Empty Usages: 4096 bits (jwk, object(spki, pkcs8, jwk), {hash: SHA-512, name: RSASSA-PKCS1-v1_5}, false, [])\n[PASS] setup\n[PASS] ECDSA P-256 with SHA-1 verification\n[PASS] ECDSA P-256 with SHA-256 verification\n[PASS] ECDSA P-256 with SHA-384 verification\n[PASS] ECDSA P-256 with SHA-512 verification\n[PASS] ECDSA P-384 with SHA-1 verification\n[PASS] ECDSA P-384 with SHA-256 verification\n[PASS] ECDSA P-384 with SHA-384 verification\n[PASS] ECDSA P-384 with SHA-512 verification\n[PASS] ECDSA P-521 with SHA-1 verification\n[PASS] ECDSA P-521 with SHA-256 verification\n[PASS] ECDSA P-521 with SHA-384 verification\n[PASS] ECDSA P-521 with SHA-512 verification\n[PASS] ECDSA P-256 with SHA-1 verification with altered signature after call\n[PASS] ECDSA P-256 with SHA-256 verification with altered signature after call\n[PASS] ECDSA P-256 with SHA-384 verification with altered signature after call\n[PASS] ECDSA P-256 with SHA-512 verification with altered signature after call\n[PASS] ECDSA P-384 with SHA-1 verification with altered signature after call\n[PASS] ECDSA P-384 with SHA-256 verification with altered signature after call\n[PASS] ECDSA P-384 with SHA-384 verification with altered signature after call\n[PASS] ECDSA P-384 with SHA-512 verification with altered signature after call\n[PASS] ECDSA P-521 with SHA-1 verification with altered signature after call\n[PASS] ECDSA P-521 with SHA-256 verification with altered signature after call\n[PASS] ECDSA P-521 with SHA-384 verification with altered signature after call\n[PASS] ECDSA P-521 with SHA-512 verification with altered signature after call\n[PASS] ECDSA P-256 with SHA-1 with altered plaintext after call\n[PASS] ECDSA P-256 with SHA-256 with altered plaintext after call\n[PASS] ECDSA P-256 with SHA-384 with altered plaintext after call\n[PASS] ECDSA P-256 with SHA-512 with altered plaintext after call\n[PASS] ECDSA P-384 with SHA-1 with altered plaintext after call\n[PASS] ECDSA P-384 with SHA-256 with altered plaintext after call\n[PASS] ECDSA P-384 with SHA-384 with altered plaintext after call\n[PASS] ECDSA P-384 with SHA-512 with altered plaintext after call\n[PASS] ECDSA P-521 with SHA-1 with altered plaintext after call\n[PASS] ECDSA P-521 with SHA-256 with altered plaintext after call\n[PASS] ECDSA P-521 with SHA-384 with altered plaintext after call\n[PASS] ECDSA P-521 with SHA-512 with altered plaintext after call\n[PASS] ECDSA P-256 with SHA-1 using privateKey to verify\n[PASS] ECDSA P-256 with SHA-256 using privateKey to verify\n[PASS] ECDSA P-256 with SHA-384 using privateKey to verify\n[PASS] ECDSA P-256 with SHA-512 using privateKey to verify\n[PASS] ECDSA P-384 with SHA-1 using privateKey to verify\n[PASS] ECDSA P-384 with SHA-256 using privateKey to verify\n[PASS] ECDSA P-384 with SHA-384 using privateKey to verify\n[PASS] ECDSA P-384 with SHA-512 using privateKey to verify\n[PASS] ECDSA P-521 with SHA-1 using privateKey to verify\n[PASS] ECDSA P-521 with SHA-256 using privateKey to verify\n[PASS] ECDSA P-521 with SHA-384 using privateKey to verify\n[PASS] ECDSA P-521 with SHA-512 using privateKey to verify\n[PASS] ECDSA P-256 with SHA-1 using publicKey to sign\n[PASS] ECDSA P-256 with SHA-256 using publicKey to sign\n[PASS] ECDSA P-256 with SHA-384 using publicKey to sign\n[PASS] ECDSA P-256 with SHA-512 using publicKey to sign\n[PASS] ECDSA P-384 with SHA-1 using publicKey to sign\n[PASS] ECDSA P-384 with SHA-256 using publicKey to sign\n[PASS] ECDSA P-384 with SHA-384 using publicKey to sign\n[PASS] ECDSA P-384 with SHA-512 using publicKey to sign\n[PASS] ECDSA P-521 with SHA-1 using publicKey to sign\n[PASS] ECDSA P-521 with SHA-256 using publicKey to sign\n[PASS] ECDSA P-521 with SHA-384 using publicKey to sign\n[PASS] ECDSA P-521 with SHA-512 using publicKey to sign\n[PASS] ECDSA P-256 with SHA-1 no verify usage\n[PASS] ECDSA P-256 with SHA-256 no verify usage\n[PASS] ECDSA P-256 with SHA-384 no verify usage\n[PASS] ECDSA P-256 with SHA-512 no verify usage\n[PASS] ECDSA P-384 with SHA-1 no verify usage\n[PASS] ECDSA P-384 with SHA-256 no verify usage\n[PASS] ECDSA P-384 with SHA-384 no verify usage\n[PASS] ECDSA P-384 with SHA-512 no verify usage\n[PASS] ECDSA P-521 with SHA-1 no verify usage\n[PASS] ECDSA P-521 with SHA-256 no verify usage\n[PASS] ECDSA P-521 with SHA-384 no verify usage\n[PASS] ECDSA P-521 with SHA-512 no verify usage\n[PASS] ECDSA P-256 with SHA-1 round trip\n[PASS] ECDSA P-256 with SHA-256 round trip\n[PASS] ECDSA P-256 with SHA-384 round trip\n[PASS] ECDSA P-256 with SHA-512 round trip\n[PASS] ECDSA P-384 with SHA-1 round trip\n[PASS] ECDSA P-384 with SHA-256 round trip\n[PASS] ECDSA P-384 with SHA-384 round trip\n[PASS] ECDSA P-384 with SHA-512 round trip\n[PASS] ECDSA P-521 with SHA-1 round trip\n[PASS] ECDSA P-521 with SHA-256 round trip\n[PASS] ECDSA P-521 with SHA-384 round trip\n[PASS] ECDSA P-521 with SHA-512 round trip\n[PASS] ECDSA P-256 with SHA-1 verification failure due to altered signature\n[PASS] ECDSA P-256 with SHA-256 verification failure due to altered signature\n[PASS] ECDSA P-256 with SHA-384 verification failure due to altered signature\n[PASS] ECDSA P-256 with SHA-512 verification failure due to altered signature\n[PASS] ECDSA P-384 with SHA-1 verification failure due to altered signature\n[PASS] ECDSA P-384 with SHA-256 verification failure due to altered signature\n[PASS] ECDSA P-384 with SHA-384 verification failure due to altered signature\n[PASS] ECDSA P-384 with SHA-512 verification failure due to altered signature\n[PASS] ECDSA P-521 with SHA-1 verification failure due to altered signature\n[PASS] ECDSA P-521 with SHA-256 verification failure due to altered signature\n[PASS] ECDSA P-521 with SHA-384 verification failure due to altered signature\n[PASS] ECDSA P-521 with SHA-512 verification failure due to altered signature\n[PASS] ECDSA P-256 with SHA-1 verification failure due to wrong hash\n[PASS] ECDSA P-256 with SHA-256 verification failure due to wrong hash\n[PASS] ECDSA P-256 with SHA-384 verification failure due to wrong hash\n[PASS] ECDSA P-256 with SHA-512 verification failure due to wrong hash\n[PASS] ECDSA P-384 with SHA-1 verification failure due to wrong hash\n[PASS] ECDSA P-384 with SHA-256 verification failure due to wrong hash\n[PASS] ECDSA P-384 with SHA-384 verification failure due to wrong hash\n[PASS] ECDSA P-384 with SHA-512 verification failure due to wrong hash\n[PASS] ECDSA P-521 with SHA-1 verification failure due to wrong hash\n[PASS] ECDSA P-521 with SHA-256 verification failure due to wrong hash\n[PASS] ECDSA P-521 with SHA-384 verification failure due to wrong hash\n[PASS] ECDSA P-521 with SHA-512 verification failure due to wrong hash\n[PASS] ECDSA P-256 with SHA-1 verification failure due to bad hash name\n[PASS] ECDSA P-256 with SHA-256 verification failure due to bad hash name\n[PASS] ECDSA P-256 with SHA-384 verification failure due to bad hash name\n[PASS] ECDSA P-256 with SHA-512 verification failure due to bad hash name\n[PASS] ECDSA P-384 with SHA-1 verification failure due to bad hash name\n[PASS] ECDSA P-384 with SHA-256 verification failure due to bad hash name\n[PASS] ECDSA P-384 with SHA-384 verification failure due to bad hash name\n[PASS] ECDSA P-384 with SHA-512 verification failure due to bad hash name\n[PASS] ECDSA P-521 with SHA-1 verification failure due to bad hash name\n[PASS] ECDSA P-521 with SHA-256 verification failure due to bad hash name\n[PASS] ECDSA P-521 with SHA-384 verification failure due to bad hash name\n[PASS] ECDSA P-521 with SHA-512 verification failure due to bad hash name\n[PASS] ECDSA P-256 with SHA-1 verification failure due to shortened signature\n[PASS] ECDSA P-256 with SHA-256 verification failure due to shortened signature\n[PASS] ECDSA P-256 with SHA-384 verification failure due to shortened signature\n[PASS] ECDSA P-256 with SHA-512 verification failure due to shortened signature\n[PASS] ECDSA P-384 with SHA-1 verification failure due to shortened signature\n[PASS] ECDSA P-384 with SHA-256 verification failure due to shortened signature\n[PASS] ECDSA P-384 with SHA-384 verification failure due to shortened signature\n[PASS] ECDSA P-384 with SHA-512 verification failure due to shortened signature\n[PASS] ECDSA P-521 with SHA-1 verification failure due to shortened signature\n[PASS] ECDSA P-521 with SHA-256 verification failure due to shortened signature\n[PASS] ECDSA P-521 with SHA-384 verification failure due to shortened signature\n[PASS] ECDSA P-521 with SHA-512 verification failure due to shortened signature\n[PASS] ECDSA P-256 with SHA-1 verification failure due to altered plaintext\n[PASS] ECDSA P-256 with SHA-256 verification failure due to altered plaintext\n[PASS] ECDSA P-256 with SHA-384 verification failure due to altered plaintext\n[PASS] ECDSA P-256 with SHA-512 verification failure due to altered plaintext\n[PASS] ECDSA P-384 with SHA-1 verification failure due to altered plaintext\n[PASS] ECDSA P-384 with SHA-256 verification failure due to altered plaintext\n[PASS] ECDSA P-384 with SHA-384 verification failure due to altered plaintext\n[PASS] ECDSA P-384 with SHA-512 verification failure due to altered plaintext\n[PASS] ECDSA P-521 with SHA-1 verification failure due to altered plaintext\n[PASS] ECDSA P-521 with SHA-256 verification failure due to altered plaintext\n[PASS] ECDSA P-521 with SHA-384 verification failure due to altered plaintext\n[PASS] ECDSA P-521 with SHA-512 verification failure due to altered plaintext\n[PASS] ECDSA P-256 with SHA-1 - The signature was truncated by 1 byte verification\n[PASS] ECDSA P-256 with SHA-1 - The signature was made using SHA-1, however verification is being done using SHA-256 verification\n[PASS] ECDSA P-256 with SHA-1 - The signature was made using SHA-1, however verification is being done using SHA-384 verification\n[PASS] ECDSA P-256 with SHA-1 - The signature was made using SHA-1, however verification is being done using SHA-512 verification\n[PASS] ECDSA P-256 with SHA-1 - Signature has excess padding verification\n[PASS] ECDSA P-256 with SHA-1 - The signature is empty verification\n[PASS] ECDSA P-256 with SHA-1 - The signature is all zeroes verification\n[PASS] ECDSA P-256 with SHA-256 - The signature was truncated by 1 byte verification\n[PASS] ECDSA P-256 with SHA-256 - The signature was made using SHA-256, however verification is being done using SHA-1 verification\n[PASS] ECDSA P-256 with SHA-256 - The signature was made using SHA-256, however verification is being done using SHA-384 verification\n[PASS] ECDSA P-256 with SHA-256 - The signature was made using SHA-256, however verification is being done using SHA-512 verification\n[PASS] ECDSA P-256 with SHA-256 - Signature has excess padding verification\n[PASS] ECDSA P-256 with SHA-256 - The signature is empty verification\n[PASS] ECDSA P-256 with SHA-256 - The signature is all zeroes verification\n[PASS] ECDSA P-256 with SHA-384 - The signature was truncated by 1 byte verification\n[PASS] ECDSA P-256 with SHA-384 - The signature was made using SHA-384, however verification is being done using SHA-1 verification\n[PASS] ECDSA P-256 with SHA-384 - The signature was made using SHA-384, however verification is being done using SHA-256 verification\n[PASS] ECDSA P-256 with SHA-384 - The signature was made using SHA-384, however verification is being done using SHA-512 verification\n[PASS] ECDSA P-256 with SHA-384 - Signature has excess padding verification\n[PASS] ECDSA P-256 with SHA-384 - The signature is empty verification\n[PASS] ECDSA P-256 with SHA-384 - The signature is all zeroes verification\n[PASS] ECDSA P-256 with SHA-512 - The signature was truncated by 1 byte verification\n[PASS] ECDSA P-256 with SHA-512 - The signature was made using SHA-512, however verification is being done using SHA-1 verification\n[PASS] ECDSA P-256 with SHA-512 - The signature was made using SHA-512, however verification is being done using SHA-256 verification\n[PASS] ECDSA P-256 with SHA-512 - The signature was made using SHA-512, however verification is being done using SHA-384 verification\n[PASS] ECDSA P-256 with SHA-512 - Signature has excess padding verification\n[PASS] ECDSA P-256 with SHA-512 - The signature is empty verification\n[PASS] ECDSA P-256 with SHA-512 - The signature is all zeroes verification\n[PASS] ECDSA P-384 with SHA-1 - The signature was truncated by 1 byte verification\n[PASS] ECDSA P-384 with SHA-1 - The signature was made using SHA-1, however verification is being done using SHA-256 verification\n[PASS] ECDSA P-384 with SHA-1 - The signature was made using SHA-1, however verification is being done using SHA-384 verification\n[PASS] ECDSA P-384 with SHA-1 - The signature was made using SHA-1, however verification is being done using SHA-512 verification\n[PASS] ECDSA P-384 with SHA-1 - Signature has excess padding verification\n[PASS] ECDSA P-384 with SHA-1 - The signature is empty verification\n[PASS] ECDSA P-384 with SHA-1 - The signature is all zeroes verification\n[PASS] ECDSA P-384 with SHA-256 - The signature was truncated by 1 byte verification\n[PASS] ECDSA P-384 with SHA-256 - The signature was made using SHA-256, however verification is being done using SHA-1 verification\n[PASS] ECDSA P-384 with SHA-256 - The signature was made using SHA-256, however verification is being done using SHA-384 verification\n[PASS] ECDSA P-384 with SHA-256 - The signature was made using SHA-256, however verification is being done using SHA-512 verification\n[PASS] ECDSA P-384 with SHA-256 - Signature has excess padding verification\n[PASS] ECDSA P-384 with SHA-256 - The signature is empty verification\n[PASS] ECDSA P-384 with SHA-256 - The signature is all zeroes verification\n[PASS] ECDSA P-384 with SHA-384 - The signature was truncated by 1 byte verification\n[PASS] ECDSA P-384 with SHA-384 - The signature was made using SHA-384, however verification is being done using SHA-1 verification\n[PASS] ECDSA P-384 with SHA-384 - The signature was made using SHA-384, however verification is being done using SHA-256 verification\n[PASS] ECDSA P-384 with SHA-384 - The signature was made using SHA-384, however verification is being done using SHA-512 verification\n[PASS] ECDSA P-384 with SHA-384 - Signature has excess padding verification\n[PASS] ECDSA P-384 with SHA-384 - The signature is empty verification\n[PASS] ECDSA P-384 with SHA-384 - The signature is all zeroes verification\n[PASS] ECDSA P-384 with SHA-512 - The signature was truncated by 1 byte verification\n[PASS] ECDSA P-384 with SHA-512 - The signature was made using SHA-512, however verification is being done using SHA-1 verification\n[PASS] ECDSA P-384 with SHA-512 - The signature was made using SHA-512, however verification is being done using SHA-256 verification\n[PASS] ECDSA P-384 with SHA-512 - The signature was made using SHA-512, however verification is being done using SHA-384 verification\n[PASS] ECDSA P-384 with SHA-512 - Signature has excess padding verification\n[PASS] ECDSA P-384 with SHA-512 - The signature is empty verification\n[PASS] ECDSA P-384 with SHA-512 - The signature is all zeroes verification\n[PASS] ECDSA P-521 with SHA-1 - The signature was truncated by 1 byte verification\n[PASS] ECDSA P-521 with SHA-1 - The signature was made using SHA-1, however verification is being done using SHA-256 verification\n[PASS] ECDSA P-521 with SHA-1 - The signature was made using SHA-1, however verification is being done using SHA-384 verification\n[PASS] ECDSA P-521 with SHA-1 - The signature was made using SHA-1, however verification is being done using SHA-512 verification\n[PASS] ECDSA P-521 with SHA-1 - Signature has excess padding verification\n[PASS] ECDSA P-521 with SHA-1 - The signature is empty verification\n[PASS] ECDSA P-521 with SHA-1 - The signature is all zeroes verification\n[PASS] ECDSA P-521 with SHA-256 - The signature was truncated by 1 byte verification\n[PASS] ECDSA P-521 with SHA-256 - The signature was made using SHA-256, however verification is being done using SHA-1 verification\n[PASS] ECDSA P-521 with SHA-256 - The signature was made using SHA-256, however verification is being done using SHA-384 verification\n[PASS] ECDSA P-521 with SHA-256 - The signature was made using SHA-256, however verification is being done using SHA-512 verification\n[PASS] ECDSA P-521 with SHA-256 - Signature has excess padding verification\n[PASS] ECDSA P-521 with SHA-256 - The signature is empty verification\n[PASS] ECDSA P-521 with SHA-256 - The signature is all zeroes verification\n[PASS] ECDSA P-521 with SHA-384 - The signature was truncated by 1 byte verification\n[PASS] ECDSA P-521 with SHA-384 - The signature was made using SHA-384, however verification is being done using SHA-1 verification\n[PASS] ECDSA P-521 with SHA-384 - The signature was made using SHA-384, however verification is being done using SHA-256 verification\n[PASS] ECDSA P-521 with SHA-384 - The signature was made using SHA-384, however verification is being done using SHA-512 verification\n[PASS] ECDSA P-521 with SHA-384 - Signature has excess padding verification\n[PASS] ECDSA P-521 with SHA-384 - The signature is empty verification\n[PASS] ECDSA P-521 with SHA-384 - The signature is all zeroes verification\n[PASS] ECDSA P-521 with SHA-512 - The signature was truncated by 1 byte verification\n[PASS] ECDSA P-521 with SHA-512 - The signature was made using SHA-512, however verification is being done using SHA-1 verification\n[PASS] ECDSA P-521 with SHA-512 - The signature was made using SHA-512, however verification is being done using SHA-256 verification\n[PASS] ECDSA P-521 with SHA-512 - The signature was made using SHA-512, however verification is being done using SHA-384 verification\n[PASS] ECDSA P-521 with SHA-512 - Signature has excess padding verification\n[PASS] ECDSA P-521 with SHA-512 - The signature is empty verification\n[PASS] ECDSA P-521 with SHA-512 - The signature is all zeroes verification\n[PASS] ECDSA P-256 with SHA-1 signing with wrong algorithm name\n[PASS] ECDSA P-256 with SHA-256 signing with wrong algorithm name\n[PASS] ECDSA P-256 with SHA-384 signing with wrong algorithm name\n[PASS] ECDSA P-256 with SHA-512 signing with wrong algorithm name\n[PASS] ECDSA P-384 with SHA-1 signing with wrong algorithm name\n[PASS] ECDSA P-384 with SHA-256 signing with wrong algorithm name\n[PASS] ECDSA P-384 with SHA-384 signing with wrong algorithm name\n[PASS] ECDSA P-384 with SHA-512 signing with wrong algorithm name\n[PASS] ECDSA P-521 with SHA-1 signing with wrong algorithm name\n[PASS] ECDSA P-521 with SHA-256 signing with wrong algorithm name\n[PASS] ECDSA P-521 with SHA-384 signing with wrong algorithm name\n[PASS] ECDSA P-521 with SHA-512 signing with wrong algorithm name\n[PASS] ECDSA P-256 with SHA-1 verifying with wrong algorithm name\n[PASS] ECDSA P-256 with SHA-256 verifying with wrong algorithm name\n[PASS] ECDSA P-256 with SHA-384 verifying with wrong algorithm name\n[PASS] ECDSA P-256 with SHA-512 verifying with wrong algorithm name\n[PASS] ECDSA P-384 with SHA-1 verifying with wrong algorithm name\n[PASS] ECDSA P-384 with SHA-256 verifying with wrong algorithm name\n[PASS] ECDSA P-384 with SHA-384 verifying with wrong algorithm name\n[PASS] ECDSA P-384 with SHA-512 verifying with wrong algorithm name\n[PASS] ECDSA P-521 with SHA-1 verifying with wrong algorithm name\n[PASS] ECDSA P-521 with SHA-256 verifying with wrong algorithm name\n[PASS] ECDSA P-521 with SHA-384 verifying with wrong algorithm name\n[PASS] ECDSA P-521 with SHA-512 verifying with wrong algorithm name\n[PASS] setup\n[PASS] Can wrap and unwrap RSA-PSS public key keys using jwk and AES-CTR\n[PASS] Can wrap and unwrap RSA-PSS private key keys using jwk and AES-CTR\n[PASS] Can wrap and unwrap RSA-PSS private key keys as non-extractable using jwk and AES-CTR\n[PASS] Can unwrap RSA-PSS private key non-extractable keys using jwk and AES-CTR\n[PASS] Can wrap and unwrap RSASSA-PKCS1-v1_5 public key keys using jwk and AES-CTR\n[PASS] Can wrap and unwrap RSASSA-PKCS1-v1_5 private key keys using jwk and AES-CTR\n[PASS] Can wrap and unwrap RSASSA-PKCS1-v1_5 private key keys as non-extractable using jwk and AES-CTR\n[PASS] Can unwrap RSASSA-PKCS1-v1_5 private key non-extractable keys using jwk and AES-CTR\n[PASS] Can wrap and unwrap ECDSA public key keys using jwk and AES-CTR\n[PASS] Can wrap and unwrap ECDSA private key keys using jwk and AES-CTR\n[PASS] Can wrap and unwrap ECDSA private key keys as non-extractable using jwk and AES-CTR\n[PASS] Can unwrap ECDSA private key non-extractable keys using jwk and AES-CTR\n[PASS] Can wrap and unwrap ECDH public key keys using jwk and AES-CTR\n[PASS] Can wrap and unwrap ECDH private key keys using jwk and AES-CTR\n[PASS] Can wrap and unwrap ECDH private key keys as non-extractable using jwk and AES-CTR\n[PASS] Can unwrap ECDH private key non-extractable keys using jwk and AES-CTR\n[PASS] Can wrap and unwrap Ed25519 public key keys using jwk and AES-CTR\n[PASS] Can wrap and unwrap Ed25519 private key keys using jwk and AES-CTR\n[PASS] Can wrap and unwrap Ed25519 private key keys as non-extractable using jwk and AES-CTR\n[PASS] Can unwrap Ed25519 private key non-extractable keys using jwk and AES-CTR\n[PASS] Can wrap and unwrap Ed448 public key keys using jwk and AES-CTR\n[PASS] Can wrap and unwrap Ed448 private key keys using jwk and AES-CTR\n[PASS] Can wrap and unwrap Ed448 private key keys as non-extractable using jwk and AES-CTR\n[PASS] Can unwrap Ed448 private key non-extractable keys using jwk and AES-CTR\n[PASS] Can wrap and unwrap X25519 public key keys using jwk and AES-CTR\n[PASS] Can wrap and unwrap X25519 private key keys using jwk and AES-CTR\n[PASS] Can wrap and unwrap X25519 private key keys as non-extractable using jwk and AES-CTR\n[PASS] Can unwrap X25519 private key non-extractable keys using jwk and AES-CTR\n[PASS] Can wrap and unwrap X448 public key keys using jwk and AES-CTR\n[PASS] Can wrap and unwrap X448 private key keys using jwk and AES-CTR\n[PASS] Can wrap and unwrap X448 private key keys as non-extractable using jwk and AES-CTR\n[PASS] Can unwrap X448 private key non-extractable keys using jwk and AES-CTR\n[PASS] Can wrap and unwrap AES-CTR keys using raw and AES-CTR\n[PASS] Can wrap and unwrap AES-CTR keys as non-extractable using raw and AES-CTR\n[PASS] Can wrap and unwrap AES-CTR keys using jwk and AES-CTR\n[PASS] Can wrap and unwrap AES-CTR keys as non-extractable using jwk and AES-CTR\n[PASS] Can unwrap AES-CTR non-extractable keys using jwk and AES-CTR\n[PASS] Can wrap and unwrap AES-CBC keys using raw and AES-CTR\n[PASS] Can wrap and unwrap AES-CBC keys as non-extractable using raw and AES-CTR\n[PASS] Can wrap and unwrap AES-CBC keys using jwk and AES-CTR\n[PASS] Can wrap and unwrap AES-CBC keys as non-extractable using jwk and AES-CTR\n[PASS] Can unwrap AES-CBC non-extractable keys using jwk and AES-CTR\n[PASS] Can wrap and unwrap AES-GCM keys using raw and AES-CTR\n[PASS] Can wrap and unwrap AES-GCM keys as non-extractable using raw and AES-CTR\n[PASS] Can wrap and unwrap AES-GCM keys using jwk and AES-CTR\n[PASS] Can wrap and unwrap AES-GCM keys as non-extractable using jwk and AES-CTR\n[PASS] Can unwrap AES-GCM non-extractable keys using jwk and AES-CTR\n[PASS] Can wrap and unwrap AES-KW keys using raw and AES-CTR\n[PASS] Can wrap and unwrap AES-KW keys as non-extractable using raw and AES-CTR\n[PASS] Can wrap and unwrap AES-KW keys using jwk and AES-CTR\n[PASS] Can wrap and unwrap AES-KW keys as non-extractable using jwk and AES-CTR\n[PASS] Can unwrap AES-KW non-extractable keys using jwk and AES-CTR\n[PASS] Can wrap and unwrap HMAC keys using raw and AES-CTR\n[PASS] Can wrap and unwrap HMAC keys as non-extractable using raw and AES-CTR\n[PASS] Can wrap and unwrap HMAC keys using jwk and AES-CTR\n[PASS] Can wrap and unwrap HMAC keys as non-extractable using jwk and AES-CTR\n[PASS] Can unwrap HMAC non-extractable keys using jwk and AES-CTR\n[PASS] Can wrap and unwrap RSA-OAEP public key keys using jwk and AES-CTR\n[PASS] Can wrap and unwrap RSA-OAEP private key keys using jwk and AES-CTR\n[PASS] Can wrap and unwrap RSA-OAEP private key keys as non-extractable using jwk and AES-CTR\n[PASS] Can unwrap RSA-OAEP private key non-extractable keys using jwk and AES-CTR\n[PASS] Can wrap and unwrap RSA-PSS public key keys using jwk and AES-CBC\n[PASS] Can wrap and unwrap RSA-PSS private key keys using jwk and AES-CBC\n[PASS] Can wrap and unwrap RSA-PSS private key keys as non-extractable using jwk and AES-CBC\n[PASS] Can unwrap RSA-PSS private key non-extractable keys using jwk and AES-CBC\n[PASS] Can wrap and unwrap RSASSA-PKCS1-v1_5 public key keys using jwk and AES-CBC\n[PASS] Can wrap and unwrap RSASSA-PKCS1-v1_5 private key keys using jwk and AES-CBC\n[PASS] Can wrap and unwrap RSASSA-PKCS1-v1_5 private key keys as non-extractable using jwk and AES-CBC\n[PASS] Can unwrap RSASSA-PKCS1-v1_5 private key non-extractable keys using jwk and AES-CBC\n[PASS] Can wrap and unwrap ECDSA public key keys using jwk and AES-CBC\n[PASS] Can wrap and unwrap ECDSA private key keys using jwk and AES-CBC\n[PASS] Can wrap and unwrap ECDSA private key keys as non-extractable using jwk and AES-CBC\n[PASS] Can unwrap ECDSA private key non-extractable keys using jwk and AES-CBC\n[PASS] Can wrap and unwrap ECDH public key keys using jwk and AES-CBC\n[PASS] Can wrap and unwrap ECDH private key keys using jwk and AES-CBC\n[PASS] Can wrap and unwrap ECDH private key keys as non-extractable using jwk and AES-CBC\n[PASS] Can unwrap ECDH private key non-extractable keys using jwk and AES-CBC\n[PASS] Can wrap and unwrap Ed25519 public key keys using jwk and AES-CBC\n[PASS] Can wrap and unwrap Ed25519 private key keys using jwk and AES-CBC\n[PASS] Can wrap and unwrap Ed25519 private key keys as non-extractable using jwk and AES-CBC\n[PASS] Can unwrap Ed25519 private key non-extractable keys using jwk and AES-CBC\n[PASS] Can wrap and unwrap Ed448 public key keys using jwk and AES-CBC\n[PASS] Can wrap and unwrap Ed448 private key keys using jwk and AES-CBC\n[PASS] Can wrap and unwrap Ed448 private key keys as non-extractable using jwk and AES-CBC\n[PASS] Can unwrap Ed448 private key non-extractable keys using jwk and AES-CBC\n[PASS] Can wrap and unwrap X25519 public key keys using jwk and AES-CBC\n[PASS] Can wrap and unwrap X25519 private key keys using jwk and AES-CBC\n[PASS] Can wrap and unwrap X25519 private key keys as non-extractable using jwk and AES-CBC\n[PASS] Can unwrap X25519 private key non-extractable keys using jwk and AES-CBC\n[PASS] Can wrap and unwrap X448 public key keys using jwk and AES-CBC\n[PASS] Can wrap and unwrap X448 private key keys using jwk and AES-CBC\n[PASS] Can wrap and unwrap X448 private key keys as non-extractable using jwk and AES-CBC\n[PASS] Can unwrap X448 private key non-extractable keys using jwk and AES-CBC\n[PASS] Can wrap and unwrap AES-CTR keys using raw and AES-CBC\n[PASS] Can wrap and unwrap AES-CTR keys as non-extractable using raw and AES-CBC\n[PASS] Can wrap and unwrap AES-CTR keys using jwk and AES-CBC\n[PASS] Can wrap and unwrap AES-CTR keys as non-extractable using jwk and AES-CBC\n[PASS] Can unwrap AES-CTR non-extractable keys using jwk and AES-CBC\n[PASS] Can wrap and unwrap AES-CBC keys using raw and AES-CBC\n[PASS] Can wrap and unwrap AES-CBC keys as non-extractable using raw and AES-CBC\n[PASS] Can wrap and unwrap AES-CBC keys using jwk and AES-CBC\n[PASS] Can wrap and unwrap AES-CBC keys as non-extractable using jwk and AES-CBC\n[PASS] Can unwrap AES-CBC non-extractable keys using jwk and AES-CBC\n[PASS] Can wrap and unwrap AES-GCM keys using raw and AES-CBC\n[PASS] Can wrap and unwrap AES-GCM keys as non-extractable using raw and AES-CBC\n[PASS] Can wrap and unwrap AES-GCM keys using jwk and AES-CBC\n[PASS] Can wrap and unwrap AES-GCM keys as non-extractable using jwk and AES-CBC\n[PASS] Can unwrap AES-GCM non-extractable keys using jwk and AES-CBC\n[PASS] Can wrap and unwrap AES-KW keys using raw and AES-CBC\n[PASS] Can wrap and unwrap AES-KW keys as non-extractable using raw and AES-CBC\n[PASS] Can wrap and unwrap AES-KW keys using jwk and AES-CBC\n[PASS] Can wrap and unwrap AES-KW keys as non-extractable using jwk and AES-CBC\n[PASS] Can unwrap AES-KW non-extractable keys using jwk and AES-CBC\n[PASS] Can wrap and unwrap HMAC keys using raw and AES-CBC\n[PASS] Can wrap and unwrap HMAC keys as non-extractable using raw and AES-CBC\n[PASS] Can wrap and unwrap HMAC keys using jwk and AES-CBC\n[PASS] Can wrap and unwrap HMAC keys as non-extractable using jwk and AES-CBC\n[PASS] Can unwrap HMAC non-extractable keys using jwk and AES-CBC\n[PASS] Can wrap and unwrap RSA-OAEP public key keys using jwk and AES-CBC\n[PASS] Can wrap and unwrap RSA-OAEP private key keys using jwk and AES-CBC\n[PASS] Can wrap and unwrap RSA-OAEP private key keys as non-extractable using jwk and AES-CBC\n[PASS] Can unwrap RSA-OAEP private key non-extractable keys using jwk and AES-CBC\n[PASS] Can wrap and unwrap RSA-PSS public key keys using jwk and AES-GCM\n[PASS] Can wrap and unwrap RSA-PSS private key keys using jwk and AES-GCM\n[PASS] Can wrap and unwrap RSA-PSS private key keys as non-extractable using jwk and AES-GCM\n[PASS] Can unwrap RSA-PSS private key non-extractable keys using jwk and AES-GCM\n[PASS] Can wrap and unwrap RSASSA-PKCS1-v1_5 public key keys using jwk and AES-GCM\n[PASS] Can wrap and unwrap RSASSA-PKCS1-v1_5 private key keys using jwk and AES-GCM\n[PASS] Can wrap and unwrap RSASSA-PKCS1-v1_5 private key keys as non-extractable using jwk and AES-GCM\n[PASS] Can unwrap RSASSA-PKCS1-v1_5 private key non-extractable keys using jwk and AES-GCM\n[PASS] Can wrap and unwrap ECDSA public key keys using jwk and AES-GCM\n[PASS] Can wrap and unwrap ECDSA private key keys using jwk and AES-GCM\n[PASS] Can wrap and unwrap ECDSA private key keys as non-extractable using jwk and AES-GCM\n[PASS] Can unwrap ECDSA private key non-extractable keys using jwk and AES-GCM\n[PASS] Can wrap and unwrap ECDH public key keys using jwk and AES-GCM\n[PASS] Can wrap and unwrap ECDH private key keys using jwk and AES-GCM\n[PASS] Can wrap and unwrap ECDH private key keys as non-extractable using jwk and AES-GCM\n[PASS] Can unwrap ECDH private key non-extractable keys using jwk and AES-GCM\n[PASS] Can wrap and unwrap Ed25519 public key keys using jwk and AES-GCM\n[PASS] Can wrap and unwrap Ed25519 private key keys using jwk and AES-GCM\n[PASS] Can wrap and unwrap Ed25519 private key keys as non-extractable using jwk and AES-GCM\n[PASS] Can unwrap Ed25519 private key non-extractable keys using jwk and AES-GCM\n[PASS] Can wrap and unwrap Ed448 public key keys using jwk and AES-GCM\n[PASS] Can wrap and unwrap Ed448 private key keys using jwk and AES-GCM\n[PASS] Can wrap and unwrap Ed448 private key keys as non-extractable using jwk and AES-GCM\n[PASS] Can unwrap Ed448 private key non-extractable keys using jwk and AES-GCM\n[PASS] Can wrap and unwrap X25519 public key keys using jwk and AES-GCM\n[PASS] Can wrap and unwrap X25519 private key keys using jwk and AES-GCM\n[PASS] Can wrap and unwrap X25519 private key keys as non-extractable using jwk and AES-GCM\n[PASS] Can unwrap X25519 private key non-extractable keys using jwk and AES-GCM\n[PASS] Can wrap and unwrap X448 public key keys using jwk and AES-GCM\n[PASS] Can wrap and unwrap X448 private key keys using jwk and AES-GCM\n[PASS] Can wrap and unwrap X448 private key keys as non-extractable using jwk and AES-GCM\n[PASS] Can unwrap X448 private key non-extractable keys using jwk and AES-GCM\n[PASS] Can wrap and unwrap AES-CTR keys using raw and AES-GCM\n[PASS] Can wrap and unwrap AES-CTR keys as non-extractable using raw and AES-GCM\n[PASS] Can wrap and unwrap AES-CTR keys using jwk and AES-GCM\n[PASS] Can wrap and unwrap AES-CTR keys as non-extractable using jwk and AES-GCM\n[PASS] Can unwrap AES-CTR non-extractable keys using jwk and AES-GCM\n[PASS] Can wrap and unwrap AES-CBC keys using raw and AES-GCM\n[PASS] Can wrap and unwrap AES-CBC keys as non-extractable using raw and AES-GCM\n[PASS] Can wrap and unwrap AES-CBC keys using jwk and AES-GCM\n[PASS] Can wrap and unwrap AES-CBC keys as non-extractable using jwk and AES-GCM\n[PASS] Can unwrap AES-CBC non-extractable keys using jwk and AES-GCM\n[PASS] Can wrap and unwrap AES-GCM keys using raw and AES-GCM\n[PASS] Can wrap and unwrap AES-GCM keys as non-extractable using raw and AES-GCM\n[PASS] Can wrap and unwrap AES-GCM keys using jwk and AES-GCM\n[PASS] Can wrap and unwrap AES-GCM keys as non-extractable using jwk and AES-GCM\n[PASS] Can unwrap AES-GCM non-extractable keys using jwk and AES-GCM\n[PASS] Can wrap and unwrap AES-KW keys using raw and AES-GCM\n[PASS] Can wrap and unwrap AES-KW keys as non-extractable using raw and AES-GCM\n[PASS] Can wrap and unwrap AES-KW keys using jwk and AES-GCM\n[PASS] Can wrap and unwrap AES-KW keys as non-extractable using jwk and AES-GCM\n[PASS] Can unwrap AES-KW non-extractable keys using jwk and AES-GCM\n[PASS] Can wrap and unwrap HMAC keys using raw and AES-GCM\n[PASS] Can wrap and unwrap HMAC keys as non-extractable using raw and AES-GCM\n[PASS] Can wrap and unwrap HMAC keys using jwk and AES-GCM\n[PASS] Can wrap and unwrap HMAC keys as non-extractable using jwk and AES-GCM\n[PASS] Can unwrap HMAC non-extractable keys using jwk and AES-GCM\n[PASS] Can wrap and unwrap RSA-OAEP public key keys using jwk and AES-GCM\n[PASS] Can wrap and unwrap RSA-OAEP private key keys using jwk and AES-GCM\n[PASS] Can wrap and unwrap RSA-OAEP private key keys as non-extractable using jwk and AES-GCM\n[PASS] Can unwrap RSA-OAEP private key non-extractable keys using jwk and AES-GCM\n[PASS] Can wrap and unwrap RSA-PSS public key keys using jwk and AES-KW\n[PASS] Can wrap and unwrap RSA-PSS private key keys using jwk and AES-KW\n[PASS] Can wrap and unwrap RSA-PSS private key keys as non-extractable using jwk and AES-KW\n[PASS] Can unwrap RSA-PSS private key non-extractable keys using jwk and AES-KW\n[PASS] Can wrap and unwrap RSASSA-PKCS1-v1_5 public key keys using jwk and AES-KW\n[PASS] Can wrap and unwrap RSASSA-PKCS1-v1_5 private key keys using jwk and AES-KW\n[PASS] Can wrap and unwrap RSASSA-PKCS1-v1_5 private key keys as non-extractable using jwk and AES-KW\n[PASS] Can unwrap RSASSA-PKCS1-v1_5 private key non-extractable keys using jwk and AES-KW\n[PASS] Can wrap and unwrap ECDSA public key keys using jwk and AES-KW\n[PASS] Can wrap and unwrap ECDSA private key keys using jwk and AES-KW\n[PASS] Can wrap and unwrap ECDSA private key keys as non-extractable using jwk and AES-KW\n[PASS] Can unwrap ECDSA private key non-extractable keys using jwk and AES-KW\n[PASS] Can wrap and unwrap ECDH public key keys using jwk and AES-KW\n[PASS] Can wrap and unwrap ECDH private key keys using jwk and AES-KW\n[PASS] Can wrap and unwrap ECDH private key keys as non-extractable using jwk and AES-KW\n[PASS] Can unwrap ECDH private key non-extractable keys using jwk and AES-KW\n[PASS] Can wrap and unwrap Ed25519 public key keys using jwk and AES-KW\n[PASS] Can wrap and unwrap Ed25519 private key keys using jwk and AES-KW\n[PASS] Can wrap and unwrap Ed25519 private key keys as non-extractable using jwk and AES-KW\n[PASS] Can unwrap Ed25519 private key non-extractable keys using jwk and AES-KW\n[PASS] Can wrap and unwrap Ed448 public key keys using jwk and AES-KW\n[PASS] Can wrap and unwrap Ed448 private key keys using jwk and AES-KW\n[PASS] Can wrap and unwrap Ed448 private key keys as non-extractable using jwk and AES-KW\n[PASS] Can unwrap Ed448 private key non-extractable keys using jwk and AES-KW\n[PASS] Can wrap and unwrap X25519 public key keys using jwk and AES-KW\n[PASS] Can wrap and unwrap X25519 private key keys using jwk and AES-KW\n[PASS] Can wrap and unwrap X25519 private key keys as non-extractable using jwk and AES-KW\n[PASS] Can unwrap X25519 private key non-extractable keys using jwk and AES-KW\n[PASS] Can wrap and unwrap X448 public key keys using jwk and AES-KW\n[PASS] Can wrap and unwrap X448 private key keys using jwk and AES-KW\n[PASS] Can wrap and unwrap X448 private key keys as non-extractable using jwk and AES-KW\n[PASS] Can unwrap X448 private key non-extractable keys using jwk and AES-KW\n[PASS] Can wrap and unwrap AES-CTR keys using raw and AES-KW\n[PASS] Can wrap and unwrap AES-CTR keys as non-extractable using raw and AES-KW\n[PASS] Can wrap and unwrap AES-CTR keys using jwk and AES-KW\n[PASS] Can wrap and unwrap AES-CTR keys as non-extractable using jwk and AES-KW\n[PASS] Can unwrap AES-CTR non-extractable keys using jwk and AES-KW\n[PASS] Can wrap and unwrap AES-CBC keys using raw and AES-KW\n[PASS] Can wrap and unwrap AES-CBC keys as non-extractable using raw and AES-KW\n[PASS] Can wrap and unwrap AES-CBC keys using jwk and AES-KW\n[PASS] Can wrap and unwrap AES-CBC keys as non-extractable using jwk and AES-KW\n[PASS] Can unwrap AES-CBC non-extractable keys using jwk and AES-KW\n[PASS] Can wrap and unwrap AES-GCM keys using raw and AES-KW\n[PASS] Can wrap and unwrap AES-GCM keys as non-extractable using raw and AES-KW\n[PASS] Can wrap and unwrap AES-GCM keys using jwk and AES-KW\n[PASS] Can wrap and unwrap AES-GCM keys as non-extractable using jwk and AES-KW\n[PASS] Can unwrap AES-GCM non-extractable keys using jwk and AES-KW\n[PASS] Can wrap and unwrap AES-KW keys using raw and AES-KW\n[PASS] Can wrap and unwrap AES-KW keys as non-extractable using raw and AES-KW\n[PASS] Can wrap and unwrap AES-KW keys using jwk and AES-KW\n[PASS] Can wrap and unwrap AES-KW keys as non-extractable using jwk and AES-KW\n[PASS] Can unwrap AES-KW non-extractable keys using jwk and AES-KW\n[PASS] Can wrap and unwrap HMAC keys using raw and AES-KW\n[PASS] Can wrap and unwrap HMAC keys as non-extractable using raw and AES-KW\n[PASS] Can wrap and unwrap HMAC keys using jwk and AES-KW\n[PASS] Can wrap and unwrap HMAC keys as non-extractable using jwk and AES-KW\n[PASS] Can unwrap HMAC non-extractable keys using jwk and AES-KW\n[PASS] Can wrap and unwrap RSA-OAEP public key keys using jwk and AES-KW\n[PASS] Can wrap and unwrap RSA-OAEP private key keys using jwk and AES-KW\n[PASS] Can wrap and unwrap RSA-OAEP private key keys as non-extractable using jwk and AES-KW\n[PASS] Can unwrap RSA-OAEP private key non-extractable keys using jwk and AES-KW\n[PASS] Can wrap and unwrap RSA-PSS public key keys using jwk and RSA-OAEP\n[PASS] Can wrap and unwrap RSA-PSS private key keys using jwk and RSA-OAEP\n[PASS] Can wrap and unwrap RSA-PSS private key keys as non-extractable using jwk and RSA-OAEP\n[PASS] Can unwrap RSA-PSS private key non-extractable keys using jwk and RSA-OAEP\n[PASS] Can wrap and unwrap RSASSA-PKCS1-v1_5 public key keys using jwk and RSA-OAEP\n[PASS] Can wrap and unwrap RSASSA-PKCS1-v1_5 private key keys using jwk and RSA-OAEP\n[PASS] Can wrap and unwrap RSASSA-PKCS1-v1_5 private key keys as non-extractable using jwk and RSA-OAEP\n[PASS] Can unwrap RSASSA-PKCS1-v1_5 private key non-extractable keys using jwk and RSA-OAEP\n[PASS] Can wrap and unwrap ECDSA public key keys using jwk and RSA-OAEP\n[PASS] Can wrap and unwrap ECDSA private key keys using jwk and RSA-OAEP\n[PASS] Can wrap and unwrap ECDSA private key keys as non-extractable using jwk and RSA-OAEP\n[PASS] Can unwrap ECDSA private key non-extractable keys using jwk and RSA-OAEP\n[PASS] Can wrap and unwrap ECDH public key keys using jwk and RSA-OAEP\n[PASS] Can wrap and unwrap ECDH private key keys using jwk and RSA-OAEP\n[PASS] Can wrap and unwrap ECDH private key keys as non-extractable using jwk and RSA-OAEP\n[PASS] Can unwrap ECDH private key non-extractable keys using jwk and RSA-OAEP\n[PASS] Can wrap and unwrap Ed25519 public key keys using jwk and RSA-OAEP\n[PASS] Can wrap and unwrap Ed25519 private key keys using jwk and RSA-OAEP\n[PASS] Can wrap and unwrap Ed25519 private key keys as non-extractable using jwk and RSA-OAEP\n[PASS] Can unwrap Ed25519 private key non-extractable keys using jwk and RSA-OAEP\n[PASS] Can wrap and unwrap Ed448 public key keys using jwk and RSA-OAEP\n[PASS] Can wrap and unwrap Ed448 private key keys using jwk and RSA-OAEP\n[PASS] Can wrap and unwrap Ed448 private key keys as non-extractable using jwk and RSA-OAEP\n[PASS] Can unwrap Ed448 private key non-extractable keys using jwk and RSA-OAEP\n[PASS] Can wrap and unwrap X25519 public key keys using jwk and RSA-OAEP\n[PASS] Can wrap and unwrap X25519 private key keys using jwk and RSA-OAEP\n[PASS] Can wrap and unwrap X25519 private key keys as non-extractable using jwk and RSA-OAEP\n[PASS] Can unwrap X25519 private key non-extractable keys using jwk and RSA-OAEP\n[PASS] Can wrap and unwrap X448 public key keys using jwk and RSA-OAEP\n[PASS] Can wrap and unwrap X448 private key keys using jwk and RSA-OAEP\n[PASS] Can wrap and unwrap X448 private key keys as non-extractable using jwk and RSA-OAEP\n[PASS] Can unwrap X448 private key non-extractable keys using jwk and RSA-OAEP\n[PASS] Can wrap and unwrap AES-CTR keys using raw and RSA-OAEP\n[PASS] Can wrap and unwrap AES-CTR keys as non-extractable using raw and RSA-OAEP\n[PASS] Can wrap and unwrap AES-CTR keys using jwk and RSA-OAEP\n[PASS] Can wrap and unwrap AES-CTR keys as non-extractable using jwk and RSA-OAEP\n[PASS] Can unwrap AES-CTR non-extractable keys using jwk and RSA-OAEP\n[PASS] Can wrap and unwrap AES-CBC keys using raw and RSA-OAEP\n[PASS] Can wrap and unwrap AES-CBC keys as non-extractable using raw and RSA-OAEP\n[PASS] Can wrap and unwrap AES-CBC keys using jwk and RSA-OAEP\n[PASS] Can wrap and unwrap AES-CBC keys as non-extractable using jwk and RSA-OAEP\n[PASS] Can unwrap AES-CBC non-extractable keys using jwk and RSA-OAEP\n[PASS] Can wrap and unwrap AES-GCM keys using raw and RSA-OAEP\n[PASS] Can wrap and unwrap AES-GCM keys as non-extractable using raw and RSA-OAEP\n[PASS] Can wrap and unwrap AES-GCM keys using jwk and RSA-OAEP\n[PASS] Can wrap and unwrap AES-GCM keys as non-extractable using jwk and RSA-OAEP\n[PASS] Can unwrap AES-GCM non-extractable keys using jwk and RSA-OAEP\n[PASS] Can wrap and unwrap AES-KW keys using raw and RSA-OAEP\n[PASS] Can wrap and unwrap AES-KW keys as non-extractable using raw and RSA-OAEP\n[PASS] Can wrap and unwrap AES-KW keys using jwk and RSA-OAEP\n[PASS] Can wrap and unwrap AES-KW keys as non-extractable using jwk and RSA-OAEP\n[PASS] Can unwrap AES-KW non-extractable keys using jwk and RSA-OAEP\n[PASS] Can wrap and unwrap HMAC keys using raw and RSA-OAEP\n[PASS] Can wrap and unwrap HMAC keys as non-extractable using raw and RSA-OAEP\n[PASS] Can wrap and unwrap HMAC keys using jwk and RSA-OAEP\n[PASS] Can wrap and unwrap HMAC keys as non-extractable using jwk and RSA-OAEP\n[PASS] Can unwrap HMAC non-extractable keys using jwk and RSA-OAEP\n[PASS] Can wrap and unwrap RSA-OAEP public key keys using jwk and RSA-OAEP\n[PASS] Can wrap and unwrap RSA-OAEP private key keys using jwk and RSA-OAEP\n[PASS] Can wrap and unwrap RSA-OAEP private key keys as non-extractable using jwk and RSA-OAEP\n[PASS] Can unwrap RSA-OAEP private key non-extractable keys using jwk and RSA-OAEP\n[PASS] Can wrap and unwrap RSA-PSS public key keys using spki and AES-CTR\n[PASS] Can wrap and unwrap RSA-PSS private key keys using pkcs8 and AES-CTR\n[PASS] Can wrap and unwrap RSA-PSS private key keys as non-extractable using pkcs8 and AES-CTR\n[PASS] Can wrap and unwrap RSASSA-PKCS1-v1_5 public key keys using spki and AES-CTR\n[PASS] Can wrap and unwrap RSASSA-PKCS1-v1_5 private key keys using pkcs8 and AES-CTR\n[PASS] Can wrap and unwrap RSASSA-PKCS1-v1_5 private key keys as non-extractable using pkcs8 and AES-CTR\n[PASS] Can wrap and unwrap ECDSA public key keys using spki and AES-CTR\n[PASS] Can wrap and unwrap ECDSA private key keys using pkcs8 and AES-CTR\n[PASS] Can wrap and unwrap ECDSA private key keys as non-extractable using pkcs8 and AES-CTR\n[PASS] Can wrap and unwrap ECDH public key keys using spki and AES-CTR\n[PASS] Can wrap and unwrap ECDH private key keys using pkcs8 and AES-CTR\n[PASS] Can wrap and unwrap ECDH private key keys as non-extractable using pkcs8 and AES-CTR\n[PASS] Can wrap and unwrap Ed25519 public key keys using spki and AES-CTR\n[PASS] Can wrap and unwrap Ed25519 private key keys using pkcs8 and AES-CTR\n[PASS] Can wrap and unwrap Ed25519 private key keys as non-extractable using pkcs8 and AES-CTR\n[PASS] Can wrap and unwrap Ed448 public key keys using spki and AES-CTR\n[PASS] Can wrap and unwrap Ed448 private key keys using pkcs8 and AES-CTR\n[PASS] Can wrap and unwrap Ed448 private key keys as non-extractable using pkcs8 and AES-CTR\n[PASS] Can wrap and unwrap X25519 public key keys using spki and AES-CTR\n[PASS] Can wrap and unwrap X25519 private key keys using pkcs8 and AES-CTR\n[PASS] Can wrap and unwrap X25519 private key keys as non-extractable using pkcs8 and AES-CTR\n[PASS] Can wrap and unwrap X448 public key keys using spki and AES-CTR\n[PASS] Can wrap and unwrap X448 private key keys using pkcs8 and AES-CTR\n[PASS] Can wrap and unwrap X448 private key keys as non-extractable using pkcs8 and AES-CTR\n[PASS] Can wrap and unwrap RSA-OAEP public key keys using spki and AES-CTR\n[PASS] Can wrap and unwrap RSA-OAEP private key keys using pkcs8 and AES-CTR\n[PASS] Can wrap and unwrap RSA-OAEP private key keys as non-extractable using pkcs8 and AES-CTR\n[PASS] Can wrap and unwrap RSA-PSS public key keys using spki and AES-CBC\n[PASS] Can wrap and unwrap RSA-PSS private key keys using pkcs8 and AES-CBC\n[PASS] Can wrap and unwrap RSA-PSS private key keys as non-extractable using pkcs8 and AES-CBC\n[PASS] Can wrap and unwrap RSASSA-PKCS1-v1_5 public key keys using spki and AES-CBC\n[PASS] Can wrap and unwrap RSASSA-PKCS1-v1_5 private key keys using pkcs8 and AES-CBC\n[PASS] Can wrap and unwrap RSASSA-PKCS1-v1_5 private key keys as non-extractable using pkcs8 and AES-CBC\n[PASS] Can wrap and unwrap ECDSA public key keys using spki and AES-CBC\n[PASS] Can wrap and unwrap ECDSA private key keys using pkcs8 and AES-CBC\n[PASS] Can wrap and unwrap ECDSA private key keys as non-extractable using pkcs8 and AES-CBC\n[PASS] Can wrap and unwrap ECDH public key keys using spki and AES-CBC\n[PASS] Can wrap and unwrap ECDH private key keys using pkcs8 and AES-CBC\n[PASS] Can wrap and unwrap ECDH private key keys as non-extractable using pkcs8 and AES-CBC\n[PASS] Can wrap and unwrap Ed25519 public key keys using spki and AES-CBC\n[PASS] Can wrap and unwrap Ed25519 private key keys using pkcs8 and AES-CBC\n[PASS] Can wrap and unwrap Ed25519 private key keys as non-extractable using pkcs8 and AES-CBC\n[PASS] Can wrap and unwrap Ed448 public key keys using spki and AES-CBC\n[PASS] Can wrap and unwrap Ed448 private key keys using pkcs8 and AES-CBC\n[PASS] Can wrap and unwrap Ed448 private key keys as non-extractable using pkcs8 and AES-CBC\n[PASS] Can wrap and unwrap X25519 public key keys using spki and AES-CBC\n[PASS] Can wrap and unwrap X25519 private key keys using pkcs8 and AES-CBC\n[PASS] Can wrap and unwrap X25519 private key keys as non-extractable using pkcs8 and AES-CBC\n[PASS] Can wrap and unwrap X448 public key keys using spki and AES-CBC\n[PASS] Can wrap and unwrap X448 private key keys using pkcs8 and AES-CBC\n[PASS] Can wrap and unwrap X448 private key keys as non-extractable using pkcs8 and AES-CBC\n[PASS] Can wrap and unwrap RSA-OAEP public key keys using spki and AES-CBC\n[PASS] Can wrap and unwrap RSA-OAEP private key keys using pkcs8 and AES-CBC\n[PASS] Can wrap and unwrap RSA-OAEP private key keys as non-extractable using pkcs8 and AES-CBC\n[PASS] Can wrap and unwrap RSA-PSS public key keys using spki and AES-GCM\n[PASS] Can wrap and unwrap RSA-PSS private key keys using pkcs8 and AES-GCM\n[PASS] Can wrap and unwrap RSA-PSS private key keys as non-extractable using pkcs8 and AES-GCM\n[PASS] Can wrap and unwrap RSASSA-PKCS1-v1_5 public key keys using spki and AES-GCM\n[PASS] Can wrap and unwrap ECDSA public key keys using spki and AES-GCM\n[PASS] Can wrap and unwrap RSASSA-PKCS1-v1_5 private key keys using pkcs8 and AES-GCM\n[PASS] Can wrap and unwrap RSASSA-PKCS1-v1_5 private key keys as non-extractable using pkcs8 and AES-GCM\n[PASS] Can wrap and unwrap ECDSA private key keys using pkcs8 and AES-GCM\n[PASS] Can wrap and unwrap ECDSA private key keys as non-extractable using pkcs8 and AES-GCM\n[PASS] Can wrap and unwrap ECDH public key keys using spki and AES-GCM\n[PASS] Can wrap and unwrap ECDH private key keys using pkcs8 and AES-GCM\n[PASS] Can wrap and unwrap ECDH private key keys as non-extractable using pkcs8 and AES-GCM\n[PASS] Can wrap and unwrap Ed25519 public key keys using spki and AES-GCM\n[PASS] Can wrap and unwrap Ed25519 private key keys using pkcs8 and AES-GCM\n[PASS] Can wrap and unwrap Ed25519 private key keys as non-extractable using pkcs8 and AES-GCM\n[PASS] Can wrap and unwrap Ed448 public key keys using spki and AES-GCM\n[PASS] Can wrap and unwrap Ed448 private key keys using pkcs8 and AES-GCM\n[PASS] Can wrap and unwrap Ed448 private key keys as non-extractable using pkcs8 and AES-GCM\n[PASS] Can wrap and unwrap X25519 public key keys using spki and AES-GCM\n[PASS] Can wrap and unwrap X25519 private key keys using pkcs8 and AES-GCM\n[PASS] Can wrap and unwrap X25519 private key keys as non-extractable using pkcs8 and AES-GCM\n[PASS] Can wrap and unwrap X448 public key keys using spki and AES-GCM\n[PASS] Can wrap and unwrap X448 private key keys using pkcs8 and AES-GCM\n[PASS] Can wrap and unwrap X448 private key keys as non-extractable using pkcs8 and AES-GCM\n[PASS] Can wrap and unwrap RSA-OAEP public key keys using spki and AES-GCM\n[PASS] Can wrap and unwrap RSA-OAEP private key keys using pkcs8 and AES-GCM\n[PASS] Can wrap and unwrap RSA-OAEP private key keys as non-extractable using pkcs8 and AES-GCM\n[PASS] Can wrap and unwrap RSA-PSS public key keys using spki and AES-KW\n[PASS] Can wrap and unwrap RSA-PSS private key keys using pkcs8 and AES-KW\n[PASS] Can wrap and unwrap RSA-PSS private key keys as non-extractable using pkcs8 and AES-KW\n[PASS] Can wrap and unwrap RSASSA-PKCS1-v1_5 public key keys using spki and AES-KW\n[PASS] Can wrap and unwrap ECDSA public key keys using spki and AES-KW\n[PASS] Can wrap and unwrap RSASSA-PKCS1-v1_5 private key keys using pkcs8 and AES-KW\n[PASS] Can wrap and unwrap RSASSA-PKCS1-v1_5 private key keys as non-extractable using pkcs8 and AES-KW\n[PASS] Can wrap and unwrap ECDH public key keys using spki and AES-KW\n[PASS] Can wrap and unwrap ECDSA private key keys using pkcs8 and AES-KW\n[PASS] Can wrap and unwrap ECDSA private key keys as non-extractable using pkcs8 and AES-KW\n[PASS] Can wrap and unwrap ECDH private key keys using pkcs8 and AES-KW\n[PASS] Can wrap and unwrap ECDH private key keys as non-extractable using pkcs8 and AES-KW\n[PASS] Can wrap and unwrap Ed25519 public key keys using spki and AES-KW\n[PASS] Can wrap and unwrap Ed25519 private key keys using pkcs8 and AES-KW\n[PASS] Can wrap and unwrap Ed25519 private key keys as non-extractable using pkcs8 and AES-KW\n[PASS] Can wrap and unwrap Ed448 public key keys using spki and AES-KW\n[PASS] Can wrap and unwrap Ed448 private key keys using pkcs8 and AES-KW\n[PASS] Can wrap and unwrap Ed448 private key keys as non-extractable using pkcs8 and AES-KW\n[PASS] Can wrap and unwrap X25519 public key keys using spki and AES-KW\n[PASS] Can wrap and unwrap X25519 private key keys using pkcs8 and AES-KW\n[PASS] Can wrap and unwrap X25519 private key keys as non-extractable using pkcs8 and AES-KW\n[PASS] Can wrap and unwrap X448 public key keys using spki and AES-KW\n[PASS] Can wrap and unwrap X448 private key keys using pkcs8 and AES-KW\n[PASS] Can wrap and unwrap X448 private key keys as non-extractable using pkcs8 and AES-KW\n[PASS] Can wrap and unwrap RSA-OAEP public key keys using spki and AES-KW\n[PASS] Can wrap and unwrap RSA-OAEP private key keys using pkcs8 and AES-KW\n[PASS] Can wrap and unwrap RSA-OAEP private key keys as non-extractable using pkcs8 and AES-KW\n[PASS] Can wrap and unwrap RSA-PSS public key keys using spki and RSA-OAEP\n[PASS] Can wrap and unwrap RSA-PSS private key keys using pkcs8 and RSA-OAEP\n[PASS] Can wrap and unwrap RSA-PSS private key keys as non-extractable using pkcs8 and RSA-OAEP\n[PASS] Can wrap and unwrap RSASSA-PKCS1-v1_5 public key keys using spki and RSA-OAEP\n[PASS] Can wrap and unwrap ECDSA public key keys using spki and RSA-OAEP\n[PASS] Can wrap and unwrap ECDH public key keys using spki and RSA-OAEP\n[PASS] Can wrap and unwrap RSASSA-PKCS1-v1_5 private key keys using pkcs8 and RSA-OAEP\n[PASS] Can wrap and unwrap RSASSA-PKCS1-v1_5 private key keys as non-extractable using pkcs8 and RSA-OAEP\n[PASS] Can wrap and unwrap ECDSA private key keys using pkcs8 and RSA-OAEP\n[PASS] Can wrap and unwrap ECDSA private key keys as non-extractable using pkcs8 and RSA-OAEP\n[PASS] Can wrap and unwrap ECDH private key keys using pkcs8 and RSA-OAEP\n[PASS] Can wrap and unwrap ECDH private key keys as non-extractable using pkcs8 and RSA-OAEP\n[PASS] Can wrap and unwrap Ed25519 public key keys using spki and RSA-OAEP\n[PASS] Can wrap and unwrap Ed25519 private key keys using pkcs8 and RSA-OAEP\n[PASS] Can wrap and unwrap Ed25519 private key keys as non-extractable using pkcs8 and RSA-OAEP\n[PASS] Can wrap and unwrap Ed448 public key keys using spki and RSA-OAEP\n[PASS] Can wrap and unwrap Ed448 private key keys using pkcs8 and RSA-OAEP\n[PASS] Can wrap and unwrap Ed448 private key keys as non-extractable using pkcs8 and RSA-OAEP\n[PASS] Can wrap and unwrap X25519 public key keys using spki and RSA-OAEP\n[PASS] Can wrap and unwrap X25519 private key keys using pkcs8 and RSA-OAEP\n[PASS] Can wrap and unwrap X25519 private key keys as non-extractable using pkcs8 and RSA-OAEP\n[PASS] Can wrap and unwrap X448 public key keys using spki and RSA-OAEP\n[PASS] Can wrap and unwrap X448 private key keys using pkcs8 and RSA-OAEP\n[PASS] Can wrap and unwrap X448 private key keys as non-extractable using pkcs8 and RSA-OAEP\n[PASS] Can wrap and unwrap RSA-OAEP public key keys using spki and RSA-OAEP\n[PASS] Can wrap and unwrap RSA-OAEP private key keys using pkcs8 and RSA-OAEP\n[PASS] Can wrap and unwrap RSA-OAEP private key keys as non-extractable using pkcs8 and RSA-OAEP\n(node:8632) ExperimentalWarning: The X25519 Web Crypto API algorithm is an experimental feature and might change at any time\n(Use `node --trace-warnings ...` to show where the warning was created)\n(node:8632) ExperimentalWarning: The X448 Web Crypto API algorithm is an experimental feature and might change at any time\n(node:8632) ExperimentalWarning: The X25519 Web Crypto API algorithm is an experimental feature and might change at any time\n(Use `node --trace-warnings ...` to show where the warning was created)\n(node:8632) ExperimentalWarning: The X448 Web Crypto API algorithm is an experimental feature and might change at any time\n(node:8632) ExperimentalWarning: The Ed25519 Web Crypto API algorithm is an experimental feature and might change at any time\n(Use `node --trace-warnings ...` to show where the warning was created)\n(node:8632) ExperimentalWarning: The Ed448 Web Crypto API algorithm is an experimental feature and might change at any time\n(Use `node --trace-warnings ...` to show where the warning was created)\n(node:8632) ExperimentalWarning: The X25519 Web Crypto API algorithm is an experimental feature and might change at any time\n(Use `node --trace-warnings ...` to show where the warning was created)\n(node:8632) ExperimentalWarning: The X448 Web Crypto API algorithm is an experimental feature and might change at any time\n(Use `node --trace-warnings ...` to show where the warning was created)\n(node:8632) ExperimentalWarning: The Ed25519 Web Crypto API algorithm is an experimental feature and might change at any time\n(Use `node --trace-warnings ...` to show where the warning was created)\n(node:8632) ExperimentalWarning: The Ed448 Web Crypto API algorithm is an experimental feature and might change at any time\n(Use `node --trace-warnings ...` to show where the warning was created)\n(node:8632) ExperimentalWarning: The X25519 Web Crypto API algorithm is an experimental feature and might change at any time\n(Use `node --trace-warnings ...` to show where the warning was created)\n(node:8632) ExperimentalWarning: The X448 Web Crypto API algorithm is an experimental feature and might change at any time\n(Use `node --trace-warnings ...` to show where the warning was created)\n(node:8632) ExperimentalWarning: The Ed25519 Web Crypto API algorithm is an experimental feature and might change at any time\n(Use `node --trace-warnings ...` to show where the warning was created)\n(node:8632) ExperimentalWarning: The Ed448 Web Crypto API algorithm is an experimental feature and might change at any time\n(node:8632) ExperimentalWarning: The X25519 Web Crypto API algorithm is an experimental feature and might change at any time\n(node:8632) ExperimentalWarning: The X448 Web Crypto API algorithm is an experimental feature and might change at any time\n(node:8632) ExperimentalWarning: The Ed25519 Web Crypto API algorithm is an experimental feature and might change at any time\n(Use `node --trace-warnings ...` to show where the warning was created)\n(node:8632) ExperimentalWarning: The Ed448 Web Crypto API algorithm is an experimental feature and might change at any time\n(node:8632) ExperimentalWarning: The Ed25519 Web Crypto API algorithm is an experimental feature and might change at any time\n(Use `node --trace-warnings ...` to show where the warning was created)\n(node:8632) ExperimentalWarning: The Ed448 Web Crypto API algorithm is an experimental feature and might change at any time\n(node:8632) ExperimentalWarning: The X25519 Web Crypto API algorithm is an experimental feature and might change at any time\n(node:8632) ExperimentalWarning: The X448 Web Crypto API algorithm is an experimental feature and might change at any time"},"time":67517.552,"fullname":"wpt/test-webcrypto","closingTestPoint":false}}]}