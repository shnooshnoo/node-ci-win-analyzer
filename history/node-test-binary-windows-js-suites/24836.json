{"failedTests":[{"testName":"wpt/test-compression","timestamp":1701778430845,"status":"REGRESSION","jobName":"node-test-binary-windows-js-suites","config":"node-test-binary-windows-js-suites Â» 2,win2019-COMPILED_BY-vs2022 #24836","buildUrl":"https://ci.nodejs.org/job/node-test-binary-windows-js-suites/RUN_SUBSET=2,nodes=win2019-COMPILED_BY-vs2022/24836/","buildNumber":24836,"builtOn":"test-rackspace-win2019_vs2019-x64-2","nodeVersion":"22.0.0","commitHash":"2557e8523dc4d89f6a487ae55639861243589b10","callStack":[{"upstreamBuild":59633,"upstreamProject":"node-test-commit-windows-fanned","upstreamUrl":"job/node-test-commit-windows-fanned/"},{"upstreamBuild":67104,"upstreamProject":"node-test-commit","upstreamUrl":"job/node-test-commit/"},{"upstreamBuild":56098,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"prId":"50126"}],"tap":{"ok":false,"name":"wpt/test-compression","id":960,"buffered":false,"tapError":null,"skip":false,"todo":false,"previous":null,"plan":null,"diag":{"severity":"fail","exitcode":3221226356,"stack":"[SKIPPED] compression-bad-chunks.tentative.any.js: Execution \"hangs\", ArrayBuffer and TypedArray is not accepted and throws, instead of rejects during writer.write\n[SKIPPED] decompression-bad-chunks.tentative.any.js: Execution \"hangs\", ArrayBuffer and TypedArray is not accepted and throws, instead of rejects during writer.write\n[SKIPPED] decompression-buffersource.tentative.any.js: ArrayBuffer and TypedArray is not accepted and throws, instead of rejects during writer.write\n[SKIPPED] idlharness-shadowrealm.window.js: ShadowRealm support is not enabled\n[SKIPPED] third_party\\pako\\pako_inflate.min.js: This is not a test file.\n[PASS] \"a\" should cause the constructor to throw\n[PASS] no input should cause the constructor to throw\n[PASS] non-string input should cause the constructor to throw\n[PASS] the result of compressing [,Hello,Hello] with deflate should be 'HelloHello'\n[PASS] the result of compressing [,Hello,Hello] with gzip should be 'HelloHello'\n[PASS] the result of compressing [,Hello,Hello] with deflate-raw should be 'HelloHello'\n[PASS] CompressionStream constructor should throw on invalid format\n[PASS] compressing 2 chunks with deflate should work\n[PASS] the result of compressing [Hello,,Hello] with deflate should be 'HelloHello'\n[PASS] the result of compressing [Hello,,Hello] with gzip should be 'HelloHello'\n[PASS] compressing 2 chunks with gzip should work\n[PASS] the result of compressing [Hello,,Hello] with deflate-raw should be 'HelloHello'\n[PASS] compressing 2 chunks with deflate-raw should work\n[PASS] the result of compressing [Hello,Hello,] with deflate should be 'HelloHello'\n[PASS] the result of compressing [Hello,Hello,] with gzip should be 'HelloHello'\n[PASS] compressing 3 chunks with deflate should work\n[PASS] the result of compressing [Hello,Hello,] with deflate-raw should be 'HelloHello'\n[PASS] deflated empty data should be reinflated back to its origin\n[PASS] compressing 3 chunks with gzip should work\n[PASS] compressing 3 chunks with deflate-raw should work\n[PASS] compressing 4 chunks with deflate should work\n[PASS] compressing 4 chunks with gzip should work\n[PASS] compressing 4 chunks with deflate-raw should work\n[PASS] the length of deflated data should be shorter than that of the original data\n[PASS] deflated small amount data should be reinflated back to its origin\n[PASS] compressing 5 chunks with deflate should work\n[PASS] compressing 5 chunks with gzip should work\n[PASS] compressing 5 chunks with deflate-raw should work\n[PASS] the length of gzipped data should be shorter than that of the original data\n[PASS] compressing 6 chunks with deflate should work\n[PASS] compressing 6 chunks with gzip should work\n[PASS] compressing 6 chunks with deflate-raw should work\n[PASS] the length of deflated (with -raw) data should be shorter than that of the original data\n[PASS] compressing 7 chunks with deflate should work\n[PASS] compressing 7 chunks with gzip should work\n[PASS] compressing 7 chunks with deflate-raw should work\n[PASS] compressing 8 chunks with deflate should work\n[PASS] compressing 8 chunks with gzip should work\n[PASS] compressing 8 chunks with deflate-raw should work\n[PASS] compressing 9 chunks with deflate should work\n[PASS] compressing 9 chunks with gzip should work\n[PASS] compressing 9 chunks with deflate-raw should work\n[PASS] compressing 10 chunks with deflate should work\n[PASS] compressing 10 chunks with gzip should work\n[PASS] deflate compression with large flush output\n[PASS] compressing 10 chunks with deflate-raw should work\n[PASS] compressing 11 chunks with deflate should work\n[PASS] compressing 11 chunks with gzip should work\n[PASS] compressing 11 chunks with deflate-raw should work\n[PASS] compressing 12 chunks with deflate should work\n[PASS] compressing 12 chunks with gzip should work\n[PASS] compressing 12 chunks with deflate-raw should work\n[PASS] compressing 13 chunks with deflate should work\n[PASS] compressing 13 chunks with gzip should work\n[PASS] \"a\" should cause the constructor to throw\n[PASS] no input should cause the constructor to throw\n[PASS] non-string input should cause the constructor to throw\n[PASS] compressing 13 chunks with deflate-raw should work\n[PASS] compressing 14 chunks with deflate should work\n[PASS] compressing 14 chunks with gzip should work\n[PASS] compressing 14 chunks with deflate-raw should work\n[PASS] compressing 15 chunks with deflate should work\n[PASS] compressing 15 chunks with gzip should work\n[PASS] gzip compression with large flush output\n[PASS] compressing 15 chunks with deflate-raw should work\n[PASS] compressing 16 chunks with deflate should work\n[PASS] compressing 16 chunks with gzip should work\n[PASS] compressing 16 chunks with deflate-raw should work\n[PASS] decompressing deflated input should work\n[PASS] decompressing gzip input should work\n[PASS] decompressing deflated (with -raw) input should work\n[PASS] deflated large amount data should be reinflated back to its origin\n[PASS] gzipped empty data should be reinflated back to its origin\n[PASS] gzipped small amount data should be reinflated back to its origin\n[PASS] deflate-raw compression with large flush output\n[PASS] data should be correctly compressed even if input is detached partway\n[PASS] the unchanged input for 'deflate' should decompress successfully\n[PASS] truncating the input for 'deflate' should give an error\n[EXPECTED_FAILURE][FAIL] trailing junk for 'deflate' should give an error\nassert_equals: decompression should fail expected \"error\" but got \"success\"\n    at Test.<anonymous> (C:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\fixtures\\wpt\\compression\\decompression-corrupt-input.tentative.any.js:290:5)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\nCommand: C:\\workspace\\node-test-binary-windows-js-suites\\node\\Release\\node.exe  C:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\wpt\\test-compression.js 'decompression-corrupt-input.tentative.any.js'\n\n[PASS] format 'deflate' field CMF should be error for 0\n[PASS] format 'deflate' field FLG should be success for 218\n[PASS] gzipped large amount data should be reinflated back to its origin\n[PASS] format 'deflate' field FLG should be success for 1\n[PASS] format 'deflate' field FLG should be success for 94\n[PASS] format 'deflate' field FLG should be error for 157\n[PASS] decompressing gzip empty input should work\n[PASS] decompressing deflate empty input should work\n[PASS] format 'deflate' field DATA should be success for 4\n[PASS] decompressing deflate-raw empty input should work\n[PASS] format 'deflate' field DATA should be error for 5\n[PASS] format 'deflate' field ADLER should be error for 255\n[PASS] the unchanged input for 'gzip' should decompress successfully\n[PASS] truncating the input for 'gzip' should give an error\n[EXPECTED_FAILURE][FAIL] trailing junk for 'gzip' should give an error\nassert_equals: decompression should fail expected \"error\" but got \"success\"\n    at Test.<anonymous> (C:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\fixtures\\wpt\\compression\\decompression-corrupt-input.tentative.any.js:290:5)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\nCommand: C:\\workspace\\node-test-binary-windows-js-suites\\node\\Release\\node.exe  C:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\wpt\\test-compression.js 'decompression-corrupt-input.tentative.any.js'\n\n[PASS] format 'gzip' field ID should be error for 255\n[PASS] format 'gzip' field CM should be error for 0\n[PASS] format 'gzip' field FLG should be success for 1\n[PASS] format 'gzip' field FLG should be error for 2\n[PASS] format 'gzip' field MTIME should be success for 255\n[PASS] format 'gzip' field XFL should be success for 255\n[PASS] format 'gzip' field OS should be success for 128\n[PASS] format 'gzip' field DATA should be error for 3\n[PASS] format 'gzip' field DATA should be success for 4\n[PASS] format 'gzip' field CRC should be error for 0\n[PASS] format 'gzip' field ISIZE should be error for 1\n[PASS] the deflate input compressed with dictionary should give an error"},"time":1499.011,"fullname":"wpt/test-compression","closingTestPoint":false}}]}