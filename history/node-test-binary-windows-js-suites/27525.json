{"failedTests":[{"testName":"message/stdin_messages","timestamp":1714660669261,"status":"FAILED","jobName":"node-test-binary-windows-js-suites","config":"node-test-binary-windows-js-suites » 0,win2022-COMPILED_BY-vs2022 #27525","buildUrl":"https://ci.nodejs.org/job/node-test-binary-windows-js-suites/RUN_SUBSET=0,nodes=win2022-COMPILED_BY-vs2022/27525/","buildNumber":27525,"builtOn":"test-rackspace-win2022_vs2022-x64-3","nodeVersion":"23.0.0","commitHash":"3a49bfd9b001e550acf99afcb74b31d6885de874","callStack":[{"upstreamBuild":62664,"upstreamProject":"node-test-commit-windows-fanned","upstreamUrl":"job/node-test-commit-windows-fanned/"},{"upstreamBuild":70433,"upstreamProject":"node-test-commit","upstreamUrl":"job/node-test-commit/"},{"upstreamBuild":58865,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"prId":"52733"}],"tap":{"ok":false,"name":"message/stdin_messages","id":85,"buffered":false,"tapError":null,"skip":false,"todo":false,"previous":null,"plan":null,"diag":{"severity":"fail","stack":"[stdin]\n[stdin]:1\nwith(this){__filename}\n^^^^\n\nSyntaxError: Strict mode code may not include a with statement\n    at makeContextifyScript (node:internal/vm:185:14)\n    at node:internal/process/execution:107:22\n    at [stdin]-wrapper:6:24\n    at runScript (node:internal/process/execution:101:62)\n    at evalScript (node:internal/process/execution:136:3)\n    at node:internal/main/eval_stdin:32:5\n    at Socket.<anonymous> (node:internal/process/execution:237:5)\n    at SlowEventEmitter.emit (node:internal/events/slow_event_emitter:110:35)\n    at Socket.emit (node:internal/events/event_emitter:443:41)\n    at endReadableNT (node:internal/streams/readable:1700:12)\n\nNode.js v23.0.0-pre\n42\n42\n[stdin]:1\nthrow new Error(\"hello\")\n^\n\nError: hello\n    at [stdin]:1:7\n    at runScriptInThisContext (node:internal/vm:209:10)\n    at node:internal/process/execution:118:14\n    at [stdin]-wrapper:6:24\n    at runScript (node:internal/process/execution:101:62)\n    at evalScript (node:internal/process/execution:136:3)\n    at node:internal/main/eval_stdin:32:5\n    at Socket.<anonymous> (node:internal/process/execution:237:5)\n    at SlowEventEmitter.emit (node:internal/events/slow_event_emitter:110:35)\n    at Socket.emit (node:internal/events/event_emitter:443:41)\n\nNode.js v23.0.0-pre\n[stdin]:1\nthrow new Error(\"hello\")\n^\n\nError: hello\n    at [stdin]:1:7\n    at runScriptInThisContext (node:internal/vm:209:10)\n    at node:internal/process/execution:118:14\n    at [stdin]-wrapper:6:24\n    at runScript (node:internal/process/execution:101:62)\n    at evalScript (node:internal/process/execution:136:3)\n    at node:internal/main/eval_stdin:32:5\n    at Socket.<anonymous> (node:internal/process/execution:237:5)\n    at SlowEventEmitter.emit (node:internal/events/slow_event_emitter:110:35)\n    at Socket.emit (node:internal/events/event_emitter:443:41)\n\nNode.js v23.0.0-pre\n100\n[stdin]:1\nlet x = 100; y = x;\n               ^\n\nReferenceError: y is not defined\n    at [stdin]:1:16\n    at runScriptInThisContext (node:internal/vm:209:10)\n    at node:internal/process/execution:118:14\n    at [stdin]-wrapper:6:24\n    at runScript (node:internal/process/execution:101:62)\n    at evalScript (node:internal/process/execution:136:3)\n    at node:internal/main/eval_stdin:32:5\n    at Socket.<anonymous> (node:internal/process/execution:237:5)\n    at SlowEventEmitter.emit (node:internal/events/slow_event_emitter:110:35)\n    at Socket.emit (node:internal/events/event_emitter:443:41)\n\nNode.js v23.0.0-pre\n\n[stdin]:1\nlet ______________________________________________; throw 10\n                                                    ^\n10\n(Use `node --trace-uncaught ...` to show where the exception was thrown)\n\nNode.js v23.0.0-pre\n\n[stdin]:1\nlet ______________________________________________; throw 10\n                                                    ^\n10\n(Use `node --trace-uncaught ...` to show where the exception was thrown)\n\nNode.js v23.0.0-pre\ndone"},"time":2029.062,"fullname":"message/stdin_messages","closingTestPoint":false}},{"testName":"parallel/test-runner-watch-mode","timestamp":1714660669261,"status":"FAILED","jobName":"node-test-binary-windows-js-suites","config":"node-test-binary-windows-js-suites » 0,win2022-COMPILED_BY-vs2022 #27525","buildUrl":"https://ci.nodejs.org/job/node-test-binary-windows-js-suites/RUN_SUBSET=0,nodes=win2022-COMPILED_BY-vs2022/27525/","buildNumber":27525,"builtOn":"test-rackspace-win2022_vs2022-x64-3","nodeVersion":"23.0.0","commitHash":"3a49bfd9b001e550acf99afcb74b31d6885de874","callStack":[{"upstreamBuild":62664,"upstreamProject":"node-test-commit-windows-fanned","upstreamUrl":"job/node-test-commit-windows-fanned/"},{"upstreamBuild":70433,"upstreamProject":"node-test-commit","upstreamUrl":"job/node-test-commit/"},{"upstreamBuild":58865,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"prId":"52733"}],"tap":{"ok":false,"name":"parallel/test-runner-watch-mode","id":751,"buffered":false,"tapError":null,"skip":false,"todo":": Fix flaky test","previous":null,"plan":null,"diag":{"severity":"flaky","exitcode":1,"stack":"TAP version 13\n# Subtest: test runner watch mode\n    # Subtest: should run tests repeatedly\n    ok 1 - should run tests repeatedly\n      ---\n      duration_ms: 2019.2303\n      ...\n    # Subtest: should run tests with dependency repeatedly\n    ok 2 - should run tests with dependency repeatedly\n      ---\n      duration_ms: 1712.3125\n      ...\n    # Subtest: should run tests with ESM dependency\n    ok 3 - should run tests with ESM dependency\n      ---\n      duration_ms: 1702.3371\n      ...\n    # Subtest: should support running tests without a file\n    ok 4 - should support running tests without a file\n      ---\n      duration_ms: 1653.8247\n      ...\n    1..4\nok 1 - test runner watch mode\n  ---\n  duration_ms: 7091.9373\n  type: 'suite'\n  ...\n1..1\n# tests 4\n# suites 1\n# pass 4\n# fail 0\n# cancelled 0\n# skipped 0\n# todo 0\n# duration_ms 7141.4693\nCan't clean tmpdir: C:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\.tmp.675\nFiles blocking: [ 'dependency.js', 'dependency.mjs', 'test.js' ]\n\nC:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\tmpdir.js:69\n    throw e;\n    ^\n\nError: EBUSY: resource busy or locked, rmdir 'C:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\.tmp.675'\n    at rmdirSync (node:fs:1217:11)\n    at _rmdirSync (node:internal/fs/rimraf:235:5)\n    at rimrafSync (node:internal/fs/rimraf:193:7)\n    at Object.rmSync (node:fs:1266:10)\n    at rmSync (C:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\tmpdir.js:20:8)\n    at onexit (C:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\tmpdir.js:54:5)\n    at process.<anonymous> (C:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\tmpdir.js:43:14)\n    at SlowEventEmitter.emit (node:internal/events/slow_event_emitter:110:35)\n    at process.emit (node:internal/events/event_emitter:443:41) {\n  errno: -4082,\n  code: 'EBUSY',\n  syscall: 'rmdir',\n  path: 'C:\\\\workspace\\\\node-test-binary-windows-js-suites\\\\node\\\\test\\\\.tmp.675'\n}\n\nNode.js v23.0.0-pre"},"time":7609.259,"fullname":"parallel/test-runner-watch-mode","closingTestPoint":false}},{"testName":"parallel/test-assert-builtins-not-read-from-filesystem","timestamp":1714660669261,"status":"FAILED","jobName":"node-test-binary-windows-js-suites","config":"node-test-binary-windows-js-suites » 2,win2016-COMPILED_BY-vs2022-x86 #27525","buildUrl":"https://ci.nodejs.org/job/node-test-binary-windows-js-suites/RUN_SUBSET=2,nodes=win2016-COMPILED_BY-vs2022-x86/27525/","buildNumber":27525,"builtOn":"test-rackspace-win2016_vs2015-x64-2","nodeVersion":"23.0.0","commitHash":"3a49bfd9b001e550acf99afcb74b31d6885de874","callStack":[{"upstreamBuild":62664,"upstreamProject":"node-test-commit-windows-fanned","upstreamUrl":"job/node-test-commit-windows-fanned/"},{"upstreamBuild":70433,"upstreamProject":"node-test-commit","upstreamUrl":"job/node-test-commit/"},{"upstreamBuild":58865,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"prId":"52733"}],"tap":{"ok":false,"name":"parallel/test-assert-builtins-not-read-from-filesystem","id":68,"buffered":false,"tapError":null,"skip":false,"todo":false,"previous":null,"plan":null,"diag":{"severity":"fail","exitcode":1,"stack":"node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Exit code: 1\n,,node:fs:2348\n\n    return binding.writeFileUtf8(\n\n                   ^\n\n\n\nError: ENOENT: no such file or directory, open 'C:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\.tmp.68\\node:internal\\events\\fast_event_emitter'\n\n    at writeFileSync (node:fs:2348:20)\n\n    at Object.<anonymous> (C:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\parallel\\test-assert-builtins-not-read-from-filesystem.js:41:3)\n\n    at Module._compile (node:internal/modules/cjs/loader:1480:14)\n\n    at Module._extensions..js (node:internal/modules/cjs/loader:1564:10)\n\n    at Module.load (node:internal/modules/cjs/loader:1287:32)\n\n    at Module._load (node:internal/modules/cjs/loader:1103:12)\n\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:168:12)\n\n    at node:internal/main/run_main_module:30:49 {\n\n  errno: -4058,\n\n  code: 'ENOENT',\n\n  syscall: 'open',\n\n  path: 'C:\\\\workspace\\\\node-test-binary-windows-js-suites\\\\node\\\\test\\\\.tmp.68\\\\node:internal\\\\events\\\\fast_event_emitter'\n\n}\n\n\n\nNode.js v23.0.0-pre\n\n\n    at Object.<anonymous> (C:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\parallel\\test-assert-builtins-not-read-from-filesystem.js:31:12)\n    at Module._compile (node:internal/modules/cjs/loader:1480:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1564:10)\n    at Module.load (node:internal/modules/cjs/loader:1287:32)\n    at Module._load (node:internal/modules/cjs/loader:1103:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:168:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: false,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 0,\n  operator: 'strictEqual'\n}\n\nNode.js v23.0.0-pre"},"time":502.013,"fullname":"parallel/test-assert-builtins-not-read-from-filesystem","closingTestPoint":false}},{"testName":"parallel/test-disable-proto-delete","timestamp":1714660669261,"status":"FAILED","jobName":"node-test-binary-windows-js-suites","config":"node-test-binary-windows-js-suites » 2,win2016-COMPILED_BY-vs2022-x86 #27525","buildUrl":"https://ci.nodejs.org/job/node-test-binary-windows-js-suites/RUN_SUBSET=2,nodes=win2016-COMPILED_BY-vs2022-x86/27525/","buildNumber":27525,"builtOn":"test-rackspace-win2016_vs2015-x64-2","nodeVersion":"23.0.0","commitHash":"3a49bfd9b001e550acf99afcb74b31d6885de874","callStack":[{"upstreamBuild":62664,"upstreamProject":"node-test-commit-windows-fanned","upstreamUrl":"job/node-test-commit-windows-fanned/"},{"upstreamBuild":70433,"upstreamProject":"node-test-commit","upstreamUrl":"job/node-test-commit/"},{"upstreamBuild":58865,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"prId":"52733"}],"tap":{"ok":false,"name":"parallel/test-disable-proto-delete","id":223,"buffered":false,"tapError":null,"skip":false,"todo":false,"previous":null,"plan":null,"diag":{"severity":"fail","exitcode":1,"stack":"node:internal/events/slow_event_emitter:291\n    for (let i = listeners.length - 1; i >= 0; i--) {\n                           ^\n\nTypeError: Cannot read properties of null (reading 'length')\n    at SlowEventEmitter.removeAllListeners (node:internal/events/slow_event_emitter:291:28)\n    at Worker.removeAllListeners (node:internal/events/event_emitter:576:38)\n    at SlowEventEmitter.removeAllListeners (node:internal/events/slow_event_emitter:276:41)\n    at Worker.removeAllListeners (node:internal/events/event_emitter:576:38)\n    at [kOnExit] (node:internal/worker:316:10)\n    at Worker.<computed>.onexit (node:internal/worker:229:20)\n\nNode.js v23.0.0-pre"},"time":392.011,"fullname":"parallel/test-disable-proto-delete","closingTestPoint":false}},{"testName":"parallel/test-runner-output","timestamp":1714660669261,"status":"FAILED","jobName":"node-test-binary-windows-js-suites","config":"node-test-binary-windows-js-suites » 2,win2016-COMPILED_BY-vs2022-x86 #27525","buildUrl":"https://ci.nodejs.org/job/node-test-binary-windows-js-suites/RUN_SUBSET=2,nodes=win2016-COMPILED_BY-vs2022-x86/27525/","buildNumber":27525,"builtOn":"test-rackspace-win2016_vs2015-x64-2","nodeVersion":"23.0.0","commitHash":"3a49bfd9b001e550acf99afcb74b31d6885de874","callStack":[{"upstreamBuild":62664,"upstreamProject":"node-test-commit-windows-fanned","upstreamUrl":"job/node-test-commit-windows-fanned/"},{"upstreamBuild":70433,"upstreamProject":"node-test-commit","upstreamUrl":"job/node-test-commit/"},{"upstreamBuild":58865,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"prId":"52733"}],"tap":{"ok":false,"name":"parallel/test-runner-output","id":677,"buffered":false,"tapError":null,"skip":false,"todo":false,"previous":null,"plan":null,"diag":{"severity":"fail","exitcode":1,"stack":"TAP version 13\n# Subtest: test runner output\n    # Subtest: test-runner/output/abort.js\n    ok 1 - test-runner/output/abort.js\n      ---\n      duration_ms: 1436.9629\n      ...\n    # Subtest: test-runner/output/abort_suite.js\n    ok 2 - test-runner/output/abort_suite.js\n      ---\n      duration_ms: 1427.4386\n      ...\n    # Subtest: test-runner/output/abort_hooks.js\n    ok 3 - test-runner/output/abort_hooks.js\n      ---\n      duration_ms: 920.9608\n      ...\n    # Subtest: test-runner/output/describe_it.js\n    ok 4 - test-runner/output/describe_it.js\n      ---\n      duration_ms: 1027.1916\n      ...\n    # Subtest: test-runner/output/describe_nested.js\n    ok 5 - test-runner/output/describe_nested.js\n      ---\n      duration_ms: 894.4844\n      ...\n    # Subtest: test-runner/output/eval_dot.js\n    ok 6 - test-runner/output/eval_dot.js\n      ---\n      duration_ms: 884.574\n      ...\n    # Subtest: test-runner/output/eval_spec.js\n    ok 7 - test-runner/output/eval_spec.js\n      ---\n      duration_ms: 868.5896\n      ...\n    # Subtest: test-runner/output/eval_tap.js\n    ok 8 - test-runner/output/eval_tap.js\n      ---\n      duration_ms: 893.9959\n      ...\n    # Subtest: test-runner/output/hooks.js\n    ok 9 - test-runner/output/hooks.js\n      ---\n      duration_ms: 1675.1651\n      ...\n    # Subtest: test-runner/output/hooks_spec_reporter.js\n    ok 10 - test-runner/output/hooks_spec_reporter.js\n      ---\n      duration_ms: 2771.4783\n      ...\n    # Subtest: test-runner/output/skip-each-hooks.js\n    ok 11 - test-runner/output/skip-each-hooks.js\n      ---\n      duration_ms: 1293.8041\n      ...\n    # Subtest: test-runner/output/suite-skip-hooks.js\n    ok 12 - test-runner/output/suite-skip-hooks.js\n      ---\n      duration_ms: 936.91\n      ...\n    # Subtest: test-runner/output/timeout_in_before_each_should_not_affect_further_tests.js\n    ok 13 - test-runner/output/timeout_in_before_each_should_not_affect_further_tests.js\n      ---\n      duration_ms: 3095.8936\n      ...\n    # Subtest: test-runner/output/hooks-with-no-global-test.js\n    ok 14 - test-runner/output/hooks-with-no-global-test.js\n      ---\n      duration_ms: 1585.8373\n      ...\n    # Subtest: test-runner/output/global-hooks-with-no-tests.js\n    ok 15 - test-runner/output/global-hooks-with-no-tests.js\n      ---\n      duration_ms: 1179.0664\n      ...\n    # Subtest: test-runner/output/before-and-after-each-too-many-listeners.js\n    ok 16 - test-runner/output/before-and-after-each-too-many-listeners.js\n      ---\n      duration_ms: 1503.3862\n      ...\n    # Subtest: test-runner/output/before-and-after-each-with-timeout-too-many-listeners.js\n    ok 17 - test-runner/output/before-and-after-each-with-timeout-too-many-listeners.js\n      ---\n      duration_ms: 1099.4188\n      ...\n    # Subtest: test-runner/output/force_exit.js\n    ok 18 - test-runner/output/force_exit.js\n      ---\n      duration_ms: 1031.0879\n      ...\n    # Subtest: test-runner/output/global_after_should_fail_the_test.js\n    ok 19 - test-runner/output/global_after_should_fail_the_test.js\n      ---\n      duration_ms: 1021.6209\n      ...\n    # Subtest: test-runner/output/no_refs.js\n    not ok 20 - test-runner/output/no_refs.js\n      ---\n      duration_ms: 1786.4179\n      location: 'C:\\\\workspace\\\\node-test-binary-windows-js-suites\\\\node\\\\test\\\\parallel\\\\test-runner-output.mjs:155:5'\n      failureType: 'testCodeFailure'\n      error: |-\n        Expected values to be strictly equal:\n        + actual - expected ... Lines skipped\n        \n          'TAP version 13\\n' +\n            '# Subtest: does not keep event loop alive\\n' +\n        ...\n            \"      error: 'Promise resolution is still pending but the event loop has already resolved'\\n\" +\n            \"      code: 'ERR_TEST_FAILURE'\\n\" +\n        +   '      ...\\n' +\n        +   '    1..1\\n' +\n        +   'not ok 1 - does not keep event loop alive\\n' +\n        +   '  ---\\n' +\n        +   '  duration_ms: *\\n' +\n        +   \"  location: '/test/fixtures/test-runner/output/no_refs.js:(LINE):1'\\n\" +\n        +   \"  failureType: 'cancelledByParent'\\n\" +\n        +   \"  error: 'Promise resolution is still pending but the event loop has already resolved'\\n\" +\n        +   \"  code: 'ERR_TEST_FAILURE'\\n\" +\n        -   '      stack: |-\\n' +\n        -   '        *\\n' +\n        -   '      ...\\n' +\n        -   '    1..1\\n' +\n        -   'not ok 1 - does not keep event loop alive\\n' +\n        -   '  ---\\n' +\n        -   '  duration_ms: *\\n' +\n        -   \"  location: '/test/fixtures/test-runner/output/no_refs.js:(LINE):1'\\n\" +\n        -   \"  failureType: 'cancelledByParent'\\n\" +\n        -   \"  error: 'Promise resolution is still pending but the event loop has already resolved'\\n\" +\n        -   \"  code: 'ERR_TEST_FAILURE'\\n\" +\n        -   '  stack: |-\\n' +\n        -   '    *\\n' +\n            '  ...\\n' +\n        ...\n            '# skipped 0\\n' +\n            '# todo 0\\n' +\n            '# duration_ms *\\n'\n      code: 'ERR_ASSERTION'\n      name: 'AssertionError'\n      expected: |-\n        TAP version 13\n        # Subtest: does not keep event loop alive\n            # Subtest: +does not keep event loop alive\n            not ok 1 - +does not keep event loop alive\n              ---\n              duration_ms: *\n              location: '/test/fixtures/test-runner/output/no_refs.js:(LINE):11'\n              failureType: 'cancelledByParent'\n              error: 'Promise resolution is still pending but the event loop has already resolved'\n              code: 'ERR_TEST_FAILURE'\n              stack: |-\n                *\n              ...\n            1..1\n        not ok 1 - does not keep event loop alive\n          ---\n          duration_ms: *\n          location: '/test/fixtures/test-runner/output/no_refs.js:(LINE):1'\n          failureType: 'cancelledByParent'\n          error: 'Promise resolution is still pending but the event loop has already resolved'\n          code: 'ERR_TEST_FAILURE'\n          stack: |-\n            *\n          ...\n        1..1\n        # tests 2\n        # suites 0\n        # pass 0\n        # fail 0\n        # cancelled 2\n        # skipped 0\n        # todo 0\n        # duration_ms *\n        \n      actual: |-\n        TAP version 13\n        # Subtest: does not keep event loop alive\n            # Subtest: +does not keep event loop alive\n            not ok 1 - +does not keep event loop alive\n              ---\n              duration_ms: *\n              location: '/test/fixtures/test-runner/output/no_refs.js:(LINE):11'\n              failureType: 'cancelledByParent'\n              error: 'Promise resolution is still pending but the event loop has already resolved'\n              code: 'ERR_TEST_FAILURE'\n              ...\n            1..1\n        not ok 1 - does not keep event loop alive\n          ---\n          duration_ms: *\n          location: '/test/fixtures/test-runner/output/no_refs.js:(LINE):1'\n          failureType: 'cancelledByParent'\n          error: 'Promise resolution is still pending but the event loop has already resolved'\n          code: 'ERR_TEST_FAILURE'\n          ...\n        1..1\n        # tests 2\n        # suites 0\n        # pass 0\n        # fail 0\n        # cancelled 2\n        # skipped 0\n        # todo 0\n        # duration_ms *\n        \n      operator: 'strictEqual'\n      stack: |-\n        assertSnapshot (C:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:56:12)\n        async Module.spawnAndAssert (C:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:84:3)\n        async TestContext.<anonymous> (file:///C:/workspace/node-test-binary-windows-js-suites/node/test/parallel/test-runner-output.mjs:149:5)\n        async Test.run (node:internal/test_runner/test:748:9)\n        async Promise.all (index 19)\n        async Suite.run (node:internal/test_runner/test:1106:7)\n        async Test.processPendingSubtests (node:internal/test_runner/test:461:7)\n      ...\n    # Subtest: test-runner/output/no_tests.js\n    ok 21 - test-runner/output/no_tests.js\n      ---\n      duration_ms: 1063.1004\n      ...\n    # Subtest: test-runner/output/only_tests.js\n    ok 22 - test-runner/output/only_tests.js\n      ---\n      duration_ms: 1553.9142\n      ...\n    # Subtest: test-runner/output/dot_reporter.js\n    ok 23 - test-runner/output/dot_reporter.js\n      ---\n      duration_ms: 3285.0232\n      ...\n    # Subtest: test-runner/output/junit_reporter.js\n    not ok 24 - test-runner/output/junit_reporter.js\n      ---\n      duration_ms: 3303.2215\n      location: 'C:\\\\workspace\\\\node-test-binary-windows-js-suites\\\\node\\\\test\\\\parallel\\\\test-runner-output.mjs:155:5'\n      failureType: 'testCodeFailure'\n      error: |-\n        Expected values to be strictly equal:\n        + actual - expected ... Lines skipped\n        \n          '<?xml version=\"1.0\" encoding=\"utf-8\"?>\\n' +\n            '<testsuites>\\n' +\n        ...\n            '\\t\\t</failure>\\n' +\n            '\\t</testcase>\\n' +\n        +   '\\t<testcase name=\"callback called twice\" time=\"*\" '... 11376 more characters\n        -   '\\t<testcase name=\"callback called twice\" time=\"*\" '... 11392 more characters\n      code: 'ERR_ASSERTION'\n      name: 'AssertionError'\n      expected: |-\n        <?xml version=\"1.0\" encoding=\"utf-8\"?>\n        <testsuites>\n        \t<testcase name=\"sync pass todo\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"todo\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync pass todo with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"todo\" message=\"this is a passing todo\"/>\n        \t</testcase>\n        \t<testcase name=\"sync fail todo\" time=\"*\" classname=\"test\" failure=\"thrown from sync fail todo\">\n        \t\t<skipped type=\"todo\" message=\"true\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync fail todo\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync fail todo] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync fail todo\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync fail todo with message\" time=\"*\" classname=\"test\" failure=\"thrown from sync fail todo with message\">\n        \t\t<skipped type=\"todo\" message=\"this is a failing todo\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync fail todo with message\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync fail todo with message] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync fail todo with message\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync skip pass\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip pass with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"this is skipped\"/>\n        \t</testcase>\n        \t<testcase name=\"sync pass\" time=\"*\" classname=\"test\"/>\n        \t<!-- this test should pass -->\n        \t<testcase name=\"sync throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from sync throw fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async skip pass\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"async pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from async throw fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from async throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from async throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async skip fail\" time=\"*\" classname=\"test\" failure=\"thrown from async throw fail\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from async throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from async throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async assertion fail\" time=\"*\" classname=\"test\" failure=\"Expected values to be strictly equal:true !== false\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Expected values to be strictly equal:true !== false\">\n        [Error [ERR_TEST_FAILURE]: Expected values to be strictly equal:\n        \n        true !== false\n        ] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n          \n          true !== false\n          \n              *\n              *\n              *\n              *\n              *\n              *\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: true,\n            expected: false,\n            operator: 'strictEqual'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"resolve pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"reject fail\" time=\"*\" classname=\"test\" failure=\"rejected from reject fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"rejected from reject fail\">\n        [Error [ERR_TEST_FAILURE]: rejected from reject fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: rejected from reject fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unhandled rejection - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async unhandled rejection - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate throw - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate reject - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate resolve pass\" time=\"*\" classname=\"test\"/>\n        \t<testsuite name=\"subtest sync throw fail\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"1\" failures=\"1\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"+sync throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fail\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fail\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fail\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<!-- this subtest should make its parent test fail -->\n        \t</testsuite>\n        \t<testcase name=\"sync throw non-error fail\" time=\"*\" classname=\"test\" failure=\"Symbol(thrown symbol from sync throw non-error fail)\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Symbol(thrown symbol from sync throw non-error fail)\">\n        [Error [ERR_TEST_FAILURE]: Symbol(thrown symbol from sync throw non-error fail)] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: Symbol(thrown symbol from sync throw non-error fail) }\n        \t\t</failure>\n        \t</testcase>\n        \t<testsuite name=\"level 0a\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"4\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"level 1a\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1b\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1c\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1d\" time=\"*\" classname=\"test\"/>\n        \t</testsuite>\n        \t<testsuite name=\"top level\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"2\" failures=\"1\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"+long running\" time=\"*\" classname=\"test\" failure=\"test did not finish before its parent and was cancelled\">\n        \t\t\t<failure type=\"cancelledByParent\" message=\"test did not finish before its parent and was cancelled\">\n        [Error [ERR_TEST_FAILURE]: test did not finish before its parent and was cancelled] { code: 'ERR_TEST_FAILURE', failureType: 'cancelledByParent', cause: 'test did not finish before its parent and was cancelled' }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<testsuite name=\"+short running\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"1\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t\t<testcase name=\"++short running\" time=\"*\" classname=\"test\"/>\n        \t\t</testsuite>\n        \t</testsuite>\n        \t<testcase name=\"invalid subtest - pass but subtest fails\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"sync skip option\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip option with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"this is skipped\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip option is false fail\" time=\"*\" classname=\"test\" failure=\"this should be executed\">\n        \t\t<failure type=\"testCodeFailure\" message=\"this should be executed\">\n        [Error [ERR_TEST_FAILURE]: this should be executed] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: this should be executed\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"functionOnly\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"test with only a name provided\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"test with a name and options provided\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"functionAndOptions\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"callback pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback fail\" time=\"*\" classname=\"test\" failure=\"callback failure\">\n        \t\t<failure type=\"testCodeFailure\" message=\"callback failure\">\n        [Error [ERR_TEST_FAILURE]: callback failure] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: callback failure\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback also returns a Promise\" time=\"*\" classname=\"test\" failure=\"passed a callback but also returned a Promise\">\n        \t\t<failure type=\"callbackAndPromisePresent\" message=\"passed a callback but also returned a Promise\">\n        [Error [ERR_TEST_FAILURE]: passed a callback but also returned a Promise] { code: 'ERR_TEST_FAILURE', failureType: 'callbackAndPromisePresent', cause: 'passed a callback but also returned a Promise' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback throw\" time=\"*\" classname=\"test\" failure=\"thrown from callback throw\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from callback throw\">\n        [Error [ERR_TEST_FAILURE]: thrown from callback throw] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from callback throw\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback called twice\" time=\"*\" classname=\"test\" failure=\"callback invoked multiple times\">\n        \t\t<failure type=\"multipleCallbackInvocations\" message=\"callback invoked multiple times\">\n        Error [ERR_TEST_FAILURE]: callback invoked multiple times\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'multipleCallbackInvocations',\n          cause: 'callback invoked multiple times'\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback called twice in different ticks\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback called twice in future tick\" time=\"*\" classname=\"test\" failure=\"callback invoked multiple times\">\n        \t\t<failure type=\"uncaughtException\" message=\"callback invoked multiple times\">\n        Error [ERR_TEST_FAILURE]: callback invoked multiple times\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error [ERR_TEST_FAILURE]: callback invoked multiple times\n              * {\n            code: 'ERR_TEST_FAILURE',\n            failureType: 'multipleCallbackInvocations',\n            cause: 'callback invoked multiple times'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback async throw\" time=\"*\" classname=\"test\" failure=\"thrown from callback async throw\">\n        \t\t<failure type=\"uncaughtException\" message=\"thrown from callback async throw\">\n        Error [ERR_TEST_FAILURE]: thrown from callback async throw\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error: thrown from callback async throw\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback async throw after done\" time=\"*\" classname=\"test\"/>\n        \t<testsuite name=\"only is set but not in only mode\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"4\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"running subtest 1\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"running subtest 2\" time=\"*\" classname=\"test\"/>\n        \t\t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t\t<testcase name=\"running subtest 3\" time=\"*\" classname=\"test\"/>\n        \t\t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t\t<testcase name=\"running subtest 4\" time=\"*\" classname=\"test\"/>\n        \t</testsuite>\n        \t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t<testcase name=\"custom inspect symbol fail\" time=\"*\" classname=\"test\" failure=\"customized\">\n        \t\t<failure type=\"testCodeFailure\" message=\"customized\">\n        [Error [ERR_TEST_FAILURE]: customized] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: customized }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"custom inspect symbol that throws fail\" time=\"*\" classname=\"test\" failure=\"{  foo: 1,  [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]}\">\n        \t\t<failure type=\"testCodeFailure\" message=\"{  foo: 1,  [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]}\">\n        [Error [ERR_TEST_FAILURE]: {\n          foo: 1,\n          [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]\n        }] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: { foo: 1, [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]] }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testsuite name=\"subtest sync throw fails\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"2\" failures=\"2\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"sync throw fails at first\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fails at first\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fails at first\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fails at first\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fails at first\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<testcase name=\"sync throw fails at second\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fails at second\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fails at second\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fails at second\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fails at second\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t</testsuite>\n        \t<testcase name=\"timed out async test\" time=\"*\" classname=\"test\" failure=\"test timed out after 5ms\">\n        \t\t<failure type=\"testTimeoutFailure\" message=\"test timed out after 5ms\">\n        [Error [ERR_TEST_FAILURE]: test timed out after 5ms] { code: 'ERR_TEST_FAILURE', failureType: 'testTimeoutFailure', cause: 'test timed out after 5ms' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"timed out callback test\" time=\"*\" classname=\"test\" failure=\"test timed out after 5ms\">\n        \t\t<failure type=\"testTimeoutFailure\" message=\"test timed out after 5ms\">\n        [Error [ERR_TEST_FAILURE]: test timed out after 5ms] { code: 'ERR_TEST_FAILURE', failureType: 'testTimeoutFailure', cause: 'test timed out after 5ms' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"large timeout async test is ok\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"large timeout callback test is ok\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"successful thenable\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"rejected thenable\" time=\"*\" classname=\"test\" failure=\"custom error\">\n        \t\t<failure type=\"testCodeFailure\" message=\"custom error\">\n        [Error [ERR_TEST_FAILURE]: custom error] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: 'custom error' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unfinished test with uncaughtException\" time=\"*\" classname=\"test\" failure=\"foo\">\n        \t\t<failure type=\"uncaughtException\" message=\"foo\">\n        Error [ERR_TEST_FAILURE]: foo\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error: foo\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unfinished test with unhandledRejection\" time=\"*\" classname=\"test\" failure=\"bar\">\n        \t\t<failure type=\"unhandledRejection\" message=\"bar\">\n        Error [ERR_TEST_FAILURE]: bar\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'unhandledRejection',\n          cause: Error: bar\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"assertion errors display actual and expected properly\" time=\"*\" classname=\"test\" failure=\"Expected values to be loosely deep-equal:{  bar: 1,  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  foo: 1}should loosely deep-equal{  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  circular: &lt;ref *1> {    bar: 2,    c: [Circular *1]  }}\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Expected values to be loosely deep-equal:{  bar: 1,  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  foo: 1}should loosely deep-equal{  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  circular: &lt;ref *1> {    bar: 2,    c: [Circular *1]  }}\">\n        [Error [ERR_TEST_FAILURE]: Expected values to be loosely deep-equal:\n        \n        {\n          bar: 1,\n          baz: {\n            date: 1970-01-01T00:00:00.000Z,\n            null: null,\n            number: 1,\n            string: 'Hello',\n            undefined: undefined\n          },\n          boo: [\n            1\n          ],\n          foo: 1\n        }\n        \n        should loosely deep-equal\n        \n        {\n          baz: {\n            date: 1970-01-01T00:00:00.000Z,\n            null: null,\n            number: 1,\n            string: 'Hello',\n            undefined: undefined\n          },\n          boo: [\n            1\n          ],\n          circular: &lt;ref *1> {\n            bar: 2,\n            c: [Circular *1]\n          }\n        }] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n          \n          {\n            bar: 1,\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            foo: 1\n          }\n          \n          should loosely deep-equal\n          \n          {\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            circular: &lt;ref *1> {\n              bar: 2,\n              c: [Circular *1]\n            }\n          }\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: [Object],\n            expected: [Object],\n            operator: 'deepEqual'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"invalid subtest fail\" time=\"*\" classname=\"test\" failure=\"test could not be started because its parent finished\">\n        \t\t<failure type=\"parentAlreadyFinished\" message=\"test could not be started because its parent finished\">\n        Error [ERR_TEST_FAILURE]: test could not be started because its parent finished\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'parentAlreadyFinished',\n          cause: 'test could not be started because its parent finished'\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<!-- Error: Test \"unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:72:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: Test \"async unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:76:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from async unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: A resource generated asynchronous activity after the test ended. This activity created the error \"Error: uncaught from outside of a test\" which triggered an uncaughtException event, caught by the test runner. -->\n        \t<!-- Error: Test \"immediate throw - passes but warns\" at test/fixtures/test-runner/output/output.js:80:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from immediate throw fail\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- Error: Test \"immediate reject - passes but warns\" at test/fixtures/test-runner/output/output.js:86:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from immediate reject fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: Test \"callback called twice in different ticks\" at test/fixtures/test-runner/output/output.js:251:1 generated asynchronous activity after the test ended. This activity created the error \"Error [ERR_TEST_FAILURE]: callback invoked multiple times\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- Error: Test \"callback async throw after done\" at test/fixtures/test-runner/output/output.js:269:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from callback async throw after done\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- tests 76 -->\n        \t<!-- suites 0 -->\n        \t<!-- pass 35 -->\n        \t<!-- fail 25 -->\n        \t<!-- cancelled 3 -->\n        \t<!-- skipped 9 -->\n        \t<!-- todo 4 -->\n        \t<!-- duration_ms * -->\n        </testsuites>\n        \n      actual: |-\n        <?xml version=\"1.0\" encoding=\"utf-8\"?>\n        <testsuites>\n        \t<testcase name=\"sync pass todo\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"todo\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync pass todo with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"todo\" message=\"this is a passing todo\"/>\n        \t</testcase>\n        \t<testcase name=\"sync fail todo\" time=\"*\" classname=\"test\" failure=\"thrown from sync fail todo\">\n        \t\t<skipped type=\"todo\" message=\"true\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync fail todo\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync fail todo] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync fail todo\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync fail todo with message\" time=\"*\" classname=\"test\" failure=\"thrown from sync fail todo with message\">\n        \t\t<skipped type=\"todo\" message=\"this is a failing todo\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync fail todo with message\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync fail todo with message] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync fail todo with message\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync skip pass\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip pass with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"this is skipped\"/>\n        \t</testcase>\n        \t<testcase name=\"sync pass\" time=\"*\" classname=\"test\"/>\n        \t<!-- this test should pass -->\n        \t<testcase name=\"sync throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from sync throw fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async skip pass\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"async pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from async throw fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from async throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from async throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async skip fail\" time=\"*\" classname=\"test\" failure=\"thrown from async throw fail\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from async throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from async throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async assertion fail\" time=\"*\" classname=\"test\" failure=\"Expected values to be strictly equal:true !== false\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Expected values to be strictly equal:true !== false\">\n        [Error [ERR_TEST_FAILURE]: Expected values to be strictly equal:\n        \n        true !== false\n        ] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n          \n          true !== false\n          \n              *\n              *\n              *\n              *\n              *\n              *\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: true,\n            expected: false,\n            operator: 'strictEqual'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"resolve pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"reject fail\" time=\"*\" classname=\"test\" failure=\"rejected from reject fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"rejected from reject fail\">\n        [Error [ERR_TEST_FAILURE]: rejected from reject fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: rejected from reject fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unhandled rejection - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async unhandled rejection - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate throw - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate reject - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate resolve pass\" time=\"*\" classname=\"test\"/>\n        \t<testsuite name=\"subtest sync throw fail\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"1\" failures=\"1\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"+sync throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fail\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fail\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fail\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<!-- this subtest should make its parent test fail -->\n        \t</testsuite>\n        \t<testcase name=\"sync throw non-error fail\" time=\"*\" classname=\"test\" failure=\"Symbol(thrown symbol from sync throw non-error fail)\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Symbol(thrown symbol from sync throw non-error fail)\">\n        [Error [ERR_TEST_FAILURE]: Symbol(thrown symbol from sync throw non-error fail)] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: Symbol(thrown symbol from sync throw non-error fail) }\n        \t\t</failure>\n        \t</testcase>\n        \t<testsuite name=\"level 0a\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"4\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"level 1a\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1b\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1c\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1d\" time=\"*\" classname=\"test\"/>\n        \t</testsuite>\n        \t<testsuite name=\"top level\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"2\" failures=\"1\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"+long running\" time=\"*\" classname=\"test\" failure=\"test did not finish before its parent and was cancelled\">\n        \t\t\t<failure type=\"cancelledByParent\" message=\"test did not finish before its parent and was cancelled\">\n        [Error [ERR_TEST_FAILURE]: test did not finish before its parent and was cancelled] { code: 'ERR_TEST_FAILURE', failureType: 'cancelledByParent', cause: 'test did not finish before its parent and was cancelled' }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<testsuite name=\"+short running\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"1\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t\t<testcase name=\"++short running\" time=\"*\" classname=\"test\"/>\n        \t\t</testsuite>\n        \t</testsuite>\n        \t<testcase name=\"invalid subtest - pass but subtest fails\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"sync skip option\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip option with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"this is skipped\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip option is false fail\" time=\"*\" classname=\"test\" failure=\"this should be executed\">\n        \t\t<failure type=\"testCodeFailure\" message=\"this should be executed\">\n        [Error [ERR_TEST_FAILURE]: this should be executed] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: this should be executed\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"functionOnly\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"test with only a name provided\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"test with a name and options provided\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"functionAndOptions\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"callback pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback fail\" time=\"*\" classname=\"test\" failure=\"callback failure\">\n        \t\t<failure type=\"testCodeFailure\" message=\"callback failure\">\n        [Error [ERR_TEST_FAILURE]: callback failure] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: callback failure\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback also returns a Promise\" time=\"*\" classname=\"test\" failure=\"passed a callback but also returned a Promise\">\n        \t\t<failure type=\"callbackAndPromisePresent\" message=\"passed a callback but also returned a Promise\">\n        [Error [ERR_TEST_FAILURE]: passed a callback but also returned a Promise] { code: 'ERR_TEST_FAILURE', failureType: 'callbackAndPromisePresent', cause: 'passed a callback but also returned a Promise' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback throw\" time=\"*\" classname=\"test\" failure=\"thrown from callback throw\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from callback throw\">\n        [Error [ERR_TEST_FAILURE]: thrown from callback throw] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from callback throw\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback called twice\" time=\"*\" classname=\"test\" failure=\"callback invoked multiple times\">\n        \t\t<failure type=\"multipleCallbackInvocations\" message=\"callback invoked multiple times\">\n        Error [ERR_TEST_FAILURE]: callback invoked multiple times\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'multipleCallbackInvocations',\n          cause: 'callback invoked multiple times'\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback called twice in different ticks\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback called twice in future tick\" time=\"*\" classname=\"test\" failure=\"callback invoked multiple times\">\n        \t\t<failure type=\"uncaughtException\" message=\"callback invoked multiple times\">\n        [Error [ERR_TEST_FAILURE]: callback invoked multiple times] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error [ERR_TEST_FAILURE]: callback invoked multiple times\n              * {\n            code: 'ERR_TEST_FAILURE',\n            failureType: 'multipleCallbackInvocations',\n            cause: 'callback invoked multiple times'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback async throw\" time=\"*\" classname=\"test\" failure=\"thrown from callback async throw\">\n        \t\t<failure type=\"uncaughtException\" message=\"thrown from callback async throw\">\n        [Error [ERR_TEST_FAILURE]: thrown from callback async throw] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error: thrown from callback async throw\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback async throw after done\" time=\"*\" classname=\"test\"/>\n        \t<testsuite name=\"only is set but not in only mode\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"4\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"running subtest 1\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"running subtest 2\" time=\"*\" classname=\"test\"/>\n        \t\t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t\t<testcase name=\"running subtest 3\" time=\"*\" classname=\"test\"/>\n        \t\t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t\t<testcase name=\"running subtest 4\" time=\"*\" classname=\"test\"/>\n        \t</testsuite>\n        \t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t<testcase name=\"custom inspect symbol fail\" time=\"*\" classname=\"test\" failure=\"customized\">\n        \t\t<failure type=\"testCodeFailure\" message=\"customized\">\n        [Error [ERR_TEST_FAILURE]: customized] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: customized }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"custom inspect symbol that throws fail\" time=\"*\" classname=\"test\" failure=\"{  foo: 1,  [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]}\">\n        \t\t<failure type=\"testCodeFailure\" message=\"{  foo: 1,  [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]}\">\n        [Error [ERR_TEST_FAILURE]: {\n          foo: 1,\n          [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]\n        }] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: { foo: 1, [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]] }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testsuite name=\"subtest sync throw fails\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"2\" failures=\"2\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"sync throw fails at first\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fails at first\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fails at first\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fails at first\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fails at first\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<testcase name=\"sync throw fails at second\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fails at second\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fails at second\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fails at second\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fails at second\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t</testsuite>\n        \t<testcase name=\"timed out async test\" time=\"*\" classname=\"test\" failure=\"test timed out after 5ms\">\n        \t\t<failure type=\"testTimeoutFailure\" message=\"test timed out after 5ms\">\n        [Error [ERR_TEST_FAILURE]: test timed out after 5ms] { code: 'ERR_TEST_FAILURE', failureType: 'testTimeoutFailure', cause: 'test timed out after 5ms' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"timed out callback test\" time=\"*\" classname=\"test\" failure=\"test timed out after 5ms\">\n        \t\t<failure type=\"testTimeoutFailure\" message=\"test timed out after 5ms\">\n        [Error [ERR_TEST_FAILURE]: test timed out after 5ms] { code: 'ERR_TEST_FAILURE', failureType: 'testTimeoutFailure', cause: 'test timed out after 5ms' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"large timeout async test is ok\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"large timeout callback test is ok\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"successful thenable\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"rejected thenable\" time=\"*\" classname=\"test\" failure=\"custom error\">\n        \t\t<failure type=\"testCodeFailure\" message=\"custom error\">\n        [Error [ERR_TEST_FAILURE]: custom error] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: 'custom error' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unfinished test with uncaughtException\" time=\"*\" classname=\"test\" failure=\"foo\">\n        \t\t<failure type=\"uncaughtException\" message=\"foo\">\n        [Error [ERR_TEST_FAILURE]: foo] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error: foo\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unfinished test with unhandledRejection\" time=\"*\" classname=\"test\" failure=\"bar\">\n        \t\t<failure type=\"unhandledRejection\" message=\"bar\">\n        [Error [ERR_TEST_FAILURE]: bar] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'unhandledRejection',\n          cause: Error: bar\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"assertion errors display actual and expected properly\" time=\"*\" classname=\"test\" failure=\"Expected values to be loosely deep-equal:{  bar: 1,  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  foo: 1}should loosely deep-equal{  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  circular: &lt;ref *1> {    bar: 2,    c: [Circular *1]  }}\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Expected values to be loosely deep-equal:{  bar: 1,  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  foo: 1}should loosely deep-equal{  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  circular: &lt;ref *1> {    bar: 2,    c: [Circular *1]  }}\">\n        [Error [ERR_TEST_FAILURE]: Expected values to be loosely deep-equal:\n        \n        {\n          bar: 1,\n          baz: {\n            date: 1970-01-01T00:00:00.000Z,\n            null: null,\n            number: 1,\n            string: 'Hello',\n            undefined: undefined\n          },\n          boo: [\n            1\n          ],\n          foo: 1\n        }\n        \n        should loosely deep-equal\n        \n        {\n          baz: {\n            date: 1970-01-01T00:00:00.000Z,\n            null: null,\n            number: 1,\n            string: 'Hello',\n            undefined: undefined\n          },\n          boo: [\n            1\n          ],\n          circular: &lt;ref *1> {\n            bar: 2,\n            c: [Circular *1]\n          }\n        }] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n          \n          {\n            bar: 1,\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            foo: 1\n          }\n          \n          should loosely deep-equal\n          \n          {\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            circular: &lt;ref *1> {\n              bar: 2,\n              c: [Circular *1]\n            }\n          }\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: [Object],\n            expected: [Object],\n            operator: 'deepEqual'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"invalid subtest fail\" time=\"*\" classname=\"test\" failure=\"test could not be started because its parent finished\">\n        \t\t<failure type=\"parentAlreadyFinished\" message=\"test could not be started because its parent finished\">\n        Error [ERR_TEST_FAILURE]: test could not be started because its parent finished\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'parentAlreadyFinished',\n          cause: 'test could not be started because its parent finished'\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<!-- Error: Test \"unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:72:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: Test \"async unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:76:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from async unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: A resource generated asynchronous activity after the test ended. This activity created the error \"Error: uncaught from outside of a test\" which triggered an uncaughtException event, caught by the test runner. -->\n        \t<!-- Error: Test \"immediate throw - passes but warns\" at test/fixtures/test-runner/output/output.js:80:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from immediate throw fail\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- Error: Test \"immediate reject - passes but warns\" at test/fixtures/test-runner/output/output.js:86:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from immediate reject fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: Test \"callback called twice in different ticks\" at test/fixtures/test-runner/output/output.js:251:1 generated asynchronous activity after the test ended. This activity created the error \"Error [ERR_TEST_FAILURE]: callback invoked multiple times\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- Error: Test \"callback async throw after done\" at test/fixtures/test-runner/output/output.js:269:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from callback async throw after done\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- tests 76 -->\n        \t<!-- suites 0 -->\n        \t<!-- pass 35 -->\n        \t<!-- fail 25 -->\n        \t<!-- cancelled 3 -->\n        \t<!-- skipped 9 -->\n        \t<!-- todo 4 -->\n        \t<!-- duration_ms * -->\n        </testsuites>\n        \n      operator: 'strictEqual'\n      stack: |-\n        assertSnapshot (C:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:56:12)\n        async Module.spawnAndAssert (C:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:84:3)\n        async TestContext.<anonymous> (file:///C:/workspace/node-test-binary-windows-js-suites/node/test/parallel/test-runner-output.mjs:149:5)\n        async Test.run (node:internal/test_runner/test:748:9)\n        async Promise.all (index 23)\n        async Suite.run (node:internal/test_runner/test:1106:7)\n        async Test.processPendingSubtests (node:internal/test_runner/test:461:7)\n      ...\n    # Subtest: test-runner/output/spec_reporter_successful.js\n    ok 25 - test-runner/output/spec_reporter_successful.js\n      ---\n      duration_ms: 1308.0401\n      ...\n    # Subtest: test-runner/output/spec_reporter.js\n    ok 26 - test-runner/output/spec_reporter.js\n      ---\n      duration_ms: 3462.6006\n      ...\n    # Subtest: test-runner/output/spec_reporter_cli.js\n    ok 27 - test-runner/output/spec_reporter_cli.js\n      ---\n      duration_ms: 3845.0823\n      ...\n    # Subtest: test-runner/output/source_mapped_locations.mjs\n    ok 28 - test-runner/output/source_mapped_locations.mjs\n      ---\n      duration_ms: 1905.6669\n      ...\n    # Subtest: test-runner/output/lcov_reporter.js\n    ok 29 - test-runner/output/lcov_reporter.js\n      ---\n      duration_ms: 3065.1671\n      ...\n    # Subtest: test-runner/output/output.js\n    ok 30 - test-runner/output/output.js\n      ---\n      duration_ms: 2297.241\n      ...\n    # Subtest: test-runner/output/output_cli.js\n    ok 31 - test-runner/output/output_cli.js\n      ---\n      duration_ms: 3679.8915\n      ...\n    # Subtest: test-runner/output/name_and_skip_patterns.js\n    ok 32 - test-runner/output/name_and_skip_patterns.js\n      ---\n      duration_ms: 1584.7535\n      ...\n    # Subtest: test-runner/output/name_pattern.js\n    ok 33 - test-runner/output/name_pattern.js\n      ---\n      duration_ms: 1813.4225\n      ...\n    # Subtest: test-runner/output/name_pattern_with_only.js\n    ok 34 - test-runner/output/name_pattern_with_only.js\n      ---\n      duration_ms: 2698.099\n      ...\n    # Subtest: test-runner/output/skip_pattern.js\n    ok 35 - test-runner/output/skip_pattern.js\n      ---\n      duration_ms: 2711.5752\n      ...\n    # Subtest: test-runner/output/unfinished-suite-async-error.js\n    ok 36 - test-runner/output/unfinished-suite-async-error.js\n      ---\n      duration_ms: 2662.594\n      ...\n    # Subtest: test-runner/output/unresolved_promise.js\n    not ok 37 - test-runner/output/unresolved_promise.js\n      ---\n      duration_ms: 2545.429\n      location: 'C:\\\\workspace\\\\node-test-binary-windows-js-suites\\\\node\\\\test\\\\parallel\\\\test-runner-output.mjs:155:5'\n      failureType: 'testCodeFailure'\n      error: |-\n        Expected values to be strictly equal:\n        + actual - expected ... Lines skipped\n        \n          'TAP version 13\\n' +\n            '# Subtest: pass\\n' +\n        ...\n            \"  error: 'Promise resolution is still pending but the event loop has already resolved'\\n\" +\n            \"  code: 'ERR_TEST_FAILURE'\\n\" +\n        +   '  ...\\n' +\n        +   '# Subtest: fail\\n' +\n        +   'not ok 3 - fail\\n' +\n        +   '  ---\\n' +\n        +   '  duration_ms: *\\n' +\n        +   \"  location: '/test/fixtures/test-runner/output/unresolved_promise.js:(LINE):1'\\n\" +\n        +   \"  failureType: 'cancelledByParent'\\n\" +\n        +   \"  error: 'Promise resolution is still pending but the event loop has already resolved'\\n\" +\n        +   \"  code: 'ERR_TEST_FAILURE'\\n\" +\n        -   '  stack: |-\\n' +\n        -   '    *\\n' +\n        -   '  ...\\n' +\n        -   '# Subtest: fail\\n' +\n        -   'not ok 3 - fail\\n' +\n        -   '  ---\\n' +\n        -   '  duration_ms: *\\n' +\n        -   \"  location: '/test/fixtures/test-runner/output/unresolved_promise.js:(LINE):1'\\n\" +\n        -   \"  failureType: 'cancelledByParent'\\n\" +\n        -   \"  error: 'Promise resolution is still pending but the event loop has already resolved'\\n\" +\n        -   \"  code: 'ERR_TEST_FAILURE'\\n\" +\n        -   '  stack: |-\\n' +\n        -   '    *\\n' +\n            '  ...\\n' +\n        ...\n            '# skipped 0\\n' +\n            '# todo 0\\n' +\n            '# duration_ms *\\n'\n      code: 'ERR_ASSERTION'\n      name: 'AssertionError'\n      expected: |-\n        TAP version 13\n        # Subtest: pass\n        ok 1 - pass\n          ---\n          duration_ms: *\n          ...\n        # Subtest: never resolving promise\n        not ok 2 - never resolving promise\n          ---\n          duration_ms: *\n          location: '/test/fixtures/test-runner/output/unresolved_promise.js:(LINE):1'\n          failureType: 'cancelledByParent'\n          error: 'Promise resolution is still pending but the event loop has already resolved'\n          code: 'ERR_TEST_FAILURE'\n          stack: |-\n            *\n          ...\n        # Subtest: fail\n        not ok 3 - fail\n          ---\n          duration_ms: *\n          location: '/test/fixtures/test-runner/output/unresolved_promise.js:(LINE):1'\n          failureType: 'cancelledByParent'\n          error: 'Promise resolution is still pending but the event loop has already resolved'\n          code: 'ERR_TEST_FAILURE'\n          stack: |-\n            *\n          ...\n        1..3\n        # tests 3\n        # suites 0\n        # pass 1\n        # fail 0\n        # cancelled 2\n        # skipped 0\n        # todo 0\n        # duration_ms *\n        \n      actual: |-\n        TAP version 13\n        # Subtest: pass\n        ok 1 - pass\n          ---\n          duration_ms: *\n          ...\n        # Subtest: never resolving promise\n        not ok 2 - never resolving promise\n          ---\n          duration_ms: *\n          location: '/test/fixtures/test-runner/output/unresolved_promise.js:(LINE):1'\n          failureType: 'cancelledByParent'\n          error: 'Promise resolution is still pending but the event loop has already resolved'\n          code: 'ERR_TEST_FAILURE'\n          ...\n        # Subtest: fail\n        not ok 3 - fail\n          ---\n          duration_ms: *\n          location: '/test/fixtures/test-runner/output/unresolved_promise.js:(LINE):1'\n          failureType: 'cancelledByParent'\n          error: 'Promise resolution is still pending but the event loop has already resolved'\n          code: 'ERR_TEST_FAILURE'\n          ...\n        1..3\n        # tests 3\n        # suites 0\n        # pass 1\n        # fail 0\n        # cancelled 2\n        # skipped 0\n        # todo 0\n        # duration_ms *\n        \n      operator: 'strictEqual'\n      stack: |-\n        assertSnapshot (C:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:56:12)\n        async Module.spawnAndAssert (C:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:84:3)\n        async TestContext.<anonymous> (file:///C:/workspace/node-test-binary-windows-js-suites/node/test/parallel/test-runner-output.mjs:149:5)\n        async Test.run (node:internal/test_runner/test:748:9)\n        async Promise.all (index 36)\n        async Suite.run (node:internal/test_runner/test:1106:7)\n        async Test.processPendingSubtests (node:internal/test_runner/test:461:7)\n      ...\n    # Subtest: test-runner/output/default_output.js\n        # Subtest: <anonymous>\n        ok 1 - <anonymous> # SKIP Skipping pseudo-tty tests, as pseudo terminals are not available on Windows.\n          ---\n          duration_ms: 82.6965\n          ...\n        1..1\n    ok 38 - test-runner/output/default_output.js\n      ---\n      duration_ms: 84.7494\n      ...\n    # Subtest: test-runner/output/arbitrary-output.js\n    ok 39 - test-runner/output/arbitrary-output.js\n      ---\n      duration_ms: 3012.0052\n      ...\n    # Subtest: test-runner/output/async-test-scheduling.mjs\n    ok 40 - test-runner/output/async-test-scheduling.mjs\n      ---\n      duration_ms: 2825.6137\n      ...\n    # Subtest: test-runner/output/arbitrary-output-colored.js\n        # Subtest: <anonymous>\n        ok 1 - <anonymous> # SKIP Skipping pseudo-tty tests, as pseudo terminals are not available on Windows.\n          ---\n          duration_ms: 35.7283\n          ...\n        1..1\n    ok 41 - test-runner/output/arbitrary-output-colored.js\n      ---\n      duration_ms: 41.9074\n      ...\n    # Subtest: test-runner/output/dot_output_custom_columns.js\n        # Subtest: <anonymous>\n        ok 1 - <anonymous> # SKIP Skipping pseudo-tty tests, as pseudo terminals are not available on Windows.\n          ---\n          duration_ms: 35.5802\n          ...\n        1..1\n    ok 42 - test-runner/output/dot_output_custom_columns.js\n      ---\n      duration_ms: 41.7917\n      ...\n    # Subtest: test-runner/output/tap_escape.js\n    ok 43 - test-runner/output/tap_escape.js\n      ---\n      duration_ms: 2528.4392\n      ...\n    # Subtest: test-runner/output/coverage_failure.js\n    ok 44 - test-runner/output/coverage_failure.js\n      ---\n      duration_ms: 2512.6222\n      ...\n    1..44\nnot ok 1 - test runner output\n  ---\n  duration_ms: 4361.283\n  type: 'suite'\n  location: 'C:\\\\workspace\\\\node-test-binary-windows-js-suites\\\\node\\\\test\\\\parallel\\\\test-runner-output.mjs:153:1'\n  failureType: 'subtestsFailed'\n  error: '3 subtests failed'\n  code: 'ERR_TEST_FAILURE'\n  ...\n1..1\n# tests 47\n# suites 1\n# pass 41\n# fail 3\n# cancelled 0\n# skipped 3\n# todo 0\n# duration_ms 4388.6615"},"time":4998.085,"fullname":"parallel/test-runner-output","closingTestPoint":false}},{"testName":"message/stdin_messages","timestamp":1714660669261,"status":"FAILED","jobName":"node-test-binary-windows-js-suites","config":"node-test-binary-windows-js-suites » 3,win11-arm64-COMPILED_BY-vs2022-arm64 #27525","buildUrl":"https://ci.nodejs.org/job/node-test-binary-windows-js-suites/RUN_SUBSET=3,nodes=win11-arm64-COMPILED_BY-vs2022-arm64/27525/","buildNumber":27525,"builtOn":"test-azure_msft-win11_vs2022-arm64-4","nodeVersion":"23.0.0","commitHash":"3a49bfd9b001e550acf99afcb74b31d6885de874","callStack":[{"upstreamBuild":62664,"upstreamProject":"node-test-commit-windows-fanned","upstreamUrl":"job/node-test-commit-windows-fanned/"},{"upstreamBuild":70433,"upstreamProject":"node-test-commit","upstreamUrl":"job/node-test-commit/"},{"upstreamBuild":58865,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"prId":"52733"}],"tap":{"ok":false,"name":"message/stdin_messages","id":94,"buffered":false,"tapError":null,"skip":false,"todo":false,"previous":null,"plan":null,"diag":{"severity":"fail","stack":"[stdin]\n[stdin]:1\nwith(this){__filename}\n^^^^\n\nSyntaxError: Strict mode code may not include a with statement\n    at makeContextifyScript (node:internal/vm:185:14)\n    at node:internal/process/execution:107:22\n    at [stdin]-wrapper:6:24\n    at runScript (node:internal/process/execution:101:62)\n    at evalScript (node:internal/process/execution:136:3)\n    at node:internal/main/eval_stdin:32:5\n    at Socket.<anonymous> (node:internal/process/execution:237:5)\n    at SlowEventEmitter.emit (node:internal/events/slow_event_emitter:110:35)\n    at Socket.emit (node:internal/events/event_emitter:443:41)\n    at endReadableNT (node:internal/streams/readable:1700:12)\n\nNode.js v23.0.0-pre\n42\n42\n[stdin]:1\nthrow new Error(\"hello\")\n^\n\nError: hello\n    at [stdin]:1:7\n    at runScriptInThisContext (node:internal/vm:209:10)\n    at node:internal/process/execution:118:14\n    at [stdin]-wrapper:6:24\n    at runScript (node:internal/process/execution:101:62)\n    at evalScript (node:internal/process/execution:136:3)\n    at node:internal/main/eval_stdin:32:5\n    at Socket.<anonymous> (node:internal/process/execution:237:5)\n    at SlowEventEmitter.emit (node:internal/events/slow_event_emitter:110:35)\n    at Socket.emit (node:internal/events/event_emitter:443:41)\n\nNode.js v23.0.0-pre\n[stdin]:1\nthrow new Error(\"hello\")\n^\n\nError: hello\n    at [stdin]:1:7\n    at runScriptInThisContext (node:internal/vm:209:10)\n    at node:internal/process/execution:118:14\n    at [stdin]-wrapper:6:24\n    at runScript (node:internal/process/execution:101:62)\n    at evalScript (node:internal/process/execution:136:3)\n    at node:internal/main/eval_stdin:32:5\n    at Socket.<anonymous> (node:internal/process/execution:237:5)\n    at SlowEventEmitter.emit (node:internal/events/slow_event_emitter:110:35)\n    at Socket.emit (node:internal/events/event_emitter:443:41)\n\nNode.js v23.0.0-pre\n100\n[stdin]:1\nlet x = 100; y = x;\n               ^\n\nReferenceError: y is not defined\n    at [stdin]:1:16\n    at runScriptInThisContext (node:internal/vm:209:10)\n    at node:internal/process/execution:118:14\n    at [stdin]-wrapper:6:24\n    at runScript (node:internal/process/execution:101:62)\n    at evalScript (node:internal/process/execution:136:3)\n    at node:internal/main/eval_stdin:32:5\n    at Socket.<anonymous> (node:internal/process/execution:237:5)\n    at SlowEventEmitter.emit (node:internal/events/slow_event_emitter:110:35)\n    at Socket.emit (node:internal/events/event_emitter:443:41)\n\nNode.js v23.0.0-pre\n\n[stdin]:1\nlet ______________________________________________; throw 10\n                                                    ^\n10\n(Use `node --trace-uncaught ...` to show where the exception was thrown)\n\nNode.js v23.0.0-pre\n\n[stdin]:1\nlet ______________________________________________; throw 10\n                                                    ^\n10\n(Use `node --trace-uncaught ...` to show where the exception was thrown)\n\nNode.js v23.0.0-pre\ndone"},"time":2185.003,"fullname":"message/stdin_messages","closingTestPoint":false}},{"testName":"parallel/test-runner-output","timestamp":1714660669261,"status":"FAILED","jobName":"node-test-binary-windows-js-suites","config":"node-test-binary-windows-js-suites » 3,win11-arm64-COMPILED_BY-vs2022-arm64 #27525","buildUrl":"https://ci.nodejs.org/job/node-test-binary-windows-js-suites/RUN_SUBSET=3,nodes=win11-arm64-COMPILED_BY-vs2022-arm64/27525/","buildNumber":27525,"builtOn":"test-azure_msft-win11_vs2022-arm64-4","nodeVersion":"23.0.0","commitHash":"3a49bfd9b001e550acf99afcb74b31d6885de874","callStack":[{"upstreamBuild":62664,"upstreamProject":"node-test-commit-windows-fanned","upstreamUrl":"job/node-test-commit-windows-fanned/"},{"upstreamBuild":70433,"upstreamProject":"node-test-commit","upstreamUrl":"job/node-test-commit/"},{"upstreamBuild":58865,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"prId":"52733"}],"tap":{"ok":false,"name":"parallel/test-runner-output","id":677,"buffered":false,"tapError":null,"skip":false,"todo":false,"previous":null,"plan":null,"diag":{"severity":"fail","exitcode":1,"stack":"TAP version 13\n# Subtest: test runner output\n    # Subtest: test-runner/output/abort.js\n    ok 1 - test-runner/output/abort.js\n      ---\n      duration_ms: 2032.1529\n      ...\n    # Subtest: test-runner/output/abort_suite.js\n    ok 2 - test-runner/output/abort_suite.js\n      ---\n      duration_ms: 1935.8559\n      ...\n    # Subtest: test-runner/output/abort_hooks.js\n    ok 3 - test-runner/output/abort_hooks.js\n      ---\n      duration_ms: 1023.9755\n      ...\n    # Subtest: test-runner/output/describe_it.js\n    ok 4 - test-runner/output/describe_it.js\n      ---\n      duration_ms: 2824.7266\n      ...\n    # Subtest: test-runner/output/describe_nested.js\n    ok 5 - test-runner/output/describe_nested.js\n      ---\n      duration_ms: 1466.0013\n      ...\n    # Subtest: test-runner/output/eval_dot.js\n    ok 6 - test-runner/output/eval_dot.js\n      ---\n      duration_ms: 1301.023\n      ...\n    # Subtest: test-runner/output/eval_spec.js\n    ok 7 - test-runner/output/eval_spec.js\n      ---\n      duration_ms: 1447.199\n      ...\n    # Subtest: test-runner/output/eval_tap.js\n    ok 8 - test-runner/output/eval_tap.js\n      ---\n      duration_ms: 1700.659\n      ...\n    # Subtest: test-runner/output/hooks.js\n    ok 9 - test-runner/output/hooks.js\n      ---\n      duration_ms: 1867.9387\n      ...\n    # Subtest: test-runner/output/hooks_spec_reporter.js\n    ok 10 - test-runner/output/hooks_spec_reporter.js\n      ---\n      duration_ms: 3900.1976\n      ...\n    # Subtest: test-runner/output/skip-each-hooks.js\n    ok 11 - test-runner/output/skip-each-hooks.js\n      ---\n      duration_ms: 1253.3936\n      ...\n    # Subtest: test-runner/output/suite-skip-hooks.js\n    ok 12 - test-runner/output/suite-skip-hooks.js\n      ---\n      duration_ms: 2668.6409\n      ...\n    # Subtest: test-runner/output/timeout_in_before_each_should_not_affect_further_tests.js\n    ok 13 - test-runner/output/timeout_in_before_each_should_not_affect_further_tests.js\n      ---\n      duration_ms: 2950.8896\n      ...\n    # Subtest: test-runner/output/hooks-with-no-global-test.js\n    ok 14 - test-runner/output/hooks-with-no-global-test.js\n      ---\n      duration_ms: 1381.1043\n      ...\n    # Subtest: test-runner/output/global-hooks-with-no-tests.js\n    ok 15 - test-runner/output/global-hooks-with-no-tests.js\n      ---\n      duration_ms: 1709.9921\n      ...\n    # Subtest: test-runner/output/before-and-after-each-too-many-listeners.js\n    ok 16 - test-runner/output/before-and-after-each-too-many-listeners.js\n      ---\n      duration_ms: 2631.1591\n      ...\n    # Subtest: test-runner/output/before-and-after-each-with-timeout-too-many-listeners.js\n    ok 17 - test-runner/output/before-and-after-each-with-timeout-too-many-listeners.js\n      ---\n      duration_ms: 1615.7276\n      ...\n    # Subtest: test-runner/output/force_exit.js\n    ok 18 - test-runner/output/force_exit.js\n      ---\n      duration_ms: 2202.6999\n      ...\n    # Subtest: test-runner/output/global_after_should_fail_the_test.js\n    ok 19 - test-runner/output/global_after_should_fail_the_test.js\n      ---\n      duration_ms: 2975.037\n      ...\n    # Subtest: test-runner/output/no_refs.js\n    not ok 20 - test-runner/output/no_refs.js\n      ---\n      duration_ms: 2027.1236\n      location: 'd:\\\\workspace\\\\node-test-binary-windows-js-suites\\\\node\\\\test\\\\parallel\\\\test-runner-output.mjs:155:5'\n      failureType: 'testCodeFailure'\n      error: |-\n        Expected values to be strictly equal:\n        + actual - expected ... Lines skipped\n        \n          'TAP version 13\\n' +\n            '# Subtest: does not keep event loop alive\\n' +\n        ...\n            \"      error: 'Promise resolution is still pending but the event loop has already resolved'\\n\" +\n            \"      code: 'ERR_TEST_FAILURE'\\n\" +\n        +   '      ...\\n' +\n        +   '    1..1\\n' +\n        +   'not ok 1 - does not keep event loop alive\\n' +\n        +   '  ---\\n' +\n        +   '  duration_ms: *\\n' +\n        +   \"  location: '/test/fixtures/test-runner/output/no_refs.js:(LINE):1'\\n\" +\n        +   \"  failureType: 'cancelledByParent'\\n\" +\n        +   \"  error: 'Promise resolution is still pending but the event loop has already resolved'\\n\" +\n        +   \"  code: 'ERR_TEST_FAILURE'\\n\" +\n        -   '      stack: |-\\n' +\n        -   '        *\\n' +\n        -   '      ...\\n' +\n        -   '    1..1\\n' +\n        -   'not ok 1 - does not keep event loop alive\\n' +\n        -   '  ---\\n' +\n        -   '  duration_ms: *\\n' +\n        -   \"  location: '/test/fixtures/test-runner/output/no_refs.js:(LINE):1'\\n\" +\n        -   \"  failureType: 'cancelledByParent'\\n\" +\n        -   \"  error: 'Promise resolution is still pending but the event loop has already resolved'\\n\" +\n        -   \"  code: 'ERR_TEST_FAILURE'\\n\" +\n        -   '  stack: |-\\n' +\n        -   '    *\\n' +\n            '  ...\\n' +\n        ...\n            '# skipped 0\\n' +\n            '# todo 0\\n' +\n            '# duration_ms *\\n'\n      code: 'ERR_ASSERTION'\n      name: 'AssertionError'\n      expected: |-\n        TAP version 13\n        # Subtest: does not keep event loop alive\n            # Subtest: +does not keep event loop alive\n            not ok 1 - +does not keep event loop alive\n              ---\n              duration_ms: *\n              location: '/test/fixtures/test-runner/output/no_refs.js:(LINE):11'\n              failureType: 'cancelledByParent'\n              error: 'Promise resolution is still pending but the event loop has already resolved'\n              code: 'ERR_TEST_FAILURE'\n              stack: |-\n                *\n              ...\n            1..1\n        not ok 1 - does not keep event loop alive\n          ---\n          duration_ms: *\n          location: '/test/fixtures/test-runner/output/no_refs.js:(LINE):1'\n          failureType: 'cancelledByParent'\n          error: 'Promise resolution is still pending but the event loop has already resolved'\n          code: 'ERR_TEST_FAILURE'\n          stack: |-\n            *\n          ...\n        1..1\n        # tests 2\n        # suites 0\n        # pass 0\n        # fail 0\n        # cancelled 2\n        # skipped 0\n        # todo 0\n        # duration_ms *\n        \n      actual: |-\n        TAP version 13\n        # Subtest: does not keep event loop alive\n            # Subtest: +does not keep event loop alive\n            not ok 1 - +does not keep event loop alive\n              ---\n              duration_ms: *\n              location: '/test/fixtures/test-runner/output/no_refs.js:(LINE):11'\n              failureType: 'cancelledByParent'\n              error: 'Promise resolution is still pending but the event loop has already resolved'\n              code: 'ERR_TEST_FAILURE'\n              ...\n            1..1\n        not ok 1 - does not keep event loop alive\n          ---\n          duration_ms: *\n          location: '/test/fixtures/test-runner/output/no_refs.js:(LINE):1'\n          failureType: 'cancelledByParent'\n          error: 'Promise resolution is still pending but the event loop has already resolved'\n          code: 'ERR_TEST_FAILURE'\n          ...\n        1..1\n        # tests 2\n        # suites 0\n        # pass 0\n        # fail 0\n        # cancelled 2\n        # skipped 0\n        # todo 0\n        # duration_ms *\n        \n      operator: 'strictEqual'\n      stack: |-\n        assertSnapshot (d:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:56:12)\n        async Module.spawnAndAssert (d:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:84:3)\n        async TestContext.<anonymous> (file:///d:/workspace/node-test-binary-windows-js-suites/node/test/parallel/test-runner-output.mjs:149:5)\n        async Test.run (node:internal/test_runner/test:748:9)\n        async Promise.all (index 19)\n        async Suite.run (node:internal/test_runner/test:1106:7)\n        async Test.processPendingSubtests (node:internal/test_runner/test:461:7)\n      ...\n    # Subtest: test-runner/output/no_tests.js\n    ok 21 - test-runner/output/no_tests.js\n      ---\n      duration_ms: 2582.7997\n      ...\n    # Subtest: test-runner/output/only_tests.js\n    ok 22 - test-runner/output/only_tests.js\n      ---\n      duration_ms: 2008.0981\n      ...\n    # Subtest: test-runner/output/dot_reporter.js\n    ok 23 - test-runner/output/dot_reporter.js\n      ---\n      duration_ms: 3968.2742\n      ...\n    # Subtest: test-runner/output/junit_reporter.js\n    not ok 24 - test-runner/output/junit_reporter.js\n      ---\n      duration_ms: 4178.8059\n      location: 'd:\\\\workspace\\\\node-test-binary-windows-js-suites\\\\node\\\\test\\\\parallel\\\\test-runner-output.mjs:155:5'\n      failureType: 'testCodeFailure'\n      error: |-\n        Expected values to be strictly equal:\n        + actual - expected ... Lines skipped\n        \n          '<?xml version=\"1.0\" encoding=\"utf-8\"?>\\n' +\n            '<testsuites>\\n' +\n        ...\n            '\\t\\t</failure>\\n' +\n            '\\t</testcase>\\n' +\n        +   '\\t<testcase name=\"callback called twice\" time=\"*\" '... 11376 more characters\n        -   '\\t<testcase name=\"callback called twice\" time=\"*\" '... 11392 more characters\n      code: 'ERR_ASSERTION'\n      name: 'AssertionError'\n      expected: |-\n        <?xml version=\"1.0\" encoding=\"utf-8\"?>\n        <testsuites>\n        \t<testcase name=\"sync pass todo\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"todo\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync pass todo with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"todo\" message=\"this is a passing todo\"/>\n        \t</testcase>\n        \t<testcase name=\"sync fail todo\" time=\"*\" classname=\"test\" failure=\"thrown from sync fail todo\">\n        \t\t<skipped type=\"todo\" message=\"true\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync fail todo\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync fail todo] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync fail todo\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync fail todo with message\" time=\"*\" classname=\"test\" failure=\"thrown from sync fail todo with message\">\n        \t\t<skipped type=\"todo\" message=\"this is a failing todo\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync fail todo with message\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync fail todo with message] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync fail todo with message\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync skip pass\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip pass with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"this is skipped\"/>\n        \t</testcase>\n        \t<testcase name=\"sync pass\" time=\"*\" classname=\"test\"/>\n        \t<!-- this test should pass -->\n        \t<testcase name=\"sync throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from sync throw fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async skip pass\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"async pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from async throw fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from async throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from async throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async skip fail\" time=\"*\" classname=\"test\" failure=\"thrown from async throw fail\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from async throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from async throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async assertion fail\" time=\"*\" classname=\"test\" failure=\"Expected values to be strictly equal:true !== false\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Expected values to be strictly equal:true !== false\">\n        [Error [ERR_TEST_FAILURE]: Expected values to be strictly equal:\n        \n        true !== false\n        ] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n          \n          true !== false\n          \n              *\n              *\n              *\n              *\n              *\n              *\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: true,\n            expected: false,\n            operator: 'strictEqual'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"resolve pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"reject fail\" time=\"*\" classname=\"test\" failure=\"rejected from reject fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"rejected from reject fail\">\n        [Error [ERR_TEST_FAILURE]: rejected from reject fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: rejected from reject fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unhandled rejection - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async unhandled rejection - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate throw - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate reject - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate resolve pass\" time=\"*\" classname=\"test\"/>\n        \t<testsuite name=\"subtest sync throw fail\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"1\" failures=\"1\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"+sync throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fail\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fail\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fail\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<!-- this subtest should make its parent test fail -->\n        \t</testsuite>\n        \t<testcase name=\"sync throw non-error fail\" time=\"*\" classname=\"test\" failure=\"Symbol(thrown symbol from sync throw non-error fail)\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Symbol(thrown symbol from sync throw non-error fail)\">\n        [Error [ERR_TEST_FAILURE]: Symbol(thrown symbol from sync throw non-error fail)] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: Symbol(thrown symbol from sync throw non-error fail) }\n        \t\t</failure>\n        \t</testcase>\n        \t<testsuite name=\"level 0a\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"4\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"level 1a\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1b\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1c\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1d\" time=\"*\" classname=\"test\"/>\n        \t</testsuite>\n        \t<testsuite name=\"top level\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"2\" failures=\"1\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"+long running\" time=\"*\" classname=\"test\" failure=\"test did not finish before its parent and was cancelled\">\n        \t\t\t<failure type=\"cancelledByParent\" message=\"test did not finish before its parent and was cancelled\">\n        [Error [ERR_TEST_FAILURE]: test did not finish before its parent and was cancelled] { code: 'ERR_TEST_FAILURE', failureType: 'cancelledByParent', cause: 'test did not finish before its parent and was cancelled' }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<testsuite name=\"+short running\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"1\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t\t<testcase name=\"++short running\" time=\"*\" classname=\"test\"/>\n        \t\t</testsuite>\n        \t</testsuite>\n        \t<testcase name=\"invalid subtest - pass but subtest fails\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"sync skip option\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip option with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"this is skipped\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip option is false fail\" time=\"*\" classname=\"test\" failure=\"this should be executed\">\n        \t\t<failure type=\"testCodeFailure\" message=\"this should be executed\">\n        [Error [ERR_TEST_FAILURE]: this should be executed] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: this should be executed\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"functionOnly\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"test with only a name provided\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"test with a name and options provided\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"functionAndOptions\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"callback pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback fail\" time=\"*\" classname=\"test\" failure=\"callback failure\">\n        \t\t<failure type=\"testCodeFailure\" message=\"callback failure\">\n        [Error [ERR_TEST_FAILURE]: callback failure] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: callback failure\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback also returns a Promise\" time=\"*\" classname=\"test\" failure=\"passed a callback but also returned a Promise\">\n        \t\t<failure type=\"callbackAndPromisePresent\" message=\"passed a callback but also returned a Promise\">\n        [Error [ERR_TEST_FAILURE]: passed a callback but also returned a Promise] { code: 'ERR_TEST_FAILURE', failureType: 'callbackAndPromisePresent', cause: 'passed a callback but also returned a Promise' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback throw\" time=\"*\" classname=\"test\" failure=\"thrown from callback throw\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from callback throw\">\n        [Error [ERR_TEST_FAILURE]: thrown from callback throw] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from callback throw\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback called twice\" time=\"*\" classname=\"test\" failure=\"callback invoked multiple times\">\n        \t\t<failure type=\"multipleCallbackInvocations\" message=\"callback invoked multiple times\">\n        Error [ERR_TEST_FAILURE]: callback invoked multiple times\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'multipleCallbackInvocations',\n          cause: 'callback invoked multiple times'\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback called twice in different ticks\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback called twice in future tick\" time=\"*\" classname=\"test\" failure=\"callback invoked multiple times\">\n        \t\t<failure type=\"uncaughtException\" message=\"callback invoked multiple times\">\n        Error [ERR_TEST_FAILURE]: callback invoked multiple times\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error [ERR_TEST_FAILURE]: callback invoked multiple times\n              * {\n            code: 'ERR_TEST_FAILURE',\n            failureType: 'multipleCallbackInvocations',\n            cause: 'callback invoked multiple times'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback async throw\" time=\"*\" classname=\"test\" failure=\"thrown from callback async throw\">\n        \t\t<failure type=\"uncaughtException\" message=\"thrown from callback async throw\">\n        Error [ERR_TEST_FAILURE]: thrown from callback async throw\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error: thrown from callback async throw\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback async throw after done\" time=\"*\" classname=\"test\"/>\n        \t<testsuite name=\"only is set but not in only mode\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"4\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"running subtest 1\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"running subtest 2\" time=\"*\" classname=\"test\"/>\n        \t\t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t\t<testcase name=\"running subtest 3\" time=\"*\" classname=\"test\"/>\n        \t\t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t\t<testcase name=\"running subtest 4\" time=\"*\" classname=\"test\"/>\n        \t</testsuite>\n        \t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t<testcase name=\"custom inspect symbol fail\" time=\"*\" classname=\"test\" failure=\"customized\">\n        \t\t<failure type=\"testCodeFailure\" message=\"customized\">\n        [Error [ERR_TEST_FAILURE]: customized] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: customized }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"custom inspect symbol that throws fail\" time=\"*\" classname=\"test\" failure=\"{  foo: 1,  [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]}\">\n        \t\t<failure type=\"testCodeFailure\" message=\"{  foo: 1,  [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]}\">\n        [Error [ERR_TEST_FAILURE]: {\n          foo: 1,\n          [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]\n        }] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: { foo: 1, [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]] }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testsuite name=\"subtest sync throw fails\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"2\" failures=\"2\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"sync throw fails at first\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fails at first\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fails at first\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fails at first\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fails at first\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<testcase name=\"sync throw fails at second\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fails at second\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fails at second\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fails at second\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fails at second\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t</testsuite>\n        \t<testcase name=\"timed out async test\" time=\"*\" classname=\"test\" failure=\"test timed out after 5ms\">\n        \t\t<failure type=\"testTimeoutFailure\" message=\"test timed out after 5ms\">\n        [Error [ERR_TEST_FAILURE]: test timed out after 5ms] { code: 'ERR_TEST_FAILURE', failureType: 'testTimeoutFailure', cause: 'test timed out after 5ms' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"timed out callback test\" time=\"*\" classname=\"test\" failure=\"test timed out after 5ms\">\n        \t\t<failure type=\"testTimeoutFailure\" message=\"test timed out after 5ms\">\n        [Error [ERR_TEST_FAILURE]: test timed out after 5ms] { code: 'ERR_TEST_FAILURE', failureType: 'testTimeoutFailure', cause: 'test timed out after 5ms' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"large timeout async test is ok\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"large timeout callback test is ok\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"successful thenable\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"rejected thenable\" time=\"*\" classname=\"test\" failure=\"custom error\">\n        \t\t<failure type=\"testCodeFailure\" message=\"custom error\">\n        [Error [ERR_TEST_FAILURE]: custom error] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: 'custom error' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unfinished test with uncaughtException\" time=\"*\" classname=\"test\" failure=\"foo\">\n        \t\t<failure type=\"uncaughtException\" message=\"foo\">\n        Error [ERR_TEST_FAILURE]: foo\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error: foo\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unfinished test with unhandledRejection\" time=\"*\" classname=\"test\" failure=\"bar\">\n        \t\t<failure type=\"unhandledRejection\" message=\"bar\">\n        Error [ERR_TEST_FAILURE]: bar\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'unhandledRejection',\n          cause: Error: bar\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"assertion errors display actual and expected properly\" time=\"*\" classname=\"test\" failure=\"Expected values to be loosely deep-equal:{  bar: 1,  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  foo: 1}should loosely deep-equal{  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  circular: &lt;ref *1> {    bar: 2,    c: [Circular *1]  }}\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Expected values to be loosely deep-equal:{  bar: 1,  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  foo: 1}should loosely deep-equal{  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  circular: &lt;ref *1> {    bar: 2,    c: [Circular *1]  }}\">\n        [Error [ERR_TEST_FAILURE]: Expected values to be loosely deep-equal:\n        \n        {\n          bar: 1,\n          baz: {\n            date: 1970-01-01T00:00:00.000Z,\n            null: null,\n            number: 1,\n            string: 'Hello',\n            undefined: undefined\n          },\n          boo: [\n            1\n          ],\n          foo: 1\n        }\n        \n        should loosely deep-equal\n        \n        {\n          baz: {\n            date: 1970-01-01T00:00:00.000Z,\n            null: null,\n            number: 1,\n            string: 'Hello',\n            undefined: undefined\n          },\n          boo: [\n            1\n          ],\n          circular: &lt;ref *1> {\n            bar: 2,\n            c: [Circular *1]\n          }\n        }] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n          \n          {\n            bar: 1,\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            foo: 1\n          }\n          \n          should loosely deep-equal\n          \n          {\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            circular: &lt;ref *1> {\n              bar: 2,\n              c: [Circular *1]\n            }\n          }\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: [Object],\n            expected: [Object],\n            operator: 'deepEqual'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"invalid subtest fail\" time=\"*\" classname=\"test\" failure=\"test could not be started because its parent finished\">\n        \t\t<failure type=\"parentAlreadyFinished\" message=\"test could not be started because its parent finished\">\n        Error [ERR_TEST_FAILURE]: test could not be started because its parent finished\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'parentAlreadyFinished',\n          cause: 'test could not be started because its parent finished'\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<!-- Error: Test \"unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:72:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: Test \"async unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:76:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from async unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: A resource generated asynchronous activity after the test ended. This activity created the error \"Error: uncaught from outside of a test\" which triggered an uncaughtException event, caught by the test runner. -->\n        \t<!-- Error: Test \"immediate throw - passes but warns\" at test/fixtures/test-runner/output/output.js:80:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from immediate throw fail\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- Error: Test \"immediate reject - passes but warns\" at test/fixtures/test-runner/output/output.js:86:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from immediate reject fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: Test \"callback called twice in different ticks\" at test/fixtures/test-runner/output/output.js:251:1 generated asynchronous activity after the test ended. This activity created the error \"Error [ERR_TEST_FAILURE]: callback invoked multiple times\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- Error: Test \"callback async throw after done\" at test/fixtures/test-runner/output/output.js:269:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from callback async throw after done\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- tests 76 -->\n        \t<!-- suites 0 -->\n        \t<!-- pass 35 -->\n        \t<!-- fail 25 -->\n        \t<!-- cancelled 3 -->\n        \t<!-- skipped 9 -->\n        \t<!-- todo 4 -->\n        \t<!-- duration_ms * -->\n        </testsuites>\n        \n      actual: |-\n        <?xml version=\"1.0\" encoding=\"utf-8\"?>\n        <testsuites>\n        \t<testcase name=\"sync pass todo\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"todo\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync pass todo with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"todo\" message=\"this is a passing todo\"/>\n        \t</testcase>\n        \t<testcase name=\"sync fail todo\" time=\"*\" classname=\"test\" failure=\"thrown from sync fail todo\">\n        \t\t<skipped type=\"todo\" message=\"true\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync fail todo\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync fail todo] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync fail todo\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync fail todo with message\" time=\"*\" classname=\"test\" failure=\"thrown from sync fail todo with message\">\n        \t\t<skipped type=\"todo\" message=\"this is a failing todo\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync fail todo with message\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync fail todo with message] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync fail todo with message\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync skip pass\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip pass with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"this is skipped\"/>\n        \t</testcase>\n        \t<testcase name=\"sync pass\" time=\"*\" classname=\"test\"/>\n        \t<!-- this test should pass -->\n        \t<testcase name=\"sync throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from sync throw fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async skip pass\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"async pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from async throw fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from async throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from async throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async skip fail\" time=\"*\" classname=\"test\" failure=\"thrown from async throw fail\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from async throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from async throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async assertion fail\" time=\"*\" classname=\"test\" failure=\"Expected values to be strictly equal:true !== false\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Expected values to be strictly equal:true !== false\">\n        [Error [ERR_TEST_FAILURE]: Expected values to be strictly equal:\n        \n        true !== false\n        ] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n          \n          true !== false\n          \n              *\n              *\n              *\n              *\n              *\n              *\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: true,\n            expected: false,\n            operator: 'strictEqual'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"resolve pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"reject fail\" time=\"*\" classname=\"test\" failure=\"rejected from reject fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"rejected from reject fail\">\n        [Error [ERR_TEST_FAILURE]: rejected from reject fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: rejected from reject fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unhandled rejection - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async unhandled rejection - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate throw - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate reject - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate resolve pass\" time=\"*\" classname=\"test\"/>\n        \t<testsuite name=\"subtest sync throw fail\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"1\" failures=\"1\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"+sync throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fail\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fail\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fail\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<!-- this subtest should make its parent test fail -->\n        \t</testsuite>\n        \t<testcase name=\"sync throw non-error fail\" time=\"*\" classname=\"test\" failure=\"Symbol(thrown symbol from sync throw non-error fail)\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Symbol(thrown symbol from sync throw non-error fail)\">\n        [Error [ERR_TEST_FAILURE]: Symbol(thrown symbol from sync throw non-error fail)] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: Symbol(thrown symbol from sync throw non-error fail) }\n        \t\t</failure>\n        \t</testcase>\n        \t<testsuite name=\"level 0a\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"4\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"level 1a\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1b\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1c\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1d\" time=\"*\" classname=\"test\"/>\n        \t</testsuite>\n        \t<testsuite name=\"top level\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"2\" failures=\"1\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"+long running\" time=\"*\" classname=\"test\" failure=\"test did not finish before its parent and was cancelled\">\n        \t\t\t<failure type=\"cancelledByParent\" message=\"test did not finish before its parent and was cancelled\">\n        [Error [ERR_TEST_FAILURE]: test did not finish before its parent and was cancelled] { code: 'ERR_TEST_FAILURE', failureType: 'cancelledByParent', cause: 'test did not finish before its parent and was cancelled' }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<testsuite name=\"+short running\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"1\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t\t<testcase name=\"++short running\" time=\"*\" classname=\"test\"/>\n        \t\t</testsuite>\n        \t</testsuite>\n        \t<testcase name=\"invalid subtest - pass but subtest fails\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"sync skip option\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip option with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"this is skipped\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip option is false fail\" time=\"*\" classname=\"test\" failure=\"this should be executed\">\n        \t\t<failure type=\"testCodeFailure\" message=\"this should be executed\">\n        [Error [ERR_TEST_FAILURE]: this should be executed] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: this should be executed\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"functionOnly\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"test with only a name provided\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"test with a name and options provided\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"functionAndOptions\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"callback pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback fail\" time=\"*\" classname=\"test\" failure=\"callback failure\">\n        \t\t<failure type=\"testCodeFailure\" message=\"callback failure\">\n        [Error [ERR_TEST_FAILURE]: callback failure] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: callback failure\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback also returns a Promise\" time=\"*\" classname=\"test\" failure=\"passed a callback but also returned a Promise\">\n        \t\t<failure type=\"callbackAndPromisePresent\" message=\"passed a callback but also returned a Promise\">\n        [Error [ERR_TEST_FAILURE]: passed a callback but also returned a Promise] { code: 'ERR_TEST_FAILURE', failureType: 'callbackAndPromisePresent', cause: 'passed a callback but also returned a Promise' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback throw\" time=\"*\" classname=\"test\" failure=\"thrown from callback throw\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from callback throw\">\n        [Error [ERR_TEST_FAILURE]: thrown from callback throw] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from callback throw\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback called twice\" time=\"*\" classname=\"test\" failure=\"callback invoked multiple times\">\n        \t\t<failure type=\"multipleCallbackInvocations\" message=\"callback invoked multiple times\">\n        Error [ERR_TEST_FAILURE]: callback invoked multiple times\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'multipleCallbackInvocations',\n          cause: 'callback invoked multiple times'\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback called twice in different ticks\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback called twice in future tick\" time=\"*\" classname=\"test\" failure=\"callback invoked multiple times\">\n        \t\t<failure type=\"uncaughtException\" message=\"callback invoked multiple times\">\n        [Error [ERR_TEST_FAILURE]: callback invoked multiple times] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error [ERR_TEST_FAILURE]: callback invoked multiple times\n              * {\n            code: 'ERR_TEST_FAILURE',\n            failureType: 'multipleCallbackInvocations',\n            cause: 'callback invoked multiple times'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback async throw\" time=\"*\" classname=\"test\" failure=\"thrown from callback async throw\">\n        \t\t<failure type=\"uncaughtException\" message=\"thrown from callback async throw\">\n        [Error [ERR_TEST_FAILURE]: thrown from callback async throw] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error: thrown from callback async throw\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback async throw after done\" time=\"*\" classname=\"test\"/>\n        \t<testsuite name=\"only is set but not in only mode\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"4\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"running subtest 1\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"running subtest 2\" time=\"*\" classname=\"test\"/>\n        \t\t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t\t<testcase name=\"running subtest 3\" time=\"*\" classname=\"test\"/>\n        \t\t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t\t<testcase name=\"running subtest 4\" time=\"*\" classname=\"test\"/>\n        \t</testsuite>\n        \t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t<testcase name=\"custom inspect symbol fail\" time=\"*\" classname=\"test\" failure=\"customized\">\n        \t\t<failure type=\"testCodeFailure\" message=\"customized\">\n        [Error [ERR_TEST_FAILURE]: customized] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: customized }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"custom inspect symbol that throws fail\" time=\"*\" classname=\"test\" failure=\"{  foo: 1,  [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]}\">\n        \t\t<failure type=\"testCodeFailure\" message=\"{  foo: 1,  [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]}\">\n        [Error [ERR_TEST_FAILURE]: {\n          foo: 1,\n          [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]\n        }] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: { foo: 1, [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]] }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testsuite name=\"subtest sync throw fails\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"2\" failures=\"2\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"sync throw fails at first\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fails at first\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fails at first\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fails at first\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fails at first\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<testcase name=\"sync throw fails at second\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fails at second\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fails at second\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fails at second\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fails at second\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t</testsuite>\n        \t<testcase name=\"timed out async test\" time=\"*\" classname=\"test\" failure=\"test timed out after 5ms\">\n        \t\t<failure type=\"testTimeoutFailure\" message=\"test timed out after 5ms\">\n        [Error [ERR_TEST_FAILURE]: test timed out after 5ms] { code: 'ERR_TEST_FAILURE', failureType: 'testTimeoutFailure', cause: 'test timed out after 5ms' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"timed out callback test\" time=\"*\" classname=\"test\" failure=\"test timed out after 5ms\">\n        \t\t<failure type=\"testTimeoutFailure\" message=\"test timed out after 5ms\">\n        [Error [ERR_TEST_FAILURE]: test timed out after 5ms] { code: 'ERR_TEST_FAILURE', failureType: 'testTimeoutFailure', cause: 'test timed out after 5ms' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"large timeout async test is ok\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"large timeout callback test is ok\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"successful thenable\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"rejected thenable\" time=\"*\" classname=\"test\" failure=\"custom error\">\n        \t\t<failure type=\"testCodeFailure\" message=\"custom error\">\n        [Error [ERR_TEST_FAILURE]: custom error] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: 'custom error' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unfinished test with uncaughtException\" time=\"*\" classname=\"test\" failure=\"foo\">\n        \t\t<failure type=\"uncaughtException\" message=\"foo\">\n        [Error [ERR_TEST_FAILURE]: foo] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error: foo\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unfinished test with unhandledRejection\" time=\"*\" classname=\"test\" failure=\"bar\">\n        \t\t<failure type=\"unhandledRejection\" message=\"bar\">\n        [Error [ERR_TEST_FAILURE]: bar] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'unhandledRejection',\n          cause: Error: bar\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"assertion errors display actual and expected properly\" time=\"*\" classname=\"test\" failure=\"Expected values to be loosely deep-equal:{  bar: 1,  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  foo: 1}should loosely deep-equal{  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  circular: &lt;ref *1> {    bar: 2,    c: [Circular *1]  }}\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Expected values to be loosely deep-equal:{  bar: 1,  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  foo: 1}should loosely deep-equal{  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  circular: &lt;ref *1> {    bar: 2,    c: [Circular *1]  }}\">\n        [Error [ERR_TEST_FAILURE]: Expected values to be loosely deep-equal:\n        \n        {\n          bar: 1,\n          baz: {\n            date: 1970-01-01T00:00:00.000Z,\n            null: null,\n            number: 1,\n            string: 'Hello',\n            undefined: undefined\n          },\n          boo: [\n            1\n          ],\n          foo: 1\n        }\n        \n        should loosely deep-equal\n        \n        {\n          baz: {\n            date: 1970-01-01T00:00:00.000Z,\n            null: null,\n            number: 1,\n            string: 'Hello',\n            undefined: undefined\n          },\n          boo: [\n            1\n          ],\n          circular: &lt;ref *1> {\n            bar: 2,\n            c: [Circular *1]\n          }\n        }] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n          \n          {\n            bar: 1,\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            foo: 1\n          }\n          \n          should loosely deep-equal\n          \n          {\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            circular: &lt;ref *1> {\n              bar: 2,\n              c: [Circular *1]\n            }\n          }\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: [Object],\n            expected: [Object],\n            operator: 'deepEqual'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"invalid subtest fail\" time=\"*\" classname=\"test\" failure=\"test could not be started because its parent finished\">\n        \t\t<failure type=\"parentAlreadyFinished\" message=\"test could not be started because its parent finished\">\n        Error [ERR_TEST_FAILURE]: test could not be started because its parent finished\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'parentAlreadyFinished',\n          cause: 'test could not be started because its parent finished'\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<!-- Error: Test \"unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:72:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: Test \"async unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:76:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from async unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: A resource generated asynchronous activity after the test ended. This activity created the error \"Error: uncaught from outside of a test\" which triggered an uncaughtException event, caught by the test runner. -->\n        \t<!-- Error: Test \"immediate throw - passes but warns\" at test/fixtures/test-runner/output/output.js:80:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from immediate throw fail\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- Error: Test \"immediate reject - passes but warns\" at test/fixtures/test-runner/output/output.js:86:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from immediate reject fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: Test \"callback called twice in different ticks\" at test/fixtures/test-runner/output/output.js:251:1 generated asynchronous activity after the test ended. This activity created the error \"Error [ERR_TEST_FAILURE]: callback invoked multiple times\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- Error: Test \"callback async throw after done\" at test/fixtures/test-runner/output/output.js:269:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from callback async throw after done\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- tests 76 -->\n        \t<!-- suites 0 -->\n        \t<!-- pass 35 -->\n        \t<!-- fail 25 -->\n        \t<!-- cancelled 3 -->\n        \t<!-- skipped 9 -->\n        \t<!-- todo 4 -->\n        \t<!-- duration_ms * -->\n        </testsuites>\n        \n      operator: 'strictEqual'\n      stack: |-\n        assertSnapshot (d:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:56:12)\n        async Module.spawnAndAssert (d:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:84:3)\n        async TestContext.<anonymous> (file:///d:/workspace/node-test-binary-windows-js-suites/node/test/parallel/test-runner-output.mjs:149:5)\n        async Test.run (node:internal/test_runner/test:748:9)\n        async Promise.all (index 23)\n        async Suite.run (node:internal/test_runner/test:1106:7)\n        async Test.processPendingSubtests (node:internal/test_runner/test:461:7)\n      ...\n    # Subtest: test-runner/output/spec_reporter_successful.js\n    ok 25 - test-runner/output/spec_reporter_successful.js\n      ---\n      duration_ms: 2070.2857\n      ...\n    # Subtest: test-runner/output/spec_reporter.js\n    ok 26 - test-runner/output/spec_reporter.js\n      ---\n      duration_ms: 4316.2446\n      ...\n    # Subtest: test-runner/output/spec_reporter_cli.js\n    ok 27 - test-runner/output/spec_reporter_cli.js\n      ---\n      duration_ms: 4597.4596\n      ...\n    # Subtest: test-runner/output/source_mapped_locations.mjs\n    ok 28 - test-runner/output/source_mapped_locations.mjs\n      ---\n      duration_ms: 2901.2345\n      ...\n    # Subtest: test-runner/output/lcov_reporter.js\n    ok 29 - test-runner/output/lcov_reporter.js\n      ---\n      duration_ms: 3716.6291\n      ...\n    # Subtest: test-runner/output/output.js\n    ok 30 - test-runner/output/output.js\n      ---\n      duration_ms: 3181.1663\n      ...\n    # Subtest: test-runner/output/output_cli.js\n    ok 31 - test-runner/output/output_cli.js\n      ---\n      duration_ms: 4714.799\n      ...\n    # Subtest: test-runner/output/name_and_skip_patterns.js\n    ok 32 - test-runner/output/name_and_skip_patterns.js\n      ---\n      duration_ms: 2928.9953\n      ...\n    # Subtest: test-runner/output/name_pattern.js\n    ok 33 - test-runner/output/name_pattern.js\n      ---\n      duration_ms: 1753.0491\n      ...\n    # Subtest: test-runner/output/name_pattern_with_only.js\n    ok 34 - test-runner/output/name_pattern_with_only.js\n      ---\n      duration_ms: 1993.1506\n      ...\n    # Subtest: test-runner/output/skip_pattern.js\n    ok 35 - test-runner/output/skip_pattern.js\n      ---\n      duration_ms: 1983.0306\n      ...\n    # Subtest: test-runner/output/unfinished-suite-async-error.js\n    ok 36 - test-runner/output/unfinished-suite-async-error.js\n      ---\n      duration_ms: 2186.2504\n      ...\n    # Subtest: test-runner/output/unresolved_promise.js\n    not ok 37 - test-runner/output/unresolved_promise.js\n      ---\n      duration_ms: 2440.4271\n      location: 'd:\\\\workspace\\\\node-test-binary-windows-js-suites\\\\node\\\\test\\\\parallel\\\\test-runner-output.mjs:155:5'\n      failureType: 'testCodeFailure'\n      error: |-\n        Expected values to be strictly equal:\n        + actual - expected ... Lines skipped\n        \n          'TAP version 13\\n' +\n            '# Subtest: pass\\n' +\n        ...\n            \"  error: 'Promise resolution is still pending but the event loop has already resolved'\\n\" +\n            \"  code: 'ERR_TEST_FAILURE'\\n\" +\n        +   '  ...\\n' +\n        +   '# Subtest: fail\\n' +\n        +   'not ok 3 - fail\\n' +\n        +   '  ---\\n' +\n        +   '  duration_ms: *\\n' +\n        +   \"  location: '/test/fixtures/test-runner/output/unresolved_promise.js:(LINE):1'\\n\" +\n        +   \"  failureType: 'cancelledByParent'\\n\" +\n        +   \"  error: 'Promise resolution is still pending but the event loop has already resolved'\\n\" +\n        +   \"  code: 'ERR_TEST_FAILURE'\\n\" +\n        -   '  stack: |-\\n' +\n        -   '    *\\n' +\n        -   '  ...\\n' +\n        -   '# Subtest: fail\\n' +\n        -   'not ok 3 - fail\\n' +\n        -   '  ---\\n' +\n        -   '  duration_ms: *\\n' +\n        -   \"  location: '/test/fixtures/test-runner/output/unresolved_promise.js:(LINE):1'\\n\" +\n        -   \"  failureType: 'cancelledByParent'\\n\" +\n        -   \"  error: 'Promise resolution is still pending but the event loop has already resolved'\\n\" +\n        -   \"  code: 'ERR_TEST_FAILURE'\\n\" +\n        -   '  stack: |-\\n' +\n        -   '    *\\n' +\n            '  ...\\n' +\n        ...\n            '# skipped 0\\n' +\n            '# todo 0\\n' +\n            '# duration_ms *\\n'\n      code: 'ERR_ASSERTION'\n      name: 'AssertionError'\n      expected: |-\n        TAP version 13\n        # Subtest: pass\n        ok 1 - pass\n          ---\n          duration_ms: *\n          ...\n        # Subtest: never resolving promise\n        not ok 2 - never resolving promise\n          ---\n          duration_ms: *\n          location: '/test/fixtures/test-runner/output/unresolved_promise.js:(LINE):1'\n          failureType: 'cancelledByParent'\n          error: 'Promise resolution is still pending but the event loop has already resolved'\n          code: 'ERR_TEST_FAILURE'\n          stack: |-\n            *\n          ...\n        # Subtest: fail\n        not ok 3 - fail\n          ---\n          duration_ms: *\n          location: '/test/fixtures/test-runner/output/unresolved_promise.js:(LINE):1'\n          failureType: 'cancelledByParent'\n          error: 'Promise resolution is still pending but the event loop has already resolved'\n          code: 'ERR_TEST_FAILURE'\n          stack: |-\n            *\n          ...\n        1..3\n        # tests 3\n        # suites 0\n        # pass 1\n        # fail 0\n        # cancelled 2\n        # skipped 0\n        # todo 0\n        # duration_ms *\n        \n      actual: |-\n        TAP version 13\n        # Subtest: pass\n        ok 1 - pass\n          ---\n          duration_ms: *\n          ...\n        # Subtest: never resolving promise\n        not ok 2 - never resolving promise\n          ---\n          duration_ms: *\n          location: '/test/fixtures/test-runner/output/unresolved_promise.js:(LINE):1'\n          failureType: 'cancelledByParent'\n          error: 'Promise resolution is still pending but the event loop has already resolved'\n          code: 'ERR_TEST_FAILURE'\n          ...\n        # Subtest: fail\n        not ok 3 - fail\n          ---\n          duration_ms: *\n          location: '/test/fixtures/test-runner/output/unresolved_promise.js:(LINE):1'\n          failureType: 'cancelledByParent'\n          error: 'Promise resolution is still pending but the event loop has already resolved'\n          code: 'ERR_TEST_FAILURE'\n          ...\n        1..3\n        # tests 3\n        # suites 0\n        # pass 1\n        # fail 0\n        # cancelled 2\n        # skipped 0\n        # todo 0\n        # duration_ms *\n        \n      operator: 'strictEqual'\n      stack: |-\n        assertSnapshot (d:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:56:12)\n        async Module.spawnAndAssert (d:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:84:3)\n        async TestContext.<anonymous> (file:///d:/workspace/node-test-binary-windows-js-suites/node/test/parallel/test-runner-output.mjs:149:5)\n        async Test.run (node:internal/test_runner/test:748:9)\n        async Promise.all (index 36)\n        async Suite.run (node:internal/test_runner/test:1106:7)\n        async Test.processPendingSubtests (node:internal/test_runner/test:461:7)\n      ...\n    # Subtest: test-runner/output/default_output.js\n        # Subtest: <anonymous>\n        ok 1 - <anonymous> # SKIP Skipping pseudo-tty tests, as pseudo terminals are not available on Windows.\n          ---\n          duration_ms: 45.9395\n          ...\n        1..1\n    ok 38 - test-runner/output/default_output.js\n      ---\n      duration_ms: 46.8038\n      ...\n    # Subtest: test-runner/output/arbitrary-output.js\n    ok 39 - test-runner/output/arbitrary-output.js\n      ---\n      duration_ms: 2621.3686\n      ...\n    # Subtest: test-runner/output/async-test-scheduling.mjs\n    ok 40 - test-runner/output/async-test-scheduling.mjs\n      ---\n      duration_ms: 2953.3009\n      ...\n    # Subtest: test-runner/output/arbitrary-output-colored.js\n        # Subtest: <anonymous>\n        ok 1 - <anonymous> # SKIP Skipping pseudo-tty tests, as pseudo terminals are not available on Windows.\n          ---\n          duration_ms: 25.173\n          ...\n        1..1\n    ok 41 - test-runner/output/arbitrary-output-colored.js\n      ---\n      duration_ms: 25.6911\n      ...\n    # Subtest: test-runner/output/dot_output_custom_columns.js\n        # Subtest: <anonymous>\n        ok 1 - <anonymous> # SKIP Skipping pseudo-tty tests, as pseudo terminals are not available on Windows.\n          ---\n          duration_ms: 25.0732\n          ...\n        1..1\n    ok 42 - test-runner/output/dot_output_custom_columns.js\n      ---\n      duration_ms: 25.4818\n      ...\n    # Subtest: test-runner/output/tap_escape.js\n    ok 43 - test-runner/output/tap_escape.js\n      ---\n      duration_ms: 2636.7719\n      ...\n    # Subtest: test-runner/output/coverage_failure.js\n    ok 44 - test-runner/output/coverage_failure.js\n      ---\n      duration_ms: 2461.4214\n      ...\n    1..44\nnot ok 1 - test runner output\n  ---\n  duration_ms: 5009.5418\n  type: 'suite'\n  location: 'd:\\\\workspace\\\\node-test-binary-windows-js-suites\\\\node\\\\test\\\\parallel\\\\test-runner-output.mjs:153:1'\n  failureType: 'subtestsFailed'\n  error: '3 subtests failed'\n  code: 'ERR_TEST_FAILURE'\n  ...\n1..1\n# tests 47\n# suites 1\n# pass 41\n# fail 3\n# cancelled 0\n# skipped 3\n# todo 0\n# duration_ms 5027.5178"},"time":5769.987,"fullname":"parallel/test-runner-output","closingTestPoint":false}},{"testName":"parallel/test-disable-proto-throw","timestamp":1714660669261,"status":"FAILED","jobName":"node-test-binary-windows-js-suites","config":"node-test-binary-windows-js-suites » 3,win2019-COMPILED_BY-vs2022 #27525","buildUrl":"https://ci.nodejs.org/job/node-test-binary-windows-js-suites/RUN_SUBSET=3,nodes=win2019-COMPILED_BY-vs2022/27525/","buildNumber":27525,"builtOn":"test-rackspace-win2019_vs2019-x64-3","nodeVersion":"23.0.0","commitHash":"3a49bfd9b001e550acf99afcb74b31d6885de874","callStack":[{"upstreamBuild":62664,"upstreamProject":"node-test-commit-windows-fanned","upstreamUrl":"job/node-test-commit-windows-fanned/"},{"upstreamBuild":70433,"upstreamProject":"node-test-commit","upstreamUrl":"job/node-test-commit/"},{"upstreamBuild":58865,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"prId":"52733"}],"tap":{"ok":false,"name":"parallel/test-disable-proto-throw","id":223,"buffered":false,"tapError":null,"skip":false,"todo":false,"previous":null,"plan":null,"diag":{"severity":"fail","exitcode":1,"stack":"node:internal/events/slow_event_emitter:56\n    events.__proto__ = null;\n                     ^\n\nError: Accessing Object.prototype.__proto__ has been disallowed with --disable-proto=throw\n    at Function.fromFastEventEmitter (node:internal/events/slow_event_emitter:56:22)\n    at EventEmitter.<computed> (node:internal/events/event_emitter:387:36)\n    at ReadableWorkerStdio.addListener (node:internal/events/event_emitter:464:47)\n    at Readable.on (node:internal/streams/readable:1130:35)\n    at ReadableWorkerStdio.once (node:internal/events/event_emitter:529:8)\n    at Readable.pipe (node:internal/streams/readable:935:9)\n    at pipeWithoutWarning (node:internal/worker:481:10)\n    at new Worker (node:internal/worker:244:7)\n    at Object.<anonymous> (C:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\parallel\\test-disable-proto-throw.js:41:3)\n    at Module._compile (node:internal/modules/cjs/loader:1480:14) {\n  code: 'ERR_PROTO_ACCESS'\n}\n\nNode.js v23.0.0-pre"},"time":261.998,"fullname":"parallel/test-disable-proto-throw","closingTestPoint":false}},{"testName":"parallel/test-assert-builtins-not-read-from-filesystem","timestamp":1714660669261,"status":"FAILED","jobName":"node-test-binary-windows-js-suites","config":"node-test-binary-windows-js-suites » 2,win2019-COMPILED_BY-vs2022 #27525","buildUrl":"https://ci.nodejs.org/job/node-test-binary-windows-js-suites/RUN_SUBSET=2,nodes=win2019-COMPILED_BY-vs2022/27525/","buildNumber":27525,"builtOn":"test-rackspace-win2019_vs2019-x64-2","nodeVersion":"23.0.0","commitHash":"3a49bfd9b001e550acf99afcb74b31d6885de874","callStack":[{"upstreamBuild":62664,"upstreamProject":"node-test-commit-windows-fanned","upstreamUrl":"job/node-test-commit-windows-fanned/"},{"upstreamBuild":70433,"upstreamProject":"node-test-commit","upstreamUrl":"job/node-test-commit/"},{"upstreamBuild":58865,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"prId":"52733"}],"tap":{"ok":false,"name":"parallel/test-assert-builtins-not-read-from-filesystem","id":69,"buffered":false,"tapError":null,"skip":false,"todo":false,"previous":null,"plan":null,"diag":{"severity":"fail","exitcode":1,"stack":"node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Exit code: 1\n,,node:fs:2348\n\n    return binding.writeFileUtf8(\n\n                   ^\n\n\n\nError: ENOENT: no such file or directory, open 'C:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\.tmp.68\\node:internal\\events\\fast_event_emitter'\n\n    at writeFileSync (node:fs:2348:20)\n\n    at Object.<anonymous> (C:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\parallel\\test-assert-builtins-not-read-from-filesystem.js:41:3)\n\n    at Module._compile (node:internal/modules/cjs/loader:1480:14)\n\n    at Module._extensions..js (node:internal/modules/cjs/loader:1564:10)\n\n    at Module.load (node:internal/modules/cjs/loader:1287:32)\n\n    at Module._load (node:internal/modules/cjs/loader:1103:12)\n\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:168:12)\n\n    at node:internal/main/run_main_module:30:49 {\n\n  errno: -4058,\n\n  code: 'ENOENT',\n\n  syscall: 'open',\n\n  path: 'C:\\\\workspace\\\\node-test-binary-windows-js-suites\\\\node\\\\test\\\\.tmp.68\\\\node:internal\\\\events\\\\fast_event_emitter'\n\n}\n\n\n\nNode.js v23.0.0-pre\n\n\n    at Object.<anonymous> (C:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\parallel\\test-assert-builtins-not-read-from-filesystem.js:31:12)\n    at Module._compile (node:internal/modules/cjs/loader:1480:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1564:10)\n    at Module.load (node:internal/modules/cjs/loader:1287:32)\n    at Module._load (node:internal/modules/cjs/loader:1103:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:168:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: false,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 0,\n  operator: 'strictEqual'\n}\n\nNode.js v23.0.0-pre"},"time":539.987,"fullname":"parallel/test-assert-builtins-not-read-from-filesystem","closingTestPoint":false}},{"testName":"parallel/test-disable-proto-delete","timestamp":1714660669261,"status":"FAILED","jobName":"node-test-binary-windows-js-suites","config":"node-test-binary-windows-js-suites » 2,win2019-COMPILED_BY-vs2022 #27525","buildUrl":"https://ci.nodejs.org/job/node-test-binary-windows-js-suites/RUN_SUBSET=2,nodes=win2019-COMPILED_BY-vs2022/27525/","buildNumber":27525,"builtOn":"test-rackspace-win2019_vs2019-x64-2","nodeVersion":"23.0.0","commitHash":"3a49bfd9b001e550acf99afcb74b31d6885de874","callStack":[{"upstreamBuild":62664,"upstreamProject":"node-test-commit-windows-fanned","upstreamUrl":"job/node-test-commit-windows-fanned/"},{"upstreamBuild":70433,"upstreamProject":"node-test-commit","upstreamUrl":"job/node-test-commit/"},{"upstreamBuild":58865,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"prId":"52733"}],"tap":{"ok":false,"name":"parallel/test-disable-proto-delete","id":224,"buffered":false,"tapError":null,"skip":false,"todo":false,"previous":null,"plan":null,"diag":{"severity":"fail","exitcode":1,"stack":"node:internal/events/slow_event_emitter:291\n    for (let i = listeners.length - 1; i >= 0; i--) {\n                           ^\n\nTypeError: Cannot read properties of null (reading 'length')\n    at SlowEventEmitter.removeAllListeners (node:internal/events/slow_event_emitter:291:28)\n    at Worker.removeAllListeners (node:internal/events/event_emitter:576:38)\n    at SlowEventEmitter.removeAllListeners (node:internal/events/slow_event_emitter:276:41)\n    at Worker.removeAllListeners (node:internal/events/event_emitter:576:38)\n    at [kOnExit] (node:internal/worker:316:10)\n    at Worker.<computed>.onexit (node:internal/worker:229:20)\n\nNode.js v23.0.0-pre"},"time":420.015,"fullname":"parallel/test-disable-proto-delete","closingTestPoint":false}},{"testName":"parallel/test-runner-output","timestamp":1714660669261,"status":"FAILED","jobName":"node-test-binary-windows-js-suites","config":"node-test-binary-windows-js-suites » 2,win2019-COMPILED_BY-vs2022 #27525","buildUrl":"https://ci.nodejs.org/job/node-test-binary-windows-js-suites/RUN_SUBSET=2,nodes=win2019-COMPILED_BY-vs2022/27525/","buildNumber":27525,"builtOn":"test-rackspace-win2019_vs2019-x64-2","nodeVersion":"23.0.0","commitHash":"3a49bfd9b001e550acf99afcb74b31d6885de874","callStack":[{"upstreamBuild":62664,"upstreamProject":"node-test-commit-windows-fanned","upstreamUrl":"job/node-test-commit-windows-fanned/"},{"upstreamBuild":70433,"upstreamProject":"node-test-commit","upstreamUrl":"job/node-test-commit/"},{"upstreamBuild":58865,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"prId":"52733"}],"tap":{"ok":false,"name":"parallel/test-runner-output","id":679,"buffered":false,"tapError":null,"skip":false,"todo":false,"previous":null,"plan":null,"diag":{"severity":"fail","exitcode":1,"stack":"TAP version 13\n# Subtest: test runner output\n    # Subtest: test-runner/output/abort.js\n    ok 1 - test-runner/output/abort.js\n      ---\n      duration_ms: 4390.3504\n      ...\n    # Subtest: test-runner/output/abort_suite.js\n    ok 2 - test-runner/output/abort_suite.js\n      ---\n      duration_ms: 4353.2379\n      ...\n    # Subtest: test-runner/output/abort_hooks.js\n    ok 3 - test-runner/output/abort_hooks.js\n      ---\n      duration_ms: 4296.649\n      ...\n    # Subtest: test-runner/output/describe_it.js\n    ok 4 - test-runner/output/describe_it.js\n      ---\n      duration_ms: 4235.6172\n      ...\n    # Subtest: test-runner/output/describe_nested.js\n    ok 5 - test-runner/output/describe_nested.js\n      ---\n      duration_ms: 3957.0841\n      ...\n    # Subtest: test-runner/output/eval_dot.js\n    ok 6 - test-runner/output/eval_dot.js\n      ---\n      duration_ms: 3927.564\n      ...\n    # Subtest: test-runner/output/eval_spec.js\n    ok 7 - test-runner/output/eval_spec.js\n      ---\n      duration_ms: 3893.3423\n      ...\n    # Subtest: test-runner/output/eval_tap.js\n    ok 8 - test-runner/output/eval_tap.js\n      ---\n      duration_ms: 3863.0389\n      ...\n    # Subtest: test-runner/output/hooks.js\n    ok 9 - test-runner/output/hooks.js\n      ---\n      duration_ms: 3815.8969\n      ...\n    # Subtest: test-runner/output/hooks_spec_reporter.js\n    ok 10 - test-runner/output/hooks_spec_reporter.js\n      ---\n      duration_ms: 3511.0005\n      ...\n    # Subtest: test-runner/output/skip-each-hooks.js\n    ok 11 - test-runner/output/skip-each-hooks.js\n      ---\n      duration_ms: 3421.0948\n      ...\n    # Subtest: test-runner/output/suite-skip-hooks.js\n    ok 12 - test-runner/output/suite-skip-hooks.js\n      ---\n      duration_ms: 3391.1997\n      ...\n    # Subtest: test-runner/output/timeout_in_before_each_should_not_affect_further_tests.js\n    ok 13 - test-runner/output/timeout_in_before_each_should_not_affect_further_tests.js\n      ---\n      duration_ms: 3222.6571\n      ...\n    # Subtest: test-runner/output/hooks-with-no-global-test.js\n    ok 14 - test-runner/output/hooks-with-no-global-test.js\n      ---\n      duration_ms: 3197.6648\n      ...\n    # Subtest: test-runner/output/global-hooks-with-no-tests.js\n    ok 15 - test-runner/output/global-hooks-with-no-tests.js\n      ---\n      duration_ms: 3156.0456\n      ...\n    # Subtest: test-runner/output/before-and-after-each-too-many-listeners.js\n    ok 16 - test-runner/output/before-and-after-each-too-many-listeners.js\n      ---\n      duration_ms: 3135.2083\n      ...\n    # Subtest: test-runner/output/before-and-after-each-with-timeout-too-many-listeners.js\n    ok 17 - test-runner/output/before-and-after-each-with-timeout-too-many-listeners.js\n      ---\n      duration_ms: 3086.035\n      ...\n    # Subtest: test-runner/output/force_exit.js\n    ok 18 - test-runner/output/force_exit.js\n      ---\n      duration_ms: 2960.686\n      ...\n    # Subtest: test-runner/output/global_after_should_fail_the_test.js\n    ok 19 - test-runner/output/global_after_should_fail_the_test.js\n      ---\n      duration_ms: 2923.461\n      ...\n    # Subtest: test-runner/output/no_refs.js\n    not ok 20 - test-runner/output/no_refs.js\n      ---\n      duration_ms: 2900.9168\n      location: 'C:\\\\workspace\\\\node-test-binary-windows-js-suites\\\\node\\\\test\\\\parallel\\\\test-runner-output.mjs:155:5'\n      failureType: 'testCodeFailure'\n      error: |-\n        Expected values to be strictly equal:\n        + actual - expected ... Lines skipped\n        \n          'TAP version 13\\n' +\n            '# Subtest: does not keep event loop alive\\n' +\n        ...\n            \"      error: 'Promise resolution is still pending but the event loop has already resolved'\\n\" +\n            \"      code: 'ERR_TEST_FAILURE'\\n\" +\n        +   '      ...\\n' +\n        +   '    1..1\\n' +\n        +   'not ok 1 - does not keep event loop alive\\n' +\n        +   '  ---\\n' +\n        +   '  duration_ms: *\\n' +\n        +   \"  location: '/test/fixtures/test-runner/output/no_refs.js:(LINE):1'\\n\" +\n        +   \"  failureType: 'cancelledByParent'\\n\" +\n        +   \"  error: 'Promise resolution is still pending but the event loop has already resolved'\\n\" +\n        +   \"  code: 'ERR_TEST_FAILURE'\\n\" +\n        -   '      stack: |-\\n' +\n        -   '        *\\n' +\n        -   '      ...\\n' +\n        -   '    1..1\\n' +\n        -   'not ok 1 - does not keep event loop alive\\n' +\n        -   '  ---\\n' +\n        -   '  duration_ms: *\\n' +\n        -   \"  location: '/test/fixtures/test-runner/output/no_refs.js:(LINE):1'\\n\" +\n        -   \"  failureType: 'cancelledByParent'\\n\" +\n        -   \"  error: 'Promise resolution is still pending but the event loop has already resolved'\\n\" +\n        -   \"  code: 'ERR_TEST_FAILURE'\\n\" +\n        -   '  stack: |-\\n' +\n        -   '    *\\n' +\n            '  ...\\n' +\n        ...\n            '# skipped 0\\n' +\n            '# todo 0\\n' +\n            '# duration_ms *\\n'\n      code: 'ERR_ASSERTION'\n      name: 'AssertionError'\n      expected: |-\n        TAP version 13\n        # Subtest: does not keep event loop alive\n            # Subtest: +does not keep event loop alive\n            not ok 1 - +does not keep event loop alive\n              ---\n              duration_ms: *\n              location: '/test/fixtures/test-runner/output/no_refs.js:(LINE):11'\n              failureType: 'cancelledByParent'\n              error: 'Promise resolution is still pending but the event loop has already resolved'\n              code: 'ERR_TEST_FAILURE'\n              stack: |-\n                *\n              ...\n            1..1\n        not ok 1 - does not keep event loop alive\n          ---\n          duration_ms: *\n          location: '/test/fixtures/test-runner/output/no_refs.js:(LINE):1'\n          failureType: 'cancelledByParent'\n          error: 'Promise resolution is still pending but the event loop has already resolved'\n          code: 'ERR_TEST_FAILURE'\n          stack: |-\n            *\n          ...\n        1..1\n        # tests 2\n        # suites 0\n        # pass 0\n        # fail 0\n        # cancelled 2\n        # skipped 0\n        # todo 0\n        # duration_ms *\n        \n      actual: |-\n        TAP version 13\n        # Subtest: does not keep event loop alive\n            # Subtest: +does not keep event loop alive\n            not ok 1 - +does not keep event loop alive\n              ---\n              duration_ms: *\n              location: '/test/fixtures/test-runner/output/no_refs.js:(LINE):11'\n              failureType: 'cancelledByParent'\n              error: 'Promise resolution is still pending but the event loop has already resolved'\n              code: 'ERR_TEST_FAILURE'\n              ...\n            1..1\n        not ok 1 - does not keep event loop alive\n          ---\n          duration_ms: *\n          location: '/test/fixtures/test-runner/output/no_refs.js:(LINE):1'\n          failureType: 'cancelledByParent'\n          error: 'Promise resolution is still pending but the event loop has already resolved'\n          code: 'ERR_TEST_FAILURE'\n          ...\n        1..1\n        # tests 2\n        # suites 0\n        # pass 0\n        # fail 0\n        # cancelled 2\n        # skipped 0\n        # todo 0\n        # duration_ms *\n        \n      operator: 'strictEqual'\n      stack: |-\n        assertSnapshot (C:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:56:12)\n        async Module.spawnAndAssert (C:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:84:3)\n        async TestContext.<anonymous> (file:///C:/workspace/node-test-binary-windows-js-suites/node/test/parallel/test-runner-output.mjs:149:5)\n        async Test.run (node:internal/test_runner/test:748:9)\n        async Promise.all (index 19)\n        async Suite.run (node:internal/test_runner/test:1106:7)\n        async Test.processPendingSubtests (node:internal/test_runner/test:461:7)\n      ...\n    # Subtest: test-runner/output/no_tests.js\n    ok 21 - test-runner/output/no_tests.js\n      ---\n      duration_ms: 2865.6514\n      ...\n    # Subtest: test-runner/output/only_tests.js\n    ok 22 - test-runner/output/only_tests.js\n      ---\n      duration_ms: 2836.8095\n      ...\n    # Subtest: test-runner/output/dot_reporter.js\n    ok 23 - test-runner/output/dot_reporter.js\n      ---\n      duration_ms: 2706.5691\n      ...\n    # Subtest: test-runner/output/junit_reporter.js\n    not ok 24 - test-runner/output/junit_reporter.js\n      ---\n      duration_ms: 2436.8497\n      location: 'C:\\\\workspace\\\\node-test-binary-windows-js-suites\\\\node\\\\test\\\\parallel\\\\test-runner-output.mjs:155:5'\n      failureType: 'testCodeFailure'\n      error: |-\n        Expected values to be strictly equal:\n        + actual - expected ... Lines skipped\n        \n          '<?xml version=\"1.0\" encoding=\"utf-8\"?>\\n' +\n            '<testsuites>\\n' +\n        ...\n            '\\t\\t</failure>\\n' +\n            '\\t</testcase>\\n' +\n        +   '\\t<testcase name=\"callback called twice\" time=\"*\" '... 11376 more characters\n        -   '\\t<testcase name=\"callback called twice\" time=\"*\" '... 11392 more characters\n      code: 'ERR_ASSERTION'\n      name: 'AssertionError'\n      expected: |-\n        <?xml version=\"1.0\" encoding=\"utf-8\"?>\n        <testsuites>\n        \t<testcase name=\"sync pass todo\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"todo\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync pass todo with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"todo\" message=\"this is a passing todo\"/>\n        \t</testcase>\n        \t<testcase name=\"sync fail todo\" time=\"*\" classname=\"test\" failure=\"thrown from sync fail todo\">\n        \t\t<skipped type=\"todo\" message=\"true\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync fail todo\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync fail todo] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync fail todo\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync fail todo with message\" time=\"*\" classname=\"test\" failure=\"thrown from sync fail todo with message\">\n        \t\t<skipped type=\"todo\" message=\"this is a failing todo\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync fail todo with message\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync fail todo with message] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync fail todo with message\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync skip pass\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip pass with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"this is skipped\"/>\n        \t</testcase>\n        \t<testcase name=\"sync pass\" time=\"*\" classname=\"test\"/>\n        \t<!-- this test should pass -->\n        \t<testcase name=\"sync throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from sync throw fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async skip pass\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"async pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from async throw fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from async throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from async throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async skip fail\" time=\"*\" classname=\"test\" failure=\"thrown from async throw fail\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from async throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from async throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async assertion fail\" time=\"*\" classname=\"test\" failure=\"Expected values to be strictly equal:true !== false\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Expected values to be strictly equal:true !== false\">\n        [Error [ERR_TEST_FAILURE]: Expected values to be strictly equal:\n        \n        true !== false\n        ] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n          \n          true !== false\n          \n              *\n              *\n              *\n              *\n              *\n              *\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: true,\n            expected: false,\n            operator: 'strictEqual'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"resolve pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"reject fail\" time=\"*\" classname=\"test\" failure=\"rejected from reject fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"rejected from reject fail\">\n        [Error [ERR_TEST_FAILURE]: rejected from reject fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: rejected from reject fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unhandled rejection - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async unhandled rejection - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate throw - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate reject - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate resolve pass\" time=\"*\" classname=\"test\"/>\n        \t<testsuite name=\"subtest sync throw fail\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"1\" failures=\"1\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"+sync throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fail\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fail\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fail\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<!-- this subtest should make its parent test fail -->\n        \t</testsuite>\n        \t<testcase name=\"sync throw non-error fail\" time=\"*\" classname=\"test\" failure=\"Symbol(thrown symbol from sync throw non-error fail)\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Symbol(thrown symbol from sync throw non-error fail)\">\n        [Error [ERR_TEST_FAILURE]: Symbol(thrown symbol from sync throw non-error fail)] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: Symbol(thrown symbol from sync throw non-error fail) }\n        \t\t</failure>\n        \t</testcase>\n        \t<testsuite name=\"level 0a\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"4\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"level 1a\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1b\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1c\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1d\" time=\"*\" classname=\"test\"/>\n        \t</testsuite>\n        \t<testsuite name=\"top level\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"2\" failures=\"1\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"+long running\" time=\"*\" classname=\"test\" failure=\"test did not finish before its parent and was cancelled\">\n        \t\t\t<failure type=\"cancelledByParent\" message=\"test did not finish before its parent and was cancelled\">\n        [Error [ERR_TEST_FAILURE]: test did not finish before its parent and was cancelled] { code: 'ERR_TEST_FAILURE', failureType: 'cancelledByParent', cause: 'test did not finish before its parent and was cancelled' }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<testsuite name=\"+short running\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"1\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t\t<testcase name=\"++short running\" time=\"*\" classname=\"test\"/>\n        \t\t</testsuite>\n        \t</testsuite>\n        \t<testcase name=\"invalid subtest - pass but subtest fails\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"sync skip option\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip option with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"this is skipped\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip option is false fail\" time=\"*\" classname=\"test\" failure=\"this should be executed\">\n        \t\t<failure type=\"testCodeFailure\" message=\"this should be executed\">\n        [Error [ERR_TEST_FAILURE]: this should be executed] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: this should be executed\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"functionOnly\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"test with only a name provided\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"test with a name and options provided\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"functionAndOptions\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"callback pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback fail\" time=\"*\" classname=\"test\" failure=\"callback failure\">\n        \t\t<failure type=\"testCodeFailure\" message=\"callback failure\">\n        [Error [ERR_TEST_FAILURE]: callback failure] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: callback failure\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback also returns a Promise\" time=\"*\" classname=\"test\" failure=\"passed a callback but also returned a Promise\">\n        \t\t<failure type=\"callbackAndPromisePresent\" message=\"passed a callback but also returned a Promise\">\n        [Error [ERR_TEST_FAILURE]: passed a callback but also returned a Promise] { code: 'ERR_TEST_FAILURE', failureType: 'callbackAndPromisePresent', cause: 'passed a callback but also returned a Promise' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback throw\" time=\"*\" classname=\"test\" failure=\"thrown from callback throw\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from callback throw\">\n        [Error [ERR_TEST_FAILURE]: thrown from callback throw] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from callback throw\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback called twice\" time=\"*\" classname=\"test\" failure=\"callback invoked multiple times\">\n        \t\t<failure type=\"multipleCallbackInvocations\" message=\"callback invoked multiple times\">\n        Error [ERR_TEST_FAILURE]: callback invoked multiple times\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'multipleCallbackInvocations',\n          cause: 'callback invoked multiple times'\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback called twice in different ticks\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback called twice in future tick\" time=\"*\" classname=\"test\" failure=\"callback invoked multiple times\">\n        \t\t<failure type=\"uncaughtException\" message=\"callback invoked multiple times\">\n        Error [ERR_TEST_FAILURE]: callback invoked multiple times\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error [ERR_TEST_FAILURE]: callback invoked multiple times\n              * {\n            code: 'ERR_TEST_FAILURE',\n            failureType: 'multipleCallbackInvocations',\n            cause: 'callback invoked multiple times'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback async throw\" time=\"*\" classname=\"test\" failure=\"thrown from callback async throw\">\n        \t\t<failure type=\"uncaughtException\" message=\"thrown from callback async throw\">\n        Error [ERR_TEST_FAILURE]: thrown from callback async throw\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error: thrown from callback async throw\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback async throw after done\" time=\"*\" classname=\"test\"/>\n        \t<testsuite name=\"only is set but not in only mode\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"4\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"running subtest 1\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"running subtest 2\" time=\"*\" classname=\"test\"/>\n        \t\t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t\t<testcase name=\"running subtest 3\" time=\"*\" classname=\"test\"/>\n        \t\t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t\t<testcase name=\"running subtest 4\" time=\"*\" classname=\"test\"/>\n        \t</testsuite>\n        \t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t<testcase name=\"custom inspect symbol fail\" time=\"*\" classname=\"test\" failure=\"customized\">\n        \t\t<failure type=\"testCodeFailure\" message=\"customized\">\n        [Error [ERR_TEST_FAILURE]: customized] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: customized }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"custom inspect symbol that throws fail\" time=\"*\" classname=\"test\" failure=\"{  foo: 1,  [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]}\">\n        \t\t<failure type=\"testCodeFailure\" message=\"{  foo: 1,  [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]}\">\n        [Error [ERR_TEST_FAILURE]: {\n          foo: 1,\n          [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]\n        }] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: { foo: 1, [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]] }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testsuite name=\"subtest sync throw fails\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"2\" failures=\"2\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"sync throw fails at first\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fails at first\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fails at first\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fails at first\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fails at first\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<testcase name=\"sync throw fails at second\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fails at second\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fails at second\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fails at second\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fails at second\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t</testsuite>\n        \t<testcase name=\"timed out async test\" time=\"*\" classname=\"test\" failure=\"test timed out after 5ms\">\n        \t\t<failure type=\"testTimeoutFailure\" message=\"test timed out after 5ms\">\n        [Error [ERR_TEST_FAILURE]: test timed out after 5ms] { code: 'ERR_TEST_FAILURE', failureType: 'testTimeoutFailure', cause: 'test timed out after 5ms' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"timed out callback test\" time=\"*\" classname=\"test\" failure=\"test timed out after 5ms\">\n        \t\t<failure type=\"testTimeoutFailure\" message=\"test timed out after 5ms\">\n        [Error [ERR_TEST_FAILURE]: test timed out after 5ms] { code: 'ERR_TEST_FAILURE', failureType: 'testTimeoutFailure', cause: 'test timed out after 5ms' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"large timeout async test is ok\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"large timeout callback test is ok\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"successful thenable\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"rejected thenable\" time=\"*\" classname=\"test\" failure=\"custom error\">\n        \t\t<failure type=\"testCodeFailure\" message=\"custom error\">\n        [Error [ERR_TEST_FAILURE]: custom error] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: 'custom error' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unfinished test with uncaughtException\" time=\"*\" classname=\"test\" failure=\"foo\">\n        \t\t<failure type=\"uncaughtException\" message=\"foo\">\n        Error [ERR_TEST_FAILURE]: foo\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error: foo\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unfinished test with unhandledRejection\" time=\"*\" classname=\"test\" failure=\"bar\">\n        \t\t<failure type=\"unhandledRejection\" message=\"bar\">\n        Error [ERR_TEST_FAILURE]: bar\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'unhandledRejection',\n          cause: Error: bar\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"assertion errors display actual and expected properly\" time=\"*\" classname=\"test\" failure=\"Expected values to be loosely deep-equal:{  bar: 1,  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  foo: 1}should loosely deep-equal{  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  circular: &lt;ref *1> {    bar: 2,    c: [Circular *1]  }}\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Expected values to be loosely deep-equal:{  bar: 1,  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  foo: 1}should loosely deep-equal{  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  circular: &lt;ref *1> {    bar: 2,    c: [Circular *1]  }}\">\n        [Error [ERR_TEST_FAILURE]: Expected values to be loosely deep-equal:\n        \n        {\n          bar: 1,\n          baz: {\n            date: 1970-01-01T00:00:00.000Z,\n            null: null,\n            number: 1,\n            string: 'Hello',\n            undefined: undefined\n          },\n          boo: [\n            1\n          ],\n          foo: 1\n        }\n        \n        should loosely deep-equal\n        \n        {\n          baz: {\n            date: 1970-01-01T00:00:00.000Z,\n            null: null,\n            number: 1,\n            string: 'Hello',\n            undefined: undefined\n          },\n          boo: [\n            1\n          ],\n          circular: &lt;ref *1> {\n            bar: 2,\n            c: [Circular *1]\n          }\n        }] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n          \n          {\n            bar: 1,\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            foo: 1\n          }\n          \n          should loosely deep-equal\n          \n          {\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            circular: &lt;ref *1> {\n              bar: 2,\n              c: [Circular *1]\n            }\n          }\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: [Object],\n            expected: [Object],\n            operator: 'deepEqual'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"invalid subtest fail\" time=\"*\" classname=\"test\" failure=\"test could not be started because its parent finished\">\n        \t\t<failure type=\"parentAlreadyFinished\" message=\"test could not be started because its parent finished\">\n        Error [ERR_TEST_FAILURE]: test could not be started because its parent finished\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'parentAlreadyFinished',\n          cause: 'test could not be started because its parent finished'\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<!-- Error: Test \"unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:72:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: Test \"async unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:76:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from async unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: A resource generated asynchronous activity after the test ended. This activity created the error \"Error: uncaught from outside of a test\" which triggered an uncaughtException event, caught by the test runner. -->\n        \t<!-- Error: Test \"immediate throw - passes but warns\" at test/fixtures/test-runner/output/output.js:80:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from immediate throw fail\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- Error: Test \"immediate reject - passes but warns\" at test/fixtures/test-runner/output/output.js:86:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from immediate reject fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: Test \"callback called twice in different ticks\" at test/fixtures/test-runner/output/output.js:251:1 generated asynchronous activity after the test ended. This activity created the error \"Error [ERR_TEST_FAILURE]: callback invoked multiple times\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- Error: Test \"callback async throw after done\" at test/fixtures/test-runner/output/output.js:269:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from callback async throw after done\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- tests 76 -->\n        \t<!-- suites 0 -->\n        \t<!-- pass 35 -->\n        \t<!-- fail 25 -->\n        \t<!-- cancelled 3 -->\n        \t<!-- skipped 9 -->\n        \t<!-- todo 4 -->\n        \t<!-- duration_ms * -->\n        </testsuites>\n        \n      actual: |-\n        <?xml version=\"1.0\" encoding=\"utf-8\"?>\n        <testsuites>\n        \t<testcase name=\"sync pass todo\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"todo\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync pass todo with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"todo\" message=\"this is a passing todo\"/>\n        \t</testcase>\n        \t<testcase name=\"sync fail todo\" time=\"*\" classname=\"test\" failure=\"thrown from sync fail todo\">\n        \t\t<skipped type=\"todo\" message=\"true\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync fail todo\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync fail todo] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync fail todo\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync fail todo with message\" time=\"*\" classname=\"test\" failure=\"thrown from sync fail todo with message\">\n        \t\t<skipped type=\"todo\" message=\"this is a failing todo\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync fail todo with message\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync fail todo with message] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync fail todo with message\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync skip pass\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip pass with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"this is skipped\"/>\n        \t</testcase>\n        \t<testcase name=\"sync pass\" time=\"*\" classname=\"test\"/>\n        \t<!-- this test should pass -->\n        \t<testcase name=\"sync throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from sync throw fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async skip pass\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"async pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from async throw fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from async throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from async throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async skip fail\" time=\"*\" classname=\"test\" failure=\"thrown from async throw fail\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from async throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from async throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async assertion fail\" time=\"*\" classname=\"test\" failure=\"Expected values to be strictly equal:true !== false\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Expected values to be strictly equal:true !== false\">\n        [Error [ERR_TEST_FAILURE]: Expected values to be strictly equal:\n        \n        true !== false\n        ] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n          \n          true !== false\n          \n              *\n              *\n              *\n              *\n              *\n              *\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: true,\n            expected: false,\n            operator: 'strictEqual'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"resolve pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"reject fail\" time=\"*\" classname=\"test\" failure=\"rejected from reject fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"rejected from reject fail\">\n        [Error [ERR_TEST_FAILURE]: rejected from reject fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: rejected from reject fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unhandled rejection - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async unhandled rejection - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate throw - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate reject - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate resolve pass\" time=\"*\" classname=\"test\"/>\n        \t<testsuite name=\"subtest sync throw fail\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"1\" failures=\"1\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"+sync throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fail\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fail\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fail\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<!-- this subtest should make its parent test fail -->\n        \t</testsuite>\n        \t<testcase name=\"sync throw non-error fail\" time=\"*\" classname=\"test\" failure=\"Symbol(thrown symbol from sync throw non-error fail)\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Symbol(thrown symbol from sync throw non-error fail)\">\n        [Error [ERR_TEST_FAILURE]: Symbol(thrown symbol from sync throw non-error fail)] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: Symbol(thrown symbol from sync throw non-error fail) }\n        \t\t</failure>\n        \t</testcase>\n        \t<testsuite name=\"level 0a\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"4\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"level 1a\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1b\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1c\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1d\" time=\"*\" classname=\"test\"/>\n        \t</testsuite>\n        \t<testsuite name=\"top level\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"2\" failures=\"1\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"+long running\" time=\"*\" classname=\"test\" failure=\"test did not finish before its parent and was cancelled\">\n        \t\t\t<failure type=\"cancelledByParent\" message=\"test did not finish before its parent and was cancelled\">\n        [Error [ERR_TEST_FAILURE]: test did not finish before its parent and was cancelled] { code: 'ERR_TEST_FAILURE', failureType: 'cancelledByParent', cause: 'test did not finish before its parent and was cancelled' }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<testsuite name=\"+short running\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"1\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t\t<testcase name=\"++short running\" time=\"*\" classname=\"test\"/>\n        \t\t</testsuite>\n        \t</testsuite>\n        \t<testcase name=\"invalid subtest - pass but subtest fails\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"sync skip option\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip option with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"this is skipped\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip option is false fail\" time=\"*\" classname=\"test\" failure=\"this should be executed\">\n        \t\t<failure type=\"testCodeFailure\" message=\"this should be executed\">\n        [Error [ERR_TEST_FAILURE]: this should be executed] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: this should be executed\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"functionOnly\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"test with only a name provided\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"test with a name and options provided\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"functionAndOptions\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"callback pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback fail\" time=\"*\" classname=\"test\" failure=\"callback failure\">\n        \t\t<failure type=\"testCodeFailure\" message=\"callback failure\">\n        [Error [ERR_TEST_FAILURE]: callback failure] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: callback failure\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback also returns a Promise\" time=\"*\" classname=\"test\" failure=\"passed a callback but also returned a Promise\">\n        \t\t<failure type=\"callbackAndPromisePresent\" message=\"passed a callback but also returned a Promise\">\n        [Error [ERR_TEST_FAILURE]: passed a callback but also returned a Promise] { code: 'ERR_TEST_FAILURE', failureType: 'callbackAndPromisePresent', cause: 'passed a callback but also returned a Promise' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback throw\" time=\"*\" classname=\"test\" failure=\"thrown from callback throw\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from callback throw\">\n        [Error [ERR_TEST_FAILURE]: thrown from callback throw] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from callback throw\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback called twice\" time=\"*\" classname=\"test\" failure=\"callback invoked multiple times\">\n        \t\t<failure type=\"multipleCallbackInvocations\" message=\"callback invoked multiple times\">\n        Error [ERR_TEST_FAILURE]: callback invoked multiple times\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'multipleCallbackInvocations',\n          cause: 'callback invoked multiple times'\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback called twice in different ticks\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback called twice in future tick\" time=\"*\" classname=\"test\" failure=\"callback invoked multiple times\">\n        \t\t<failure type=\"uncaughtException\" message=\"callback invoked multiple times\">\n        [Error [ERR_TEST_FAILURE]: callback invoked multiple times] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error [ERR_TEST_FAILURE]: callback invoked multiple times\n              * {\n            code: 'ERR_TEST_FAILURE',\n            failureType: 'multipleCallbackInvocations',\n            cause: 'callback invoked multiple times'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback async throw\" time=\"*\" classname=\"test\" failure=\"thrown from callback async throw\">\n        \t\t<failure type=\"uncaughtException\" message=\"thrown from callback async throw\">\n        [Error [ERR_TEST_FAILURE]: thrown from callback async throw] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error: thrown from callback async throw\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback async throw after done\" time=\"*\" classname=\"test\"/>\n        \t<testsuite name=\"only is set but not in only mode\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"4\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"running subtest 1\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"running subtest 2\" time=\"*\" classname=\"test\"/>\n        \t\t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t\t<testcase name=\"running subtest 3\" time=\"*\" classname=\"test\"/>\n        \t\t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t\t<testcase name=\"running subtest 4\" time=\"*\" classname=\"test\"/>\n        \t</testsuite>\n        \t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t<testcase name=\"custom inspect symbol fail\" time=\"*\" classname=\"test\" failure=\"customized\">\n        \t\t<failure type=\"testCodeFailure\" message=\"customized\">\n        [Error [ERR_TEST_FAILURE]: customized] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: customized }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"custom inspect symbol that throws fail\" time=\"*\" classname=\"test\" failure=\"{  foo: 1,  [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]}\">\n        \t\t<failure type=\"testCodeFailure\" message=\"{  foo: 1,  [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]}\">\n        [Error [ERR_TEST_FAILURE]: {\n          foo: 1,\n          [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]\n        }] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: { foo: 1, [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]] }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testsuite name=\"subtest sync throw fails\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"2\" failures=\"2\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"sync throw fails at first\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fails at first\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fails at first\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fails at first\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fails at first\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<testcase name=\"sync throw fails at second\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fails at second\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fails at second\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fails at second\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fails at second\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t</testsuite>\n        \t<testcase name=\"timed out async test\" time=\"*\" classname=\"test\" failure=\"test timed out after 5ms\">\n        \t\t<failure type=\"testTimeoutFailure\" message=\"test timed out after 5ms\">\n        [Error [ERR_TEST_FAILURE]: test timed out after 5ms] { code: 'ERR_TEST_FAILURE', failureType: 'testTimeoutFailure', cause: 'test timed out after 5ms' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"timed out callback test\" time=\"*\" classname=\"test\" failure=\"test timed out after 5ms\">\n        \t\t<failure type=\"testTimeoutFailure\" message=\"test timed out after 5ms\">\n        [Error [ERR_TEST_FAILURE]: test timed out after 5ms] { code: 'ERR_TEST_FAILURE', failureType: 'testTimeoutFailure', cause: 'test timed out after 5ms' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"large timeout async test is ok\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"large timeout callback test is ok\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"successful thenable\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"rejected thenable\" time=\"*\" classname=\"test\" failure=\"custom error\">\n        \t\t<failure type=\"testCodeFailure\" message=\"custom error\">\n        [Error [ERR_TEST_FAILURE]: custom error] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: 'custom error' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unfinished test with uncaughtException\" time=\"*\" classname=\"test\" failure=\"foo\">\n        \t\t<failure type=\"uncaughtException\" message=\"foo\">\n        [Error [ERR_TEST_FAILURE]: foo] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error: foo\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unfinished test with unhandledRejection\" time=\"*\" classname=\"test\" failure=\"bar\">\n        \t\t<failure type=\"unhandledRejection\" message=\"bar\">\n        [Error [ERR_TEST_FAILURE]: bar] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'unhandledRejection',\n          cause: Error: bar\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"assertion errors display actual and expected properly\" time=\"*\" classname=\"test\" failure=\"Expected values to be loosely deep-equal:{  bar: 1,  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  foo: 1}should loosely deep-equal{  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  circular: &lt;ref *1> {    bar: 2,    c: [Circular *1]  }}\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Expected values to be loosely deep-equal:{  bar: 1,  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  foo: 1}should loosely deep-equal{  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  circular: &lt;ref *1> {    bar: 2,    c: [Circular *1]  }}\">\n        [Error [ERR_TEST_FAILURE]: Expected values to be loosely deep-equal:\n        \n        {\n          bar: 1,\n          baz: {\n            date: 1970-01-01T00:00:00.000Z,\n            null: null,\n            number: 1,\n            string: 'Hello',\n            undefined: undefined\n          },\n          boo: [\n            1\n          ],\n          foo: 1\n        }\n        \n        should loosely deep-equal\n        \n        {\n          baz: {\n            date: 1970-01-01T00:00:00.000Z,\n            null: null,\n            number: 1,\n            string: 'Hello',\n            undefined: undefined\n          },\n          boo: [\n            1\n          ],\n          circular: &lt;ref *1> {\n            bar: 2,\n            c: [Circular *1]\n          }\n        }] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n          \n          {\n            bar: 1,\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            foo: 1\n          }\n          \n          should loosely deep-equal\n          \n          {\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            circular: &lt;ref *1> {\n              bar: 2,\n              c: [Circular *1]\n            }\n          }\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: [Object],\n            expected: [Object],\n            operator: 'deepEqual'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"invalid subtest fail\" time=\"*\" classname=\"test\" failure=\"test could not be started because its parent finished\">\n        \t\t<failure type=\"parentAlreadyFinished\" message=\"test could not be started because its parent finished\">\n        Error [ERR_TEST_FAILURE]: test could not be started because its parent finished\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'parentAlreadyFinished',\n          cause: 'test could not be started because its parent finished'\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<!-- Error: Test \"unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:72:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: Test \"async unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:76:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from async unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: A resource generated asynchronous activity after the test ended. This activity created the error \"Error: uncaught from outside of a test\" which triggered an uncaughtException event, caught by the test runner. -->\n        \t<!-- Error: Test \"immediate throw - passes but warns\" at test/fixtures/test-runner/output/output.js:80:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from immediate throw fail\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- Error: Test \"immediate reject - passes but warns\" at test/fixtures/test-runner/output/output.js:86:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from immediate reject fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: Test \"callback called twice in different ticks\" at test/fixtures/test-runner/output/output.js:251:1 generated asynchronous activity after the test ended. This activity created the error \"Error [ERR_TEST_FAILURE]: callback invoked multiple times\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- Error: Test \"callback async throw after done\" at test/fixtures/test-runner/output/output.js:269:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from callback async throw after done\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- tests 76 -->\n        \t<!-- suites 0 -->\n        \t<!-- pass 35 -->\n        \t<!-- fail 25 -->\n        \t<!-- cancelled 3 -->\n        \t<!-- skipped 9 -->\n        \t<!-- todo 4 -->\n        \t<!-- duration_ms * -->\n        </testsuites>\n        \n      operator: 'strictEqual'\n      stack: |-\n        assertSnapshot (C:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:56:12)\n        async Module.spawnAndAssert (C:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:84:3)\n        async TestContext.<anonymous> (file:///C:/workspace/node-test-binary-windows-js-suites/node/test/parallel/test-runner-output.mjs:149:5)\n        async Test.run (node:internal/test_runner/test:748:9)\n        async Promise.all (index 23)\n        async Suite.run (node:internal/test_runner/test:1106:7)\n        async Test.processPendingSubtests (node:internal/test_runner/test:461:7)\n      ...\n    # Subtest: test-runner/output/spec_reporter_successful.js\n    ok 25 - test-runner/output/spec_reporter_successful.js\n      ---\n      duration_ms: 2075.5144\n      ...\n    # Subtest: test-runner/output/spec_reporter.js\n    ok 26 - test-runner/output/spec_reporter.js\n      ---\n      duration_ms: 1984.3168\n      ...\n    # Subtest: test-runner/output/spec_reporter_cli.js\n    ok 27 - test-runner/output/spec_reporter_cli.js\n      ---\n      duration_ms: 2429.6413\n      ...\n    # Subtest: test-runner/output/source_mapped_locations.mjs\n    ok 28 - test-runner/output/source_mapped_locations.mjs\n      ---\n      duration_ms: 1526.9996\n      ...\n    # Subtest: test-runner/output/lcov_reporter.js\n    ok 29 - test-runner/output/lcov_reporter.js\n      ---\n      duration_ms: 1641.8993\n      ...\n    # Subtest: test-runner/output/output.js\n    ok 30 - test-runner/output/output.js\n      ---\n      duration_ms: 1502.9043\n      ...\n    # Subtest: test-runner/output/output_cli.js\n    ok 31 - test-runner/output/output_cli.js\n      ---\n      duration_ms: 2219.5186\n      ...\n    # Subtest: test-runner/output/name_and_skip_patterns.js\n    ok 32 - test-runner/output/name_and_skip_patterns.js\n      ---\n      duration_ms: 1387.6482\n      ...\n    # Subtest: test-runner/output/name_pattern.js\n    ok 33 - test-runner/output/name_pattern.js\n      ---\n      duration_ms: 1389.8848\n      ...\n    # Subtest: test-runner/output/name_pattern_with_only.js\n    ok 34 - test-runner/output/name_pattern_with_only.js\n      ---\n      duration_ms: 1006.4883\n      ...\n    # Subtest: test-runner/output/skip_pattern.js\n    ok 35 - test-runner/output/skip_pattern.js\n      ---\n      duration_ms: 1058.4477\n      ...\n    # Subtest: test-runner/output/unfinished-suite-async-error.js\n    ok 36 - test-runner/output/unfinished-suite-async-error.js\n      ---\n      duration_ms: 941.7771\n      ...\n    # Subtest: test-runner/output/unresolved_promise.js\n    not ok 37 - test-runner/output/unresolved_promise.js\n      ---\n      duration_ms: 892.4234\n      location: 'C:\\\\workspace\\\\node-test-binary-windows-js-suites\\\\node\\\\test\\\\parallel\\\\test-runner-output.mjs:155:5'\n      failureType: 'testCodeFailure'\n      error: |-\n        Expected values to be strictly equal:\n        + actual - expected ... Lines skipped\n        \n          'TAP version 13\\n' +\n            '# Subtest: pass\\n' +\n        ...\n            \"  error: 'Promise resolution is still pending but the event loop has already resolved'\\n\" +\n            \"  code: 'ERR_TEST_FAILURE'\\n\" +\n        +   '  ...\\n' +\n        +   '# Subtest: fail\\n' +\n        +   'not ok 3 - fail\\n' +\n        +   '  ---\\n' +\n        +   '  duration_ms: *\\n' +\n        +   \"  location: '/test/fixtures/test-runner/output/unresolved_promise.js:(LINE):1'\\n\" +\n        +   \"  failureType: 'cancelledByParent'\\n\" +\n        +   \"  error: 'Promise resolution is still pending but the event loop has already resolved'\\n\" +\n        +   \"  code: 'ERR_TEST_FAILURE'\\n\" +\n        -   '  stack: |-\\n' +\n        -   '    *\\n' +\n        -   '  ...\\n' +\n        -   '# Subtest: fail\\n' +\n        -   'not ok 3 - fail\\n' +\n        -   '  ---\\n' +\n        -   '  duration_ms: *\\n' +\n        -   \"  location: '/test/fixtures/test-runner/output/unresolved_promise.js:(LINE):1'\\n\" +\n        -   \"  failureType: 'cancelledByParent'\\n\" +\n        -   \"  error: 'Promise resolution is still pending but the event loop has already resolved'\\n\" +\n        -   \"  code: 'ERR_TEST_FAILURE'\\n\" +\n        -   '  stack: |-\\n' +\n        -   '    *\\n' +\n            '  ...\\n' +\n        ...\n            '# skipped 0\\n' +\n            '# todo 0\\n' +\n            '# duration_ms *\\n'\n      code: 'ERR_ASSERTION'\n      name: 'AssertionError'\n      expected: |-\n        TAP version 13\n        # Subtest: pass\n        ok 1 - pass\n          ---\n          duration_ms: *\n          ...\n        # Subtest: never resolving promise\n        not ok 2 - never resolving promise\n          ---\n          duration_ms: *\n          location: '/test/fixtures/test-runner/output/unresolved_promise.js:(LINE):1'\n          failureType: 'cancelledByParent'\n          error: 'Promise resolution is still pending but the event loop has already resolved'\n          code: 'ERR_TEST_FAILURE'\n          stack: |-\n            *\n          ...\n        # Subtest: fail\n        not ok 3 - fail\n          ---\n          duration_ms: *\n          location: '/test/fixtures/test-runner/output/unresolved_promise.js:(LINE):1'\n          failureType: 'cancelledByParent'\n          error: 'Promise resolution is still pending but the event loop has already resolved'\n          code: 'ERR_TEST_FAILURE'\n          stack: |-\n            *\n          ...\n        1..3\n        # tests 3\n        # suites 0\n        # pass 1\n        # fail 0\n        # cancelled 2\n        # skipped 0\n        # todo 0\n        # duration_ms *\n        \n      actual: |-\n        TAP version 13\n        # Subtest: pass\n        ok 1 - pass\n          ---\n          duration_ms: *\n          ...\n        # Subtest: never resolving promise\n        not ok 2 - never resolving promise\n          ---\n          duration_ms: *\n          location: '/test/fixtures/test-runner/output/unresolved_promise.js:(LINE):1'\n          failureType: 'cancelledByParent'\n          error: 'Promise resolution is still pending but the event loop has already resolved'\n          code: 'ERR_TEST_FAILURE'\n          ...\n        # Subtest: fail\n        not ok 3 - fail\n          ---\n          duration_ms: *\n          location: '/test/fixtures/test-runner/output/unresolved_promise.js:(LINE):1'\n          failureType: 'cancelledByParent'\n          error: 'Promise resolution is still pending but the event loop has already resolved'\n          code: 'ERR_TEST_FAILURE'\n          ...\n        1..3\n        # tests 3\n        # suites 0\n        # pass 1\n        # fail 0\n        # cancelled 2\n        # skipped 0\n        # todo 0\n        # duration_ms *\n        \n      operator: 'strictEqual'\n      stack: |-\n        assertSnapshot (C:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:56:12)\n        async Module.spawnAndAssert (C:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:84:3)\n        async TestContext.<anonymous> (file:///C:/workspace/node-test-binary-windows-js-suites/node/test/parallel/test-runner-output.mjs:149:5)\n        async Test.run (node:internal/test_runner/test:748:9)\n        async Promise.all (index 36)\n        async Suite.run (node:internal/test_runner/test:1106:7)\n        async Test.processPendingSubtests (node:internal/test_runner/test:461:7)\n      ...\n    # Subtest: test-runner/output/default_output.js\n        # Subtest: <anonymous>\n        ok 1 - <anonymous> # SKIP Skipping pseudo-tty tests, as pseudo terminals are not available on Windows.\n          ---\n          duration_ms: 254.2806\n          ...\n        1..1\n    ok 38 - test-runner/output/default_output.js\n      ---\n      duration_ms: 255.455\n      ...\n    # Subtest: test-runner/output/arbitrary-output.js\n    ok 39 - test-runner/output/arbitrary-output.js\n      ---\n      duration_ms: 1338.5741\n      ...\n    # Subtest: test-runner/output/async-test-scheduling.mjs\n    ok 40 - test-runner/output/async-test-scheduling.mjs\n      ---\n      duration_ms: 1059.6217\n      ...\n    # Subtest: test-runner/output/arbitrary-output-colored.js\n        # Subtest: <anonymous>\n        ok 1 - <anonymous> # SKIP Skipping pseudo-tty tests, as pseudo terminals are not available on Windows.\n          ---\n          duration_ms: 91.824\n          ...\n        1..1\n    ok 41 - test-runner/output/arbitrary-output-colored.js\n      ---\n      duration_ms: 92.5837\n      ...\n    # Subtest: test-runner/output/dot_output_custom_columns.js\n        # Subtest: <anonymous>\n        ok 1 - <anonymous> # SKIP Skipping pseudo-tty tests, as pseudo terminals are not available on Windows.\n          ---\n          duration_ms: 91.6975\n          ...\n        1..1\n    ok 42 - test-runner/output/dot_output_custom_columns.js\n      ---\n      duration_ms: 92.3321\n      ...\n    # Subtest: test-runner/output/tap_escape.js\n    ok 43 - test-runner/output/tap_escape.js\n      ---\n      duration_ms: 710.2362\n      ...\n    # Subtest: test-runner/output/coverage_failure.js\n    ok 44 - test-runner/output/coverage_failure.js\n      ---\n      duration_ms: 876.7173\n      ...\n    1..44\nnot ok 1 - test runner output\n  ---\n  duration_ms: 5242.9067\n  type: 'suite'\n  location: 'C:\\\\workspace\\\\node-test-binary-windows-js-suites\\\\node\\\\test\\\\parallel\\\\test-runner-output.mjs:153:1'\n  failureType: 'subtestsFailed'\n  error: '3 subtests failed'\n  code: 'ERR_TEST_FAILURE'\n  ...\n1..1\n# tests 47\n# suites 1\n# pass 41\n# fail 3\n# cancelled 0\n# skipped 3\n# todo 0\n# duration_ms 5270.7788"},"time":5833.032,"fullname":"parallel/test-runner-output","closingTestPoint":false}},{"testName":"parallel/test-error-serdes","timestamp":1714660669261,"status":"FAILED","jobName":"node-test-binary-windows-js-suites","config":"node-test-binary-windows-js-suites » 2,win2019-COMPILED_BY-vs2022 #27525","buildUrl":"https://ci.nodejs.org/job/node-test-binary-windows-js-suites/RUN_SUBSET=2,nodes=win2019-COMPILED_BY-vs2022/27525/","buildNumber":27525,"builtOn":"test-rackspace-win2019_vs2019-x64-2","nodeVersion":"23.0.0","commitHash":"3a49bfd9b001e550acf99afcb74b31d6885de874","callStack":[{"upstreamBuild":62664,"upstreamProject":"node-test-commit-windows-fanned","upstreamUrl":"job/node-test-commit-windows-fanned/"},{"upstreamBuild":70433,"upstreamProject":"node-test-commit","upstreamUrl":"job/node-test-commit/"},{"upstreamBuild":58865,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"prId":"52733"}],"tap":{"ok":false,"name":"parallel/test-error-serdes","id":945,"buffered":false,"tapError":null,"skip":false,"todo":": Fix flaky test","previous":null,"plan":null,"diag":{"severity":"fail","exitcode":1,"stack":"timeout"},"time":120192.648,"fullname":"parallel/test-error-serdes","closingTestPoint":false}},{"testName":"parallel/test-disable-proto-throw","timestamp":1714660669261,"status":"FAILED","jobName":"node-test-binary-windows-js-suites","config":"node-test-binary-windows-js-suites » 3,win11-COMPILED_BY-vs2022 #27525","buildUrl":"https://ci.nodejs.org/job/node-test-binary-windows-js-suites/RUN_SUBSET=3,nodes=win11-COMPILED_BY-vs2022/27525/","buildNumber":27525,"builtOn":"test-azure_msft-win11_vs2022-x64-3","nodeVersion":"23.0.0","commitHash":"3a49bfd9b001e550acf99afcb74b31d6885de874","callStack":[{"upstreamBuild":62664,"upstreamProject":"node-test-commit-windows-fanned","upstreamUrl":"job/node-test-commit-windows-fanned/"},{"upstreamBuild":70433,"upstreamProject":"node-test-commit","upstreamUrl":"job/node-test-commit/"},{"upstreamBuild":58865,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"prId":"52733"}],"tap":{"ok":false,"name":"parallel/test-disable-proto-throw","id":223,"buffered":false,"tapError":null,"skip":false,"todo":false,"previous":null,"plan":null,"diag":{"severity":"fail","exitcode":1,"stack":"node:internal/events/slow_event_emitter:56\n    events.__proto__ = null;\n                     ^\n\nError: Accessing Object.prototype.__proto__ has been disallowed with --disable-proto=throw\n    at Function.fromFastEventEmitter (node:internal/events/slow_event_emitter:56:22)\n    at EventEmitter.<computed> (node:internal/events/event_emitter:387:36)\n    at ReadableWorkerStdio.addListener (node:internal/events/event_emitter:464:47)\n    at Readable.on (node:internal/streams/readable:1130:35)\n    at ReadableWorkerStdio.once (node:internal/events/event_emitter:529:8)\n    at Readable.pipe (node:internal/streams/readable:935:9)\n    at pipeWithoutWarning (node:internal/worker:481:10)\n    at new Worker (node:internal/worker:244:7)\n    at Object.<anonymous> (c:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\parallel\\test-disable-proto-throw.js:41:3)\n    at Module._compile (node:internal/modules/cjs/loader:1480:14) {\n  code: 'ERR_PROTO_ACCESS'\n}\n\nNode.js v23.0.0-pre"},"time":166.998,"fullname":"parallel/test-disable-proto-throw","closingTestPoint":false}},{"testName":"parallel/test-assert-builtins-not-read-from-filesystem","timestamp":1714660669261,"status":"FAILED","jobName":"node-test-binary-windows-js-suites","config":"node-test-binary-windows-js-suites » 2,win11-COMPILED_BY-vs2022 #27525","buildUrl":"https://ci.nodejs.org/job/node-test-binary-windows-js-suites/RUN_SUBSET=2,nodes=win11-COMPILED_BY-vs2022/27525/","buildNumber":27525,"builtOn":"test-azure_msft-win11_vs2022-x64-2","nodeVersion":"23.0.0","commitHash":"3a49bfd9b001e550acf99afcb74b31d6885de874","callStack":[{"upstreamBuild":62664,"upstreamProject":"node-test-commit-windows-fanned","upstreamUrl":"job/node-test-commit-windows-fanned/"},{"upstreamBuild":70433,"upstreamProject":"node-test-commit","upstreamUrl":"job/node-test-commit/"},{"upstreamBuild":58865,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"prId":"52733"}],"tap":{"ok":false,"name":"parallel/test-assert-builtins-not-read-from-filesystem","id":69,"buffered":false,"tapError":null,"skip":false,"todo":false,"previous":null,"plan":null,"diag":{"severity":"fail","exitcode":1,"stack":"node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Exit code: 1\n,,node:fs:2348\n\n    return binding.writeFileUtf8(\n\n                   ^\n\n\n\nError: ENOENT: no such file or directory, open 'c:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\.tmp.68\\node:internal\\events\\fast_event_emitter'\n\n    at writeFileSync (node:fs:2348:20)\n\n    at Object.<anonymous> (c:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\parallel\\test-assert-builtins-not-read-from-filesystem.js:41:3)\n\n    at Module._compile (node:internal/modules/cjs/loader:1480:14)\n\n    at Module._extensions..js (node:internal/modules/cjs/loader:1564:10)\n\n    at Module.load (node:internal/modules/cjs/loader:1287:32)\n\n    at Module._load (node:internal/modules/cjs/loader:1103:12)\n\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:168:12)\n\n    at node:internal/main/run_main_module:30:49 {\n\n  errno: -4058,\n\n  code: 'ENOENT',\n\n  syscall: 'open',\n\n  path: 'c:\\\\workspace\\\\node-test-binary-windows-js-suites\\\\node\\\\test\\\\.tmp.68\\\\node:internal\\\\events\\\\fast_event_emitter'\n\n}\n\n\n\nNode.js v23.0.0-pre\n\n\n    at Object.<anonymous> (c:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\parallel\\test-assert-builtins-not-read-from-filesystem.js:31:12)\n    at Module._compile (node:internal/modules/cjs/loader:1480:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1564:10)\n    at Module.load (node:internal/modules/cjs/loader:1287:32)\n    at Module._load (node:internal/modules/cjs/loader:1103:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:168:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: false,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 0,\n  operator: 'strictEqual'\n}\n\nNode.js v23.0.0-pre"},"time":293.007,"fullname":"parallel/test-assert-builtins-not-read-from-filesystem","closingTestPoint":false}},{"testName":"parallel/test-disable-proto-delete","timestamp":1714660669261,"status":"FAILED","jobName":"node-test-binary-windows-js-suites","config":"node-test-binary-windows-js-suites » 2,win11-COMPILED_BY-vs2022 #27525","buildUrl":"https://ci.nodejs.org/job/node-test-binary-windows-js-suites/RUN_SUBSET=2,nodes=win11-COMPILED_BY-vs2022/27525/","buildNumber":27525,"builtOn":"test-azure_msft-win11_vs2022-x64-2","nodeVersion":"23.0.0","commitHash":"3a49bfd9b001e550acf99afcb74b31d6885de874","callStack":[{"upstreamBuild":62664,"upstreamProject":"node-test-commit-windows-fanned","upstreamUrl":"job/node-test-commit-windows-fanned/"},{"upstreamBuild":70433,"upstreamProject":"node-test-commit","upstreamUrl":"job/node-test-commit/"},{"upstreamBuild":58865,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"prId":"52733"}],"tap":{"ok":false,"name":"parallel/test-disable-proto-delete","id":224,"buffered":false,"tapError":null,"skip":false,"todo":false,"previous":null,"plan":null,"diag":{"severity":"fail","exitcode":1,"stack":"node:internal/events/slow_event_emitter:291\n    for (let i = listeners.length - 1; i >= 0; i--) {\n                           ^\n\nTypeError: Cannot read properties of null (reading 'length')\n    at SlowEventEmitter.removeAllListeners (node:internal/events/slow_event_emitter:291:28)\n    at Worker.removeAllListeners (node:internal/events/event_emitter:576:38)\n    at SlowEventEmitter.removeAllListeners (node:internal/events/slow_event_emitter:276:41)\n    at Worker.removeAllListeners (node:internal/events/event_emitter:576:38)\n    at [kOnExit] (node:internal/worker:316:10)\n    at Worker.<computed>.onexit (node:internal/worker:229:20)\n\nNode.js v23.0.0-pre"},"time":228.998,"fullname":"parallel/test-disable-proto-delete","closingTestPoint":false}},{"testName":"parallel/test-runner-output","timestamp":1714660669261,"status":"FAILED","jobName":"node-test-binary-windows-js-suites","config":"node-test-binary-windows-js-suites » 2,win11-COMPILED_BY-vs2022 #27525","buildUrl":"https://ci.nodejs.org/job/node-test-binary-windows-js-suites/RUN_SUBSET=2,nodes=win11-COMPILED_BY-vs2022/27525/","buildNumber":27525,"builtOn":"test-azure_msft-win11_vs2022-x64-2","nodeVersion":"23.0.0","commitHash":"3a49bfd9b001e550acf99afcb74b31d6885de874","callStack":[{"upstreamBuild":62664,"upstreamProject":"node-test-commit-windows-fanned","upstreamUrl":"job/node-test-commit-windows-fanned/"},{"upstreamBuild":70433,"upstreamProject":"node-test-commit","upstreamUrl":"job/node-test-commit/"},{"upstreamBuild":58865,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"prId":"52733"}],"tap":{"ok":false,"name":"parallel/test-runner-output","id":677,"buffered":false,"tapError":null,"skip":false,"todo":false,"previous":null,"plan":null,"diag":{"severity":"fail","exitcode":1,"stack":"TAP version 13\n# Subtest: test runner output\n    # Subtest: test-runner/output/abort.js\n    ok 1 - test-runner/output/abort.js\n      ---\n      duration_ms: 1742.4266\n      ...\n    # Subtest: test-runner/output/abort_suite.js\n    ok 2 - test-runner/output/abort_suite.js\n      ---\n      duration_ms: 2094.6766\n      ...\n    # Subtest: test-runner/output/abort_hooks.js\n    ok 3 - test-runner/output/abort_hooks.js\n      ---\n      duration_ms: 1098.5821\n      ...\n    # Subtest: test-runner/output/describe_it.js\n    ok 4 - test-runner/output/describe_it.js\n      ---\n      duration_ms: 1535.8092\n      ...\n    # Subtest: test-runner/output/describe_nested.js\n    ok 5 - test-runner/output/describe_nested.js\n      ---\n      duration_ms: 1084.2238\n      ...\n    # Subtest: test-runner/output/eval_dot.js\n    ok 6 - test-runner/output/eval_dot.js\n      ---\n      duration_ms: 650.887\n      ...\n    # Subtest: test-runner/output/eval_spec.js\n    ok 7 - test-runner/output/eval_spec.js\n      ---\n      duration_ms: 826.7856\n      ...\n    # Subtest: test-runner/output/eval_tap.js\n    ok 8 - test-runner/output/eval_tap.js\n      ---\n      duration_ms: 882.1218\n      ...\n    # Subtest: test-runner/output/hooks.js\n    ok 9 - test-runner/output/hooks.js\n      ---\n      duration_ms: 1350.3818\n      ...\n    # Subtest: test-runner/output/hooks_spec_reporter.js\n    ok 10 - test-runner/output/hooks_spec_reporter.js\n      ---\n      duration_ms: 2777.0955\n      ...\n    # Subtest: test-runner/output/skip-each-hooks.js\n    ok 11 - test-runner/output/skip-each-hooks.js\n      ---\n      duration_ms: 1036.8413\n      ...\n    # Subtest: test-runner/output/suite-skip-hooks.js\n    ok 12 - test-runner/output/suite-skip-hooks.js\n      ---\n      duration_ms: 1449.0067\n      ...\n    # Subtest: test-runner/output/timeout_in_before_each_should_not_affect_further_tests.js\n    ok 13 - test-runner/output/timeout_in_before_each_should_not_affect_further_tests.js\n      ---\n      duration_ms: 2759.8852\n      ...\n    # Subtest: test-runner/output/hooks-with-no-global-test.js\n    ok 14 - test-runner/output/hooks-with-no-global-test.js\n      ---\n      duration_ms: 1457.8422\n      ...\n    # Subtest: test-runner/output/global-hooks-with-no-tests.js\n    ok 15 - test-runner/output/global-hooks-with-no-tests.js\n      ---\n      duration_ms: 1551.6042\n      ...\n    # Subtest: test-runner/output/before-and-after-each-too-many-listeners.js\n    ok 16 - test-runner/output/before-and-after-each-too-many-listeners.js\n      ---\n      duration_ms: 1443.5367\n      ...\n    # Subtest: test-runner/output/before-and-after-each-with-timeout-too-many-listeners.js\n    ok 17 - test-runner/output/before-and-after-each-with-timeout-too-many-listeners.js\n      ---\n      duration_ms: 1293.0673\n      ...\n    # Subtest: test-runner/output/force_exit.js\n    ok 18 - test-runner/output/force_exit.js\n      ---\n      duration_ms: 1530.0237\n      ...\n    # Subtest: test-runner/output/global_after_should_fail_the_test.js\n    ok 19 - test-runner/output/global_after_should_fail_the_test.js\n      ---\n      duration_ms: 1422.4984\n      ...\n    # Subtest: test-runner/output/no_refs.js\n    not ok 20 - test-runner/output/no_refs.js\n      ---\n      duration_ms: 1515.2622\n      location: 'c:\\\\workspace\\\\node-test-binary-windows-js-suites\\\\node\\\\test\\\\parallel\\\\test-runner-output.mjs:155:5'\n      failureType: 'testCodeFailure'\n      error: |-\n        Expected values to be strictly equal:\n        + actual - expected ... Lines skipped\n        \n          'TAP version 13\\n' +\n            '# Subtest: does not keep event loop alive\\n' +\n        ...\n            \"      error: 'Promise resolution is still pending but the event loop has already resolved'\\n\" +\n            \"      code: 'ERR_TEST_FAILURE'\\n\" +\n        +   '      ...\\n' +\n        +   '    1..1\\n' +\n        +   'not ok 1 - does not keep event loop alive\\n' +\n        +   '  ---\\n' +\n        +   '  duration_ms: *\\n' +\n        +   \"  location: '/test/fixtures/test-runner/output/no_refs.js:(LINE):1'\\n\" +\n        +   \"  failureType: 'cancelledByParent'\\n\" +\n        +   \"  error: 'Promise resolution is still pending but the event loop has already resolved'\\n\" +\n        +   \"  code: 'ERR_TEST_FAILURE'\\n\" +\n        -   '      stack: |-\\n' +\n        -   '        *\\n' +\n        -   '      ...\\n' +\n        -   '    1..1\\n' +\n        -   'not ok 1 - does not keep event loop alive\\n' +\n        -   '  ---\\n' +\n        -   '  duration_ms: *\\n' +\n        -   \"  location: '/test/fixtures/test-runner/output/no_refs.js:(LINE):1'\\n\" +\n        -   \"  failureType: 'cancelledByParent'\\n\" +\n        -   \"  error: 'Promise resolution is still pending but the event loop has already resolved'\\n\" +\n        -   \"  code: 'ERR_TEST_FAILURE'\\n\" +\n        -   '  stack: |-\\n' +\n        -   '    *\\n' +\n            '  ...\\n' +\n        ...\n            '# skipped 0\\n' +\n            '# todo 0\\n' +\n            '# duration_ms *\\n'\n      code: 'ERR_ASSERTION'\n      name: 'AssertionError'\n      expected: |-\n        TAP version 13\n        # Subtest: does not keep event loop alive\n            # Subtest: +does not keep event loop alive\n            not ok 1 - +does not keep event loop alive\n              ---\n              duration_ms: *\n              location: '/test/fixtures/test-runner/output/no_refs.js:(LINE):11'\n              failureType: 'cancelledByParent'\n              error: 'Promise resolution is still pending but the event loop has already resolved'\n              code: 'ERR_TEST_FAILURE'\n              stack: |-\n                *\n              ...\n            1..1\n        not ok 1 - does not keep event loop alive\n          ---\n          duration_ms: *\n          location: '/test/fixtures/test-runner/output/no_refs.js:(LINE):1'\n          failureType: 'cancelledByParent'\n          error: 'Promise resolution is still pending but the event loop has already resolved'\n          code: 'ERR_TEST_FAILURE'\n          stack: |-\n            *\n          ...\n        1..1\n        # tests 2\n        # suites 0\n        # pass 0\n        # fail 0\n        # cancelled 2\n        # skipped 0\n        # todo 0\n        # duration_ms *\n        \n      actual: |-\n        TAP version 13\n        # Subtest: does not keep event loop alive\n            # Subtest: +does not keep event loop alive\n            not ok 1 - +does not keep event loop alive\n              ---\n              duration_ms: *\n              location: '/test/fixtures/test-runner/output/no_refs.js:(LINE):11'\n              failureType: 'cancelledByParent'\n              error: 'Promise resolution is still pending but the event loop has already resolved'\n              code: 'ERR_TEST_FAILURE'\n              ...\n            1..1\n        not ok 1 - does not keep event loop alive\n          ---\n          duration_ms: *\n          location: '/test/fixtures/test-runner/output/no_refs.js:(LINE):1'\n          failureType: 'cancelledByParent'\n          error: 'Promise resolution is still pending but the event loop has already resolved'\n          code: 'ERR_TEST_FAILURE'\n          ...\n        1..1\n        # tests 2\n        # suites 0\n        # pass 0\n        # fail 0\n        # cancelled 2\n        # skipped 0\n        # todo 0\n        # duration_ms *\n        \n      operator: 'strictEqual'\n      stack: |-\n        assertSnapshot (c:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:56:12)\n        async Module.spawnAndAssert (c:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:84:3)\n        async TestContext.<anonymous> (file:///c:/workspace/node-test-binary-windows-js-suites/node/test/parallel/test-runner-output.mjs:149:5)\n        async Test.run (node:internal/test_runner/test:748:9)\n        async Promise.all (index 19)\n        async Suite.run (node:internal/test_runner/test:1106:7)\n        async Test.processPendingSubtests (node:internal/test_runner/test:461:7)\n      ...\n    # Subtest: test-runner/output/no_tests.js\n    ok 21 - test-runner/output/no_tests.js\n      ---\n      duration_ms: 2320.581\n      ...\n    # Subtest: test-runner/output/only_tests.js\n    ok 22 - test-runner/output/only_tests.js\n      ---\n      duration_ms: 2126.256\n      ...\n    # Subtest: test-runner/output/dot_reporter.js\n    ok 23 - test-runner/output/dot_reporter.js\n      ---\n      duration_ms: 3359.8471\n      ...\n    # Subtest: test-runner/output/junit_reporter.js\n    not ok 24 - test-runner/output/junit_reporter.js\n      ---\n      duration_ms: 3364.4008\n      location: 'c:\\\\workspace\\\\node-test-binary-windows-js-suites\\\\node\\\\test\\\\parallel\\\\test-runner-output.mjs:155:5'\n      failureType: 'testCodeFailure'\n      error: |-\n        Expected values to be strictly equal:\n        + actual - expected ... Lines skipped\n        \n          '<?xml version=\"1.0\" encoding=\"utf-8\"?>\\n' +\n            '<testsuites>\\n' +\n        ...\n            '\\t\\t</failure>\\n' +\n            '\\t</testcase>\\n' +\n        +   '\\t<testcase name=\"callback called twice\" time=\"*\" '... 11376 more characters\n        -   '\\t<testcase name=\"callback called twice\" time=\"*\" '... 11392 more characters\n      code: 'ERR_ASSERTION'\n      name: 'AssertionError'\n      expected: |-\n        <?xml version=\"1.0\" encoding=\"utf-8\"?>\n        <testsuites>\n        \t<testcase name=\"sync pass todo\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"todo\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync pass todo with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"todo\" message=\"this is a passing todo\"/>\n        \t</testcase>\n        \t<testcase name=\"sync fail todo\" time=\"*\" classname=\"test\" failure=\"thrown from sync fail todo\">\n        \t\t<skipped type=\"todo\" message=\"true\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync fail todo\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync fail todo] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync fail todo\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync fail todo with message\" time=\"*\" classname=\"test\" failure=\"thrown from sync fail todo with message\">\n        \t\t<skipped type=\"todo\" message=\"this is a failing todo\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync fail todo with message\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync fail todo with message] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync fail todo with message\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync skip pass\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip pass with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"this is skipped\"/>\n        \t</testcase>\n        \t<testcase name=\"sync pass\" time=\"*\" classname=\"test\"/>\n        \t<!-- this test should pass -->\n        \t<testcase name=\"sync throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from sync throw fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async skip pass\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"async pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from async throw fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from async throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from async throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async skip fail\" time=\"*\" classname=\"test\" failure=\"thrown from async throw fail\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from async throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from async throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async assertion fail\" time=\"*\" classname=\"test\" failure=\"Expected values to be strictly equal:true !== false\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Expected values to be strictly equal:true !== false\">\n        [Error [ERR_TEST_FAILURE]: Expected values to be strictly equal:\n        \n        true !== false\n        ] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n          \n          true !== false\n          \n              *\n              *\n              *\n              *\n              *\n              *\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: true,\n            expected: false,\n            operator: 'strictEqual'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"resolve pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"reject fail\" time=\"*\" classname=\"test\" failure=\"rejected from reject fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"rejected from reject fail\">\n        [Error [ERR_TEST_FAILURE]: rejected from reject fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: rejected from reject fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unhandled rejection - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async unhandled rejection - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate throw - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate reject - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate resolve pass\" time=\"*\" classname=\"test\"/>\n        \t<testsuite name=\"subtest sync throw fail\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"1\" failures=\"1\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"+sync throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fail\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fail\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fail\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<!-- this subtest should make its parent test fail -->\n        \t</testsuite>\n        \t<testcase name=\"sync throw non-error fail\" time=\"*\" classname=\"test\" failure=\"Symbol(thrown symbol from sync throw non-error fail)\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Symbol(thrown symbol from sync throw non-error fail)\">\n        [Error [ERR_TEST_FAILURE]: Symbol(thrown symbol from sync throw non-error fail)] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: Symbol(thrown symbol from sync throw non-error fail) }\n        \t\t</failure>\n        \t</testcase>\n        \t<testsuite name=\"level 0a\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"4\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"level 1a\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1b\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1c\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1d\" time=\"*\" classname=\"test\"/>\n        \t</testsuite>\n        \t<testsuite name=\"top level\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"2\" failures=\"1\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"+long running\" time=\"*\" classname=\"test\" failure=\"test did not finish before its parent and was cancelled\">\n        \t\t\t<failure type=\"cancelledByParent\" message=\"test did not finish before its parent and was cancelled\">\n        [Error [ERR_TEST_FAILURE]: test did not finish before its parent and was cancelled] { code: 'ERR_TEST_FAILURE', failureType: 'cancelledByParent', cause: 'test did not finish before its parent and was cancelled' }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<testsuite name=\"+short running\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"1\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t\t<testcase name=\"++short running\" time=\"*\" classname=\"test\"/>\n        \t\t</testsuite>\n        \t</testsuite>\n        \t<testcase name=\"invalid subtest - pass but subtest fails\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"sync skip option\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip option with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"this is skipped\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip option is false fail\" time=\"*\" classname=\"test\" failure=\"this should be executed\">\n        \t\t<failure type=\"testCodeFailure\" message=\"this should be executed\">\n        [Error [ERR_TEST_FAILURE]: this should be executed] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: this should be executed\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"functionOnly\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"test with only a name provided\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"test with a name and options provided\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"functionAndOptions\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"callback pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback fail\" time=\"*\" classname=\"test\" failure=\"callback failure\">\n        \t\t<failure type=\"testCodeFailure\" message=\"callback failure\">\n        [Error [ERR_TEST_FAILURE]: callback failure] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: callback failure\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback also returns a Promise\" time=\"*\" classname=\"test\" failure=\"passed a callback but also returned a Promise\">\n        \t\t<failure type=\"callbackAndPromisePresent\" message=\"passed a callback but also returned a Promise\">\n        [Error [ERR_TEST_FAILURE]: passed a callback but also returned a Promise] { code: 'ERR_TEST_FAILURE', failureType: 'callbackAndPromisePresent', cause: 'passed a callback but also returned a Promise' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback throw\" time=\"*\" classname=\"test\" failure=\"thrown from callback throw\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from callback throw\">\n        [Error [ERR_TEST_FAILURE]: thrown from callback throw] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from callback throw\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback called twice\" time=\"*\" classname=\"test\" failure=\"callback invoked multiple times\">\n        \t\t<failure type=\"multipleCallbackInvocations\" message=\"callback invoked multiple times\">\n        Error [ERR_TEST_FAILURE]: callback invoked multiple times\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'multipleCallbackInvocations',\n          cause: 'callback invoked multiple times'\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback called twice in different ticks\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback called twice in future tick\" time=\"*\" classname=\"test\" failure=\"callback invoked multiple times\">\n        \t\t<failure type=\"uncaughtException\" message=\"callback invoked multiple times\">\n        Error [ERR_TEST_FAILURE]: callback invoked multiple times\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error [ERR_TEST_FAILURE]: callback invoked multiple times\n              * {\n            code: 'ERR_TEST_FAILURE',\n            failureType: 'multipleCallbackInvocations',\n            cause: 'callback invoked multiple times'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback async throw\" time=\"*\" classname=\"test\" failure=\"thrown from callback async throw\">\n        \t\t<failure type=\"uncaughtException\" message=\"thrown from callback async throw\">\n        Error [ERR_TEST_FAILURE]: thrown from callback async throw\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error: thrown from callback async throw\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback async throw after done\" time=\"*\" classname=\"test\"/>\n        \t<testsuite name=\"only is set but not in only mode\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"4\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"running subtest 1\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"running subtest 2\" time=\"*\" classname=\"test\"/>\n        \t\t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t\t<testcase name=\"running subtest 3\" time=\"*\" classname=\"test\"/>\n        \t\t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t\t<testcase name=\"running subtest 4\" time=\"*\" classname=\"test\"/>\n        \t</testsuite>\n        \t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t<testcase name=\"custom inspect symbol fail\" time=\"*\" classname=\"test\" failure=\"customized\">\n        \t\t<failure type=\"testCodeFailure\" message=\"customized\">\n        [Error [ERR_TEST_FAILURE]: customized] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: customized }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"custom inspect symbol that throws fail\" time=\"*\" classname=\"test\" failure=\"{  foo: 1,  [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]}\">\n        \t\t<failure type=\"testCodeFailure\" message=\"{  foo: 1,  [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]}\">\n        [Error [ERR_TEST_FAILURE]: {\n          foo: 1,\n          [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]\n        }] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: { foo: 1, [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]] }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testsuite name=\"subtest sync throw fails\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"2\" failures=\"2\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"sync throw fails at first\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fails at first\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fails at first\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fails at first\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fails at first\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<testcase name=\"sync throw fails at second\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fails at second\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fails at second\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fails at second\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fails at second\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t</testsuite>\n        \t<testcase name=\"timed out async test\" time=\"*\" classname=\"test\" failure=\"test timed out after 5ms\">\n        \t\t<failure type=\"testTimeoutFailure\" message=\"test timed out after 5ms\">\n        [Error [ERR_TEST_FAILURE]: test timed out after 5ms] { code: 'ERR_TEST_FAILURE', failureType: 'testTimeoutFailure', cause: 'test timed out after 5ms' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"timed out callback test\" time=\"*\" classname=\"test\" failure=\"test timed out after 5ms\">\n        \t\t<failure type=\"testTimeoutFailure\" message=\"test timed out after 5ms\">\n        [Error [ERR_TEST_FAILURE]: test timed out after 5ms] { code: 'ERR_TEST_FAILURE', failureType: 'testTimeoutFailure', cause: 'test timed out after 5ms' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"large timeout async test is ok\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"large timeout callback test is ok\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"successful thenable\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"rejected thenable\" time=\"*\" classname=\"test\" failure=\"custom error\">\n        \t\t<failure type=\"testCodeFailure\" message=\"custom error\">\n        [Error [ERR_TEST_FAILURE]: custom error] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: 'custom error' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unfinished test with uncaughtException\" time=\"*\" classname=\"test\" failure=\"foo\">\n        \t\t<failure type=\"uncaughtException\" message=\"foo\">\n        Error [ERR_TEST_FAILURE]: foo\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error: foo\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unfinished test with unhandledRejection\" time=\"*\" classname=\"test\" failure=\"bar\">\n        \t\t<failure type=\"unhandledRejection\" message=\"bar\">\n        Error [ERR_TEST_FAILURE]: bar\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'unhandledRejection',\n          cause: Error: bar\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"assertion errors display actual and expected properly\" time=\"*\" classname=\"test\" failure=\"Expected values to be loosely deep-equal:{  bar: 1,  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  foo: 1}should loosely deep-equal{  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  circular: &lt;ref *1> {    bar: 2,    c: [Circular *1]  }}\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Expected values to be loosely deep-equal:{  bar: 1,  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  foo: 1}should loosely deep-equal{  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  circular: &lt;ref *1> {    bar: 2,    c: [Circular *1]  }}\">\n        [Error [ERR_TEST_FAILURE]: Expected values to be loosely deep-equal:\n        \n        {\n          bar: 1,\n          baz: {\n            date: 1970-01-01T00:00:00.000Z,\n            null: null,\n            number: 1,\n            string: 'Hello',\n            undefined: undefined\n          },\n          boo: [\n            1\n          ],\n          foo: 1\n        }\n        \n        should loosely deep-equal\n        \n        {\n          baz: {\n            date: 1970-01-01T00:00:00.000Z,\n            null: null,\n            number: 1,\n            string: 'Hello',\n            undefined: undefined\n          },\n          boo: [\n            1\n          ],\n          circular: &lt;ref *1> {\n            bar: 2,\n            c: [Circular *1]\n          }\n        }] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n          \n          {\n            bar: 1,\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            foo: 1\n          }\n          \n          should loosely deep-equal\n          \n          {\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            circular: &lt;ref *1> {\n              bar: 2,\n              c: [Circular *1]\n            }\n          }\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: [Object],\n            expected: [Object],\n            operator: 'deepEqual'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"invalid subtest fail\" time=\"*\" classname=\"test\" failure=\"test could not be started because its parent finished\">\n        \t\t<failure type=\"parentAlreadyFinished\" message=\"test could not be started because its parent finished\">\n        Error [ERR_TEST_FAILURE]: test could not be started because its parent finished\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'parentAlreadyFinished',\n          cause: 'test could not be started because its parent finished'\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<!-- Error: Test \"unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:72:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: Test \"async unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:76:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from async unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: A resource generated asynchronous activity after the test ended. This activity created the error \"Error: uncaught from outside of a test\" which triggered an uncaughtException event, caught by the test runner. -->\n        \t<!-- Error: Test \"immediate throw - passes but warns\" at test/fixtures/test-runner/output/output.js:80:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from immediate throw fail\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- Error: Test \"immediate reject - passes but warns\" at test/fixtures/test-runner/output/output.js:86:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from immediate reject fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: Test \"callback called twice in different ticks\" at test/fixtures/test-runner/output/output.js:251:1 generated asynchronous activity after the test ended. This activity created the error \"Error [ERR_TEST_FAILURE]: callback invoked multiple times\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- Error: Test \"callback async throw after done\" at test/fixtures/test-runner/output/output.js:269:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from callback async throw after done\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- tests 76 -->\n        \t<!-- suites 0 -->\n        \t<!-- pass 35 -->\n        \t<!-- fail 25 -->\n        \t<!-- cancelled 3 -->\n        \t<!-- skipped 9 -->\n        \t<!-- todo 4 -->\n        \t<!-- duration_ms * -->\n        </testsuites>\n        \n      actual: |-\n        <?xml version=\"1.0\" encoding=\"utf-8\"?>\n        <testsuites>\n        \t<testcase name=\"sync pass todo\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"todo\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync pass todo with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"todo\" message=\"this is a passing todo\"/>\n        \t</testcase>\n        \t<testcase name=\"sync fail todo\" time=\"*\" classname=\"test\" failure=\"thrown from sync fail todo\">\n        \t\t<skipped type=\"todo\" message=\"true\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync fail todo\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync fail todo] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync fail todo\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync fail todo with message\" time=\"*\" classname=\"test\" failure=\"thrown from sync fail todo with message\">\n        \t\t<skipped type=\"todo\" message=\"this is a failing todo\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync fail todo with message\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync fail todo with message] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync fail todo with message\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync skip pass\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip pass with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"this is skipped\"/>\n        \t</testcase>\n        \t<testcase name=\"sync pass\" time=\"*\" classname=\"test\"/>\n        \t<!-- this test should pass -->\n        \t<testcase name=\"sync throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from sync throw fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async skip pass\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"async pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from async throw fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from async throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from async throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async skip fail\" time=\"*\" classname=\"test\" failure=\"thrown from async throw fail\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from async throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from async throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async assertion fail\" time=\"*\" classname=\"test\" failure=\"Expected values to be strictly equal:true !== false\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Expected values to be strictly equal:true !== false\">\n        [Error [ERR_TEST_FAILURE]: Expected values to be strictly equal:\n        \n        true !== false\n        ] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n          \n          true !== false\n          \n              *\n              *\n              *\n              *\n              *\n              *\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: true,\n            expected: false,\n            operator: 'strictEqual'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"resolve pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"reject fail\" time=\"*\" classname=\"test\" failure=\"rejected from reject fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"rejected from reject fail\">\n        [Error [ERR_TEST_FAILURE]: rejected from reject fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: rejected from reject fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unhandled rejection - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async unhandled rejection - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate throw - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate reject - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate resolve pass\" time=\"*\" classname=\"test\"/>\n        \t<testsuite name=\"subtest sync throw fail\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"1\" failures=\"1\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"+sync throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fail\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fail\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fail\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<!-- this subtest should make its parent test fail -->\n        \t</testsuite>\n        \t<testcase name=\"sync throw non-error fail\" time=\"*\" classname=\"test\" failure=\"Symbol(thrown symbol from sync throw non-error fail)\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Symbol(thrown symbol from sync throw non-error fail)\">\n        [Error [ERR_TEST_FAILURE]: Symbol(thrown symbol from sync throw non-error fail)] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: Symbol(thrown symbol from sync throw non-error fail) }\n        \t\t</failure>\n        \t</testcase>\n        \t<testsuite name=\"level 0a\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"4\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"level 1a\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1b\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1c\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1d\" time=\"*\" classname=\"test\"/>\n        \t</testsuite>\n        \t<testsuite name=\"top level\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"2\" failures=\"1\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"+long running\" time=\"*\" classname=\"test\" failure=\"test did not finish before its parent and was cancelled\">\n        \t\t\t<failure type=\"cancelledByParent\" message=\"test did not finish before its parent and was cancelled\">\n        [Error [ERR_TEST_FAILURE]: test did not finish before its parent and was cancelled] { code: 'ERR_TEST_FAILURE', failureType: 'cancelledByParent', cause: 'test did not finish before its parent and was cancelled' }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<testsuite name=\"+short running\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"1\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t\t<testcase name=\"++short running\" time=\"*\" classname=\"test\"/>\n        \t\t</testsuite>\n        \t</testsuite>\n        \t<testcase name=\"invalid subtest - pass but subtest fails\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"sync skip option\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip option with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"this is skipped\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip option is false fail\" time=\"*\" classname=\"test\" failure=\"this should be executed\">\n        \t\t<failure type=\"testCodeFailure\" message=\"this should be executed\">\n        [Error [ERR_TEST_FAILURE]: this should be executed] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: this should be executed\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"functionOnly\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"test with only a name provided\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"test with a name and options provided\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"functionAndOptions\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"callback pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback fail\" time=\"*\" classname=\"test\" failure=\"callback failure\">\n        \t\t<failure type=\"testCodeFailure\" message=\"callback failure\">\n        [Error [ERR_TEST_FAILURE]: callback failure] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: callback failure\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback also returns a Promise\" time=\"*\" classname=\"test\" failure=\"passed a callback but also returned a Promise\">\n        \t\t<failure type=\"callbackAndPromisePresent\" message=\"passed a callback but also returned a Promise\">\n        [Error [ERR_TEST_FAILURE]: passed a callback but also returned a Promise] { code: 'ERR_TEST_FAILURE', failureType: 'callbackAndPromisePresent', cause: 'passed a callback but also returned a Promise' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback throw\" time=\"*\" classname=\"test\" failure=\"thrown from callback throw\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from callback throw\">\n        [Error [ERR_TEST_FAILURE]: thrown from callback throw] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from callback throw\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback called twice\" time=\"*\" classname=\"test\" failure=\"callback invoked multiple times\">\n        \t\t<failure type=\"multipleCallbackInvocations\" message=\"callback invoked multiple times\">\n        Error [ERR_TEST_FAILURE]: callback invoked multiple times\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'multipleCallbackInvocations',\n          cause: 'callback invoked multiple times'\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback called twice in different ticks\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback called twice in future tick\" time=\"*\" classname=\"test\" failure=\"callback invoked multiple times\">\n        \t\t<failure type=\"uncaughtException\" message=\"callback invoked multiple times\">\n        [Error [ERR_TEST_FAILURE]: callback invoked multiple times] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error [ERR_TEST_FAILURE]: callback invoked multiple times\n              * {\n            code: 'ERR_TEST_FAILURE',\n            failureType: 'multipleCallbackInvocations',\n            cause: 'callback invoked multiple times'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback async throw\" time=\"*\" classname=\"test\" failure=\"thrown from callback async throw\">\n        \t\t<failure type=\"uncaughtException\" message=\"thrown from callback async throw\">\n        [Error [ERR_TEST_FAILURE]: thrown from callback async throw] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error: thrown from callback async throw\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback async throw after done\" time=\"*\" classname=\"test\"/>\n        \t<testsuite name=\"only is set but not in only mode\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"4\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"running subtest 1\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"running subtest 2\" time=\"*\" classname=\"test\"/>\n        \t\t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t\t<testcase name=\"running subtest 3\" time=\"*\" classname=\"test\"/>\n        \t\t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t\t<testcase name=\"running subtest 4\" time=\"*\" classname=\"test\"/>\n        \t</testsuite>\n        \t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t<testcase name=\"custom inspect symbol fail\" time=\"*\" classname=\"test\" failure=\"customized\">\n        \t\t<failure type=\"testCodeFailure\" message=\"customized\">\n        [Error [ERR_TEST_FAILURE]: customized] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: customized }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"custom inspect symbol that throws fail\" time=\"*\" classname=\"test\" failure=\"{  foo: 1,  [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]}\">\n        \t\t<failure type=\"testCodeFailure\" message=\"{  foo: 1,  [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]}\">\n        [Error [ERR_TEST_FAILURE]: {\n          foo: 1,\n          [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]\n        }] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: { foo: 1, [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]] }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testsuite name=\"subtest sync throw fails\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"2\" failures=\"2\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"sync throw fails at first\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fails at first\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fails at first\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fails at first\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fails at first\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<testcase name=\"sync throw fails at second\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fails at second\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fails at second\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fails at second\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fails at second\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t</testsuite>\n        \t<testcase name=\"timed out async test\" time=\"*\" classname=\"test\" failure=\"test timed out after 5ms\">\n        \t\t<failure type=\"testTimeoutFailure\" message=\"test timed out after 5ms\">\n        [Error [ERR_TEST_FAILURE]: test timed out after 5ms] { code: 'ERR_TEST_FAILURE', failureType: 'testTimeoutFailure', cause: 'test timed out after 5ms' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"timed out callback test\" time=\"*\" classname=\"test\" failure=\"test timed out after 5ms\">\n        \t\t<failure type=\"testTimeoutFailure\" message=\"test timed out after 5ms\">\n        [Error [ERR_TEST_FAILURE]: test timed out after 5ms] { code: 'ERR_TEST_FAILURE', failureType: 'testTimeoutFailure', cause: 'test timed out after 5ms' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"large timeout async test is ok\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"large timeout callback test is ok\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"successful thenable\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"rejected thenable\" time=\"*\" classname=\"test\" failure=\"custom error\">\n        \t\t<failure type=\"testCodeFailure\" message=\"custom error\">\n        [Error [ERR_TEST_FAILURE]: custom error] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: 'custom error' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unfinished test with uncaughtException\" time=\"*\" classname=\"test\" failure=\"foo\">\n        \t\t<failure type=\"uncaughtException\" message=\"foo\">\n        [Error [ERR_TEST_FAILURE]: foo] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error: foo\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unfinished test with unhandledRejection\" time=\"*\" classname=\"test\" failure=\"bar\">\n        \t\t<failure type=\"unhandledRejection\" message=\"bar\">\n        [Error [ERR_TEST_FAILURE]: bar] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'unhandledRejection',\n          cause: Error: bar\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"assertion errors display actual and expected properly\" time=\"*\" classname=\"test\" failure=\"Expected values to be loosely deep-equal:{  bar: 1,  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  foo: 1}should loosely deep-equal{  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  circular: &lt;ref *1> {    bar: 2,    c: [Circular *1]  }}\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Expected values to be loosely deep-equal:{  bar: 1,  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  foo: 1}should loosely deep-equal{  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  circular: &lt;ref *1> {    bar: 2,    c: [Circular *1]  }}\">\n        [Error [ERR_TEST_FAILURE]: Expected values to be loosely deep-equal:\n        \n        {\n          bar: 1,\n          baz: {\n            date: 1970-01-01T00:00:00.000Z,\n            null: null,\n            number: 1,\n            string: 'Hello',\n            undefined: undefined\n          },\n          boo: [\n            1\n          ],\n          foo: 1\n        }\n        \n        should loosely deep-equal\n        \n        {\n          baz: {\n            date: 1970-01-01T00:00:00.000Z,\n            null: null,\n            number: 1,\n            string: 'Hello',\n            undefined: undefined\n          },\n          boo: [\n            1\n          ],\n          circular: &lt;ref *1> {\n            bar: 2,\n            c: [Circular *1]\n          }\n        }] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n          \n          {\n            bar: 1,\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            foo: 1\n          }\n          \n          should loosely deep-equal\n          \n          {\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            circular: &lt;ref *1> {\n              bar: 2,\n              c: [Circular *1]\n            }\n          }\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: [Object],\n            expected: [Object],\n            operator: 'deepEqual'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"invalid subtest fail\" time=\"*\" classname=\"test\" failure=\"test could not be started because its parent finished\">\n        \t\t<failure type=\"parentAlreadyFinished\" message=\"test could not be started because its parent finished\">\n        Error [ERR_TEST_FAILURE]: test could not be started because its parent finished\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'parentAlreadyFinished',\n          cause: 'test could not be started because its parent finished'\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<!-- Error: Test \"unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:72:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: Test \"async unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:76:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from async unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: A resource generated asynchronous activity after the test ended. This activity created the error \"Error: uncaught from outside of a test\" which triggered an uncaughtException event, caught by the test runner. -->\n        \t<!-- Error: Test \"immediate throw - passes but warns\" at test/fixtures/test-runner/output/output.js:80:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from immediate throw fail\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- Error: Test \"immediate reject - passes but warns\" at test/fixtures/test-runner/output/output.js:86:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from immediate reject fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: Test \"callback called twice in different ticks\" at test/fixtures/test-runner/output/output.js:251:1 generated asynchronous activity after the test ended. This activity created the error \"Error [ERR_TEST_FAILURE]: callback invoked multiple times\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- Error: Test \"callback async throw after done\" at test/fixtures/test-runner/output/output.js:269:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from callback async throw after done\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- tests 76 -->\n        \t<!-- suites 0 -->\n        \t<!-- pass 35 -->\n        \t<!-- fail 25 -->\n        \t<!-- cancelled 3 -->\n        \t<!-- skipped 9 -->\n        \t<!-- todo 4 -->\n        \t<!-- duration_ms * -->\n        </testsuites>\n        \n      operator: 'strictEqual'\n      stack: |-\n        assertSnapshot (c:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:56:12)\n        async Module.spawnAndAssert (c:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:84:3)\n        async TestContext.<anonymous> (file:///c:/workspace/node-test-binary-windows-js-suites/node/test/parallel/test-runner-output.mjs:149:5)\n        async Test.run (node:internal/test_runner/test:748:9)\n        async Promise.all (index 23)\n        async Suite.run (node:internal/test_runner/test:1106:7)\n        async Test.processPendingSubtests (node:internal/test_runner/test:461:7)\n      ...\n    # Subtest: test-runner/output/spec_reporter_successful.js\n    ok 25 - test-runner/output/spec_reporter_successful.js\n      ---\n      duration_ms: 2216.6963\n      ...\n    # Subtest: test-runner/output/spec_reporter.js\n    ok 26 - test-runner/output/spec_reporter.js\n      ---\n      duration_ms: 3511.3236\n      ...\n    # Subtest: test-runner/output/spec_reporter_cli.js\n    ok 27 - test-runner/output/spec_reporter_cli.js\n      ---\n      duration_ms: 3809.4818\n      ...\n    # Subtest: test-runner/output/source_mapped_locations.mjs\n    ok 28 - test-runner/output/source_mapped_locations.mjs\n      ---\n      duration_ms: 1633.3166\n      ...\n    # Subtest: test-runner/output/lcov_reporter.js\n    ok 29 - test-runner/output/lcov_reporter.js\n      ---\n      duration_ms: 3544.6921\n      ...\n    # Subtest: test-runner/output/output.js\n    ok 30 - test-runner/output/output.js\n      ---\n      duration_ms: 2512.7927\n      ...\n    # Subtest: test-runner/output/output_cli.js\n    ok 31 - test-runner/output/output_cli.js\n      ---\n      duration_ms: 3755.7238\n      ...\n    # Subtest: test-runner/output/name_and_skip_patterns.js\n    ok 32 - test-runner/output/name_and_skip_patterns.js\n      ---\n      duration_ms: 1949.5477\n      ...\n    # Subtest: test-runner/output/name_pattern.js\n    ok 33 - test-runner/output/name_pattern.js\n      ---\n      duration_ms: 1714.1045\n      ...\n    # Subtest: test-runner/output/name_pattern_with_only.js\n    ok 34 - test-runner/output/name_pattern_with_only.js\n      ---\n      duration_ms: 2150.115\n      ...\n    # Subtest: test-runner/output/skip_pattern.js\n    ok 35 - test-runner/output/skip_pattern.js\n      ---\n      duration_ms: 2142.3785\n      ...\n    # Subtest: test-runner/output/unfinished-suite-async-error.js\n    ok 36 - test-runner/output/unfinished-suite-async-error.js\n      ---\n      duration_ms: 1919.1228\n      ...\n    # Subtest: test-runner/output/unresolved_promise.js\n    not ok 37 - test-runner/output/unresolved_promise.js\n      ---\n      duration_ms: 2071.1383\n      location: 'c:\\\\workspace\\\\node-test-binary-windows-js-suites\\\\node\\\\test\\\\parallel\\\\test-runner-output.mjs:155:5'\n      failureType: 'testCodeFailure'\n      error: |-\n        Expected values to be strictly equal:\n        + actual - expected ... Lines skipped\n        \n          'TAP version 13\\n' +\n            '# Subtest: pass\\n' +\n        ...\n            \"  error: 'Promise resolution is still pending but the event loop has already resolved'\\n\" +\n            \"  code: 'ERR_TEST_FAILURE'\\n\" +\n        +   '  ...\\n' +\n        +   '# Subtest: fail\\n' +\n        +   'not ok 3 - fail\\n' +\n        +   '  ---\\n' +\n        +   '  duration_ms: *\\n' +\n        +   \"  location: '/test/fixtures/test-runner/output/unresolved_promise.js:(LINE):1'\\n\" +\n        +   \"  failureType: 'cancelledByParent'\\n\" +\n        +   \"  error: 'Promise resolution is still pending but the event loop has already resolved'\\n\" +\n        +   \"  code: 'ERR_TEST_FAILURE'\\n\" +\n        -   '  stack: |-\\n' +\n        -   '    *\\n' +\n        -   '  ...\\n' +\n        -   '# Subtest: fail\\n' +\n        -   'not ok 3 - fail\\n' +\n        -   '  ---\\n' +\n        -   '  duration_ms: *\\n' +\n        -   \"  location: '/test/fixtures/test-runner/output/unresolved_promise.js:(LINE):1'\\n\" +\n        -   \"  failureType: 'cancelledByParent'\\n\" +\n        -   \"  error: 'Promise resolution is still pending but the event loop has already resolved'\\n\" +\n        -   \"  code: 'ERR_TEST_FAILURE'\\n\" +\n        -   '  stack: |-\\n' +\n        -   '    *\\n' +\n            '  ...\\n' +\n        ...\n            '# skipped 0\\n' +\n            '# todo 0\\n' +\n            '# duration_ms *\\n'\n      code: 'ERR_ASSERTION'\n      name: 'AssertionError'\n      expected: |-\n        TAP version 13\n        # Subtest: pass\n        ok 1 - pass\n          ---\n          duration_ms: *\n          ...\n        # Subtest: never resolving promise\n        not ok 2 - never resolving promise\n          ---\n          duration_ms: *\n          location: '/test/fixtures/test-runner/output/unresolved_promise.js:(LINE):1'\n          failureType: 'cancelledByParent'\n          error: 'Promise resolution is still pending but the event loop has already resolved'\n          code: 'ERR_TEST_FAILURE'\n          stack: |-\n            *\n          ...\n        # Subtest: fail\n        not ok 3 - fail\n          ---\n          duration_ms: *\n          location: '/test/fixtures/test-runner/output/unresolved_promise.js:(LINE):1'\n          failureType: 'cancelledByParent'\n          error: 'Promise resolution is still pending but the event loop has already resolved'\n          code: 'ERR_TEST_FAILURE'\n          stack: |-\n            *\n          ...\n        1..3\n        # tests 3\n        # suites 0\n        # pass 1\n        # fail 0\n        # cancelled 2\n        # skipped 0\n        # todo 0\n        # duration_ms *\n        \n      actual: |-\n        TAP version 13\n        # Subtest: pass\n        ok 1 - pass\n          ---\n          duration_ms: *\n          ...\n        # Subtest: never resolving promise\n        not ok 2 - never resolving promise\n          ---\n          duration_ms: *\n          location: '/test/fixtures/test-runner/output/unresolved_promise.js:(LINE):1'\n          failureType: 'cancelledByParent'\n          error: 'Promise resolution is still pending but the event loop has already resolved'\n          code: 'ERR_TEST_FAILURE'\n          ...\n        # Subtest: fail\n        not ok 3 - fail\n          ---\n          duration_ms: *\n          location: '/test/fixtures/test-runner/output/unresolved_promise.js:(LINE):1'\n          failureType: 'cancelledByParent'\n          error: 'Promise resolution is still pending but the event loop has already resolved'\n          code: 'ERR_TEST_FAILURE'\n          ...\n        1..3\n        # tests 3\n        # suites 0\n        # pass 1\n        # fail 0\n        # cancelled 2\n        # skipped 0\n        # todo 0\n        # duration_ms *\n        \n      operator: 'strictEqual'\n      stack: |-\n        assertSnapshot (c:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:56:12)\n        async Module.spawnAndAssert (c:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:84:3)\n        async TestContext.<anonymous> (file:///c:/workspace/node-test-binary-windows-js-suites/node/test/parallel/test-runner-output.mjs:149:5)\n        async Test.run (node:internal/test_runner/test:748:9)\n        async Promise.all (index 36)\n        async Suite.run (node:internal/test_runner/test:1106:7)\n        async Test.processPendingSubtests (node:internal/test_runner/test:461:7)\n      ...\n    # Subtest: test-runner/output/default_output.js\n        # Subtest: <anonymous>\n        ok 1 - <anonymous> # SKIP Skipping pseudo-tty tests, as pseudo terminals are not available on Windows.\n          ---\n          duration_ms: 32.418\n          ...\n        1..1\n    ok 38 - test-runner/output/default_output.js\n      ---\n      duration_ms: 33.006\n      ...\n    # Subtest: test-runner/output/arbitrary-output.js\n    ok 39 - test-runner/output/arbitrary-output.js\n      ---\n      duration_ms: 2921.9073\n      ...\n    # Subtest: test-runner/output/async-test-scheduling.mjs\n    ok 40 - test-runner/output/async-test-scheduling.mjs\n      ---\n      duration_ms: 2290.6022\n      ...\n    # Subtest: test-runner/output/arbitrary-output-colored.js\n        # Subtest: <anonymous>\n        ok 1 - <anonymous> # SKIP Skipping pseudo-tty tests, as pseudo terminals are not available on Windows.\n          ---\n          duration_ms: 16.9094\n          ...\n        1..1\n    ok 41 - test-runner/output/arbitrary-output-colored.js\n      ---\n      duration_ms: 17.25\n      ...\n    # Subtest: test-runner/output/dot_output_custom_columns.js\n        # Subtest: <anonymous>\n        ok 1 - <anonymous> # SKIP Skipping pseudo-tty tests, as pseudo terminals are not available on Windows.\n          ---\n          duration_ms: 16.8435\n          ...\n        1..1\n    ok 42 - test-runner/output/dot_output_custom_columns.js\n      ---\n      duration_ms: 17.1087\n      ...\n    # Subtest: test-runner/output/tap_escape.js\n    ok 43 - test-runner/output/tap_escape.js\n      ---\n      duration_ms: 1989.5404\n      ...\n    # Subtest: test-runner/output/coverage_failure.js\n    ok 44 - test-runner/output/coverage_failure.js\n      ---\n      duration_ms: 2095.6932\n      ...\n    1..44\nnot ok 1 - test runner output\n  ---\n  duration_ms: 4277.8628\n  type: 'suite'\n  location: 'c:\\\\workspace\\\\node-test-binary-windows-js-suites\\\\node\\\\test\\\\parallel\\\\test-runner-output.mjs:153:1'\n  failureType: 'subtestsFailed'\n  error: '3 subtests failed'\n  code: 'ERR_TEST_FAILURE'\n  ...\n1..1\n# tests 47\n# suites 1\n# pass 41\n# fail 3\n# cancelled 0\n# skipped 3\n# todo 0\n# duration_ms 4290.7283"},"time":4662.07,"fullname":"parallel/test-runner-output","closingTestPoint":false}},{"testName":"parallel/test-assert-builtins-not-read-from-filesystem","timestamp":1714660669261,"status":"FAILED","jobName":"node-test-binary-windows-js-suites","config":"node-test-binary-windows-js-suites » 2,win2022-COMPILED_BY-vs2022 #27525","buildUrl":"https://ci.nodejs.org/job/node-test-binary-windows-js-suites/RUN_SUBSET=2,nodes=win2022-COMPILED_BY-vs2022/27525/","buildNumber":27525,"builtOn":"test-rackspace-win2022_vs2022-x64-3","nodeVersion":"23.0.0","commitHash":"3a49bfd9b001e550acf99afcb74b31d6885de874","callStack":[{"upstreamBuild":62664,"upstreamProject":"node-test-commit-windows-fanned","upstreamUrl":"job/node-test-commit-windows-fanned/"},{"upstreamBuild":70433,"upstreamProject":"node-test-commit","upstreamUrl":"job/node-test-commit/"},{"upstreamBuild":58865,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"prId":"52733"}],"tap":{"ok":false,"name":"parallel/test-assert-builtins-not-read-from-filesystem","id":69,"buffered":false,"tapError":null,"skip":false,"todo":false,"previous":null,"plan":null,"diag":{"severity":"fail","exitcode":1,"stack":"node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Exit code: 1\n,,node:fs:2348\n\n    return binding.writeFileUtf8(\n\n                   ^\n\n\n\nError: ENOENT: no such file or directory, open 'C:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\.tmp.68\\node:internal\\events\\fast_event_emitter'\n\n    at writeFileSync (node:fs:2348:20)\n\n    at Object.<anonymous> (C:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\parallel\\test-assert-builtins-not-read-from-filesystem.js:41:3)\n\n    at Module._compile (node:internal/modules/cjs/loader:1480:14)\n\n    at Module._extensions..js (node:internal/modules/cjs/loader:1564:10)\n\n    at Module.load (node:internal/modules/cjs/loader:1287:32)\n\n    at Module._load (node:internal/modules/cjs/loader:1103:12)\n\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:168:12)\n\n    at node:internal/main/run_main_module:30:49 {\n\n  errno: -4058,\n\n  code: 'ENOENT',\n\n  syscall: 'open',\n\n  path: 'C:\\\\workspace\\\\node-test-binary-windows-js-suites\\\\node\\\\test\\\\.tmp.68\\\\node:internal\\\\events\\\\fast_event_emitter'\n\n}\n\n\n\nNode.js v23.0.0-pre\n\n\n    at Object.<anonymous> (C:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\parallel\\test-assert-builtins-not-read-from-filesystem.js:31:12)\n    at Module._compile (node:internal/modules/cjs/loader:1480:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1564:10)\n    at Module.load (node:internal/modules/cjs/loader:1287:32)\n    at Module._load (node:internal/modules/cjs/loader:1103:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:168:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: false,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 0,\n  operator: 'strictEqual'\n}\n\nNode.js v23.0.0-pre"},"time":650.023,"fullname":"parallel/test-assert-builtins-not-read-from-filesystem","closingTestPoint":false}},{"testName":"parallel/test-disable-proto-delete","timestamp":1714660669261,"status":"FAILED","jobName":"node-test-binary-windows-js-suites","config":"node-test-binary-windows-js-suites » 2,win2022-COMPILED_BY-vs2022 #27525","buildUrl":"https://ci.nodejs.org/job/node-test-binary-windows-js-suites/RUN_SUBSET=2,nodes=win2022-COMPILED_BY-vs2022/27525/","buildNumber":27525,"builtOn":"test-rackspace-win2022_vs2022-x64-3","nodeVersion":"23.0.0","commitHash":"3a49bfd9b001e550acf99afcb74b31d6885de874","callStack":[{"upstreamBuild":62664,"upstreamProject":"node-test-commit-windows-fanned","upstreamUrl":"job/node-test-commit-windows-fanned/"},{"upstreamBuild":70433,"upstreamProject":"node-test-commit","upstreamUrl":"job/node-test-commit/"},{"upstreamBuild":58865,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"prId":"52733"}],"tap":{"ok":false,"name":"parallel/test-disable-proto-delete","id":221,"buffered":false,"tapError":null,"skip":false,"todo":false,"previous":null,"plan":null,"diag":{"severity":"fail","exitcode":1,"stack":"node:internal/events/slow_event_emitter:291\n    for (let i = listeners.length - 1; i >= 0; i--) {\n                           ^\n\nTypeError: Cannot read properties of null (reading 'length')\n    at SlowEventEmitter.removeAllListeners (node:internal/events/slow_event_emitter:291:28)\n    at Worker.removeAllListeners (node:internal/events/event_emitter:576:38)\n    at SlowEventEmitter.removeAllListeners (node:internal/events/slow_event_emitter:276:41)\n    at Worker.removeAllListeners (node:internal/events/event_emitter:576:38)\n    at [kOnExit] (node:internal/worker:316:10)\n    at Worker.<computed>.onexit (node:internal/worker:229:20)\n\nNode.js v23.0.0-pre"},"time":434.011,"fullname":"parallel/test-disable-proto-delete","closingTestPoint":false}},{"testName":"parallel/test-runner-output","timestamp":1714660669261,"status":"FAILED","jobName":"node-test-binary-windows-js-suites","config":"node-test-binary-windows-js-suites » 2,win2022-COMPILED_BY-vs2022 #27525","buildUrl":"https://ci.nodejs.org/job/node-test-binary-windows-js-suites/RUN_SUBSET=2,nodes=win2022-COMPILED_BY-vs2022/27525/","buildNumber":27525,"builtOn":"test-rackspace-win2022_vs2022-x64-3","nodeVersion":"23.0.0","commitHash":"3a49bfd9b001e550acf99afcb74b31d6885de874","callStack":[{"upstreamBuild":62664,"upstreamProject":"node-test-commit-windows-fanned","upstreamUrl":"job/node-test-commit-windows-fanned/"},{"upstreamBuild":70433,"upstreamProject":"node-test-commit","upstreamUrl":"job/node-test-commit/"},{"upstreamBuild":58865,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"prId":"52733"}],"tap":{"ok":false,"name":"parallel/test-runner-output","id":681,"buffered":false,"tapError":null,"skip":false,"todo":false,"previous":null,"plan":null,"diag":{"severity":"fail","exitcode":1,"stack":"TAP version 13\n# Subtest: test runner output\n    # Subtest: test-runner/output/abort.js\n    ok 1 - test-runner/output/abort.js\n      ---\n      duration_ms: 4498.7476\n      ...\n    # Subtest: test-runner/output/abort_suite.js\n    ok 2 - test-runner/output/abort_suite.js\n      ---\n      duration_ms: 4437.1461\n      ...\n    # Subtest: test-runner/output/abort_hooks.js\n    ok 3 - test-runner/output/abort_hooks.js\n      ---\n      duration_ms: 4376.4219\n      ...\n    # Subtest: test-runner/output/describe_it.js\n    ok 4 - test-runner/output/describe_it.js\n      ---\n      duration_ms: 4331.1391\n      ...\n    # Subtest: test-runner/output/describe_nested.js\n    ok 5 - test-runner/output/describe_nested.js\n      ---\n      duration_ms: 4297.6281\n      ...\n    # Subtest: test-runner/output/eval_dot.js\n    ok 6 - test-runner/output/eval_dot.js\n      ---\n      duration_ms: 4270.8252\n      ...\n    # Subtest: test-runner/output/eval_spec.js\n    ok 7 - test-runner/output/eval_spec.js\n      ---\n      duration_ms: 4208.9331\n      ...\n    # Subtest: test-runner/output/eval_tap.js\n    ok 8 - test-runner/output/eval_tap.js\n      ---\n      duration_ms: 4149.805\n      ...\n    # Subtest: test-runner/output/hooks.js\n    ok 9 - test-runner/output/hooks.js\n      ---\n      duration_ms: 4124.3804\n      ...\n    # Subtest: test-runner/output/hooks_spec_reporter.js\n    ok 10 - test-runner/output/hooks_spec_reporter.js\n      ---\n      duration_ms: 4077.021\n      ...\n    # Subtest: test-runner/output/skip-each-hooks.js\n    ok 11 - test-runner/output/skip-each-hooks.js\n      ---\n      duration_ms: 3952.9738\n      ...\n    # Subtest: test-runner/output/suite-skip-hooks.js\n    ok 12 - test-runner/output/suite-skip-hooks.js\n      ---\n      duration_ms: 3810.2047\n      ...\n    # Subtest: test-runner/output/timeout_in_before_each_should_not_affect_further_tests.js\n    ok 13 - test-runner/output/timeout_in_before_each_should_not_affect_further_tests.js\n      ---\n      duration_ms: 3594.2469\n      ...\n    # Subtest: test-runner/output/hooks-with-no-global-test.js\n    ok 14 - test-runner/output/hooks-with-no-global-test.js\n      ---\n      duration_ms: 3569.9591\n      ...\n    # Subtest: test-runner/output/global-hooks-with-no-tests.js\n    ok 15 - test-runner/output/global-hooks-with-no-tests.js\n      ---\n      duration_ms: 3252.4994\n      ...\n    # Subtest: test-runner/output/before-and-after-each-too-many-listeners.js\n    ok 16 - test-runner/output/before-and-after-each-too-many-listeners.js\n      ---\n      duration_ms: 3225.5958\n      ...\n    # Subtest: test-runner/output/before-and-after-each-with-timeout-too-many-listeners.js\n    ok 17 - test-runner/output/before-and-after-each-with-timeout-too-many-listeners.js\n      ---\n      duration_ms: 3198.3869\n      ...\n    # Subtest: test-runner/output/force_exit.js\n    ok 18 - test-runner/output/force_exit.js\n      ---\n      duration_ms: 3070.0733\n      ...\n    # Subtest: test-runner/output/global_after_should_fail_the_test.js\n    ok 19 - test-runner/output/global_after_should_fail_the_test.js\n      ---\n      duration_ms: 2874.7083\n      ...\n    # Subtest: test-runner/output/no_refs.js\n    not ok 20 - test-runner/output/no_refs.js\n      ---\n      duration_ms: 2854.0415\n      location: 'C:\\\\workspace\\\\node-test-binary-windows-js-suites\\\\node\\\\test\\\\parallel\\\\test-runner-output.mjs:155:5'\n      failureType: 'testCodeFailure'\n      error: |-\n        Expected values to be strictly equal:\n        + actual - expected ... Lines skipped\n        \n          'TAP version 13\\n' +\n            '# Subtest: does not keep event loop alive\\n' +\n        ...\n            \"      error: 'Promise resolution is still pending but the event loop has already resolved'\\n\" +\n            \"      code: 'ERR_TEST_FAILURE'\\n\" +\n        +   '      ...\\n' +\n        +   '    1..1\\n' +\n        +   'not ok 1 - does not keep event loop alive\\n' +\n        +   '  ---\\n' +\n        +   '  duration_ms: *\\n' +\n        +   \"  location: '/test/fixtures/test-runner/output/no_refs.js:(LINE):1'\\n\" +\n        +   \"  failureType: 'cancelledByParent'\\n\" +\n        +   \"  error: 'Promise resolution is still pending but the event loop has already resolved'\\n\" +\n        +   \"  code: 'ERR_TEST_FAILURE'\\n\" +\n        -   '      stack: |-\\n' +\n        -   '        *\\n' +\n        -   '      ...\\n' +\n        -   '    1..1\\n' +\n        -   'not ok 1 - does not keep event loop alive\\n' +\n        -   '  ---\\n' +\n        -   '  duration_ms: *\\n' +\n        -   \"  location: '/test/fixtures/test-runner/output/no_refs.js:(LINE):1'\\n\" +\n        -   \"  failureType: 'cancelledByParent'\\n\" +\n        -   \"  error: 'Promise resolution is still pending but the event loop has already resolved'\\n\" +\n        -   \"  code: 'ERR_TEST_FAILURE'\\n\" +\n        -   '  stack: |-\\n' +\n        -   '    *\\n' +\n            '  ...\\n' +\n        ...\n            '# skipped 0\\n' +\n            '# todo 0\\n' +\n            '# duration_ms *\\n'\n      code: 'ERR_ASSERTION'\n      name: 'AssertionError'\n      expected: |-\n        TAP version 13\n        # Subtest: does not keep event loop alive\n            # Subtest: +does not keep event loop alive\n            not ok 1 - +does not keep event loop alive\n              ---\n              duration_ms: *\n              location: '/test/fixtures/test-runner/output/no_refs.js:(LINE):11'\n              failureType: 'cancelledByParent'\n              error: 'Promise resolution is still pending but the event loop has already resolved'\n              code: 'ERR_TEST_FAILURE'\n              stack: |-\n                *\n              ...\n            1..1\n        not ok 1 - does not keep event loop alive\n          ---\n          duration_ms: *\n          location: '/test/fixtures/test-runner/output/no_refs.js:(LINE):1'\n          failureType: 'cancelledByParent'\n          error: 'Promise resolution is still pending but the event loop has already resolved'\n          code: 'ERR_TEST_FAILURE'\n          stack: |-\n            *\n          ...\n        1..1\n        # tests 2\n        # suites 0\n        # pass 0\n        # fail 0\n        # cancelled 2\n        # skipped 0\n        # todo 0\n        # duration_ms *\n        \n      actual: |-\n        TAP version 13\n        # Subtest: does not keep event loop alive\n            # Subtest: +does not keep event loop alive\n            not ok 1 - +does not keep event loop alive\n              ---\n              duration_ms: *\n              location: '/test/fixtures/test-runner/output/no_refs.js:(LINE):11'\n              failureType: 'cancelledByParent'\n              error: 'Promise resolution is still pending but the event loop has already resolved'\n              code: 'ERR_TEST_FAILURE'\n              ...\n            1..1\n        not ok 1 - does not keep event loop alive\n          ---\n          duration_ms: *\n          location: '/test/fixtures/test-runner/output/no_refs.js:(LINE):1'\n          failureType: 'cancelledByParent'\n          error: 'Promise resolution is still pending but the event loop has already resolved'\n          code: 'ERR_TEST_FAILURE'\n          ...\n        1..1\n        # tests 2\n        # suites 0\n        # pass 0\n        # fail 0\n        # cancelled 2\n        # skipped 0\n        # todo 0\n        # duration_ms *\n        \n      operator: 'strictEqual'\n      stack: |-\n        assertSnapshot (C:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:56:12)\n        async Module.spawnAndAssert (C:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:84:3)\n        async TestContext.<anonymous> (file:///C:/workspace/node-test-binary-windows-js-suites/node/test/parallel/test-runner-output.mjs:149:5)\n        async Test.run (node:internal/test_runner/test:748:9)\n        async Promise.all (index 19)\n        async Suite.run (node:internal/test_runner/test:1106:7)\n        async Test.processPendingSubtests (node:internal/test_runner/test:461:7)\n      ...\n    # Subtest: test-runner/output/no_tests.js\n    ok 21 - test-runner/output/no_tests.js\n      ---\n      duration_ms: 2819.5709\n      ...\n    # Subtest: test-runner/output/only_tests.js\n    ok 22 - test-runner/output/only_tests.js\n      ---\n      duration_ms: 2796.9965\n      ...\n    # Subtest: test-runner/output/dot_reporter.js\n    ok 23 - test-runner/output/dot_reporter.js\n      ---\n      duration_ms: 2745.786\n      ...\n    # Subtest: test-runner/output/junit_reporter.js\n    not ok 24 - test-runner/output/junit_reporter.js\n      ---\n      duration_ms: 2823.6857\n      location: 'C:\\\\workspace\\\\node-test-binary-windows-js-suites\\\\node\\\\test\\\\parallel\\\\test-runner-output.mjs:155:5'\n      failureType: 'testCodeFailure'\n      error: |-\n        Expected values to be strictly equal:\n        + actual - expected ... Lines skipped\n        \n          '<?xml version=\"1.0\" encoding=\"utf-8\"?>\\n' +\n            '<testsuites>\\n' +\n        ...\n            '\\t\\t</failure>\\n' +\n            '\\t</testcase>\\n' +\n        +   '\\t<testcase name=\"callback called twice\" time=\"*\" '... 11376 more characters\n        -   '\\t<testcase name=\"callback called twice\" time=\"*\" '... 11392 more characters\n      code: 'ERR_ASSERTION'\n      name: 'AssertionError'\n      expected: |-\n        <?xml version=\"1.0\" encoding=\"utf-8\"?>\n        <testsuites>\n        \t<testcase name=\"sync pass todo\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"todo\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync pass todo with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"todo\" message=\"this is a passing todo\"/>\n        \t</testcase>\n        \t<testcase name=\"sync fail todo\" time=\"*\" classname=\"test\" failure=\"thrown from sync fail todo\">\n        \t\t<skipped type=\"todo\" message=\"true\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync fail todo\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync fail todo] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync fail todo\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync fail todo with message\" time=\"*\" classname=\"test\" failure=\"thrown from sync fail todo with message\">\n        \t\t<skipped type=\"todo\" message=\"this is a failing todo\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync fail todo with message\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync fail todo with message] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync fail todo with message\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync skip pass\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip pass with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"this is skipped\"/>\n        \t</testcase>\n        \t<testcase name=\"sync pass\" time=\"*\" classname=\"test\"/>\n        \t<!-- this test should pass -->\n        \t<testcase name=\"sync throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from sync throw fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async skip pass\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"async pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from async throw fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from async throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from async throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async skip fail\" time=\"*\" classname=\"test\" failure=\"thrown from async throw fail\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from async throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from async throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async assertion fail\" time=\"*\" classname=\"test\" failure=\"Expected values to be strictly equal:true !== false\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Expected values to be strictly equal:true !== false\">\n        [Error [ERR_TEST_FAILURE]: Expected values to be strictly equal:\n        \n        true !== false\n        ] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n          \n          true !== false\n          \n              *\n              *\n              *\n              *\n              *\n              *\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: true,\n            expected: false,\n            operator: 'strictEqual'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"resolve pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"reject fail\" time=\"*\" classname=\"test\" failure=\"rejected from reject fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"rejected from reject fail\">\n        [Error [ERR_TEST_FAILURE]: rejected from reject fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: rejected from reject fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unhandled rejection - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async unhandled rejection - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate throw - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate reject - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate resolve pass\" time=\"*\" classname=\"test\"/>\n        \t<testsuite name=\"subtest sync throw fail\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"1\" failures=\"1\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"+sync throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fail\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fail\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fail\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<!-- this subtest should make its parent test fail -->\n        \t</testsuite>\n        \t<testcase name=\"sync throw non-error fail\" time=\"*\" classname=\"test\" failure=\"Symbol(thrown symbol from sync throw non-error fail)\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Symbol(thrown symbol from sync throw non-error fail)\">\n        [Error [ERR_TEST_FAILURE]: Symbol(thrown symbol from sync throw non-error fail)] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: Symbol(thrown symbol from sync throw non-error fail) }\n        \t\t</failure>\n        \t</testcase>\n        \t<testsuite name=\"level 0a\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"4\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"level 1a\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1b\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1c\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1d\" time=\"*\" classname=\"test\"/>\n        \t</testsuite>\n        \t<testsuite name=\"top level\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"2\" failures=\"1\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"+long running\" time=\"*\" classname=\"test\" failure=\"test did not finish before its parent and was cancelled\">\n        \t\t\t<failure type=\"cancelledByParent\" message=\"test did not finish before its parent and was cancelled\">\n        [Error [ERR_TEST_FAILURE]: test did not finish before its parent and was cancelled] { code: 'ERR_TEST_FAILURE', failureType: 'cancelledByParent', cause: 'test did not finish before its parent and was cancelled' }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<testsuite name=\"+short running\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"1\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t\t<testcase name=\"++short running\" time=\"*\" classname=\"test\"/>\n        \t\t</testsuite>\n        \t</testsuite>\n        \t<testcase name=\"invalid subtest - pass but subtest fails\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"sync skip option\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip option with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"this is skipped\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip option is false fail\" time=\"*\" classname=\"test\" failure=\"this should be executed\">\n        \t\t<failure type=\"testCodeFailure\" message=\"this should be executed\">\n        [Error [ERR_TEST_FAILURE]: this should be executed] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: this should be executed\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"functionOnly\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"test with only a name provided\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"test with a name and options provided\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"functionAndOptions\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"callback pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback fail\" time=\"*\" classname=\"test\" failure=\"callback failure\">\n        \t\t<failure type=\"testCodeFailure\" message=\"callback failure\">\n        [Error [ERR_TEST_FAILURE]: callback failure] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: callback failure\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback also returns a Promise\" time=\"*\" classname=\"test\" failure=\"passed a callback but also returned a Promise\">\n        \t\t<failure type=\"callbackAndPromisePresent\" message=\"passed a callback but also returned a Promise\">\n        [Error [ERR_TEST_FAILURE]: passed a callback but also returned a Promise] { code: 'ERR_TEST_FAILURE', failureType: 'callbackAndPromisePresent', cause: 'passed a callback but also returned a Promise' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback throw\" time=\"*\" classname=\"test\" failure=\"thrown from callback throw\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from callback throw\">\n        [Error [ERR_TEST_FAILURE]: thrown from callback throw] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from callback throw\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback called twice\" time=\"*\" classname=\"test\" failure=\"callback invoked multiple times\">\n        \t\t<failure type=\"multipleCallbackInvocations\" message=\"callback invoked multiple times\">\n        Error [ERR_TEST_FAILURE]: callback invoked multiple times\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'multipleCallbackInvocations',\n          cause: 'callback invoked multiple times'\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback called twice in different ticks\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback called twice in future tick\" time=\"*\" classname=\"test\" failure=\"callback invoked multiple times\">\n        \t\t<failure type=\"uncaughtException\" message=\"callback invoked multiple times\">\n        Error [ERR_TEST_FAILURE]: callback invoked multiple times\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error [ERR_TEST_FAILURE]: callback invoked multiple times\n              * {\n            code: 'ERR_TEST_FAILURE',\n            failureType: 'multipleCallbackInvocations',\n            cause: 'callback invoked multiple times'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback async throw\" time=\"*\" classname=\"test\" failure=\"thrown from callback async throw\">\n        \t\t<failure type=\"uncaughtException\" message=\"thrown from callback async throw\">\n        Error [ERR_TEST_FAILURE]: thrown from callback async throw\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error: thrown from callback async throw\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback async throw after done\" time=\"*\" classname=\"test\"/>\n        \t<testsuite name=\"only is set but not in only mode\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"4\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"running subtest 1\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"running subtest 2\" time=\"*\" classname=\"test\"/>\n        \t\t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t\t<testcase name=\"running subtest 3\" time=\"*\" classname=\"test\"/>\n        \t\t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t\t<testcase name=\"running subtest 4\" time=\"*\" classname=\"test\"/>\n        \t</testsuite>\n        \t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t<testcase name=\"custom inspect symbol fail\" time=\"*\" classname=\"test\" failure=\"customized\">\n        \t\t<failure type=\"testCodeFailure\" message=\"customized\">\n        [Error [ERR_TEST_FAILURE]: customized] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: customized }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"custom inspect symbol that throws fail\" time=\"*\" classname=\"test\" failure=\"{  foo: 1,  [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]}\">\n        \t\t<failure type=\"testCodeFailure\" message=\"{  foo: 1,  [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]}\">\n        [Error [ERR_TEST_FAILURE]: {\n          foo: 1,\n          [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]\n        }] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: { foo: 1, [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]] }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testsuite name=\"subtest sync throw fails\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"2\" failures=\"2\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"sync throw fails at first\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fails at first\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fails at first\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fails at first\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fails at first\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<testcase name=\"sync throw fails at second\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fails at second\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fails at second\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fails at second\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fails at second\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t</testsuite>\n        \t<testcase name=\"timed out async test\" time=\"*\" classname=\"test\" failure=\"test timed out after 5ms\">\n        \t\t<failure type=\"testTimeoutFailure\" message=\"test timed out after 5ms\">\n        [Error [ERR_TEST_FAILURE]: test timed out after 5ms] { code: 'ERR_TEST_FAILURE', failureType: 'testTimeoutFailure', cause: 'test timed out after 5ms' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"timed out callback test\" time=\"*\" classname=\"test\" failure=\"test timed out after 5ms\">\n        \t\t<failure type=\"testTimeoutFailure\" message=\"test timed out after 5ms\">\n        [Error [ERR_TEST_FAILURE]: test timed out after 5ms] { code: 'ERR_TEST_FAILURE', failureType: 'testTimeoutFailure', cause: 'test timed out after 5ms' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"large timeout async test is ok\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"large timeout callback test is ok\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"successful thenable\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"rejected thenable\" time=\"*\" classname=\"test\" failure=\"custom error\">\n        \t\t<failure type=\"testCodeFailure\" message=\"custom error\">\n        [Error [ERR_TEST_FAILURE]: custom error] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: 'custom error' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unfinished test with uncaughtException\" time=\"*\" classname=\"test\" failure=\"foo\">\n        \t\t<failure type=\"uncaughtException\" message=\"foo\">\n        Error [ERR_TEST_FAILURE]: foo\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error: foo\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unfinished test with unhandledRejection\" time=\"*\" classname=\"test\" failure=\"bar\">\n        \t\t<failure type=\"unhandledRejection\" message=\"bar\">\n        Error [ERR_TEST_FAILURE]: bar\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'unhandledRejection',\n          cause: Error: bar\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"assertion errors display actual and expected properly\" time=\"*\" classname=\"test\" failure=\"Expected values to be loosely deep-equal:{  bar: 1,  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  foo: 1}should loosely deep-equal{  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  circular: &lt;ref *1> {    bar: 2,    c: [Circular *1]  }}\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Expected values to be loosely deep-equal:{  bar: 1,  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  foo: 1}should loosely deep-equal{  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  circular: &lt;ref *1> {    bar: 2,    c: [Circular *1]  }}\">\n        [Error [ERR_TEST_FAILURE]: Expected values to be loosely deep-equal:\n        \n        {\n          bar: 1,\n          baz: {\n            date: 1970-01-01T00:00:00.000Z,\n            null: null,\n            number: 1,\n            string: 'Hello',\n            undefined: undefined\n          },\n          boo: [\n            1\n          ],\n          foo: 1\n        }\n        \n        should loosely deep-equal\n        \n        {\n          baz: {\n            date: 1970-01-01T00:00:00.000Z,\n            null: null,\n            number: 1,\n            string: 'Hello',\n            undefined: undefined\n          },\n          boo: [\n            1\n          ],\n          circular: &lt;ref *1> {\n            bar: 2,\n            c: [Circular *1]\n          }\n        }] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n          \n          {\n            bar: 1,\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            foo: 1\n          }\n          \n          should loosely deep-equal\n          \n          {\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            circular: &lt;ref *1> {\n              bar: 2,\n              c: [Circular *1]\n            }\n          }\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: [Object],\n            expected: [Object],\n            operator: 'deepEqual'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"invalid subtest fail\" time=\"*\" classname=\"test\" failure=\"test could not be started because its parent finished\">\n        \t\t<failure type=\"parentAlreadyFinished\" message=\"test could not be started because its parent finished\">\n        Error [ERR_TEST_FAILURE]: test could not be started because its parent finished\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'parentAlreadyFinished',\n          cause: 'test could not be started because its parent finished'\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<!-- Error: Test \"unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:72:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: Test \"async unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:76:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from async unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: A resource generated asynchronous activity after the test ended. This activity created the error \"Error: uncaught from outside of a test\" which triggered an uncaughtException event, caught by the test runner. -->\n        \t<!-- Error: Test \"immediate throw - passes but warns\" at test/fixtures/test-runner/output/output.js:80:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from immediate throw fail\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- Error: Test \"immediate reject - passes but warns\" at test/fixtures/test-runner/output/output.js:86:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from immediate reject fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: Test \"callback called twice in different ticks\" at test/fixtures/test-runner/output/output.js:251:1 generated asynchronous activity after the test ended. This activity created the error \"Error [ERR_TEST_FAILURE]: callback invoked multiple times\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- Error: Test \"callback async throw after done\" at test/fixtures/test-runner/output/output.js:269:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from callback async throw after done\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- tests 76 -->\n        \t<!-- suites 0 -->\n        \t<!-- pass 35 -->\n        \t<!-- fail 25 -->\n        \t<!-- cancelled 3 -->\n        \t<!-- skipped 9 -->\n        \t<!-- todo 4 -->\n        \t<!-- duration_ms * -->\n        </testsuites>\n        \n      actual: |-\n        <?xml version=\"1.0\" encoding=\"utf-8\"?>\n        <testsuites>\n        \t<testcase name=\"sync pass todo\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"todo\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync pass todo with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"todo\" message=\"this is a passing todo\"/>\n        \t</testcase>\n        \t<testcase name=\"sync fail todo\" time=\"*\" classname=\"test\" failure=\"thrown from sync fail todo\">\n        \t\t<skipped type=\"todo\" message=\"true\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync fail todo\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync fail todo] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync fail todo\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync fail todo with message\" time=\"*\" classname=\"test\" failure=\"thrown from sync fail todo with message\">\n        \t\t<skipped type=\"todo\" message=\"this is a failing todo\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync fail todo with message\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync fail todo with message] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync fail todo with message\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync skip pass\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip pass with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"this is skipped\"/>\n        \t</testcase>\n        \t<testcase name=\"sync pass\" time=\"*\" classname=\"test\"/>\n        \t<!-- this test should pass -->\n        \t<testcase name=\"sync throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from sync throw fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async skip pass\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"async pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from async throw fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from async throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from async throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async skip fail\" time=\"*\" classname=\"test\" failure=\"thrown from async throw fail\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from async throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from async throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async assertion fail\" time=\"*\" classname=\"test\" failure=\"Expected values to be strictly equal:true !== false\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Expected values to be strictly equal:true !== false\">\n        [Error [ERR_TEST_FAILURE]: Expected values to be strictly equal:\n        \n        true !== false\n        ] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n          \n          true !== false\n          \n              *\n              *\n              *\n              *\n              *\n              *\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: true,\n            expected: false,\n            operator: 'strictEqual'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"resolve pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"reject fail\" time=\"*\" classname=\"test\" failure=\"rejected from reject fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"rejected from reject fail\">\n        [Error [ERR_TEST_FAILURE]: rejected from reject fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: rejected from reject fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unhandled rejection - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async unhandled rejection - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate throw - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate reject - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate resolve pass\" time=\"*\" classname=\"test\"/>\n        \t<testsuite name=\"subtest sync throw fail\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"1\" failures=\"1\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"+sync throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fail\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fail\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fail\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<!-- this subtest should make its parent test fail -->\n        \t</testsuite>\n        \t<testcase name=\"sync throw non-error fail\" time=\"*\" classname=\"test\" failure=\"Symbol(thrown symbol from sync throw non-error fail)\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Symbol(thrown symbol from sync throw non-error fail)\">\n        [Error [ERR_TEST_FAILURE]: Symbol(thrown symbol from sync throw non-error fail)] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: Symbol(thrown symbol from sync throw non-error fail) }\n        \t\t</failure>\n        \t</testcase>\n        \t<testsuite name=\"level 0a\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"4\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"level 1a\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1b\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1c\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1d\" time=\"*\" classname=\"test\"/>\n        \t</testsuite>\n        \t<testsuite name=\"top level\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"2\" failures=\"1\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"+long running\" time=\"*\" classname=\"test\" failure=\"test did not finish before its parent and was cancelled\">\n        \t\t\t<failure type=\"cancelledByParent\" message=\"test did not finish before its parent and was cancelled\">\n        [Error [ERR_TEST_FAILURE]: test did not finish before its parent and was cancelled] { code: 'ERR_TEST_FAILURE', failureType: 'cancelledByParent', cause: 'test did not finish before its parent and was cancelled' }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<testsuite name=\"+short running\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"1\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t\t<testcase name=\"++short running\" time=\"*\" classname=\"test\"/>\n        \t\t</testsuite>\n        \t</testsuite>\n        \t<testcase name=\"invalid subtest - pass but subtest fails\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"sync skip option\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip option with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"this is skipped\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip option is false fail\" time=\"*\" classname=\"test\" failure=\"this should be executed\">\n        \t\t<failure type=\"testCodeFailure\" message=\"this should be executed\">\n        [Error [ERR_TEST_FAILURE]: this should be executed] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: this should be executed\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"functionOnly\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"test with only a name provided\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"test with a name and options provided\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"functionAndOptions\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"callback pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback fail\" time=\"*\" classname=\"test\" failure=\"callback failure\">\n        \t\t<failure type=\"testCodeFailure\" message=\"callback failure\">\n        [Error [ERR_TEST_FAILURE]: callback failure] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: callback failure\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback also returns a Promise\" time=\"*\" classname=\"test\" failure=\"passed a callback but also returned a Promise\">\n        \t\t<failure type=\"callbackAndPromisePresent\" message=\"passed a callback but also returned a Promise\">\n        [Error [ERR_TEST_FAILURE]: passed a callback but also returned a Promise] { code: 'ERR_TEST_FAILURE', failureType: 'callbackAndPromisePresent', cause: 'passed a callback but also returned a Promise' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback throw\" time=\"*\" classname=\"test\" failure=\"thrown from callback throw\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from callback throw\">\n        [Error [ERR_TEST_FAILURE]: thrown from callback throw] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from callback throw\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback called twice\" time=\"*\" classname=\"test\" failure=\"callback invoked multiple times\">\n        \t\t<failure type=\"multipleCallbackInvocations\" message=\"callback invoked multiple times\">\n        Error [ERR_TEST_FAILURE]: callback invoked multiple times\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'multipleCallbackInvocations',\n          cause: 'callback invoked multiple times'\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback called twice in different ticks\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback called twice in future tick\" time=\"*\" classname=\"test\" failure=\"callback invoked multiple times\">\n        \t\t<failure type=\"uncaughtException\" message=\"callback invoked multiple times\">\n        [Error [ERR_TEST_FAILURE]: callback invoked multiple times] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error [ERR_TEST_FAILURE]: callback invoked multiple times\n              * {\n            code: 'ERR_TEST_FAILURE',\n            failureType: 'multipleCallbackInvocations',\n            cause: 'callback invoked multiple times'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback async throw\" time=\"*\" classname=\"test\" failure=\"thrown from callback async throw\">\n        \t\t<failure type=\"uncaughtException\" message=\"thrown from callback async throw\">\n        [Error [ERR_TEST_FAILURE]: thrown from callback async throw] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error: thrown from callback async throw\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback async throw after done\" time=\"*\" classname=\"test\"/>\n        \t<testsuite name=\"only is set but not in only mode\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"4\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"running subtest 1\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"running subtest 2\" time=\"*\" classname=\"test\"/>\n        \t\t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t\t<testcase name=\"running subtest 3\" time=\"*\" classname=\"test\"/>\n        \t\t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t\t<testcase name=\"running subtest 4\" time=\"*\" classname=\"test\"/>\n        \t</testsuite>\n        \t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t<testcase name=\"custom inspect symbol fail\" time=\"*\" classname=\"test\" failure=\"customized\">\n        \t\t<failure type=\"testCodeFailure\" message=\"customized\">\n        [Error [ERR_TEST_FAILURE]: customized] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: customized }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"custom inspect symbol that throws fail\" time=\"*\" classname=\"test\" failure=\"{  foo: 1,  [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]}\">\n        \t\t<failure type=\"testCodeFailure\" message=\"{  foo: 1,  [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]}\">\n        [Error [ERR_TEST_FAILURE]: {\n          foo: 1,\n          [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]\n        }] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: { foo: 1, [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]] }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testsuite name=\"subtest sync throw fails\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"2\" failures=\"2\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"sync throw fails at first\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fails at first\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fails at first\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fails at first\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fails at first\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<testcase name=\"sync throw fails at second\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fails at second\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fails at second\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fails at second\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fails at second\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t</testsuite>\n        \t<testcase name=\"timed out async test\" time=\"*\" classname=\"test\" failure=\"test timed out after 5ms\">\n        \t\t<failure type=\"testTimeoutFailure\" message=\"test timed out after 5ms\">\n        [Error [ERR_TEST_FAILURE]: test timed out after 5ms] { code: 'ERR_TEST_FAILURE', failureType: 'testTimeoutFailure', cause: 'test timed out after 5ms' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"timed out callback test\" time=\"*\" classname=\"test\" failure=\"test timed out after 5ms\">\n        \t\t<failure type=\"testTimeoutFailure\" message=\"test timed out after 5ms\">\n        [Error [ERR_TEST_FAILURE]: test timed out after 5ms] { code: 'ERR_TEST_FAILURE', failureType: 'testTimeoutFailure', cause: 'test timed out after 5ms' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"large timeout async test is ok\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"large timeout callback test is ok\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"successful thenable\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"rejected thenable\" time=\"*\" classname=\"test\" failure=\"custom error\">\n        \t\t<failure type=\"testCodeFailure\" message=\"custom error\">\n        [Error [ERR_TEST_FAILURE]: custom error] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: 'custom error' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unfinished test with uncaughtException\" time=\"*\" classname=\"test\" failure=\"foo\">\n        \t\t<failure type=\"uncaughtException\" message=\"foo\">\n        [Error [ERR_TEST_FAILURE]: foo] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error: foo\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unfinished test with unhandledRejection\" time=\"*\" classname=\"test\" failure=\"bar\">\n        \t\t<failure type=\"unhandledRejection\" message=\"bar\">\n        [Error [ERR_TEST_FAILURE]: bar] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'unhandledRejection',\n          cause: Error: bar\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"assertion errors display actual and expected properly\" time=\"*\" classname=\"test\" failure=\"Expected values to be loosely deep-equal:{  bar: 1,  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  foo: 1}should loosely deep-equal{  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  circular: &lt;ref *1> {    bar: 2,    c: [Circular *1]  }}\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Expected values to be loosely deep-equal:{  bar: 1,  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  foo: 1}should loosely deep-equal{  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  circular: &lt;ref *1> {    bar: 2,    c: [Circular *1]  }}\">\n        [Error [ERR_TEST_FAILURE]: Expected values to be loosely deep-equal:\n        \n        {\n          bar: 1,\n          baz: {\n            date: 1970-01-01T00:00:00.000Z,\n            null: null,\n            number: 1,\n            string: 'Hello',\n            undefined: undefined\n          },\n          boo: [\n            1\n          ],\n          foo: 1\n        }\n        \n        should loosely deep-equal\n        \n        {\n          baz: {\n            date: 1970-01-01T00:00:00.000Z,\n            null: null,\n            number: 1,\n            string: 'Hello',\n            undefined: undefined\n          },\n          boo: [\n            1\n          ],\n          circular: &lt;ref *1> {\n            bar: 2,\n            c: [Circular *1]\n          }\n        }] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n          \n          {\n            bar: 1,\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            foo: 1\n          }\n          \n          should loosely deep-equal\n          \n          {\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            circular: &lt;ref *1> {\n              bar: 2,\n              c: [Circular *1]\n            }\n          }\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: [Object],\n            expected: [Object],\n            operator: 'deepEqual'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"invalid subtest fail\" time=\"*\" classname=\"test\" failure=\"test could not be started because its parent finished\">\n        \t\t<failure type=\"parentAlreadyFinished\" message=\"test could not be started because its parent finished\">\n        Error [ERR_TEST_FAILURE]: test could not be started because its parent finished\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'parentAlreadyFinished',\n          cause: 'test could not be started because its parent finished'\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<!-- Error: Test \"unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:72:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: Test \"async unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:76:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from async unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: A resource generated asynchronous activity after the test ended. This activity created the error \"Error: uncaught from outside of a test\" which triggered an uncaughtException event, caught by the test runner. -->\n        \t<!-- Error: Test \"immediate throw - passes but warns\" at test/fixtures/test-runner/output/output.js:80:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from immediate throw fail\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- Error: Test \"immediate reject - passes but warns\" at test/fixtures/test-runner/output/output.js:86:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from immediate reject fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: Test \"callback called twice in different ticks\" at test/fixtures/test-runner/output/output.js:251:1 generated asynchronous activity after the test ended. This activity created the error \"Error [ERR_TEST_FAILURE]: callback invoked multiple times\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- Error: Test \"callback async throw after done\" at test/fixtures/test-runner/output/output.js:269:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from callback async throw after done\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- tests 76 -->\n        \t<!-- suites 0 -->\n        \t<!-- pass 35 -->\n        \t<!-- fail 25 -->\n        \t<!-- cancelled 3 -->\n        \t<!-- skipped 9 -->\n        \t<!-- todo 4 -->\n        \t<!-- duration_ms * -->\n        </testsuites>\n        \n      operator: 'strictEqual'\n      stack: |-\n        assertSnapshot (C:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:56:12)\n        async Module.spawnAndAssert (C:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:84:3)\n        async TestContext.<anonymous> (file:///C:/workspace/node-test-binary-windows-js-suites/node/test/parallel/test-runner-output.mjs:149:5)\n        async Test.run (node:internal/test_runner/test:748:9)\n        async Promise.all (index 23)\n        async Suite.run (node:internal/test_runner/test:1106:7)\n        async Test.processPendingSubtests (node:internal/test_runner/test:461:7)\n      ...\n    # Subtest: test-runner/output/spec_reporter_successful.js\n    ok 25 - test-runner/output/spec_reporter_successful.js\n      ---\n      duration_ms: 2684.7258\n      ...\n    # Subtest: test-runner/output/spec_reporter.js\n    ok 26 - test-runner/output/spec_reporter.js\n      ---\n      duration_ms: 3043.5701\n      ...\n    # Subtest: test-runner/output/spec_reporter_cli.js\n    ok 27 - test-runner/output/spec_reporter_cli.js\n      ---\n      duration_ms: 2513.045\n      ...\n    # Subtest: test-runner/output/source_mapped_locations.mjs\n    ok 28 - test-runner/output/source_mapped_locations.mjs\n      ---\n      duration_ms: 2039.7978\n      ...\n    # Subtest: test-runner/output/lcov_reporter.js\n    ok 29 - test-runner/output/lcov_reporter.js\n      ---\n      duration_ms: 1894.3734\n      ...\n    # Subtest: test-runner/output/output.js\n    ok 30 - test-runner/output/output.js\n      ---\n      duration_ms: 1769.502\n      ...\n    # Subtest: test-runner/output/output_cli.js\n    ok 31 - test-runner/output/output_cli.js\n      ---\n      duration_ms: 2598.0255\n      ...\n    # Subtest: test-runner/output/name_and_skip_patterns.js\n    ok 32 - test-runner/output/name_and_skip_patterns.js\n      ---\n      duration_ms: 1417.2854\n      ...\n    # Subtest: test-runner/output/name_pattern.js\n    ok 33 - test-runner/output/name_pattern.js\n      ---\n      duration_ms: 1413.1746\n      ...\n    # Subtest: test-runner/output/name_pattern_with_only.js\n    ok 34 - test-runner/output/name_pattern_with_only.js\n      ---\n      duration_ms: 1089.6035\n      ...\n    # Subtest: test-runner/output/skip_pattern.js\n    ok 35 - test-runner/output/skip_pattern.js\n      ---\n      duration_ms: 988.9302\n      ...\n    # Subtest: test-runner/output/unfinished-suite-async-error.js\n    ok 36 - test-runner/output/unfinished-suite-async-error.js\n      ---\n      duration_ms: 989.7828\n      ...\n    # Subtest: test-runner/output/unresolved_promise.js\n    not ok 37 - test-runner/output/unresolved_promise.js\n      ---\n      duration_ms: 889.5647\n      location: 'C:\\\\workspace\\\\node-test-binary-windows-js-suites\\\\node\\\\test\\\\parallel\\\\test-runner-output.mjs:155:5'\n      failureType: 'testCodeFailure'\n      error: |-\n        Expected values to be strictly equal:\n        + actual - expected ... Lines skipped\n        \n          'TAP version 13\\n' +\n            '# Subtest: pass\\n' +\n        ...\n            \"  error: 'Promise resolution is still pending but the event loop has already resolved'\\n\" +\n            \"  code: 'ERR_TEST_FAILURE'\\n\" +\n        +   '  ...\\n' +\n        +   '# Subtest: fail\\n' +\n        +   'not ok 3 - fail\\n' +\n        +   '  ---\\n' +\n        +   '  duration_ms: *\\n' +\n        +   \"  location: '/test/fixtures/test-runner/output/unresolved_promise.js:(LINE):1'\\n\" +\n        +   \"  failureType: 'cancelledByParent'\\n\" +\n        +   \"  error: 'Promise resolution is still pending but the event loop has already resolved'\\n\" +\n        +   \"  code: 'ERR_TEST_FAILURE'\\n\" +\n        -   '  stack: |-\\n' +\n        -   '    *\\n' +\n        -   '  ...\\n' +\n        -   '# Subtest: fail\\n' +\n        -   'not ok 3 - fail\\n' +\n        -   '  ---\\n' +\n        -   '  duration_ms: *\\n' +\n        -   \"  location: '/test/fixtures/test-runner/output/unresolved_promise.js:(LINE):1'\\n\" +\n        -   \"  failureType: 'cancelledByParent'\\n\" +\n        -   \"  error: 'Promise resolution is still pending but the event loop has already resolved'\\n\" +\n        -   \"  code: 'ERR_TEST_FAILURE'\\n\" +\n        -   '  stack: |-\\n' +\n        -   '    *\\n' +\n            '  ...\\n' +\n        ...\n            '# skipped 0\\n' +\n            '# todo 0\\n' +\n            '# duration_ms *\\n'\n      code: 'ERR_ASSERTION'\n      name: 'AssertionError'\n      expected: |-\n        TAP version 13\n        # Subtest: pass\n        ok 1 - pass\n          ---\n          duration_ms: *\n          ...\n        # Subtest: never resolving promise\n        not ok 2 - never resolving promise\n          ---\n          duration_ms: *\n          location: '/test/fixtures/test-runner/output/unresolved_promise.js:(LINE):1'\n          failureType: 'cancelledByParent'\n          error: 'Promise resolution is still pending but the event loop has already resolved'\n          code: 'ERR_TEST_FAILURE'\n          stack: |-\n            *\n          ...\n        # Subtest: fail\n        not ok 3 - fail\n          ---\n          duration_ms: *\n          location: '/test/fixtures/test-runner/output/unresolved_promise.js:(LINE):1'\n          failureType: 'cancelledByParent'\n          error: 'Promise resolution is still pending but the event loop has already resolved'\n          code: 'ERR_TEST_FAILURE'\n          stack: |-\n            *\n          ...\n        1..3\n        # tests 3\n        # suites 0\n        # pass 1\n        # fail 0\n        # cancelled 2\n        # skipped 0\n        # todo 0\n        # duration_ms *\n        \n      actual: |-\n        TAP version 13\n        # Subtest: pass\n        ok 1 - pass\n          ---\n          duration_ms: *\n          ...\n        # Subtest: never resolving promise\n        not ok 2 - never resolving promise\n          ---\n          duration_ms: *\n          location: '/test/fixtures/test-runner/output/unresolved_promise.js:(LINE):1'\n          failureType: 'cancelledByParent'\n          error: 'Promise resolution is still pending but the event loop has already resolved'\n          code: 'ERR_TEST_FAILURE'\n          ...\n        # Subtest: fail\n        not ok 3 - fail\n          ---\n          duration_ms: *\n          location: '/test/fixtures/test-runner/output/unresolved_promise.js:(LINE):1'\n          failureType: 'cancelledByParent'\n          error: 'Promise resolution is still pending but the event loop has already resolved'\n          code: 'ERR_TEST_FAILURE'\n          ...\n        1..3\n        # tests 3\n        # suites 0\n        # pass 1\n        # fail 0\n        # cancelled 2\n        # skipped 0\n        # todo 0\n        # duration_ms *\n        \n      operator: 'strictEqual'\n      stack: |-\n        assertSnapshot (C:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:56:12)\n        async Module.spawnAndAssert (C:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:84:3)\n        async TestContext.<anonymous> (file:///C:/workspace/node-test-binary-windows-js-suites/node/test/parallel/test-runner-output.mjs:149:5)\n        async Test.run (node:internal/test_runner/test:748:9)\n        async Promise.all (index 36)\n        async Suite.run (node:internal/test_runner/test:1106:7)\n        async Test.processPendingSubtests (node:internal/test_runner/test:461:7)\n      ...\n    # Subtest: test-runner/output/default_output.js\n        # Subtest: <anonymous>\n        ok 1 - <anonymous> # SKIP Skipping pseudo-tty tests, as pseudo terminals are not available on Windows.\n          ---\n          duration_ms: 476.7521\n          ...\n        1..1\n    ok 38 - test-runner/output/default_output.js\n      ---\n      duration_ms: 477.8949\n      ...\n    # Subtest: test-runner/output/arbitrary-output.js\n    ok 39 - test-runner/output/arbitrary-output.js\n      ---\n      duration_ms: 1211.5971\n      ...\n    # Subtest: test-runner/output/async-test-scheduling.mjs\n    ok 40 - test-runner/output/async-test-scheduling.mjs\n      ---\n      duration_ms: 1157.3698\n      ...\n    # Subtest: test-runner/output/arbitrary-output-colored.js\n        # Subtest: <anonymous>\n        ok 1 - <anonymous> # SKIP Skipping pseudo-tty tests, as pseudo terminals are not available on Windows.\n          ---\n          duration_ms: 230.0074\n          ...\n        1..1\n    ok 41 - test-runner/output/arbitrary-output-colored.js\n      ---\n      duration_ms: 230.9001\n      ...\n    # Subtest: test-runner/output/dot_output_custom_columns.js\n        # Subtest: <anonymous>\n        ok 1 - <anonymous> # SKIP Skipping pseudo-tty tests, as pseudo terminals are not available on Windows.\n          ---\n          duration_ms: 229.7598\n          ...\n        1..1\n    ok 42 - test-runner/output/dot_output_custom_columns.js\n      ---\n      duration_ms: 230.4234\n      ...\n    # Subtest: test-runner/output/tap_escape.js\n    ok 43 - test-runner/output/tap_escape.js\n      ---\n      duration_ms: 757.8052\n      ...\n    # Subtest: test-runner/output/coverage_failure.js\n    ok 44 - test-runner/output/coverage_failure.js\n      ---\n      duration_ms: 846.9387\n      ...\n    1..44\nnot ok 1 - test runner output\n  ---\n  duration_ms: 5484.3007\n  type: 'suite'\n  location: 'C:\\\\workspace\\\\node-test-binary-windows-js-suites\\\\node\\\\test\\\\parallel\\\\test-runner-output.mjs:153:1'\n  failureType: 'subtestsFailed'\n  error: '3 subtests failed'\n  code: 'ERR_TEST_FAILURE'\n  ...\n1..1\n# tests 47\n# suites 1\n# pass 41\n# fail 3\n# cancelled 0\n# skipped 3\n# todo 0\n# duration_ms 5512.8667"},"time":6138.189,"fullname":"parallel/test-runner-output","closingTestPoint":false}},{"testName":"message/stdin_messages","timestamp":1714660669261,"status":"FAILED","jobName":"node-test-binary-windows-js-suites","config":"node-test-binary-windows-js-suites » 0,win11-COMPILED_BY-vs2022 #27525","buildUrl":"https://ci.nodejs.org/job/node-test-binary-windows-js-suites/RUN_SUBSET=0,nodes=win11-COMPILED_BY-vs2022/27525/","buildNumber":27525,"builtOn":"test-azure_msft-win11_vs2022-x64-2","nodeVersion":"23.0.0","commitHash":"3a49bfd9b001e550acf99afcb74b31d6885de874","callStack":[{"upstreamBuild":62664,"upstreamProject":"node-test-commit-windows-fanned","upstreamUrl":"job/node-test-commit-windows-fanned/"},{"upstreamBuild":70433,"upstreamProject":"node-test-commit","upstreamUrl":"job/node-test-commit/"},{"upstreamBuild":58865,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"prId":"52733"}],"tap":{"ok":false,"name":"message/stdin_messages","id":79,"buffered":false,"tapError":null,"skip":false,"todo":false,"previous":null,"plan":null,"diag":{"severity":"fail","stack":"[stdin]\n[stdin]:1\nwith(this){__filename}\n^^^^\n\nSyntaxError: Strict mode code may not include a with statement\n    at makeContextifyScript (node:internal/vm:185:14)\n    at node:internal/process/execution:107:22\n    at [stdin]-wrapper:6:24\n    at runScript (node:internal/process/execution:101:62)\n    at evalScript (node:internal/process/execution:136:3)\n    at node:internal/main/eval_stdin:32:5\n    at Socket.<anonymous> (node:internal/process/execution:237:5)\n    at SlowEventEmitter.emit (node:internal/events/slow_event_emitter:110:35)\n    at Socket.emit (node:internal/events/event_emitter:443:41)\n    at endReadableNT (node:internal/streams/readable:1700:12)\n\nNode.js v23.0.0-pre\n42\n42\n[stdin]:1\nthrow new Error(\"hello\")\n^\n\nError: hello\n    at [stdin]:1:7\n    at runScriptInThisContext (node:internal/vm:209:10)\n    at node:internal/process/execution:118:14\n    at [stdin]-wrapper:6:24\n    at runScript (node:internal/process/execution:101:62)\n    at evalScript (node:internal/process/execution:136:3)\n    at node:internal/main/eval_stdin:32:5\n    at Socket.<anonymous> (node:internal/process/execution:237:5)\n    at SlowEventEmitter.emit (node:internal/events/slow_event_emitter:110:35)\n    at Socket.emit (node:internal/events/event_emitter:443:41)\n\nNode.js v23.0.0-pre\n[stdin]:1\nthrow new Error(\"hello\")\n^\n\nError: hello\n    at [stdin]:1:7\n    at runScriptInThisContext (node:internal/vm:209:10)\n    at node:internal/process/execution:118:14\n    at [stdin]-wrapper:6:24\n    at runScript (node:internal/process/execution:101:62)\n    at evalScript (node:internal/process/execution:136:3)\n    at node:internal/main/eval_stdin:32:5\n    at Socket.<anonymous> (node:internal/process/execution:237:5)\n    at SlowEventEmitter.emit (node:internal/events/slow_event_emitter:110:35)\n    at Socket.emit (node:internal/events/event_emitter:443:41)\n\nNode.js v23.0.0-pre\n100\n[stdin]:1\nlet x = 100; y = x;\n               ^\n\nReferenceError: y is not defined\n    at [stdin]:1:16\n    at runScriptInThisContext (node:internal/vm:209:10)\n    at node:internal/process/execution:118:14\n    at [stdin]-wrapper:6:24\n    at runScript (node:internal/process/execution:101:62)\n    at evalScript (node:internal/process/execution:136:3)\n    at node:internal/main/eval_stdin:32:5\n    at Socket.<anonymous> (node:internal/process/execution:237:5)\n    at SlowEventEmitter.emit (node:internal/events/slow_event_emitter:110:35)\n    at Socket.emit (node:internal/events/event_emitter:443:41)\n\nNode.js v23.0.0-pre\n\n[stdin]:1\nlet ______________________________________________; throw 10\n                                                    ^\n10\n(Use `node --trace-uncaught ...` to show where the exception was thrown)\n\nNode.js v23.0.0-pre\n\n[stdin]:1\nlet ______________________________________________; throw 10\n                                                    ^\n10\n(Use `node --trace-uncaught ...` to show where the exception was thrown)\n\nNode.js v23.0.0-pre\ndone"},"time":1331.019,"fullname":"message/stdin_messages","closingTestPoint":false}},{"testName":"parallel/test-assert-builtins-not-read-from-filesystem","timestamp":1714660669261,"status":"FAILED","jobName":"node-test-binary-windows-js-suites","config":"node-test-binary-windows-js-suites » 2,win10-COMPILED_BY-vs2022 #27525","buildUrl":"https://ci.nodejs.org/job/node-test-binary-windows-js-suites/RUN_SUBSET=2,nodes=win10-COMPILED_BY-vs2022/27525/","buildNumber":27525,"builtOn":"test-azure_msft-win10_vs2019-x64-1","nodeVersion":"23.0.0","commitHash":"3a49bfd9b001e550acf99afcb74b31d6885de874","callStack":[{"upstreamBuild":62664,"upstreamProject":"node-test-commit-windows-fanned","upstreamUrl":"job/node-test-commit-windows-fanned/"},{"upstreamBuild":70433,"upstreamProject":"node-test-commit","upstreamUrl":"job/node-test-commit/"},{"upstreamBuild":58865,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"prId":"52733"}],"tap":{"ok":false,"name":"parallel/test-assert-builtins-not-read-from-filesystem","id":68,"buffered":false,"tapError":null,"skip":false,"todo":false,"previous":null,"plan":null,"diag":{"severity":"fail","exitcode":1,"stack":"node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Exit code: 1\n,,node:fs:2348\n\n    return binding.writeFileUtf8(\n\n                   ^\n\n\n\nError: ENOENT: no such file or directory, open 'c:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\.tmp.68\\node:internal\\events\\fast_event_emitter'\n\n    at writeFileSync (node:fs:2348:20)\n\n    at Object.<anonymous> (c:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\parallel\\test-assert-builtins-not-read-from-filesystem.js:41:3)\n\n    at Module._compile (node:internal/modules/cjs/loader:1480:14)\n\n    at Module._extensions..js (node:internal/modules/cjs/loader:1564:10)\n\n    at Module.load (node:internal/modules/cjs/loader:1287:32)\n\n    at Module._load (node:internal/modules/cjs/loader:1103:12)\n\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:168:12)\n\n    at node:internal/main/run_main_module:30:49 {\n\n  errno: -4058,\n\n  code: 'ENOENT',\n\n  syscall: 'open',\n\n  path: 'c:\\\\workspace\\\\node-test-binary-windows-js-suites\\\\node\\\\test\\\\.tmp.68\\\\node:internal\\\\events\\\\fast_event_emitter'\n\n}\n\n\n\nNode.js v23.0.0-pre\n\n\n    at Object.<anonymous> (c:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\parallel\\test-assert-builtins-not-read-from-filesystem.js:31:12)\n    at Module._compile (node:internal/modules/cjs/loader:1480:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1564:10)\n    at Module.load (node:internal/modules/cjs/loader:1287:32)\n    at Module._load (node:internal/modules/cjs/loader:1103:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:168:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: false,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 0,\n  operator: 'strictEqual'\n}\n\nNode.js v23.0.0-pre"},"time":374.017,"fullname":"parallel/test-assert-builtins-not-read-from-filesystem","closingTestPoint":false}},{"testName":"parallel/test-disable-proto-delete","timestamp":1714660669261,"status":"FAILED","jobName":"node-test-binary-windows-js-suites","config":"node-test-binary-windows-js-suites » 2,win10-COMPILED_BY-vs2022 #27525","buildUrl":"https://ci.nodejs.org/job/node-test-binary-windows-js-suites/RUN_SUBSET=2,nodes=win10-COMPILED_BY-vs2022/27525/","buildNumber":27525,"builtOn":"test-azure_msft-win10_vs2019-x64-1","nodeVersion":"23.0.0","commitHash":"3a49bfd9b001e550acf99afcb74b31d6885de874","callStack":[{"upstreamBuild":62664,"upstreamProject":"node-test-commit-windows-fanned","upstreamUrl":"job/node-test-commit-windows-fanned/"},{"upstreamBuild":70433,"upstreamProject":"node-test-commit","upstreamUrl":"job/node-test-commit/"},{"upstreamBuild":58865,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"prId":"52733"}],"tap":{"ok":false,"name":"parallel/test-disable-proto-delete","id":223,"buffered":false,"tapError":null,"skip":false,"todo":false,"previous":null,"plan":null,"diag":{"severity":"fail","exitcode":1,"stack":"node:internal/events/slow_event_emitter:291\n    for (let i = listeners.length - 1; i >= 0; i--) {\n                           ^\n\nTypeError: Cannot read properties of null (reading 'length')\n    at SlowEventEmitter.removeAllListeners (node:internal/events/slow_event_emitter:291:28)\n    at Worker.removeAllListeners (node:internal/events/event_emitter:576:38)\n    at SlowEventEmitter.removeAllListeners (node:internal/events/slow_event_emitter:276:41)\n    at Worker.removeAllListeners (node:internal/events/event_emitter:576:38)\n    at [kOnExit] (node:internal/worker:316:10)\n    at Worker.<computed>.onexit (node:internal/worker:229:20)\n\nNode.js v23.0.0-pre"},"time":290.003,"fullname":"parallel/test-disable-proto-delete","closingTestPoint":false}},{"testName":"parallel/test-runner-output","timestamp":1714660669261,"status":"FAILED","jobName":"node-test-binary-windows-js-suites","config":"node-test-binary-windows-js-suites » 2,win10-COMPILED_BY-vs2022 #27525","buildUrl":"https://ci.nodejs.org/job/node-test-binary-windows-js-suites/RUN_SUBSET=2,nodes=win10-COMPILED_BY-vs2022/27525/","buildNumber":27525,"builtOn":"test-azure_msft-win10_vs2019-x64-1","nodeVersion":"23.0.0","commitHash":"3a49bfd9b001e550acf99afcb74b31d6885de874","callStack":[{"upstreamBuild":62664,"upstreamProject":"node-test-commit-windows-fanned","upstreamUrl":"job/node-test-commit-windows-fanned/"},{"upstreamBuild":70433,"upstreamProject":"node-test-commit","upstreamUrl":"job/node-test-commit/"},{"upstreamBuild":58865,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"prId":"52733"}],"tap":{"ok":false,"name":"parallel/test-runner-output","id":672,"buffered":false,"tapError":null,"skip":false,"todo":false,"previous":null,"plan":null,"diag":{"severity":"fail","exitcode":1,"stack":"TAP version 13\n# Subtest: test runner output\n    # Subtest: test-runner/output/abort.js\n    ok 1 - test-runner/output/abort.js\n      ---\n      duration_ms: 1694.1755\n      ...\n    # Subtest: test-runner/output/abort_suite.js\n    ok 2 - test-runner/output/abort_suite.js\n      ---\n      duration_ms: 1677.4872\n      ...\n    # Subtest: test-runner/output/abort_hooks.js\n    ok 3 - test-runner/output/abort_hooks.js\n      ---\n      duration_ms: 757.52\n      ...\n    # Subtest: test-runner/output/describe_it.js\n    ok 4 - test-runner/output/describe_it.js\n      ---\n      duration_ms: 1657.2143\n      ...\n    # Subtest: test-runner/output/describe_nested.js\n    ok 5 - test-runner/output/describe_nested.js\n      ---\n      duration_ms: 1062.755\n      ...\n    # Subtest: test-runner/output/eval_dot.js\n    ok 6 - test-runner/output/eval_dot.js\n      ---\n      duration_ms: 718.4586\n      ...\n    # Subtest: test-runner/output/eval_spec.js\n    ok 7 - test-runner/output/eval_spec.js\n      ---\n      duration_ms: 871.7214\n      ...\n    # Subtest: test-runner/output/eval_tap.js\n    ok 8 - test-runner/output/eval_tap.js\n      ---\n      duration_ms: 693.3897\n      ...\n    # Subtest: test-runner/output/hooks.js\n    ok 9 - test-runner/output/hooks.js\n      ---\n      duration_ms: 1379.285\n      ...\n    # Subtest: test-runner/output/hooks_spec_reporter.js\n    ok 10 - test-runner/output/hooks_spec_reporter.js\n      ---\n      duration_ms: 2575.2398\n      ...\n    # Subtest: test-runner/output/skip-each-hooks.js\n    ok 11 - test-runner/output/skip-each-hooks.js\n      ---\n      duration_ms: 761.371\n      ...\n    # Subtest: test-runner/output/suite-skip-hooks.js\n    ok 12 - test-runner/output/suite-skip-hooks.js\n      ---\n      duration_ms: 1151.7599\n      ...\n    # Subtest: test-runner/output/timeout_in_before_each_should_not_affect_further_tests.js\n    ok 13 - test-runner/output/timeout_in_before_each_should_not_affect_further_tests.js\n      ---\n      duration_ms: 2333.6331\n      ...\n    # Subtest: test-runner/output/hooks-with-no-global-test.js\n    ok 14 - test-runner/output/hooks-with-no-global-test.js\n      ---\n      duration_ms: 1376.045\n      ...\n    # Subtest: test-runner/output/global-hooks-with-no-tests.js\n    ok 15 - test-runner/output/global-hooks-with-no-tests.js\n      ---\n      duration_ms: 1315.0496\n      ...\n    # Subtest: test-runner/output/before-and-after-each-too-many-listeners.js\n    ok 16 - test-runner/output/before-and-after-each-too-many-listeners.js\n      ---\n      duration_ms: 1177.399\n      ...\n    # Subtest: test-runner/output/before-and-after-each-with-timeout-too-many-listeners.js\n    ok 17 - test-runner/output/before-and-after-each-with-timeout-too-many-listeners.js\n      ---\n      duration_ms: 1445.1117\n      ...\n    # Subtest: test-runner/output/force_exit.js\n    ok 18 - test-runner/output/force_exit.js\n      ---\n      duration_ms: 1510.6301\n      ...\n    # Subtest: test-runner/output/global_after_should_fail_the_test.js\n    ok 19 - test-runner/output/global_after_should_fail_the_test.js\n      ---\n      duration_ms: 1499.9192\n      ...\n    # Subtest: test-runner/output/no_refs.js\n    not ok 20 - test-runner/output/no_refs.js\n      ---\n      duration_ms: 1358.1082\n      location: 'c:\\\\workspace\\\\node-test-binary-windows-js-suites\\\\node\\\\test\\\\parallel\\\\test-runner-output.mjs:155:5'\n      failureType: 'testCodeFailure'\n      error: |-\n        Expected values to be strictly equal:\n        + actual - expected ... Lines skipped\n        \n          'TAP version 13\\n' +\n            '# Subtest: does not keep event loop alive\\n' +\n        ...\n            \"      error: 'Promise resolution is still pending but the event loop has already resolved'\\n\" +\n            \"      code: 'ERR_TEST_FAILURE'\\n\" +\n        +   '      ...\\n' +\n        +   '    1..1\\n' +\n        +   'not ok 1 - does not keep event loop alive\\n' +\n        +   '  ---\\n' +\n        +   '  duration_ms: *\\n' +\n        +   \"  location: '/test/fixtures/test-runner/output/no_refs.js:(LINE):1'\\n\" +\n        +   \"  failureType: 'cancelledByParent'\\n\" +\n        +   \"  error: 'Promise resolution is still pending but the event loop has already resolved'\\n\" +\n        +   \"  code: 'ERR_TEST_FAILURE'\\n\" +\n        -   '      stack: |-\\n' +\n        -   '        *\\n' +\n        -   '      ...\\n' +\n        -   '    1..1\\n' +\n        -   'not ok 1 - does not keep event loop alive\\n' +\n        -   '  ---\\n' +\n        -   '  duration_ms: *\\n' +\n        -   \"  location: '/test/fixtures/test-runner/output/no_refs.js:(LINE):1'\\n\" +\n        -   \"  failureType: 'cancelledByParent'\\n\" +\n        -   \"  error: 'Promise resolution is still pending but the event loop has already resolved'\\n\" +\n        -   \"  code: 'ERR_TEST_FAILURE'\\n\" +\n        -   '  stack: |-\\n' +\n        -   '    *\\n' +\n            '  ...\\n' +\n        ...\n            '# skipped 0\\n' +\n            '# todo 0\\n' +\n            '# duration_ms *\\n'\n      code: 'ERR_ASSERTION'\n      name: 'AssertionError'\n      expected: |-\n        TAP version 13\n        # Subtest: does not keep event loop alive\n            # Subtest: +does not keep event loop alive\n            not ok 1 - +does not keep event loop alive\n              ---\n              duration_ms: *\n              location: '/test/fixtures/test-runner/output/no_refs.js:(LINE):11'\n              failureType: 'cancelledByParent'\n              error: 'Promise resolution is still pending but the event loop has already resolved'\n              code: 'ERR_TEST_FAILURE'\n              stack: |-\n                *\n              ...\n            1..1\n        not ok 1 - does not keep event loop alive\n          ---\n          duration_ms: *\n          location: '/test/fixtures/test-runner/output/no_refs.js:(LINE):1'\n          failureType: 'cancelledByParent'\n          error: 'Promise resolution is still pending but the event loop has already resolved'\n          code: 'ERR_TEST_FAILURE'\n          stack: |-\n            *\n          ...\n        1..1\n        # tests 2\n        # suites 0\n        # pass 0\n        # fail 0\n        # cancelled 2\n        # skipped 0\n        # todo 0\n        # duration_ms *\n        \n      actual: |-\n        TAP version 13\n        # Subtest: does not keep event loop alive\n            # Subtest: +does not keep event loop alive\n            not ok 1 - +does not keep event loop alive\n              ---\n              duration_ms: *\n              location: '/test/fixtures/test-runner/output/no_refs.js:(LINE):11'\n              failureType: 'cancelledByParent'\n              error: 'Promise resolution is still pending but the event loop has already resolved'\n              code: 'ERR_TEST_FAILURE'\n              ...\n            1..1\n        not ok 1 - does not keep event loop alive\n          ---\n          duration_ms: *\n          location: '/test/fixtures/test-runner/output/no_refs.js:(LINE):1'\n          failureType: 'cancelledByParent'\n          error: 'Promise resolution is still pending but the event loop has already resolved'\n          code: 'ERR_TEST_FAILURE'\n          ...\n        1..1\n        # tests 2\n        # suites 0\n        # pass 0\n        # fail 0\n        # cancelled 2\n        # skipped 0\n        # todo 0\n        # duration_ms *\n        \n      operator: 'strictEqual'\n      stack: |-\n        assertSnapshot (c:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:56:12)\n        async Module.spawnAndAssert (c:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:84:3)\n        async TestContext.<anonymous> (file:///c:/workspace/node-test-binary-windows-js-suites/node/test/parallel/test-runner-output.mjs:149:5)\n        async Test.run (node:internal/test_runner/test:748:9)\n        async Promise.all (index 19)\n        async Suite.run (node:internal/test_runner/test:1106:7)\n        async Test.processPendingSubtests (node:internal/test_runner/test:461:7)\n      ...\n    # Subtest: test-runner/output/no_tests.js\n    ok 21 - test-runner/output/no_tests.js\n      ---\n      duration_ms: 1340.3149\n      ...\n    # Subtest: test-runner/output/only_tests.js\n    ok 22 - test-runner/output/only_tests.js\n      ---\n      duration_ms: 1463.7904\n      ...\n    # Subtest: test-runner/output/dot_reporter.js\n    ok 23 - test-runner/output/dot_reporter.js\n      ---\n      duration_ms: 3582.1695\n      ...\n    # Subtest: test-runner/output/junit_reporter.js\n    not ok 24 - test-runner/output/junit_reporter.js\n      ---\n      duration_ms: 3573.6043\n      location: 'c:\\\\workspace\\\\node-test-binary-windows-js-suites\\\\node\\\\test\\\\parallel\\\\test-runner-output.mjs:155:5'\n      failureType: 'testCodeFailure'\n      error: |-\n        Expected values to be strictly equal:\n        + actual - expected ... Lines skipped\n        \n          '<?xml version=\"1.0\" encoding=\"utf-8\"?>\\n' +\n            '<testsuites>\\n' +\n        ...\n            '\\t\\t</failure>\\n' +\n            '\\t</testcase>\\n' +\n        +   '\\t<testcase name=\"callback called twice\" time=\"*\" '... 11376 more characters\n        -   '\\t<testcase name=\"callback called twice\" time=\"*\" '... 11392 more characters\n      code: 'ERR_ASSERTION'\n      name: 'AssertionError'\n      expected: |-\n        <?xml version=\"1.0\" encoding=\"utf-8\"?>\n        <testsuites>\n        \t<testcase name=\"sync pass todo\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"todo\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync pass todo with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"todo\" message=\"this is a passing todo\"/>\n        \t</testcase>\n        \t<testcase name=\"sync fail todo\" time=\"*\" classname=\"test\" failure=\"thrown from sync fail todo\">\n        \t\t<skipped type=\"todo\" message=\"true\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync fail todo\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync fail todo] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync fail todo\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync fail todo with message\" time=\"*\" classname=\"test\" failure=\"thrown from sync fail todo with message\">\n        \t\t<skipped type=\"todo\" message=\"this is a failing todo\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync fail todo with message\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync fail todo with message] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync fail todo with message\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync skip pass\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip pass with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"this is skipped\"/>\n        \t</testcase>\n        \t<testcase name=\"sync pass\" time=\"*\" classname=\"test\"/>\n        \t<!-- this test should pass -->\n        \t<testcase name=\"sync throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from sync throw fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async skip pass\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"async pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from async throw fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from async throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from async throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async skip fail\" time=\"*\" classname=\"test\" failure=\"thrown from async throw fail\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from async throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from async throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async assertion fail\" time=\"*\" classname=\"test\" failure=\"Expected values to be strictly equal:true !== false\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Expected values to be strictly equal:true !== false\">\n        [Error [ERR_TEST_FAILURE]: Expected values to be strictly equal:\n        \n        true !== false\n        ] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n          \n          true !== false\n          \n              *\n              *\n              *\n              *\n              *\n              *\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: true,\n            expected: false,\n            operator: 'strictEqual'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"resolve pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"reject fail\" time=\"*\" classname=\"test\" failure=\"rejected from reject fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"rejected from reject fail\">\n        [Error [ERR_TEST_FAILURE]: rejected from reject fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: rejected from reject fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unhandled rejection - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async unhandled rejection - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate throw - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate reject - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate resolve pass\" time=\"*\" classname=\"test\"/>\n        \t<testsuite name=\"subtest sync throw fail\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"1\" failures=\"1\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"+sync throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fail\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fail\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fail\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<!-- this subtest should make its parent test fail -->\n        \t</testsuite>\n        \t<testcase name=\"sync throw non-error fail\" time=\"*\" classname=\"test\" failure=\"Symbol(thrown symbol from sync throw non-error fail)\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Symbol(thrown symbol from sync throw non-error fail)\">\n        [Error [ERR_TEST_FAILURE]: Symbol(thrown symbol from sync throw non-error fail)] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: Symbol(thrown symbol from sync throw non-error fail) }\n        \t\t</failure>\n        \t</testcase>\n        \t<testsuite name=\"level 0a\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"4\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"level 1a\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1b\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1c\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1d\" time=\"*\" classname=\"test\"/>\n        \t</testsuite>\n        \t<testsuite name=\"top level\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"2\" failures=\"1\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"+long running\" time=\"*\" classname=\"test\" failure=\"test did not finish before its parent and was cancelled\">\n        \t\t\t<failure type=\"cancelledByParent\" message=\"test did not finish before its parent and was cancelled\">\n        [Error [ERR_TEST_FAILURE]: test did not finish before its parent and was cancelled] { code: 'ERR_TEST_FAILURE', failureType: 'cancelledByParent', cause: 'test did not finish before its parent and was cancelled' }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<testsuite name=\"+short running\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"1\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t\t<testcase name=\"++short running\" time=\"*\" classname=\"test\"/>\n        \t\t</testsuite>\n        \t</testsuite>\n        \t<testcase name=\"invalid subtest - pass but subtest fails\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"sync skip option\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip option with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"this is skipped\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip option is false fail\" time=\"*\" classname=\"test\" failure=\"this should be executed\">\n        \t\t<failure type=\"testCodeFailure\" message=\"this should be executed\">\n        [Error [ERR_TEST_FAILURE]: this should be executed] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: this should be executed\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"functionOnly\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"test with only a name provided\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"test with a name and options provided\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"functionAndOptions\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"callback pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback fail\" time=\"*\" classname=\"test\" failure=\"callback failure\">\n        \t\t<failure type=\"testCodeFailure\" message=\"callback failure\">\n        [Error [ERR_TEST_FAILURE]: callback failure] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: callback failure\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback also returns a Promise\" time=\"*\" classname=\"test\" failure=\"passed a callback but also returned a Promise\">\n        \t\t<failure type=\"callbackAndPromisePresent\" message=\"passed a callback but also returned a Promise\">\n        [Error [ERR_TEST_FAILURE]: passed a callback but also returned a Promise] { code: 'ERR_TEST_FAILURE', failureType: 'callbackAndPromisePresent', cause: 'passed a callback but also returned a Promise' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback throw\" time=\"*\" classname=\"test\" failure=\"thrown from callback throw\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from callback throw\">\n        [Error [ERR_TEST_FAILURE]: thrown from callback throw] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from callback throw\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback called twice\" time=\"*\" classname=\"test\" failure=\"callback invoked multiple times\">\n        \t\t<failure type=\"multipleCallbackInvocations\" message=\"callback invoked multiple times\">\n        Error [ERR_TEST_FAILURE]: callback invoked multiple times\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'multipleCallbackInvocations',\n          cause: 'callback invoked multiple times'\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback called twice in different ticks\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback called twice in future tick\" time=\"*\" classname=\"test\" failure=\"callback invoked multiple times\">\n        \t\t<failure type=\"uncaughtException\" message=\"callback invoked multiple times\">\n        Error [ERR_TEST_FAILURE]: callback invoked multiple times\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error [ERR_TEST_FAILURE]: callback invoked multiple times\n              * {\n            code: 'ERR_TEST_FAILURE',\n            failureType: 'multipleCallbackInvocations',\n            cause: 'callback invoked multiple times'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback async throw\" time=\"*\" classname=\"test\" failure=\"thrown from callback async throw\">\n        \t\t<failure type=\"uncaughtException\" message=\"thrown from callback async throw\">\n        Error [ERR_TEST_FAILURE]: thrown from callback async throw\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error: thrown from callback async throw\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback async throw after done\" time=\"*\" classname=\"test\"/>\n        \t<testsuite name=\"only is set but not in only mode\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"4\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"running subtest 1\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"running subtest 2\" time=\"*\" classname=\"test\"/>\n        \t\t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t\t<testcase name=\"running subtest 3\" time=\"*\" classname=\"test\"/>\n        \t\t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t\t<testcase name=\"running subtest 4\" time=\"*\" classname=\"test\"/>\n        \t</testsuite>\n        \t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t<testcase name=\"custom inspect symbol fail\" time=\"*\" classname=\"test\" failure=\"customized\">\n        \t\t<failure type=\"testCodeFailure\" message=\"customized\">\n        [Error [ERR_TEST_FAILURE]: customized] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: customized }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"custom inspect symbol that throws fail\" time=\"*\" classname=\"test\" failure=\"{  foo: 1,  [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]}\">\n        \t\t<failure type=\"testCodeFailure\" message=\"{  foo: 1,  [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]}\">\n        [Error [ERR_TEST_FAILURE]: {\n          foo: 1,\n          [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]\n        }] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: { foo: 1, [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]] }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testsuite name=\"subtest sync throw fails\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"2\" failures=\"2\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"sync throw fails at first\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fails at first\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fails at first\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fails at first\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fails at first\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<testcase name=\"sync throw fails at second\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fails at second\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fails at second\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fails at second\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fails at second\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t</testsuite>\n        \t<testcase name=\"timed out async test\" time=\"*\" classname=\"test\" failure=\"test timed out after 5ms\">\n        \t\t<failure type=\"testTimeoutFailure\" message=\"test timed out after 5ms\">\n        [Error [ERR_TEST_FAILURE]: test timed out after 5ms] { code: 'ERR_TEST_FAILURE', failureType: 'testTimeoutFailure', cause: 'test timed out after 5ms' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"timed out callback test\" time=\"*\" classname=\"test\" failure=\"test timed out after 5ms\">\n        \t\t<failure type=\"testTimeoutFailure\" message=\"test timed out after 5ms\">\n        [Error [ERR_TEST_FAILURE]: test timed out after 5ms] { code: 'ERR_TEST_FAILURE', failureType: 'testTimeoutFailure', cause: 'test timed out after 5ms' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"large timeout async test is ok\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"large timeout callback test is ok\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"successful thenable\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"rejected thenable\" time=\"*\" classname=\"test\" failure=\"custom error\">\n        \t\t<failure type=\"testCodeFailure\" message=\"custom error\">\n        [Error [ERR_TEST_FAILURE]: custom error] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: 'custom error' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unfinished test with uncaughtException\" time=\"*\" classname=\"test\" failure=\"foo\">\n        \t\t<failure type=\"uncaughtException\" message=\"foo\">\n        Error [ERR_TEST_FAILURE]: foo\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error: foo\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unfinished test with unhandledRejection\" time=\"*\" classname=\"test\" failure=\"bar\">\n        \t\t<failure type=\"unhandledRejection\" message=\"bar\">\n        Error [ERR_TEST_FAILURE]: bar\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'unhandledRejection',\n          cause: Error: bar\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"assertion errors display actual and expected properly\" time=\"*\" classname=\"test\" failure=\"Expected values to be loosely deep-equal:{  bar: 1,  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  foo: 1}should loosely deep-equal{  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  circular: &lt;ref *1> {    bar: 2,    c: [Circular *1]  }}\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Expected values to be loosely deep-equal:{  bar: 1,  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  foo: 1}should loosely deep-equal{  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  circular: &lt;ref *1> {    bar: 2,    c: [Circular *1]  }}\">\n        [Error [ERR_TEST_FAILURE]: Expected values to be loosely deep-equal:\n        \n        {\n          bar: 1,\n          baz: {\n            date: 1970-01-01T00:00:00.000Z,\n            null: null,\n            number: 1,\n            string: 'Hello',\n            undefined: undefined\n          },\n          boo: [\n            1\n          ],\n          foo: 1\n        }\n        \n        should loosely deep-equal\n        \n        {\n          baz: {\n            date: 1970-01-01T00:00:00.000Z,\n            null: null,\n            number: 1,\n            string: 'Hello',\n            undefined: undefined\n          },\n          boo: [\n            1\n          ],\n          circular: &lt;ref *1> {\n            bar: 2,\n            c: [Circular *1]\n          }\n        }] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n          \n          {\n            bar: 1,\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            foo: 1\n          }\n          \n          should loosely deep-equal\n          \n          {\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            circular: &lt;ref *1> {\n              bar: 2,\n              c: [Circular *1]\n            }\n          }\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: [Object],\n            expected: [Object],\n            operator: 'deepEqual'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"invalid subtest fail\" time=\"*\" classname=\"test\" failure=\"test could not be started because its parent finished\">\n        \t\t<failure type=\"parentAlreadyFinished\" message=\"test could not be started because its parent finished\">\n        Error [ERR_TEST_FAILURE]: test could not be started because its parent finished\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'parentAlreadyFinished',\n          cause: 'test could not be started because its parent finished'\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<!-- Error: Test \"unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:72:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: Test \"async unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:76:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from async unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: A resource generated asynchronous activity after the test ended. This activity created the error \"Error: uncaught from outside of a test\" which triggered an uncaughtException event, caught by the test runner. -->\n        \t<!-- Error: Test \"immediate throw - passes but warns\" at test/fixtures/test-runner/output/output.js:80:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from immediate throw fail\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- Error: Test \"immediate reject - passes but warns\" at test/fixtures/test-runner/output/output.js:86:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from immediate reject fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: Test \"callback called twice in different ticks\" at test/fixtures/test-runner/output/output.js:251:1 generated asynchronous activity after the test ended. This activity created the error \"Error [ERR_TEST_FAILURE]: callback invoked multiple times\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- Error: Test \"callback async throw after done\" at test/fixtures/test-runner/output/output.js:269:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from callback async throw after done\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- tests 76 -->\n        \t<!-- suites 0 -->\n        \t<!-- pass 35 -->\n        \t<!-- fail 25 -->\n        \t<!-- cancelled 3 -->\n        \t<!-- skipped 9 -->\n        \t<!-- todo 4 -->\n        \t<!-- duration_ms * -->\n        </testsuites>\n        \n      actual: |-\n        <?xml version=\"1.0\" encoding=\"utf-8\"?>\n        <testsuites>\n        \t<testcase name=\"sync pass todo\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"todo\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync pass todo with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"todo\" message=\"this is a passing todo\"/>\n        \t</testcase>\n        \t<testcase name=\"sync fail todo\" time=\"*\" classname=\"test\" failure=\"thrown from sync fail todo\">\n        \t\t<skipped type=\"todo\" message=\"true\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync fail todo\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync fail todo] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync fail todo\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync fail todo with message\" time=\"*\" classname=\"test\" failure=\"thrown from sync fail todo with message\">\n        \t\t<skipped type=\"todo\" message=\"this is a failing todo\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync fail todo with message\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync fail todo with message] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync fail todo with message\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync skip pass\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip pass with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"this is skipped\"/>\n        \t</testcase>\n        \t<testcase name=\"sync pass\" time=\"*\" classname=\"test\"/>\n        \t<!-- this test should pass -->\n        \t<testcase name=\"sync throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from sync throw fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async skip pass\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"async pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from async throw fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from async throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from async throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async skip fail\" time=\"*\" classname=\"test\" failure=\"thrown from async throw fail\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from async throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from async throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async assertion fail\" time=\"*\" classname=\"test\" failure=\"Expected values to be strictly equal:true !== false\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Expected values to be strictly equal:true !== false\">\n        [Error [ERR_TEST_FAILURE]: Expected values to be strictly equal:\n        \n        true !== false\n        ] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n          \n          true !== false\n          \n              *\n              *\n              *\n              *\n              *\n              *\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: true,\n            expected: false,\n            operator: 'strictEqual'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"resolve pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"reject fail\" time=\"*\" classname=\"test\" failure=\"rejected from reject fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"rejected from reject fail\">\n        [Error [ERR_TEST_FAILURE]: rejected from reject fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: rejected from reject fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unhandled rejection - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async unhandled rejection - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate throw - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate reject - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate resolve pass\" time=\"*\" classname=\"test\"/>\n        \t<testsuite name=\"subtest sync throw fail\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"1\" failures=\"1\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"+sync throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fail\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fail\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fail\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<!-- this subtest should make its parent test fail -->\n        \t</testsuite>\n        \t<testcase name=\"sync throw non-error fail\" time=\"*\" classname=\"test\" failure=\"Symbol(thrown symbol from sync throw non-error fail)\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Symbol(thrown symbol from sync throw non-error fail)\">\n        [Error [ERR_TEST_FAILURE]: Symbol(thrown symbol from sync throw non-error fail)] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: Symbol(thrown symbol from sync throw non-error fail) }\n        \t\t</failure>\n        \t</testcase>\n        \t<testsuite name=\"level 0a\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"4\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"level 1a\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1b\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1c\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1d\" time=\"*\" classname=\"test\"/>\n        \t</testsuite>\n        \t<testsuite name=\"top level\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"2\" failures=\"1\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"+long running\" time=\"*\" classname=\"test\" failure=\"test did not finish before its parent and was cancelled\">\n        \t\t\t<failure type=\"cancelledByParent\" message=\"test did not finish before its parent and was cancelled\">\n        [Error [ERR_TEST_FAILURE]: test did not finish before its parent and was cancelled] { code: 'ERR_TEST_FAILURE', failureType: 'cancelledByParent', cause: 'test did not finish before its parent and was cancelled' }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<testsuite name=\"+short running\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"1\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t\t<testcase name=\"++short running\" time=\"*\" classname=\"test\"/>\n        \t\t</testsuite>\n        \t</testsuite>\n        \t<testcase name=\"invalid subtest - pass but subtest fails\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"sync skip option\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip option with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"this is skipped\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip option is false fail\" time=\"*\" classname=\"test\" failure=\"this should be executed\">\n        \t\t<failure type=\"testCodeFailure\" message=\"this should be executed\">\n        [Error [ERR_TEST_FAILURE]: this should be executed] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: this should be executed\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"functionOnly\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"test with only a name provided\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"test with a name and options provided\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"functionAndOptions\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"callback pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback fail\" time=\"*\" classname=\"test\" failure=\"callback failure\">\n        \t\t<failure type=\"testCodeFailure\" message=\"callback failure\">\n        [Error [ERR_TEST_FAILURE]: callback failure] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: callback failure\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback also returns a Promise\" time=\"*\" classname=\"test\" failure=\"passed a callback but also returned a Promise\">\n        \t\t<failure type=\"callbackAndPromisePresent\" message=\"passed a callback but also returned a Promise\">\n        [Error [ERR_TEST_FAILURE]: passed a callback but also returned a Promise] { code: 'ERR_TEST_FAILURE', failureType: 'callbackAndPromisePresent', cause: 'passed a callback but also returned a Promise' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback throw\" time=\"*\" classname=\"test\" failure=\"thrown from callback throw\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from callback throw\">\n        [Error [ERR_TEST_FAILURE]: thrown from callback throw] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from callback throw\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback called twice\" time=\"*\" classname=\"test\" failure=\"callback invoked multiple times\">\n        \t\t<failure type=\"multipleCallbackInvocations\" message=\"callback invoked multiple times\">\n        Error [ERR_TEST_FAILURE]: callback invoked multiple times\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'multipleCallbackInvocations',\n          cause: 'callback invoked multiple times'\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback called twice in different ticks\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback called twice in future tick\" time=\"*\" classname=\"test\" failure=\"callback invoked multiple times\">\n        \t\t<failure type=\"uncaughtException\" message=\"callback invoked multiple times\">\n        [Error [ERR_TEST_FAILURE]: callback invoked multiple times] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error [ERR_TEST_FAILURE]: callback invoked multiple times\n              * {\n            code: 'ERR_TEST_FAILURE',\n            failureType: 'multipleCallbackInvocations',\n            cause: 'callback invoked multiple times'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback async throw\" time=\"*\" classname=\"test\" failure=\"thrown from callback async throw\">\n        \t\t<failure type=\"uncaughtException\" message=\"thrown from callback async throw\">\n        [Error [ERR_TEST_FAILURE]: thrown from callback async throw] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error: thrown from callback async throw\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback async throw after done\" time=\"*\" classname=\"test\"/>\n        \t<testsuite name=\"only is set but not in only mode\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"4\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"running subtest 1\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"running subtest 2\" time=\"*\" classname=\"test\"/>\n        \t\t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t\t<testcase name=\"running subtest 3\" time=\"*\" classname=\"test\"/>\n        \t\t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t\t<testcase name=\"running subtest 4\" time=\"*\" classname=\"test\"/>\n        \t</testsuite>\n        \t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t<testcase name=\"custom inspect symbol fail\" time=\"*\" classname=\"test\" failure=\"customized\">\n        \t\t<failure type=\"testCodeFailure\" message=\"customized\">\n        [Error [ERR_TEST_FAILURE]: customized] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: customized }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"custom inspect symbol that throws fail\" time=\"*\" classname=\"test\" failure=\"{  foo: 1,  [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]}\">\n        \t\t<failure type=\"testCodeFailure\" message=\"{  foo: 1,  [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]}\">\n        [Error [ERR_TEST_FAILURE]: {\n          foo: 1,\n          [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]\n        }] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: { foo: 1, [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]] }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testsuite name=\"subtest sync throw fails\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"2\" failures=\"2\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"sync throw fails at first\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fails at first\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fails at first\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fails at first\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fails at first\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<testcase name=\"sync throw fails at second\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fails at second\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fails at second\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fails at second\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fails at second\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t</testsuite>\n        \t<testcase name=\"timed out async test\" time=\"*\" classname=\"test\" failure=\"test timed out after 5ms\">\n        \t\t<failure type=\"testTimeoutFailure\" message=\"test timed out after 5ms\">\n        [Error [ERR_TEST_FAILURE]: test timed out after 5ms] { code: 'ERR_TEST_FAILURE', failureType: 'testTimeoutFailure', cause: 'test timed out after 5ms' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"timed out callback test\" time=\"*\" classname=\"test\" failure=\"test timed out after 5ms\">\n        \t\t<failure type=\"testTimeoutFailure\" message=\"test timed out after 5ms\">\n        [Error [ERR_TEST_FAILURE]: test timed out after 5ms] { code: 'ERR_TEST_FAILURE', failureType: 'testTimeoutFailure', cause: 'test timed out after 5ms' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"large timeout async test is ok\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"large timeout callback test is ok\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"successful thenable\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"rejected thenable\" time=\"*\" classname=\"test\" failure=\"custom error\">\n        \t\t<failure type=\"testCodeFailure\" message=\"custom error\">\n        [Error [ERR_TEST_FAILURE]: custom error] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: 'custom error' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unfinished test with uncaughtException\" time=\"*\" classname=\"test\" failure=\"foo\">\n        \t\t<failure type=\"uncaughtException\" message=\"foo\">\n        [Error [ERR_TEST_FAILURE]: foo] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error: foo\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unfinished test with unhandledRejection\" time=\"*\" classname=\"test\" failure=\"bar\">\n        \t\t<failure type=\"unhandledRejection\" message=\"bar\">\n        [Error [ERR_TEST_FAILURE]: bar] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'unhandledRejection',\n          cause: Error: bar\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"assertion errors display actual and expected properly\" time=\"*\" classname=\"test\" failure=\"Expected values to be loosely deep-equal:{  bar: 1,  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  foo: 1}should loosely deep-equal{  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  circular: &lt;ref *1> {    bar: 2,    c: [Circular *1]  }}\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Expected values to be loosely deep-equal:{  bar: 1,  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  foo: 1}should loosely deep-equal{  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  circular: &lt;ref *1> {    bar: 2,    c: [Circular *1]  }}\">\n        [Error [ERR_TEST_FAILURE]: Expected values to be loosely deep-equal:\n        \n        {\n          bar: 1,\n          baz: {\n            date: 1970-01-01T00:00:00.000Z,\n            null: null,\n            number: 1,\n            string: 'Hello',\n            undefined: undefined\n          },\n          boo: [\n            1\n          ],\n          foo: 1\n        }\n        \n        should loosely deep-equal\n        \n        {\n          baz: {\n            date: 1970-01-01T00:00:00.000Z,\n            null: null,\n            number: 1,\n            string: 'Hello',\n            undefined: undefined\n          },\n          boo: [\n            1\n          ],\n          circular: &lt;ref *1> {\n            bar: 2,\n            c: [Circular *1]\n          }\n        }] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n          \n          {\n            bar: 1,\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            foo: 1\n          }\n          \n          should loosely deep-equal\n          \n          {\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            circular: &lt;ref *1> {\n              bar: 2,\n              c: [Circular *1]\n            }\n          }\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: [Object],\n            expected: [Object],\n            operator: 'deepEqual'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"invalid subtest fail\" time=\"*\" classname=\"test\" failure=\"test could not be started because its parent finished\">\n        \t\t<failure type=\"parentAlreadyFinished\" message=\"test could not be started because its parent finished\">\n        Error [ERR_TEST_FAILURE]: test could not be started because its parent finished\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'parentAlreadyFinished',\n          cause: 'test could not be started because its parent finished'\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<!-- Error: Test \"unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:72:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: Test \"async unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:76:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from async unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: A resource generated asynchronous activity after the test ended. This activity created the error \"Error: uncaught from outside of a test\" which triggered an uncaughtException event, caught by the test runner. -->\n        \t<!-- Error: Test \"immediate throw - passes but warns\" at test/fixtures/test-runner/output/output.js:80:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from immediate throw fail\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- Error: Test \"immediate reject - passes but warns\" at test/fixtures/test-runner/output/output.js:86:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from immediate reject fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: Test \"callback called twice in different ticks\" at test/fixtures/test-runner/output/output.js:251:1 generated asynchronous activity after the test ended. This activity created the error \"Error [ERR_TEST_FAILURE]: callback invoked multiple times\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- Error: Test \"callback async throw after done\" at test/fixtures/test-runner/output/output.js:269:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from callback async throw after done\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- tests 76 -->\n        \t<!-- suites 0 -->\n        \t<!-- pass 35 -->\n        \t<!-- fail 25 -->\n        \t<!-- cancelled 3 -->\n        \t<!-- skipped 9 -->\n        \t<!-- todo 4 -->\n        \t<!-- duration_ms * -->\n        </testsuites>\n        \n      operator: 'strictEqual'\n      stack: |-\n        assertSnapshot (c:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:56:12)\n        async Module.spawnAndAssert (c:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:84:3)\n        async TestContext.<anonymous> (file:///c:/workspace/node-test-binary-windows-js-suites/node/test/parallel/test-runner-output.mjs:149:5)\n        async Test.run (node:internal/test_runner/test:748:9)\n        async Promise.all (index 23)\n        async Suite.run (node:internal/test_runner/test:1106:7)\n        async Test.processPendingSubtests (node:internal/test_runner/test:461:7)\n      ...\n    # Subtest: test-runner/output/spec_reporter_successful.js\n    ok 25 - test-runner/output/spec_reporter_successful.js\n      ---\n      duration_ms: 1294.8358\n      ...\n    # Subtest: test-runner/output/spec_reporter.js\n    ok 26 - test-runner/output/spec_reporter.js\n      ---\n      duration_ms: 3241.0111\n      ...\n    # Subtest: test-runner/output/spec_reporter_cli.js\n    ok 27 - test-runner/output/spec_reporter_cli.js\n      ---\n      duration_ms: 4497.8515\n      ...\n    # Subtest: test-runner/output/source_mapped_locations.mjs\n    ok 28 - test-runner/output/source_mapped_locations.mjs\n      ---\n      duration_ms: 1551.583\n      ...\n    # Subtest: test-runner/output/lcov_reporter.js\n    ok 29 - test-runner/output/lcov_reporter.js\n      ---\n      duration_ms: 4081.5951\n      ...\n    # Subtest: test-runner/output/output.js\n    ok 30 - test-runner/output/output.js\n      ---\n      duration_ms: 2231.7561\n      ...\n    # Subtest: test-runner/output/output_cli.js\n    ok 31 - test-runner/output/output_cli.js\n      ---\n      duration_ms: 4439.2178\n      ...\n    # Subtest: test-runner/output/name_and_skip_patterns.js\n    ok 32 - test-runner/output/name_and_skip_patterns.js\n      ---\n      duration_ms: 1640.0602\n      ...\n    # Subtest: test-runner/output/name_pattern.js\n    ok 33 - test-runner/output/name_pattern.js\n      ---\n      duration_ms: 1765.9781\n      ...\n    # Subtest: test-runner/output/name_pattern_with_only.js\n    ok 34 - test-runner/output/name_pattern_with_only.js\n      ---\n      duration_ms: 1709.8726\n      ...\n    # Subtest: test-runner/output/skip_pattern.js\n    ok 35 - test-runner/output/skip_pattern.js\n      ---\n      duration_ms: 1696.0878\n      ...\n    # Subtest: test-runner/output/unfinished-suite-async-error.js\n    ok 36 - test-runner/output/unfinished-suite-async-error.js\n      ---\n      duration_ms: 1684.4301\n      ...\n    # Subtest: test-runner/output/unresolved_promise.js\n    not ok 37 - test-runner/output/unresolved_promise.js\n      ---\n      duration_ms: 1715.8882\n      location: 'c:\\\\workspace\\\\node-test-binary-windows-js-suites\\\\node\\\\test\\\\parallel\\\\test-runner-output.mjs:155:5'\n      failureType: 'testCodeFailure'\n      error: |-\n        Expected values to be strictly equal:\n        + actual - expected ... Lines skipped\n        \n          'TAP version 13\\n' +\n            '# Subtest: pass\\n' +\n        ...\n            \"  error: 'Promise resolution is still pending but the event loop has already resolved'\\n\" +\n            \"  code: 'ERR_TEST_FAILURE'\\n\" +\n        +   '  ...\\n' +\n        +   '# Subtest: fail\\n' +\n        +   'not ok 3 - fail\\n' +\n        +   '  ---\\n' +\n        +   '  duration_ms: *\\n' +\n        +   \"  location: '/test/fixtures/test-runner/output/unresolved_promise.js:(LINE):1'\\n\" +\n        +   \"  failureType: 'cancelledByParent'\\n\" +\n        +   \"  error: 'Promise resolution is still pending but the event loop has already resolved'\\n\" +\n        +   \"  code: 'ERR_TEST_FAILURE'\\n\" +\n        -   '  stack: |-\\n' +\n        -   '    *\\n' +\n        -   '  ...\\n' +\n        -   '# Subtest: fail\\n' +\n        -   'not ok 3 - fail\\n' +\n        -   '  ---\\n' +\n        -   '  duration_ms: *\\n' +\n        -   \"  location: '/test/fixtures/test-runner/output/unresolved_promise.js:(LINE):1'\\n\" +\n        -   \"  failureType: 'cancelledByParent'\\n\" +\n        -   \"  error: 'Promise resolution is still pending but the event loop has already resolved'\\n\" +\n        -   \"  code: 'ERR_TEST_FAILURE'\\n\" +\n        -   '  stack: |-\\n' +\n        -   '    *\\n' +\n            '  ...\\n' +\n        ...\n            '# skipped 0\\n' +\n            '# todo 0\\n' +\n            '# duration_ms *\\n'\n      code: 'ERR_ASSERTION'\n      name: 'AssertionError'\n      expected: |-\n        TAP version 13\n        # Subtest: pass\n        ok 1 - pass\n          ---\n          duration_ms: *\n          ...\n        # Subtest: never resolving promise\n        not ok 2 - never resolving promise\n          ---\n          duration_ms: *\n          location: '/test/fixtures/test-runner/output/unresolved_promise.js:(LINE):1'\n          failureType: 'cancelledByParent'\n          error: 'Promise resolution is still pending but the event loop has already resolved'\n          code: 'ERR_TEST_FAILURE'\n          stack: |-\n            *\n          ...\n        # Subtest: fail\n        not ok 3 - fail\n          ---\n          duration_ms: *\n          location: '/test/fixtures/test-runner/output/unresolved_promise.js:(LINE):1'\n          failureType: 'cancelledByParent'\n          error: 'Promise resolution is still pending but the event loop has already resolved'\n          code: 'ERR_TEST_FAILURE'\n          stack: |-\n            *\n          ...\n        1..3\n        # tests 3\n        # suites 0\n        # pass 1\n        # fail 0\n        # cancelled 2\n        # skipped 0\n        # todo 0\n        # duration_ms *\n        \n      actual: |-\n        TAP version 13\n        # Subtest: pass\n        ok 1 - pass\n          ---\n          duration_ms: *\n          ...\n        # Subtest: never resolving promise\n        not ok 2 - never resolving promise\n          ---\n          duration_ms: *\n          location: '/test/fixtures/test-runner/output/unresolved_promise.js:(LINE):1'\n          failureType: 'cancelledByParent'\n          error: 'Promise resolution is still pending but the event loop has already resolved'\n          code: 'ERR_TEST_FAILURE'\n          ...\n        # Subtest: fail\n        not ok 3 - fail\n          ---\n          duration_ms: *\n          location: '/test/fixtures/test-runner/output/unresolved_promise.js:(LINE):1'\n          failureType: 'cancelledByParent'\n          error: 'Promise resolution is still pending but the event loop has already resolved'\n          code: 'ERR_TEST_FAILURE'\n          ...\n        1..3\n        # tests 3\n        # suites 0\n        # pass 1\n        # fail 0\n        # cancelled 2\n        # skipped 0\n        # todo 0\n        # duration_ms *\n        \n      operator: 'strictEqual'\n      stack: |-\n        assertSnapshot (c:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:56:12)\n        async Module.spawnAndAssert (c:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:84:3)\n        async TestContext.<anonymous> (file:///c:/workspace/node-test-binary-windows-js-suites/node/test/parallel/test-runner-output.mjs:149:5)\n        async Test.run (node:internal/test_runner/test:748:9)\n        async Promise.all (index 36)\n        async Suite.run (node:internal/test_runner/test:1106:7)\n        async Test.processPendingSubtests (node:internal/test_runner/test:461:7)\n      ...\n    # Subtest: test-runner/output/default_output.js\n        # Subtest: <anonymous>\n        ok 1 - <anonymous> # SKIP Skipping pseudo-tty tests, as pseudo terminals are not available on Windows.\n          ---\n          duration_ms: 50.4726\n          ...\n        1..1\n    ok 38 - test-runner/output/default_output.js\n      ---\n      duration_ms: 51.4763\n      ...\n    # Subtest: test-runner/output/arbitrary-output.js\n    ok 39 - test-runner/output/arbitrary-output.js\n      ---\n      duration_ms: 2131.9864\n      ...\n    # Subtest: test-runner/output/async-test-scheduling.mjs\n    ok 40 - test-runner/output/async-test-scheduling.mjs\n      ---\n      duration_ms: 1891.9742\n      ...\n    # Subtest: test-runner/output/arbitrary-output-colored.js\n        # Subtest: <anonymous>\n        ok 1 - <anonymous> # SKIP Skipping pseudo-tty tests, as pseudo terminals are not available on Windows.\n          ---\n          duration_ms: 26.3979\n          ...\n        1..1\n    ok 41 - test-runner/output/arbitrary-output-colored.js\n      ---\n      duration_ms: 26.9523\n      ...\n    # Subtest: test-runner/output/dot_output_custom_columns.js\n        # Subtest: <anonymous>\n        ok 1 - <anonymous> # SKIP Skipping pseudo-tty tests, as pseudo terminals are not available on Windows.\n          ---\n          duration_ms: 26.2839\n          ...\n        1..1\n    ok 42 - test-runner/output/dot_output_custom_columns.js\n      ---\n      duration_ms: 26.6882\n      ...\n    # Subtest: test-runner/output/tap_escape.js\n    ok 43 - test-runner/output/tap_escape.js\n      ---\n      duration_ms: 1326.3791\n      ...\n    # Subtest: test-runner/output/coverage_failure.js\n    ok 44 - test-runner/output/coverage_failure.js\n      ---\n      duration_ms: 1733.1538\n      ...\n    1..44\nnot ok 1 - test runner output\n  ---\n  duration_ms: 5065.9063\n  type: 'suite'\n  location: 'c:\\\\workspace\\\\node-test-binary-windows-js-suites\\\\node\\\\test\\\\parallel\\\\test-runner-output.mjs:153:1'\n  failureType: 'subtestsFailed'\n  error: '3 subtests failed'\n  code: 'ERR_TEST_FAILURE'\n  ...\n1..1\n# tests 47\n# suites 1\n# pass 41\n# fail 3\n# cancelled 0\n# skipped 3\n# todo 0\n# duration_ms 5086.7478"},"time":5761.043,"fullname":"parallel/test-runner-output","closingTestPoint":false}},{"testName":"message/stdin_messages","timestamp":1714660669261,"status":"FAILED","jobName":"node-test-binary-windows-js-suites","config":"node-test-binary-windows-js-suites » 0,win10-COMPILED_BY-vs2022 #27525","buildUrl":"https://ci.nodejs.org/job/node-test-binary-windows-js-suites/RUN_SUBSET=0,nodes=win10-COMPILED_BY-vs2022/27525/","buildNumber":27525,"builtOn":"test-azure_msft-win10_vs2019-x64-3","nodeVersion":"23.0.0","commitHash":"3a49bfd9b001e550acf99afcb74b31d6885de874","callStack":[{"upstreamBuild":62664,"upstreamProject":"node-test-commit-windows-fanned","upstreamUrl":"job/node-test-commit-windows-fanned/"},{"upstreamBuild":70433,"upstreamProject":"node-test-commit","upstreamUrl":"job/node-test-commit/"},{"upstreamBuild":58865,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"prId":"52733"}],"tap":{"ok":false,"name":"message/stdin_messages","id":81,"buffered":false,"tapError":null,"skip":false,"todo":false,"previous":null,"plan":null,"diag":{"severity":"fail","stack":"[stdin]\n[stdin]:1\nwith(this){__filename}\n^^^^\n\nSyntaxError: Strict mode code may not include a with statement\n    at makeContextifyScript (node:internal/vm:185:14)\n    at node:internal/process/execution:107:22\n    at [stdin]-wrapper:6:24\n    at runScript (node:internal/process/execution:101:62)\n    at evalScript (node:internal/process/execution:136:3)\n    at node:internal/main/eval_stdin:32:5\n    at Socket.<anonymous> (node:internal/process/execution:237:5)\n    at SlowEventEmitter.emit (node:internal/events/slow_event_emitter:110:35)\n    at Socket.emit (node:internal/events/event_emitter:443:41)\n    at endReadableNT (node:internal/streams/readable:1700:12)\n\nNode.js v23.0.0-pre\n42\n42\n[stdin]:1\nthrow new Error(\"hello\")\n^\n\nError: hello\n    at [stdin]:1:7\n    at runScriptInThisContext (node:internal/vm:209:10)\n    at node:internal/process/execution:118:14\n    at [stdin]-wrapper:6:24\n    at runScript (node:internal/process/execution:101:62)\n    at evalScript (node:internal/process/execution:136:3)\n    at node:internal/main/eval_stdin:32:5\n    at Socket.<anonymous> (node:internal/process/execution:237:5)\n    at SlowEventEmitter.emit (node:internal/events/slow_event_emitter:110:35)\n    at Socket.emit (node:internal/events/event_emitter:443:41)\n\nNode.js v23.0.0-pre\n[stdin]:1\nthrow new Error(\"hello\")\n^\n\nError: hello\n    at [stdin]:1:7\n    at runScriptInThisContext (node:internal/vm:209:10)\n    at node:internal/process/execution:118:14\n    at [stdin]-wrapper:6:24\n    at runScript (node:internal/process/execution:101:62)\n    at evalScript (node:internal/process/execution:136:3)\n    at node:internal/main/eval_stdin:32:5\n    at Socket.<anonymous> (node:internal/process/execution:237:5)\n    at SlowEventEmitter.emit (node:internal/events/slow_event_emitter:110:35)\n    at Socket.emit (node:internal/events/event_emitter:443:41)\n\nNode.js v23.0.0-pre\n100\n[stdin]:1\nlet x = 100; y = x;\n               ^\n\nReferenceError: y is not defined\n    at [stdin]:1:16\n    at runScriptInThisContext (node:internal/vm:209:10)\n    at node:internal/process/execution:118:14\n    at [stdin]-wrapper:6:24\n    at runScript (node:internal/process/execution:101:62)\n    at evalScript (node:internal/process/execution:136:3)\n    at node:internal/main/eval_stdin:32:5\n    at Socket.<anonymous> (node:internal/process/execution:237:5)\n    at SlowEventEmitter.emit (node:internal/events/slow_event_emitter:110:35)\n    at Socket.emit (node:internal/events/event_emitter:443:41)\n\nNode.js v23.0.0-pre\n\n[stdin]:1\nlet ______________________________________________; throw 10\n                                                    ^\n10\n(Use `node --trace-uncaught ...` to show where the exception was thrown)\n\nNode.js v23.0.0-pre\n\n[stdin]:1\nlet ______________________________________________; throw 10\n                                                    ^\n10\n(Use `node --trace-uncaught ...` to show where the exception was thrown)\n\nNode.js v23.0.0-pre\ndone"},"time":1755.125,"fullname":"message/stdin_messages","closingTestPoint":false}},{"testName":"parallel/test-disable-proto-throw","timestamp":1714660669261,"status":"FAILED","jobName":"node-test-binary-windows-js-suites","config":"node-test-binary-windows-js-suites » 3,win10-COMPILED_BY-vs2022 #27525","buildUrl":"https://ci.nodejs.org/job/node-test-binary-windows-js-suites/RUN_SUBSET=3,nodes=win10-COMPILED_BY-vs2022/27525/","buildNumber":27525,"builtOn":"test-azure_msft-win10_vs2019-x64-2","nodeVersion":"23.0.0","commitHash":"3a49bfd9b001e550acf99afcb74b31d6885de874","callStack":[{"upstreamBuild":62664,"upstreamProject":"node-test-commit-windows-fanned","upstreamUrl":"job/node-test-commit-windows-fanned/"},{"upstreamBuild":70433,"upstreamProject":"node-test-commit","upstreamUrl":"job/node-test-commit/"},{"upstreamBuild":58865,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"prId":"52733"}],"tap":{"ok":false,"name":"parallel/test-disable-proto-throw","id":223,"buffered":false,"tapError":null,"skip":false,"todo":false,"previous":null,"plan":null,"diag":{"severity":"fail","exitcode":1,"stack":"node:internal/events/slow_event_emitter:56\n    events.__proto__ = null;\n                     ^\n\nError: Accessing Object.prototype.__proto__ has been disallowed with --disable-proto=throw\n    at Function.fromFastEventEmitter (node:internal/events/slow_event_emitter:56:22)\n    at EventEmitter.<computed> (node:internal/events/event_emitter:387:36)\n    at ReadableWorkerStdio.addListener (node:internal/events/event_emitter:464:47)\n    at Readable.on (node:internal/streams/readable:1130:35)\n    at ReadableWorkerStdio.once (node:internal/events/event_emitter:529:8)\n    at Readable.pipe (node:internal/streams/readable:935:9)\n    at pipeWithoutWarning (node:internal/worker:481:10)\n    at new Worker (node:internal/worker:244:7)\n    at Object.<anonymous> (c:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\parallel\\test-disable-proto-throw.js:41:3)\n    at Module._compile (node:internal/modules/cjs/loader:1480:14) {\n  code: 'ERR_PROTO_ACCESS'\n}\n\nNode.js v23.0.0-pre"},"time":135,"fullname":"parallel/test-disable-proto-throw","closingTestPoint":false}},{"testName":"message/stdin_messages","timestamp":1714660669261,"status":"FAILED","jobName":"node-test-binary-windows-js-suites","config":"node-test-binary-windows-js-suites » 0,win2019-COMPILED_BY-vs2022 #27525","buildUrl":"https://ci.nodejs.org/job/node-test-binary-windows-js-suites/RUN_SUBSET=0,nodes=win2019-COMPILED_BY-vs2022/27525/","buildNumber":27525,"builtOn":"test-rackspace-win2019_vs2019-x64-4","nodeVersion":"23.0.0","commitHash":"3a49bfd9b001e550acf99afcb74b31d6885de874","callStack":[{"upstreamBuild":62664,"upstreamProject":"node-test-commit-windows-fanned","upstreamUrl":"job/node-test-commit-windows-fanned/"},{"upstreamBuild":70433,"upstreamProject":"node-test-commit","upstreamUrl":"job/node-test-commit/"},{"upstreamBuild":58865,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"prId":"52733"}],"tap":{"ok":false,"name":"message/stdin_messages","id":86,"buffered":false,"tapError":null,"skip":false,"todo":false,"previous":null,"plan":null,"diag":{"severity":"fail","stack":"[stdin]\n[stdin]:1\nwith(this){__filename}\n^^^^\n\nSyntaxError: Strict mode code may not include a with statement\n    at makeContextifyScript (node:internal/vm:185:14)\n    at node:internal/process/execution:107:22\n    at [stdin]-wrapper:6:24\n    at runScript (node:internal/process/execution:101:62)\n    at evalScript (node:internal/process/execution:136:3)\n    at node:internal/main/eval_stdin:32:5\n    at Socket.<anonymous> (node:internal/process/execution:237:5)\n    at SlowEventEmitter.emit (node:internal/events/slow_event_emitter:110:35)\n    at Socket.emit (node:internal/events/event_emitter:443:41)\n    at endReadableNT (node:internal/streams/readable:1700:12)\n\nNode.js v23.0.0-pre\n42\n42\n[stdin]:1\nthrow new Error(\"hello\")\n^\n\nError: hello\n    at [stdin]:1:7\n    at runScriptInThisContext (node:internal/vm:209:10)\n    at node:internal/process/execution:118:14\n    at [stdin]-wrapper:6:24\n    at runScript (node:internal/process/execution:101:62)\n    at evalScript (node:internal/process/execution:136:3)\n    at node:internal/main/eval_stdin:32:5\n    at Socket.<anonymous> (node:internal/process/execution:237:5)\n    at SlowEventEmitter.emit (node:internal/events/slow_event_emitter:110:35)\n    at Socket.emit (node:internal/events/event_emitter:443:41)\n\nNode.js v23.0.0-pre\n[stdin]:1\nthrow new Error(\"hello\")\n^\n\nError: hello\n    at [stdin]:1:7\n    at runScriptInThisContext (node:internal/vm:209:10)\n    at node:internal/process/execution:118:14\n    at [stdin]-wrapper:6:24\n    at runScript (node:internal/process/execution:101:62)\n    at evalScript (node:internal/process/execution:136:3)\n    at node:internal/main/eval_stdin:32:5\n    at Socket.<anonymous> (node:internal/process/execution:237:5)\n    at SlowEventEmitter.emit (node:internal/events/slow_event_emitter:110:35)\n    at Socket.emit (node:internal/events/event_emitter:443:41)\n\nNode.js v23.0.0-pre\n100\n[stdin]:1\nlet x = 100; y = x;\n               ^\n\nReferenceError: y is not defined\n    at [stdin]:1:16\n    at runScriptInThisContext (node:internal/vm:209:10)\n    at node:internal/process/execution:118:14\n    at [stdin]-wrapper:6:24\n    at runScript (node:internal/process/execution:101:62)\n    at evalScript (node:internal/process/execution:136:3)\n    at node:internal/main/eval_stdin:32:5\n    at Socket.<anonymous> (node:internal/process/execution:237:5)\n    at SlowEventEmitter.emit (node:internal/events/slow_event_emitter:110:35)\n    at Socket.emit (node:internal/events/event_emitter:443:41)\n\nNode.js v23.0.0-pre\n\n[stdin]:1\nlet ______________________________________________; throw 10\n                                                    ^\n10\n(Use `node --trace-uncaught ...` to show where the exception was thrown)\n\nNode.js v23.0.0-pre\n\n[stdin]:1\nlet ______________________________________________; throw 10\n                                                    ^\n10\n(Use `node --trace-uncaught ...` to show where the exception was thrown)\n\nNode.js v23.0.0-pre\ndone"},"time":2513.061,"fullname":"message/stdin_messages","closingTestPoint":false}},{"testName":"parallel/test-disable-proto-throw","timestamp":1714660669261,"status":"FAILED","jobName":"node-test-binary-windows-js-suites","config":"node-test-binary-windows-js-suites » 3,win2022-COMPILED_BY-vs2022 #27525","buildUrl":"https://ci.nodejs.org/job/node-test-binary-windows-js-suites/RUN_SUBSET=3,nodes=win2022-COMPILED_BY-vs2022/27525/","buildNumber":27525,"builtOn":"test-rackspace-win2022_vs2022-x64-3","nodeVersion":"23.0.0","commitHash":"3a49bfd9b001e550acf99afcb74b31d6885de874","callStack":[{"upstreamBuild":62664,"upstreamProject":"node-test-commit-windows-fanned","upstreamUrl":"job/node-test-commit-windows-fanned/"},{"upstreamBuild":70433,"upstreamProject":"node-test-commit","upstreamUrl":"job/node-test-commit/"},{"upstreamBuild":58865,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"prId":"52733"}],"tap":{"ok":false,"name":"parallel/test-disable-proto-throw","id":223,"buffered":false,"tapError":null,"skip":false,"todo":false,"previous":null,"plan":null,"diag":{"severity":"fail","exitcode":1,"stack":"node:internal/events/slow_event_emitter:56\n    events.__proto__ = null;\n                     ^\n\nError: Accessing Object.prototype.__proto__ has been disallowed with --disable-proto=throw\n    at Function.fromFastEventEmitter (node:internal/events/slow_event_emitter:56:22)\n    at EventEmitter.<computed> (node:internal/events/event_emitter:387:36)\n    at ReadableWorkerStdio.addListener (node:internal/events/event_emitter:464:47)\n    at Readable.on (node:internal/streams/readable:1130:35)\n    at ReadableWorkerStdio.once (node:internal/events/event_emitter:529:8)\n    at Readable.pipe (node:internal/streams/readable:935:9)\n    at pipeWithoutWarning (node:internal/worker:481:10)\n    at new Worker (node:internal/worker:244:7)\n    at Object.<anonymous> (C:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\parallel\\test-disable-proto-throw.js:41:3)\n    at Module._compile (node:internal/modules/cjs/loader:1480:14) {\n  code: 'ERR_PROTO_ACCESS'\n}\n\nNode.js v23.0.0-pre"},"time":312.012,"fullname":"parallel/test-disable-proto-throw","closingTestPoint":false}},{"testName":"parallel/test-disable-proto-throw","timestamp":1714660669261,"status":"FAILED","jobName":"node-test-binary-windows-js-suites","config":"node-test-binary-windows-js-suites » 3,win2016-COMPILED_BY-vs2022-x86 #27525","buildUrl":"https://ci.nodejs.org/job/node-test-binary-windows-js-suites/RUN_SUBSET=3,nodes=win2016-COMPILED_BY-vs2022-x86/27525/","buildNumber":27525,"builtOn":"test-azure_msft-win2016_vs2017-x64-2","nodeVersion":"23.0.0","commitHash":"3a49bfd9b001e550acf99afcb74b31d6885de874","callStack":[{"upstreamBuild":62664,"upstreamProject":"node-test-commit-windows-fanned","upstreamUrl":"job/node-test-commit-windows-fanned/"},{"upstreamBuild":70433,"upstreamProject":"node-test-commit","upstreamUrl":"job/node-test-commit/"},{"upstreamBuild":58865,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"prId":"52733"}],"tap":{"ok":false,"name":"parallel/test-disable-proto-throw","id":222,"buffered":false,"tapError":null,"skip":false,"todo":false,"previous":null,"plan":null,"diag":{"severity":"fail","exitcode":1,"stack":"node:internal/events/slow_event_emitter:56\n    events.__proto__ = null;\n                     ^\n\nError: Accessing Object.prototype.__proto__ has been disallowed with --disable-proto=throw\n    at Function.fromFastEventEmitter (node:internal/events/slow_event_emitter:56:22)\n    at EventEmitter.<computed> (node:internal/events/event_emitter:387:36)\n    at ReadableWorkerStdio.addListener (node:internal/events/event_emitter:464:47)\n    at Readable.on (node:internal/streams/readable:1130:35)\n    at ReadableWorkerStdio.once (node:internal/events/event_emitter:529:8)\n    at Readable.pipe (node:internal/streams/readable:935:9)\n    at pipeWithoutWarning (node:internal/worker:481:10)\n    at new Worker (node:internal/worker:244:7)\n    at Object.<anonymous> (C:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\parallel\\test-disable-proto-throw.js:41:3)\n    at Module._compile (node:internal/modules/cjs/loader:1480:14) {\n  code: 'ERR_PROTO_ACCESS'\n}\n\nNode.js v23.0.0-pre"},"time":162.005,"fullname":"parallel/test-disable-proto-throw","closingTestPoint":false}},{"testName":"parallel/test-process-getactiveresources-track-active-handles","timestamp":1714660669261,"status":"REGRESSION","jobName":"node-test-binary-windows-js-suites","config":"node-test-binary-windows-js-suites » 3,win2016-COMPILED_BY-vs2022-x86 #27525","buildUrl":"https://ci.nodejs.org/job/node-test-binary-windows-js-suites/RUN_SUBSET=3,nodes=win2016-COMPILED_BY-vs2022-x86/27525/","buildNumber":27525,"builtOn":"test-azure_msft-win2016_vs2017-x64-2","nodeVersion":"23.0.0","commitHash":"3a49bfd9b001e550acf99afcb74b31d6885de874","callStack":[{"upstreamBuild":62664,"upstreamProject":"node-test-commit-windows-fanned","upstreamUrl":"job/node-test-commit-windows-fanned/"},{"upstreamBuild":70433,"upstreamProject":"node-test-commit","upstreamUrl":"job/node-test-commit/"},{"upstreamBuild":58865,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"prId":"52733"}],"tap":{"ok":false,"name":"parallel/test-process-getactiveresources-track-active-handles","id":620,"buffered":false,"tapError":null,"skip":false,"todo":false,"previous":null,"plan":null,"diag":{"severity":"fail","exitcode":3221226505,"stack":""},"time":189.003,"fullname":"parallel/test-process-getactiveresources-track-active-handles","closingTestPoint":false}},{"testName":"message/stdin_messages","timestamp":1714660669261,"status":"FAILED","jobName":"node-test-binary-windows-js-suites","config":"node-test-binary-windows-js-suites » 0,win2016-COMPILED_BY-vs2022-x86 #27525","buildUrl":"https://ci.nodejs.org/job/node-test-binary-windows-js-suites/RUN_SUBSET=0,nodes=win2016-COMPILED_BY-vs2022-x86/27525/","buildNumber":27525,"builtOn":"test-rackspace-win2016_vs2015-x64-1","nodeVersion":"23.0.0","commitHash":"3a49bfd9b001e550acf99afcb74b31d6885de874","callStack":[{"upstreamBuild":62664,"upstreamProject":"node-test-commit-windows-fanned","upstreamUrl":"job/node-test-commit-windows-fanned/"},{"upstreamBuild":70433,"upstreamProject":"node-test-commit","upstreamUrl":"job/node-test-commit/"},{"upstreamBuild":58865,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"prId":"52733"}],"tap":{"ok":false,"name":"message/stdin_messages","id":89,"buffered":false,"tapError":null,"skip":false,"todo":false,"previous":null,"plan":null,"diag":{"severity":"fail","stack":"[stdin]\n[stdin]:1\nwith(this){__filename}\n^^^^\n\nSyntaxError: Strict mode code may not include a with statement\n    at makeContextifyScript (node:internal/vm:185:14)\n    at node:internal/process/execution:107:22\n    at [stdin]-wrapper:6:24\n    at runScript (node:internal/process/execution:101:62)\n    at evalScript (node:internal/process/execution:136:3)\n    at node:internal/main/eval_stdin:32:5\n    at Socket.<anonymous> (node:internal/process/execution:237:5)\n    at SlowEventEmitter.emit (node:internal/events/slow_event_emitter:110:35)\n    at Socket.emit (node:internal/events/event_emitter:443:41)\n    at endReadableNT (node:internal/streams/readable:1700:12)\n\nNode.js v23.0.0-pre\n42\n42\n[stdin]:1\nthrow new Error(\"hello\")\n^\n\nError: hello\n    at [stdin]:1:7\n    at runScriptInThisContext (node:internal/vm:209:10)\n    at node:internal/process/execution:118:14\n    at [stdin]-wrapper:6:24\n    at runScript (node:internal/process/execution:101:62)\n    at evalScript (node:internal/process/execution:136:3)\n    at node:internal/main/eval_stdin:32:5\n    at Socket.<anonymous> (node:internal/process/execution:237:5)\n    at SlowEventEmitter.emit (node:internal/events/slow_event_emitter:110:35)\n    at Socket.emit (node:internal/events/event_emitter:443:41)\n\nNode.js v23.0.0-pre\n[stdin]:1\nthrow new Error(\"hello\")\n^\n\nError: hello\n    at [stdin]:1:7\n    at runScriptInThisContext (node:internal/vm:209:10)\n    at node:internal/process/execution:118:14\n    at [stdin]-wrapper:6:24\n    at runScript (node:internal/process/execution:101:62)\n    at evalScript (node:internal/process/execution:136:3)\n    at node:internal/main/eval_stdin:32:5\n    at Socket.<anonymous> (node:internal/process/execution:237:5)\n    at SlowEventEmitter.emit (node:internal/events/slow_event_emitter:110:35)\n    at Socket.emit (node:internal/events/event_emitter:443:41)\n\nNode.js v23.0.0-pre\n100\n[stdin]:1\nlet x = 100; y = x;\n               ^\n\nReferenceError: y is not defined\n    at [stdin]:1:16\n    at runScriptInThisContext (node:internal/vm:209:10)\n    at node:internal/process/execution:118:14\n    at [stdin]-wrapper:6:24\n    at runScript (node:internal/process/execution:101:62)\n    at evalScript (node:internal/process/execution:136:3)\n    at node:internal/main/eval_stdin:32:5\n    at Socket.<anonymous> (node:internal/process/execution:237:5)\n    at SlowEventEmitter.emit (node:internal/events/slow_event_emitter:110:35)\n    at Socket.emit (node:internal/events/event_emitter:443:41)\n\nNode.js v23.0.0-pre\n\n[stdin]:1\nlet ______________________________________________; throw 10\n                                                    ^\n10\n(Use `node --trace-uncaught ...` to show where the exception was thrown)\n\nNode.js v23.0.0-pre\n\n[stdin]:1\nlet ______________________________________________; throw 10\n                                                    ^\n10\n(Use `node --trace-uncaught ...` to show where the exception was thrown)\n\nNode.js v23.0.0-pre\ndone"},"time":1724.993,"fullname":"message/stdin_messages","closingTestPoint":false}},{"testName":"parallel/test-assert-builtins-not-read-from-filesystem","timestamp":1714660669261,"status":"FAILED","jobName":"node-test-binary-windows-js-suites","config":"node-test-binary-windows-js-suites » 1,win11-arm64-COMPILED_BY-vs2022-arm64 #27525","buildUrl":"https://ci.nodejs.org/job/node-test-binary-windows-js-suites/RUN_SUBSET=1,nodes=win11-arm64-COMPILED_BY-vs2022-arm64/27525/","buildNumber":27525,"builtOn":"test-azure_msft-win11_vs2022-arm64-3","nodeVersion":"23.0.0","commitHash":"3a49bfd9b001e550acf99afcb74b31d6885de874","callStack":[{"upstreamBuild":62664,"upstreamProject":"node-test-commit-windows-fanned","upstreamUrl":"job/node-test-commit-windows-fanned/"},{"upstreamBuild":70433,"upstreamProject":"node-test-commit","upstreamUrl":"job/node-test-commit/"},{"upstreamBuild":58865,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"prId":"52733"}],"tap":{"ok":false,"name":"parallel/test-assert-builtins-not-read-from-filesystem","id":69,"buffered":false,"tapError":null,"skip":false,"todo":false,"previous":null,"plan":null,"diag":{"severity":"fail","exitcode":1,"stack":"node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Exit code: 1\n,,node:fs:2348\n\n    return binding.writeFileUtf8(\n\n                   ^\n\n\n\nError: ENOENT: no such file or directory, open 'd:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\.tmp.67\\node:internal\\events\\fast_event_emitter'\n\n    at writeFileSync (node:fs:2348:20)\n\n    at Object.<anonymous> (d:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\parallel\\test-assert-builtins-not-read-from-filesystem.js:41:3)\n\n    at Module._compile (node:internal/modules/cjs/loader:1480:14)\n\n    at Module._extensions..js (node:internal/modules/cjs/loader:1564:10)\n\n    at Module.load (node:internal/modules/cjs/loader:1287:32)\n\n    at Module._load (node:internal/modules/cjs/loader:1103:12)\n\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:168:12)\n\n    at node:internal/main/run_main_module:30:49 {\n\n  errno: -4058,\n\n  code: 'ENOENT',\n\n  syscall: 'open',\n\n  path: 'd:\\\\workspace\\\\node-test-binary-windows-js-suites\\\\node\\\\test\\\\.tmp.67\\\\node:internal\\\\events\\\\fast_event_emitter'\n\n}\n\n\n\nNode.js v23.0.0-pre\n\n\n    at Object.<anonymous> (d:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\parallel\\test-assert-builtins-not-read-from-filesystem.js:31:12)\n    at Module._compile (node:internal/modules/cjs/loader:1480:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1564:10)\n    at Module.load (node:internal/modules/cjs/loader:1287:32)\n    at Module._load (node:internal/modules/cjs/loader:1103:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:168:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: false,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 0,\n  operator: 'strictEqual'\n}\n\nNode.js v23.0.0-pre"},"time":527.999,"fullname":"parallel/test-assert-builtins-not-read-from-filesystem","closingTestPoint":false}}]}