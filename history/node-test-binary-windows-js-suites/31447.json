{"failedTests":[{"testName":"parallel/test-watch-mode-files_watcher","timestamp":1732822044019,"status":"REGRESSION","jobName":"node-test-binary-windows-js-suites","config":"node-test-binary-windows-js-suites » 3,win10-COMPILED_BY-vs2022 #31447","buildUrl":"https://ci.nodejs.org/job/node-test-binary-windows-js-suites/RUN_SUBSET=3,nodes=win10-COMPILED_BY-vs2022/31447/","buildNumber":31447,"builtOn":"test-azure_msft-win10_vs2019-x64-3","nodeVersion":"24.0.0","commitHash":"bc8cce0a000b0d6199d617b2e70ba592bd4dd3db","callStack":[{"upstreamBuild":67176,"upstreamProject":"node-test-commit-windows-fanned","upstreamUrl":"job/node-test-commit-windows-fanned/"},{"upstreamBuild":76061,"upstreamProject":"node-test-commit","upstreamUrl":"job/node-test-commit/"},{"upstreamBuild":63756,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"prId":"55718"}],"tap":{"ok":false,"name":"parallel/test-watch-mode-files_watcher","id":1005,"buffered":false,"tapError":null,"skip":false,"todo":false,"previous":null,"plan":null,"diag":{"severity":"fail","exitcode":1,"stack":"timeout\n▶ watch mode file watcher\n  ✔ should watch changed files (228.6342ms)\n  ✔ should debounce changes (536.6115ms)\n  ✔ should debounce changes on multiple files (351.4707ms)\n  ✔ should ignore files in watched directory if they are not filtered (1020.9175ms)\n  ✔ should allow clearing filters (1236.3533ms)\n  ✔ should watch all files in watched path when in \"all\" mode (221.7884ms)\n  ✔ should ruse existing watcher if it exists (2.3503ms)\n  ✔ should ruse existing watcher of a parent directory (1.5333ms)\n  ✔ should remove existing watcher if adding a parent directory watcher (2.7598ms)\n  ✔ should clear all watchers when calling clear (1.0797ms)\n  ✖ should watch files from subprocess IPC events (188.802ms)\n    AssertionError [ERR_ASSERTION]: Expected values to be strictly deep-equal:\n    + actual - expected\n    \n      [\n        'c:\\\\workspace\\\\node-test-binary-windows-js-suites\\\\node\\\\test\\\\fixtures\\\\watch-mode',\n    -   'c:\\\\workspace\\\\node-test-binary-windows-js-suites\\\\node\\\\test\\\\.tmp.888'\n      ]\n    \n        at TestContext.<anonymous> (file:///c:/workspace/node-test-binary-windows-js-suites/node/test/parallel/test-watch-mode-files_watcher.mjs:183:12)\n        at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n        at async Test.run (node:internal/test_runner/test:932:9)\n        at async Suite.processPendingSubtests (node:internal/test_runner/test:629:7) {\n      generatedMessage: true,\n      code: 'ERR_ASSERTION',\n      actual: [Array],\n      expected: [Array],\n      operator: 'deepStrictEqual'\n    }\n\n✖ watch mode file watcher (3800.2606ms)"},"time":120294.387,"fullname":"parallel/test-watch-mode-files_watcher","closingTestPoint":false}},{"testName":"wpt/test-compression","timestamp":1732822044019,"status":"REGRESSION","jobName":"node-test-binary-windows-js-suites","config":"node-test-binary-windows-js-suites » 2,win11-arm64-COMPILED_BY-vs2022-arm64 #31447","buildUrl":"https://ci.nodejs.org/job/node-test-binary-windows-js-suites/RUN_SUBSET=2,nodes=win11-arm64-COMPILED_BY-vs2022-arm64/31447/","buildNumber":31447,"builtOn":"test-azure_msft-win11_vs2022-arm64-5","nodeVersion":"24.0.0","commitHash":"bc8cce0a000b0d6199d617b2e70ba592bd4dd3db","callStack":[{"upstreamBuild":67176,"upstreamProject":"node-test-commit-windows-fanned","upstreamUrl":"job/node-test-commit-windows-fanned/"},{"upstreamBuild":76061,"upstreamProject":"node-test-commit","upstreamUrl":"job/node-test-commit/"},{"upstreamBuild":63756,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"prId":"55718"}],"tap":{"ok":false,"name":"wpt/test-compression","id":1021,"buffered":false,"tapError":null,"skip":false,"todo":false,"previous":null,"plan":null,"diag":{"severity":"fail","exitcode":1,"stack":"timeout\n[SKIPPED] compression-bad-chunks.tentative.any.js: Execution \"hangs\", ArrayBuffer and TypedArray is not accepted and throws, instead of rejects during writer.write\n[SKIPPED] decompression-bad-chunks.tentative.any.js: Execution \"hangs\", ArrayBuffer and TypedArray is not accepted and throws, instead of rejects during writer.write\n[SKIPPED] decompression-buffersource.tentative.any.js: ArrayBuffer and TypedArray is not accepted and throws, instead of rejects during writer.write\n[SKIPPED] idlharness-shadowrealm.window.js: ShadowRealm support is not enabled\n[SKIPPED] third_party\\pako\\pako_inflate.min.js: This is not a test file.\n[PASS] \"a\" should cause the constructor to throw\n[PASS] no input should cause the constructor to throw\n[PASS] non-string input should cause the constructor to throw\n[PASS] CompressionStream constructor should throw on invalid format\n[PASS] deflated empty data should be reinflated back to its origin\n[PASS] compressing 2 chunks with deflate should work\n[PASS] the length of deflated data should be shorter than that of the original data\n[PASS] the result of compressing [,Hello,Hello] with deflate should be 'HelloHello'\n[PASS] deflated small amount data should be reinflated back to its origin\n[PASS] compressing 2 chunks with gzip should work\n[PASS] the length of gzipped data should be shorter than that of the original data\n[PASS] compressing 2 chunks with deflate-raw should work\n[PASS] the result of compressing [,Hello,Hello] with gzip should be 'HelloHello'\n[PASS] compressing 3 chunks with deflate should work\n[PASS] compressing 3 chunks with gzip should work\n[PASS] the result of compressing [,Hello,Hello] with deflate-raw should be 'HelloHello'\n[PASS] compressing 3 chunks with deflate-raw should work\n[PASS] the length of deflated (with -raw) data should be shorter than that of the original data\n[PASS] compressing 4 chunks with deflate should work\n[PASS] the result of compressing [Hello,,Hello] with deflate should be 'HelloHello'\n[PASS] compressing 4 chunks with gzip should work\n[PASS] the result of compressing [Hello,,Hello] with gzip should be 'HelloHello'\n[PASS] the result of compressing [Hello,,Hello] with deflate-raw should be 'HelloHello'\n[PASS] deflate compression with large flush output\n[PASS] compressing 4 chunks with deflate-raw should work\n[PASS] compressing 5 chunks with deflate should work\n[PASS] compressing 5 chunks with gzip should work\n[PASS] compressing 5 chunks with deflate-raw should work\n[PASS] the result of compressing [Hello,Hello,] with deflate should be 'HelloHello'\n[PASS] the result of compressing [Hello,Hello,] with gzip should be 'HelloHello'\n[PASS] the result of compressing [Hello,Hello,] with deflate-raw should be 'HelloHello'\n[PASS] compressing 6 chunks with deflate should work\n[PASS] compressing 6 chunks with gzip should work\n[PASS] compressing 6 chunks with deflate-raw should work\n[PASS] compressing 7 chunks with deflate should work\n[PASS] compressing 7 chunks with gzip should work\n[PASS] compressing 7 chunks with deflate-raw should work\n[PASS] compressing 8 chunks with deflate should work\n[PASS] gzip compression with large flush output\n[PASS] compressing 8 chunks with gzip should work\n[PASS] compressing 8 chunks with deflate-raw should work\n[PASS] compressing 9 chunks with deflate should work\n[PASS] compressing 9 chunks with gzip should work\n[PASS] compressing 9 chunks with deflate-raw should work\n[PASS] compressing 10 chunks with deflate should work\n[PASS] compressing 10 chunks with gzip should work\n[PASS] compressing 10 chunks with deflate-raw should work\n[PASS] compressing 11 chunks with deflate should work\n[PASS] compressing 11 chunks with gzip should work\n[PASS] compressing 11 chunks with deflate-raw should work\n[PASS] compressing 12 chunks with deflate should work\n[PASS] compressing 12 chunks with gzip should work\n[PASS] compressing 12 chunks with deflate-raw should work\n[PASS] compressing 13 chunks with deflate should work\n[PASS] deflated large amount data should be reinflated back to its origin\n[PASS] compressing 13 chunks with gzip should work\n[PASS] gzipped empty data should be reinflated back to its origin\n[PASS] compressing 13 chunks with deflate-raw should work\n[PASS] compressing 14 chunks with deflate should work\n[PASS] gzipped small amount data should be reinflated back to its origin\n[PASS] compressing 14 chunks with gzip should work\n[PASS] compressing 14 chunks with deflate-raw should work\n[PASS] compressing 15 chunks with deflate should work\n[PASS] compressing 15 chunks with gzip should work\n[PASS] compressing 15 chunks with deflate-raw should work\n[PASS] data should be correctly compressed even if input is detached partway\n[PASS] compressing 16 chunks with deflate should work\n[PASS] deflate-raw compression with large flush output\n[PASS] compressing 16 chunks with gzip should work\n[PASS] compressing 16 chunks with deflate-raw should work\n[PASS] gzipped large amount data should be reinflated back to its origin\n[PASS] \"a\" should cause the constructor to throw\n[PASS] no input should cause the constructor to throw\n[PASS] non-string input should cause the constructor to throw\n[PASS] the unchanged input for 'deflate' should decompress successfully\n[PASS] decompressing deflated input should work\n[PASS] decompressing gzip input should work\n[PASS] decompressing deflated (with -raw) input should work\n[PASS] truncating the input for 'deflate' should give an error\n[EXPECTED_FAILURE][FAIL] trailing junk for 'deflate' should give an error\nassert_equals: decompression should fail expected \"error\" but got \"success\"\n    at Test.<anonymous> (d:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\fixtures\\wpt\\compression\\decompression-corrupt-input.tentative.any.js:290:5)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\nCommand: d:\\workspace\\node-test-binary-windows-js-suites\\node\\Release\\node.exe  d:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\wpt\\test-compression.js 'decompression-corrupt-input.tentative.any.js'\n\n[PASS] format 'deflate' field CMF should be error for 0\n[PASS] format 'deflate' field FLG should be success for 218\n[PASS] format 'deflate' field FLG should be success for 1\n[PASS] format 'deflate' field FLG should be success for 94\n[PASS] format 'deflate' field FLG should be error for 157\n[PASS] format 'deflate' field DATA should be success for 4\n[PASS] format 'deflate' field DATA should be error for 5\n[PASS] format 'deflate' field ADLER should be error for 255\n[PASS] the unchanged input for 'gzip' should decompress successfully\n[PASS] truncating the input for 'gzip' should give an error\n[EXPECTED_FAILURE][FAIL] trailing junk for 'gzip' should give an error\nassert_equals: decompression should fail expected \"error\" but got \"success\"\n    at Test.<anonymous> (d:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\fixtures\\wpt\\compression\\decompression-corrupt-input.tentative.any.js:290:5)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\nCommand: d:\\workspace\\node-test-binary-windows-js-suites\\node\\Release\\node.exe  d:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\wpt\\test-compression.js 'decompression-corrupt-input.tentative.any.js'\n\n[PASS] format 'gzip' field ID should be error for 255\n[PASS] decompressing gzip empty input should work\n[PASS] format 'gzip' field CM should be error for 0\n[PASS] format 'gzip' field FLG should be success for 1\n[PASS] decompressing deflate empty input should work\n[PASS] format 'gzip' field FLG should be error for 2\n[PASS] format 'gzip' field MTIME should be success for 255\n[PASS] format 'gzip' field XFL should be success for 255\n[PASS] format 'gzip' field OS should be success for 128\n[PASS] decompressing deflate-raw empty input should work\n[PASS] format 'gzip' field DATA should be error for 3\n[PASS] format 'gzip' field DATA should be success for 4\n[PASS] format 'gzip' field CRC should be error for 0\n[PASS] format 'gzip' field ISIZE should be error for 1\n[PASS] the deflate input compressed with dictionary should give an error\n[PASS] decompressing deflated output should give Uint8Array chunks\n[PASS] decompressing splitted chunk into pieces of size 1 should work in deflate\n[PASS] decompressing gzip output should give Uint8Array chunks\n[PASS] decompressing splitted chunk into pieces of size 1 should work in gzip\n[PASS] decompressing splitted chunk into pieces of size 1 should work in deflate-raw\n[PASS] decompressing splitted chunk into pieces of size 2 should work in deflate\n[PASS] decompressing splitted chunk into pieces of size 2 should work in gzip\n[PASS] decompressing splitted chunk into pieces of size 2 should work in deflate-raw\n[PASS] decompressing splitted chunk into pieces of size 3 should work in deflate\n[PASS] decompressing splitted chunk into pieces of size 3 should work in gzip\n[PASS] decompressing splitted chunk into pieces of size 3 should work in deflate-raw\n[PASS] decompressing splitted chunk into pieces of size 4 should work in deflate\n[PASS] decompressing splitted chunk into pieces of size 4 should work in gzip\n[PASS] decompressing splitted chunk into pieces of size 4 should work in deflate-raw\n[PASS] decompressing splitted chunk into pieces of size 5 should work in deflate\n[PASS] decompressing splitted chunk into pieces of size 5 should work in gzip\n[PASS] decompressing splitted chunk into pieces of size 5 should work in deflate-raw\n[PASS] decompressing splitted chunk into pieces of size 6 should work in deflate\n[PASS] decompressing splitted chunk into pieces of size 6 should work in gzip\n[PASS] decompressing splitted chunk into pieces of size 6 should work in deflate-raw\n[PASS] decompressing splitted chunk into pieces of size 7 should work in deflate\n[PASS] decompressing splitted chunk into pieces of size 7 should work in gzip\n[PASS] decompressing splitted chunk into pieces of size 7 should work in deflate-raw\n[PASS] decompressing splitted chunk into pieces of size 8 should work in deflate\n[PASS] decompressing splitted chunk into pieces of size 8 should work in gzip\n[PASS] decompressing splitted chunk into pieces of size 8 should work in deflate-raw\n[PASS] decompressing splitted chunk into pieces of size 9 should work in deflate\n[PASS] decompressing splitted chunk into pieces of size 9 should work in gzip\n[PASS] decompressing splitted chunk into pieces of size 9 should work in deflate-raw\n[PASS] data should be correctly decompressed even if input is detached partway\n[PASS] decompressing splitted chunk into pieces of size 10 should work in deflate\n[PASS] decompressing splitted chunk into pieces of size 10 should work in gzip\n[PASS] decompressing splitted chunk into pieces of size 10 should work in deflate-raw\n[PASS] decompressing splitted chunk into pieces of size 11 should work in deflate\n[PASS] decompressing splitted chunk into pieces of size 11 should work in gzip\n[PASS] decompressing splitted chunk into pieces of size 11 should work in deflate-raw\n[PASS] decompressing splitted chunk into pieces of size 12 should work in deflate\n[PASS] decompressing splitted chunk into pieces of size 12 should work in gzip\n[PASS] idl_test validation\n[PASS] decompressing splitted chunk into pieces of size 12 should work in deflate-raw\n[PASS] decompressing splitted chunk into pieces of size 13 should work in deflate\n[PASS] decompressing splitted chunk into pieces of size 13 should work in gzip\n[PASS] decompressing splitted chunk into pieces of size 13 should work in deflate-raw\n[PASS] decompressing splitted chunk into pieces of size 14 should work in deflate\n[PASS] decompressing splitted chunk into pieces of size 14 should work in gzip\n[PASS] decompressing splitted chunk into pieces of size 14 should work in deflate-raw\n[PASS] CompressionStream includes GenericTransformStream: member names are unique\n[PASS] DecompressionStream includes GenericTransformStream: member names are unique\n[PASS] decompressing splitted chunk into pieces of size 15 should work in deflate\n[PASS] decompressing splitted chunk into pieces of size 15 should work in gzip\n[PASS] decompressing splitted chunk into pieces of size 15 should work in deflate-raw\n[PASS] CompressionStream interface: existence and properties of interface object\n[PASS] CompressionStream interface object length\n[PASS] CompressionStream interface object name\n[PASS] CompressionStream interface: existence and properties of interface prototype object\n[PASS] CompressionStream interface: existence and properties of interface prototype object's \"constructor\" property\n[PASS] CompressionStream interface: existence and properties of interface prototype object's @@unscopables property\n[PASS] CompressionStream must be primary interface of new CompressionStream(\"deflate\")\n[PASS] Stringification of new CompressionStream(\"deflate\")\n[PASS] DecompressionStream interface: existence and properties of interface object\n[PASS] DecompressionStream interface object length\n[PASS] DecompressionStream interface object name\n[PASS] DecompressionStream interface: existence and properties of interface prototype object\n[PASS] DecompressionStream interface: existence and properties of interface prototype object's \"constructor\" property\n[PASS] DecompressionStream interface: existence and properties of interface prototype object's @@unscopables property\n[PASS] DecompressionStream must be primary interface of new DecompressionStream(\"deflate\")\n[PASS] Stringification of new DecompressionStream(\"deflate\")\n[PASS] idl_test setup"},"time":1440260.38,"fullname":"wpt/test-compression","closingTestPoint":false}}]}