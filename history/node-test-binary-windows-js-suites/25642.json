{"failedTests":[{"testName":"sequential/test-single-executable-application-assets","timestamp":1706726395893,"status":"FAILED","jobName":"node-test-binary-windows-js-suites","config":"node-test-binary-windows-js-suites » 3,win11-COMPILED_BY-vs2022 #25642","buildUrl":"https://ci.nodejs.org/job/node-test-binary-windows-js-suites/RUN_SUBSET=3,nodes=win11-COMPILED_BY-vs2022/25642/","buildNumber":25642,"builtOn":"test-azure_msft-win11_vs2022-x64-3","nodeVersion":"22.0.0","commitHash":"dd27a1d55836e193f8abc016105efdea6e13b779","callStack":[{"upstreamBuild":60530,"upstreamProject":"node-test-commit-windows-fanned","upstreamUrl":"job/node-test-commit-windows-fanned/"},{"upstreamBuild":68190,"upstreamProject":"node-test-commit","upstreamUrl":"job/node-test-commit/"},{"upstreamBuild":56987,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"prId":"50960"}],"tap":{"ok":false,"name":"sequential/test-single-executable-application-assets","id":959,"buffered":false,"tapError":null,"skip":false,"todo":false,"previous":null,"plan":null,"diag":{"severity":"fail","exitcode":1,"stack":"- process terminated with status 1, expected 0\n[process 2828]: --- stderr ---\nINFO: Could not find files for the given pattern(s).\n\n[process 2828]: --- stdout ---\n\n[process 2828]: status = 1, signal = null\n[process 8296]: --- stderr ---\nFound SEA blob 00007FF6486D6462, size=49508\nFound SEA resource 00007FF6486D6462, size=49508\nRead<uint32_t>()(4-byte), count=1: { 21223968 }, read 4 bytes\nRead SEA magic 143da20\nRead<uint32_t>()(4-byte), count=1: { 8 }, read 4 bytes\nRead SEA flags 8\nRead<uint64_t>()(8-byte), count=1: { 6 }, read 8 bytes\nReadStringView(), length=6: 00007FF6486D6472, read 6 bytes, content: sea.js\nRead SEA code path 00007FF6486D6472, size=6\nRead<uint64_t>()(8-byte), count=1: { 2585 }, read 8 bytes\nReadStringView(), length=2585: 00007FF6486D6480, read 2585 bytes, content:\n'use strict';\n\n\n\nconst { isSea, getAsset, getAssetAsBlob } = require('node:sea');\n\nconst { readFileSync } = require('node:fs');\n\nconst assert = require('node:assert');\n\n\n\nassert(isSea());\n\n\n\n// Test invalid getAsset() calls.\n\n{\n\n  assert.throws(() => getAsset('utf8_test_text.txt', 'invalid'), {\n\n    code: 'ERR_ENCODING_NOT_SUPPORTED'\n\n  });\n\n\n\n  [\n\n    1,\n\n    1n,\n\n    Symbol(),\n\n    false,\n\n    () => {},\n\n    {},\n\n    [],\n\n    null,\n\n    undefined,\n\n  ].forEach(arg => assert.throws(() => getAsset(arg), {\n\n    code: 'ERR_INVALID_ARG_TYPE'\n\n  }));\n\n\n\n  assert.throws(() => getAsset('nonexistent'), {\n\n    code: 'ERR_SINGLE_EXECUTABLE_APPLICATION_ASSET_NOT_FOUND'\n\n  });\n\n}\n\n\n\n// Test invalid getAssetAsBlob() calls.\n\n{\n\n  // Invalid options argument.\n\n  [\n\n    123,\n\n    123n,\n\n    Symbol(),\n\n    '',\n\n    true,\n\n  ].forEach(arg => assert.throws(() => {\n\n    getAssetAsBlob('utf8_test_text.txt', arg)\n\n  }, {\n\n    code: 'ERR_INVALID_ARG_TYPE'\n\n  }));\n\n\n\n  assert.throws(() => getAssetAsBlob('nonexistent'), {\n\n    code: 'ERR_SINGLE_EXECUTABLE_APPLICATION_ASSET_NOT_FOUND'\n\n  });\n\n}\n\n\n\nconst textAssetOnDisk = readFileSync(process.env.__TEST_UTF8_TEXT_PATH, 'utf8');\n\nconst binaryAssetOnDisk = readFileSync(process.env.__TEST_PERSON_JPG);\n\n\n\n// Check getAsset() buffer copies.\n\n{\n\n  // Check that the asset embedded is the same as the original.\n\n  const assetCopy1 = getAsset('person.jpg')\n\n  const assetCopyBuffer1 = Buffer.from(assetCopy1);\n\n  assert.deepStrictEqual(assetCopyBuffer1, binaryAssetOnDisk);\n\n\n\n  const assetCopy2 = getAsset('person.jpg');\n\n  const assetCopyBuffer2 = Buffer.from(assetCopy2);\n\n  assert.deepStrictEqual(assetCopyBuffer2, binaryAssetOnDisk);\n\n\n\n  // Zero-fill copy1.\n\n  assetCopyBuffer1.fill(0);\n\n\n\n  // Test that getAsset() returns an immutable copy.\n\n  assert.deepStrictEqual(assetCopyBuffer2, binaryAssetOnDisk);\n\n  assert.notDeepStrictEqual(assetCopyBuffer1, binaryAssetOnDisk);\n\n}\n\n\n\n// Check getAsset() with encoding.\n\n{\n\n  const actualAsset = getAsset('utf8_test_text.txt', 'utf8')\n\n  assert.strictEqual(actualAsset, textAssetOnDisk);\n\n}\n\n\n\n// Check getAssetAsBlob().\n\n{\n\n  let called = false;\n\n  async function test() {\n\n    const blob = getAssetAsBlob('person.jpg');\n\n    const buffer = await blob.arrayBuffer();\n\n    assert.deepStrictEqual(Buffer.from(buffer), binaryAssetOnDisk);\n\n    const blob2 = getAssetAsBlob('utf8_test_text.txt');\n\n    const text = await blob2.text();\n\n    assert.strictEqual(text, textAssetOnDisk);\n\n  }\n\n  test().then(() => {\n\n    called = true;\n\n  });\n\n  process.on('exit', () => {\n\n    assert(called);\n\n  });\n\n}\n\n\nRead SEA resource code 00007FF6486D6480, size=2585\nRead<uint64_t>()(8-byte), count=1: { 2 }, read 8 bytes\nRead SEA resource assets size 2\nRead<uint64_t>()(8-byte), count=1: { 18 }, read 8 bytes\nReadStringView(), length=18: 00007FF6486D6EA9, read 18 bytes, content: utf8_test_text.txt\nRead<uint64_t>()(8-byte), count=1: { 1167 }, read 8 bytes\nReadStringView(), length=1167: 00007FF6486D6EC3, read 1167 bytes\nRead SEA resource asset utf8_test_text.txt at 00007FF6486D6EC3, size=1167\nRead<uint64_t>()(8-byte), count=1: { 10 }, read 8 bytes\nReadStringView(), length=10: 00007FF6486D735A, read 10 bytes, content: person.jpg\nRead<uint64_t>()(8-byte), count=1: { 45658 }, read 8 bytes\nReadStringView(), length=45658: 00007FF6486D736C, read 45658 bytes\nRead SEA resource asset person.jpg at 00007FF6486D736C, size=45658\n(node:8296) ExperimentalWarning: Single executable application is an experimental feature and might change at any time\n(Use `sea --trace-warnings ...` to show where the warning was created)\n\n[process 8296]: --- stdout ---\n\n[process 8296]: status = 0, signal = null\nc:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\child_process.js:86\n    throw new Error(`${failures.join('\\n')}`);\n    ^\n\nError: - stdout did not match '永和九年，嵗在癸丑，暮春之初，會於會稽山隂之蘭亭，脩稧事也。羣賢畢至，少長咸集。此地有崇山峻領，茂林脩竹；又有清流激湍，暎帶左右。引以為流觴曲水，列坐其次。雖無絲竹管弦之盛，一觴一詠，亦足以暢敘幽情。是日也，天朗氣清，恵風和暢；仰觀宇宙之大，俯察品類之盛；所以遊目騁懐，足以極視聽之娛，信可樂也。夫人之相與，俯仰一世，或取諸懐抱，悟言一室之內，或因寄所託，放浪形骸之外。雖趣舎萬殊，靜躁不同，當其欣扵所遇，暫得扵己，怏然自足，不知老之將至。及其所之既惓，情隨事遷，感慨係之矣。向之所欣，俛仰之閒以為陳跡，猶不能不以之興懐；況脩短隨化，終期扵盡。古人云：「死生亦大矣。」豈不痛哉！每攬昔人興感之由，若合一契，未嘗不臨文嗟悼，不能喻之扵懐。固知一死生為虛誕，齊彭殤為妄作。後之視今，亦由今之視昔，悲夫！故列敘時人，錄其所述，雖世殊事異，所以興懐，其致一也。後之攬者，亦將有感扵斯文。'\n    at logAndThrow (c:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\child_process.js:86:11)\n    at expectSyncExit (c:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\child_process.js:109:5)\n    at spawnSyncAndExitWithoutError (c:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\child_process.js:125:10)\n    at Object.<anonymous> (c:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\sequential\\test-single-executable-application-assets.js:115:3)\n    at Module._compile (node:internal/modules/cjs/loader:1378:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1437:10)\n    at Module.load (node:internal/modules/cjs/loader:1212:32)\n    at Module._load (node:internal/modules/cjs/loader:1028:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:142:12)\n    at node:internal/main/run_main_module:28:49\n\nNode.js v22.0.0-pre"},"time":19257.997,"fullname":"sequential/test-single-executable-application-assets","closingTestPoint":false}},{"testName":"sequential/test-single-executable-application-assets","timestamp":1706726395893,"status":"FAILED","jobName":"node-test-binary-windows-js-suites","config":"node-test-binary-windows-js-suites » 3,win2016-COMPILED_BY-vs2022-x86 #25642","buildUrl":"https://ci.nodejs.org/job/node-test-binary-windows-js-suites/RUN_SUBSET=3,nodes=win2016-COMPILED_BY-vs2022-x86/25642/","buildNumber":25642,"builtOn":"test-azure_msft-win2016_vs2017-x64-2","nodeVersion":"22.0.0","commitHash":"dd27a1d55836e193f8abc016105efdea6e13b779","callStack":[{"upstreamBuild":60530,"upstreamProject":"node-test-commit-windows-fanned","upstreamUrl":"job/node-test-commit-windows-fanned/"},{"upstreamBuild":68190,"upstreamProject":"node-test-commit","upstreamUrl":"job/node-test-commit/"},{"upstreamBuild":56987,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"prId":"50960"}],"tap":{"ok":false,"name":"sequential/test-single-executable-application-assets","id":959,"buffered":false,"tapError":null,"skip":false,"todo":false,"previous":null,"plan":null,"diag":{"severity":"fail","exitcode":1,"stack":"- process terminated with status 1, expected 0\n[process 5656]: --- stderr ---\nINFO: Could not find files for the given pattern(s).\n\n[process 5656]: --- stdout ---\n\n[process 5656]: status = 1, signal = null\n[process 7836]: --- stderr ---\nFound SEA blob 04D31462, size=49480\nFound SEA resource 04D31462, size=49480\nRead<uint32_t>()(4-byte), count=1: { 21223968 }, read 4 bytes\nRead SEA magic 143da20\nRead<uint32_t>()(4-byte), count=1: { 8 }, read 4 bytes\nRead SEA flags 8\nRead<uint32_t>()(4-byte), count=1: { 6 }, read 4 bytes\nReadStringView(), length=6: 04D3146E, read 6 bytes, content: sea.js\nRead SEA code path 04D3146E, size=6\nRead<uint32_t>()(4-byte), count=1: { 2585 }, read 4 bytes\nReadStringView(), length=2585: 04D31478, read 2585 bytes, content:\n'use strict';\n\n\n\nconst { isSea, getAsset, getAssetAsBlob } = require('node:sea');\n\nconst { readFileSync } = require('node:fs');\n\nconst assert = require('node:assert');\n\n\n\nassert(isSea());\n\n\n\n// Test invalid getAsset() calls.\n\n{\n\n  assert.throws(() => getAsset('utf8_test_text.txt', 'invalid'), {\n\n    code: 'ERR_ENCODING_NOT_SUPPORTED'\n\n  });\n\n\n\n  [\n\n    1,\n\n    1n,\n\n    Symbol(),\n\n    false,\n\n    () => {},\n\n    {},\n\n    [],\n\n    null,\n\n    undefined,\n\n  ].forEach(arg => assert.throws(() => getAsset(arg), {\n\n    code: 'ERR_INVALID_ARG_TYPE'\n\n  }));\n\n\n\n  assert.throws(() => getAsset('nonexistent'), {\n\n    code: 'ERR_SINGLE_EXECUTABLE_APPLICATION_ASSET_NOT_FOUND'\n\n  });\n\n}\n\n\n\n// Test invalid getAssetAsBlob() calls.\n\n{\n\n  // Invalid options argument.\n\n  [\n\n    123,\n\n    123n,\n\n    Symbol(),\n\n    '',\n\n    true,\n\n  ].forEach(arg => assert.throws(() => {\n\n    getAssetAsBlob('utf8_test_text.txt', arg)\n\n  }, {\n\n    code: 'ERR_INVALID_ARG_TYPE'\n\n  }));\n\n\n\n  assert.throws(() => getAssetAsBlob('nonexistent'), {\n\n    code: 'ERR_SINGLE_EXECUTABLE_APPLICATION_ASSET_NOT_FOUND'\n\n  });\n\n}\n\n\n\nconst textAssetOnDisk = readFileSync(process.env.__TEST_UTF8_TEXT_PATH, 'utf8');\n\nconst binaryAssetOnDisk = readFileSync(process.env.__TEST_PERSON_JPG);\n\n\n\n// Check getAsset() buffer copies.\n\n{\n\n  // Check that the asset embedded is the same as the original.\n\n  const assetCopy1 = getAsset('person.jpg')\n\n  const assetCopyBuffer1 = Buffer.from(assetCopy1);\n\n  assert.deepStrictEqual(assetCopyBuffer1, binaryAssetOnDisk);\n\n\n\n  const assetCopy2 = getAsset('person.jpg');\n\n  const assetCopyBuffer2 = Buffer.from(assetCopy2);\n\n  assert.deepStrictEqual(assetCopyBuffer2, binaryAssetOnDisk);\n\n\n\n  // Zero-fill copy1.\n\n  assetCopyBuffer1.fill(0);\n\n\n\n  // Test that getAsset() returns an immutable copy.\n\n  assert.deepStrictEqual(assetCopyBuffer2, binaryAssetOnDisk);\n\n  assert.notDeepStrictEqual(assetCopyBuffer1, binaryAssetOnDisk);\n\n}\n\n\n\n// Check getAsset() with encoding.\n\n{\n\n  const actualAsset = getAsset('utf8_test_text.txt', 'utf8')\n\n  assert.strictEqual(actualAsset, textAssetOnDisk);\n\n}\n\n\n\n// Check getAssetAsBlob().\n\n{\n\n  let called = false;\n\n  async function test() {\n\n    const blob = getAssetAsBlob('person.jpg');\n\n    const buffer = await blob.arrayBuffer();\n\n    assert.deepStrictEqual(Buffer.from(buffer), binaryAssetOnDisk);\n\n    const blob2 = getAssetAsBlob('utf8_test_text.txt');\n\n    const text = await blob2.text();\n\n    assert.strictEqual(text, textAssetOnDisk);\n\n  }\n\n  test().then(() => {\n\n    called = true;\n\n  });\n\n  process.on('exit', () => {\n\n    assert(called);\n\n  });\n\n}\n\n\nRead SEA resource code 04D31478, size=2585\nRead<uint32_t>()(4-byte), count=1: { 2 }, read 4 bytes\nRead SEA resource assets size 2\nRead<uint32_t>()(4-byte), count=1: { 18 }, read 4 bytes\nReadStringView(), length=18: 04D31E99, read 18 bytes, content: utf8_test_text.txt\nRead<uint32_t>()(4-byte), count=1: { 1167 }, read 4 bytes\nReadStringView(), length=1167: 04D31EAF, read 1167 bytes\nRead SEA resource asset utf8_test_text.txt at 04D31EAF, size=1167\nRead<uint32_t>()(4-byte), count=1: { 10 }, read 4 bytes\nReadStringView(), length=10: 04D32342, read 10 bytes, content: person.jpg\nRead<uint32_t>()(4-byte), count=1: { 45658 }, read 4 bytes\nReadStringView(), length=45658: 04D32350, read 45658 bytes\nRead SEA resource asset person.jpg at 04D32350, size=45658\n(node:7836) ExperimentalWarning: Single executable application is an experimental feature and might change at any time\n(Use `sea --trace-warnings ...` to show where the warning was created)\n\n[process 7836]: --- stdout ---\n\n[process 7836]: status = 0, signal = null\nC:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\child_process.js:86\n    throw new Error(`${failures.join('\\n')}`);\n    ^\n\nError: - stdout did not match '永和九年，嵗在癸丑，暮春之初，會於會稽山隂之蘭亭，脩稧事也。羣賢畢至，少長咸集。此地有崇山峻領，茂林脩竹；又有清流激湍，暎帶左右。引以為流觴曲水，列坐其次。雖無絲竹管弦之盛，一觴一詠，亦足以暢敘幽情。是日也，天朗氣清，恵風和暢；仰觀宇宙之大，俯察品類之盛；所以遊目騁懐，足以極視聽之娛，信可樂也。夫人之相與，俯仰一世，或取諸懐抱，悟言一室之內，或因寄所託，放浪形骸之外。雖趣舎萬殊，靜躁不同，當其欣扵所遇，暫得扵己，怏然自足，不知老之將至。及其所之既惓，情隨事遷，感慨係之矣。向之所欣，俛仰之閒以為陳跡，猶不能不以之興懐；況脩短隨化，終期扵盡。古人云：「死生亦大矣。」豈不痛哉！每攬昔人興感之由，若合一契，未嘗不臨文嗟悼，不能喻之扵懐。固知一死生為虛誕，齊彭殤為妄作。後之視今，亦由今之視昔，悲夫！故列敘時人，錄其所述，雖世殊事異，所以興懐，其致一也。後之攬者，亦將有感扵斯文。'\n    at logAndThrow (C:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\child_process.js:86:11)\n    at expectSyncExit (C:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\child_process.js:109:5)\n    at spawnSyncAndExitWithoutError (C:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\child_process.js:125:10)\n    at Object.<anonymous> (C:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\sequential\\test-single-executable-application-assets.js:115:3)\n    at Module._compile (node:internal/modules/cjs/loader:1378:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1437:10)\n    at Module.load (node:internal/modules/cjs/loader:1212:32)\n    at Module._load (node:internal/modules/cjs/loader:1028:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:142:12)\n    at node:internal/main/run_main_module:28:49\n\nNode.js v22.0.0-pre"},"time":17961.96,"fullname":"sequential/test-single-executable-application-assets","closingTestPoint":false}},{"testName":"sequential/test-single-executable-application-assets","timestamp":1706726395893,"status":"FAILED","jobName":"node-test-binary-windows-js-suites","config":"node-test-binary-windows-js-suites » 3,win10-COMPILED_BY-vs2022 #25642","buildUrl":"https://ci.nodejs.org/job/node-test-binary-windows-js-suites/RUN_SUBSET=3,nodes=win10-COMPILED_BY-vs2022/25642/","buildNumber":25642,"builtOn":"test-azure_msft-win10_vs2019-x64-4","nodeVersion":"22.0.0","commitHash":"dd27a1d55836e193f8abc016105efdea6e13b779","callStack":[{"upstreamBuild":60530,"upstreamProject":"node-test-commit-windows-fanned","upstreamUrl":"job/node-test-commit-windows-fanned/"},{"upstreamBuild":68190,"upstreamProject":"node-test-commit","upstreamUrl":"job/node-test-commit/"},{"upstreamBuild":56987,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"prId":"50960"}],"tap":{"ok":false,"name":"sequential/test-single-executable-application-assets","id":959,"buffered":false,"tapError":null,"skip":false,"todo":false,"previous":null,"plan":null,"diag":{"severity":"fail","exitcode":1,"stack":"- process terminated with status 1, expected 0\n[process 3884]: --- stderr ---\nINFO: Could not find files for the given pattern(s).\n\n[process 3884]: --- stdout ---\n\n[process 3884]: status = 1, signal = null\n[process 6720]: --- stderr ---\nFound SEA blob 00007FF6589F6462, size=49508\nFound SEA resource 00007FF6589F6462, size=49508\nRead<uint32_t>()(4-byte), count=1: { 21223968 }, read 4 bytes\nRead SEA magic 143da20\nRead<uint32_t>()(4-byte), count=1: { 8 }, read 4 bytes\nRead SEA flags 8\nRead<uint64_t>()(8-byte), count=1: { 6 }, read 8 bytes\nReadStringView(), length=6: 00007FF6589F6472, read 6 bytes, content: sea.js\nRead SEA code path 00007FF6589F6472, size=6\nRead<uint64_t>()(8-byte), count=1: { 2585 }, read 8 bytes\nReadStringView(), length=2585: 00007FF6589F6480, read 2585 bytes, content:\n'use strict';\n\n\n\nconst { isSea, getAsset, getAssetAsBlob } = require('node:sea');\n\nconst { readFileSync } = require('node:fs');\n\nconst assert = require('node:assert');\n\n\n\nassert(isSea());\n\n\n\n// Test invalid getAsset() calls.\n\n{\n\n  assert.throws(() => getAsset('utf8_test_text.txt', 'invalid'), {\n\n    code: 'ERR_ENCODING_NOT_SUPPORTED'\n\n  });\n\n\n\n  [\n\n    1,\n\n    1n,\n\n    Symbol(),\n\n    false,\n\n    () => {},\n\n    {},\n\n    [],\n\n    null,\n\n    undefined,\n\n  ].forEach(arg => assert.throws(() => getAsset(arg), {\n\n    code: 'ERR_INVALID_ARG_TYPE'\n\n  }));\n\n\n\n  assert.throws(() => getAsset('nonexistent'), {\n\n    code: 'ERR_SINGLE_EXECUTABLE_APPLICATION_ASSET_NOT_FOUND'\n\n  });\n\n}\n\n\n\n// Test invalid getAssetAsBlob() calls.\n\n{\n\n  // Invalid options argument.\n\n  [\n\n    123,\n\n    123n,\n\n    Symbol(),\n\n    '',\n\n    true,\n\n  ].forEach(arg => assert.throws(() => {\n\n    getAssetAsBlob('utf8_test_text.txt', arg)\n\n  }, {\n\n    code: 'ERR_INVALID_ARG_TYPE'\n\n  }));\n\n\n\n  assert.throws(() => getAssetAsBlob('nonexistent'), {\n\n    code: 'ERR_SINGLE_EXECUTABLE_APPLICATION_ASSET_NOT_FOUND'\n\n  });\n\n}\n\n\n\nconst textAssetOnDisk = readFileSync(process.env.__TEST_UTF8_TEXT_PATH, 'utf8');\n\nconst binaryAssetOnDisk = readFileSync(process.env.__TEST_PERSON_JPG);\n\n\n\n// Check getAsset() buffer copies.\n\n{\n\n  // Check that the asset embedded is the same as the original.\n\n  const assetCopy1 = getAsset('person.jpg')\n\n  const assetCopyBuffer1 = Buffer.from(assetCopy1);\n\n  assert.deepStrictEqual(assetCopyBuffer1, binaryAssetOnDisk);\n\n\n\n  const assetCopy2 = getAsset('person.jpg');\n\n  const assetCopyBuffer2 = Buffer.from(assetCopy2);\n\n  assert.deepStrictEqual(assetCopyBuffer2, binaryAssetOnDisk);\n\n\n\n  // Zero-fill copy1.\n\n  assetCopyBuffer1.fill(0);\n\n\n\n  // Test that getAsset() returns an immutable copy.\n\n  assert.deepStrictEqual(assetCopyBuffer2, binaryAssetOnDisk);\n\n  assert.notDeepStrictEqual(assetCopyBuffer1, binaryAssetOnDisk);\n\n}\n\n\n\n// Check getAsset() with encoding.\n\n{\n\n  const actualAsset = getAsset('utf8_test_text.txt', 'utf8')\n\n  assert.strictEqual(actualAsset, textAssetOnDisk);\n\n}\n\n\n\n// Check getAssetAsBlob().\n\n{\n\n  let called = false;\n\n  async function test() {\n\n    const blob = getAssetAsBlob('person.jpg');\n\n    const buffer = await blob.arrayBuffer();\n\n    assert.deepStrictEqual(Buffer.from(buffer), binaryAssetOnDisk);\n\n    const blob2 = getAssetAsBlob('utf8_test_text.txt');\n\n    const text = await blob2.text();\n\n    assert.strictEqual(text, textAssetOnDisk);\n\n  }\n\n  test().then(() => {\n\n    called = true;\n\n  });\n\n  process.on('exit', () => {\n\n    assert(called);\n\n  });\n\n}\n\n\nRead SEA resource code 00007FF6589F6480, size=2585\nRead<uint64_t>()(8-byte), count=1: { 2 }, read 8 bytes\nRead SEA resource assets size 2\nRead<uint64_t>()(8-byte), count=1: { 18 }, read 8 bytes\nReadStringView(), length=18: 00007FF6589F6EA9, read 18 bytes, content: utf8_test_text.txt\nRead<uint64_t>()(8-byte), count=1: { 1167 }, read 8 bytes\nReadStringView(), length=1167: 00007FF6589F6EC3, read 1167 bytes\nRead SEA resource asset utf8_test_text.txt at 00007FF6589F6EC3, size=1167\nRead<uint64_t>()(8-byte), count=1: { 10 }, read 8 bytes\nReadStringView(), length=10: 00007FF6589F735A, read 10 bytes, content: person.jpg\nRead<uint64_t>()(8-byte), count=1: { 45658 }, read 8 bytes\nReadStringView(), length=45658: 00007FF6589F736C, read 45658 bytes\nRead SEA resource asset person.jpg at 00007FF6589F736C, size=45658\n(node:6720) ExperimentalWarning: Single executable application is an experimental feature and might change at any time\n(Use `sea --trace-warnings ...` to show where the warning was created)\n\n[process 6720]: --- stdout ---\n\n[process 6720]: status = 0, signal = null\nc:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\child_process.js:86\n    throw new Error(`${failures.join('\\n')}`);\n    ^\n\nError: - stdout did not match '永和九年，嵗在癸丑，暮春之初，會於會稽山隂之蘭亭，脩稧事也。羣賢畢至，少長咸集。此地有崇山峻領，茂林脩竹；又有清流激湍，暎帶左右。引以為流觴曲水，列坐其次。雖無絲竹管弦之盛，一觴一詠，亦足以暢敘幽情。是日也，天朗氣清，恵風和暢；仰觀宇宙之大，俯察品類之盛；所以遊目騁懐，足以極視聽之娛，信可樂也。夫人之相與，俯仰一世，或取諸懐抱，悟言一室之內，或因寄所託，放浪形骸之外。雖趣舎萬殊，靜躁不同，當其欣扵所遇，暫得扵己，怏然自足，不知老之將至。及其所之既惓，情隨事遷，感慨係之矣。向之所欣，俛仰之閒以為陳跡，猶不能不以之興懐；況脩短隨化，終期扵盡。古人云：「死生亦大矣。」豈不痛哉！每攬昔人興感之由，若合一契，未嘗不臨文嗟悼，不能喻之扵懐。固知一死生為虛誕，齊彭殤為妄作。後之視今，亦由今之視昔，悲夫！故列敘時人，錄其所述，雖世殊事異，所以興懐，其致一也。後之攬者，亦將有感扵斯文。'\n    at logAndThrow (c:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\child_process.js:86:11)\n    at expectSyncExit (c:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\child_process.js:109:5)\n    at spawnSyncAndExitWithoutError (c:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\child_process.js:125:10)\n    at Object.<anonymous> (c:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\sequential\\test-single-executable-application-assets.js:115:3)\n    at Module._compile (node:internal/modules/cjs/loader:1378:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1437:10)\n    at Module.load (node:internal/modules/cjs/loader:1212:32)\n    at Module._load (node:internal/modules/cjs/loader:1028:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:142:12)\n    at node:internal/main/run_main_module:28:49\n\nNode.js v22.0.0-pre"},"time":15487.681,"fullname":"sequential/test-single-executable-application-assets","closingTestPoint":false}},{"testName":"sequential/test-single-executable-application-assets","timestamp":1706726395893,"status":"FAILED","jobName":"node-test-binary-windows-js-suites","config":"node-test-binary-windows-js-suites » 3,win2019-COMPILED_BY-vs2022 #25642","buildUrl":"https://ci.nodejs.org/job/node-test-binary-windows-js-suites/RUN_SUBSET=3,nodes=win2019-COMPILED_BY-vs2022/25642/","buildNumber":25642,"builtOn":"test-rackspace-win2019_vs2019-x64-2","nodeVersion":"22.0.0","commitHash":"dd27a1d55836e193f8abc016105efdea6e13b779","callStack":[{"upstreamBuild":60530,"upstreamProject":"node-test-commit-windows-fanned","upstreamUrl":"job/node-test-commit-windows-fanned/"},{"upstreamBuild":68190,"upstreamProject":"node-test-commit","upstreamUrl":"job/node-test-commit/"},{"upstreamBuild":56987,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"prId":"50960"}],"tap":{"ok":false,"name":"sequential/test-single-executable-application-assets","id":959,"buffered":false,"tapError":null,"skip":false,"todo":false,"previous":null,"plan":null,"diag":{"severity":"fail","exitcode":1,"stack":"- process terminated with status 1, expected 0\n[process 1692]: --- stderr ---\nINFO: Could not find files for the given pattern(s).\n\n[process 1692]: --- stdout ---\n\n[process 1692]: status = 1, signal = null\n[process 6476]: --- stderr ---\nFound SEA blob 00007FF660CE6462, size=49508\nFound SEA resource 00007FF660CE6462, size=49508\nRead<uint32_t>()(4-byte), count=1: { 21223968 }, read 4 bytes\nRead SEA magic 143da20\nRead<uint32_t>()(4-byte), count=1: { 8 }, read 4 bytes\nRead SEA flags 8\nRead<uint64_t>()(8-byte), count=1: { 6 }, read 8 bytes\nReadStringView(), length=6: 00007FF660CE6472, read 6 bytes, content: sea.js\nRead SEA code path 00007FF660CE6472, size=6\nRead<uint64_t>()(8-byte), count=1: { 2585 }, read 8 bytes\nReadStringView(), length=2585: 00007FF660CE6480, read 2585 bytes, content:\n'use strict';\n\n\n\nconst { isSea, getAsset, getAssetAsBlob } = require('node:sea');\n\nconst { readFileSync } = require('node:fs');\n\nconst assert = require('node:assert');\n\n\n\nassert(isSea());\n\n\n\n// Test invalid getAsset() calls.\n\n{\n\n  assert.throws(() => getAsset('utf8_test_text.txt', 'invalid'), {\n\n    code: 'ERR_ENCODING_NOT_SUPPORTED'\n\n  });\n\n\n\n  [\n\n    1,\n\n    1n,\n\n    Symbol(),\n\n    false,\n\n    () => {},\n\n    {},\n\n    [],\n\n    null,\n\n    undefined,\n\n  ].forEach(arg => assert.throws(() => getAsset(arg), {\n\n    code: 'ERR_INVALID_ARG_TYPE'\n\n  }));\n\n\n\n  assert.throws(() => getAsset('nonexistent'), {\n\n    code: 'ERR_SINGLE_EXECUTABLE_APPLICATION_ASSET_NOT_FOUND'\n\n  });\n\n}\n\n\n\n// Test invalid getAssetAsBlob() calls.\n\n{\n\n  // Invalid options argument.\n\n  [\n\n    123,\n\n    123n,\n\n    Symbol(),\n\n    '',\n\n    true,\n\n  ].forEach(arg => assert.throws(() => {\n\n    getAssetAsBlob('utf8_test_text.txt', arg)\n\n  }, {\n\n    code: 'ERR_INVALID_ARG_TYPE'\n\n  }));\n\n\n\n  assert.throws(() => getAssetAsBlob('nonexistent'), {\n\n    code: 'ERR_SINGLE_EXECUTABLE_APPLICATION_ASSET_NOT_FOUND'\n\n  });\n\n}\n\n\n\nconst textAssetOnDisk = readFileSync(process.env.__TEST_UTF8_TEXT_PATH, 'utf8');\n\nconst binaryAssetOnDisk = readFileSync(process.env.__TEST_PERSON_JPG);\n\n\n\n// Check getAsset() buffer copies.\n\n{\n\n  // Check that the asset embedded is the same as the original.\n\n  const assetCopy1 = getAsset('person.jpg')\n\n  const assetCopyBuffer1 = Buffer.from(assetCopy1);\n\n  assert.deepStrictEqual(assetCopyBuffer1, binaryAssetOnDisk);\n\n\n\n  const assetCopy2 = getAsset('person.jpg');\n\n  const assetCopyBuffer2 = Buffer.from(assetCopy2);\n\n  assert.deepStrictEqual(assetCopyBuffer2, binaryAssetOnDisk);\n\n\n\n  // Zero-fill copy1.\n\n  assetCopyBuffer1.fill(0);\n\n\n\n  // Test that getAsset() returns an immutable copy.\n\n  assert.deepStrictEqual(assetCopyBuffer2, binaryAssetOnDisk);\n\n  assert.notDeepStrictEqual(assetCopyBuffer1, binaryAssetOnDisk);\n\n}\n\n\n\n// Check getAsset() with encoding.\n\n{\n\n  const actualAsset = getAsset('utf8_test_text.txt', 'utf8')\n\n  assert.strictEqual(actualAsset, textAssetOnDisk);\n\n}\n\n\n\n// Check getAssetAsBlob().\n\n{\n\n  let called = false;\n\n  async function test() {\n\n    const blob = getAssetAsBlob('person.jpg');\n\n    const buffer = await blob.arrayBuffer();\n\n    assert.deepStrictEqual(Buffer.from(buffer), binaryAssetOnDisk);\n\n    const blob2 = getAssetAsBlob('utf8_test_text.txt');\n\n    const text = await blob2.text();\n\n    assert.strictEqual(text, textAssetOnDisk);\n\n  }\n\n  test().then(() => {\n\n    called = true;\n\n  });\n\n  process.on('exit', () => {\n\n    assert(called);\n\n  });\n\n}\n\n\nRead SEA resource code 00007FF660CE6480, size=2585\nRead<uint64_t>()(8-byte), count=1: { 2 }, read 8 bytes\nRead SEA resource assets size 2\nRead<uint64_t>()(8-byte), count=1: { 18 }, read 8 bytes\nReadStringView(), length=18: 00007FF660CE6EA9, read 18 bytes, content: utf8_test_text.txt\nRead<uint64_t>()(8-byte), count=1: { 1167 }, read 8 bytes\nReadStringView(), length=1167: 00007FF660CE6EC3, read 1167 bytes\nRead SEA resource asset utf8_test_text.txt at 00007FF660CE6EC3, size=1167\nRead<uint64_t>()(8-byte), count=1: { 10 }, read 8 bytes\nReadStringView(), length=10: 00007FF660CE735A, read 10 bytes, content: person.jpg\nRead<uint64_t>()(8-byte), count=1: { 45658 }, read 8 bytes\nReadStringView(), length=45658: 00007FF660CE736C, read 45658 bytes\nRead SEA resource asset person.jpg at 00007FF660CE736C, size=45658\n(node:6476) ExperimentalWarning: Single executable application is an experimental feature and might change at any time\n(Use `sea --trace-warnings ...` to show where the warning was created)\n\n[process 6476]: --- stdout ---\n\n[process 6476]: status = 0, signal = null\nC:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\child_process.js:86\n    throw new Error(`${failures.join('\\n')}`);\n    ^\n\nError: - stdout did not match '永和九年，嵗在癸丑，暮春之初，會於會稽山隂之蘭亭，脩稧事也。羣賢畢至，少長咸集。此地有崇山峻領，茂林脩竹；又有清流激湍，暎帶左右。引以為流觴曲水，列坐其次。雖無絲竹管弦之盛，一觴一詠，亦足以暢敘幽情。是日也，天朗氣清，恵風和暢；仰觀宇宙之大，俯察品類之盛；所以遊目騁懐，足以極視聽之娛，信可樂也。夫人之相與，俯仰一世，或取諸懐抱，悟言一室之內，或因寄所託，放浪形骸之外。雖趣舎萬殊，靜躁不同，當其欣扵所遇，暫得扵己，怏然自足，不知老之將至。及其所之既惓，情隨事遷，感慨係之矣。向之所欣，俛仰之閒以為陳跡，猶不能不以之興懐；況脩短隨化，終期扵盡。古人云：「死生亦大矣。」豈不痛哉！每攬昔人興感之由，若合一契，未嘗不臨文嗟悼，不能喻之扵懐。固知一死生為虛誕，齊彭殤為妄作。後之視今，亦由今之視昔，悲夫！故列敘時人，錄其所述，雖世殊事異，所以興懐，其致一也。後之攬者，亦將有感扵斯文。'\n    at logAndThrow (C:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\child_process.js:86:11)\n    at expectSyncExit (C:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\child_process.js:109:5)\n    at spawnSyncAndExitWithoutError (C:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\child_process.js:125:10)\n    at Object.<anonymous> (C:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\sequential\\test-single-executable-application-assets.js:115:3)\n    at Module._compile (node:internal/modules/cjs/loader:1378:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1437:10)\n    at Module.load (node:internal/modules/cjs/loader:1212:32)\n    at Module._load (node:internal/modules/cjs/loader:1028:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:142:12)\n    at node:internal/main/run_main_module:28:49\n\nNode.js v22.0.0-pre"},"time":37482.128,"fullname":"sequential/test-single-executable-application-assets","closingTestPoint":false}},{"testName":"sequential/test-single-executable-application-assets","timestamp":1706726395893,"status":"FAILED","jobName":"node-test-binary-windows-js-suites","config":"node-test-binary-windows-js-suites » 3,win2022-COMPILED_BY-vs2022 #25642","buildUrl":"https://ci.nodejs.org/job/node-test-binary-windows-js-suites/RUN_SUBSET=3,nodes=win2022-COMPILED_BY-vs2022/25642/","buildNumber":25642,"builtOn":"test-rackspace-win2022_vs2022-x64-1","nodeVersion":"22.0.0","commitHash":"dd27a1d55836e193f8abc016105efdea6e13b779","callStack":[{"upstreamBuild":60530,"upstreamProject":"node-test-commit-windows-fanned","upstreamUrl":"job/node-test-commit-windows-fanned/"},{"upstreamBuild":68190,"upstreamProject":"node-test-commit","upstreamUrl":"job/node-test-commit/"},{"upstreamBuild":56987,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"prId":"50960"}],"tap":{"ok":false,"name":"sequential/test-single-executable-application-assets","id":959,"buffered":false,"tapError":null,"skip":false,"todo":false,"previous":null,"plan":null,"diag":{"severity":"fail","exitcode":1,"stack":"- process terminated with status 1, expected 0\n[process 2896]: --- stderr ---\nINFO: Could not find files for the given pattern(s).\n\n[process 2896]: --- stdout ---\n\n[process 2896]: status = 1, signal = null\n[process 6388]: --- stderr ---\nFound SEA blob 00007FF6CDCC6462, size=49508\nFound SEA resource 00007FF6CDCC6462, size=49508\nRead<uint32_t>()(4-byte), count=1: { 21223968 }, read 4 bytes\nRead SEA magic 143da20\nRead<uint32_t>()(4-byte), count=1: { 8 }, read 4 bytes\nRead SEA flags 8\nRead<uint64_t>()(8-byte), count=1: { 6 }, read 8 bytes\nReadStringView(), length=6: 00007FF6CDCC6472, read 6 bytes, content: sea.js\nRead SEA code path 00007FF6CDCC6472, size=6\nRead<uint64_t>()(8-byte), count=1: { 2585 }, read 8 bytes\nReadStringView(), length=2585: 00007FF6CDCC6480, read 2585 bytes, content:\n'use strict';\n\n\n\nconst { isSea, getAsset, getAssetAsBlob } = require('node:sea');\n\nconst { readFileSync } = require('node:fs');\n\nconst assert = require('node:assert');\n\n\n\nassert(isSea());\n\n\n\n// Test invalid getAsset() calls.\n\n{\n\n  assert.throws(() => getAsset('utf8_test_text.txt', 'invalid'), {\n\n    code: 'ERR_ENCODING_NOT_SUPPORTED'\n\n  });\n\n\n\n  [\n\n    1,\n\n    1n,\n\n    Symbol(),\n\n    false,\n\n    () => {},\n\n    {},\n\n    [],\n\n    null,\n\n    undefined,\n\n  ].forEach(arg => assert.throws(() => getAsset(arg), {\n\n    code: 'ERR_INVALID_ARG_TYPE'\n\n  }));\n\n\n\n  assert.throws(() => getAsset('nonexistent'), {\n\n    code: 'ERR_SINGLE_EXECUTABLE_APPLICATION_ASSET_NOT_FOUND'\n\n  });\n\n}\n\n\n\n// Test invalid getAssetAsBlob() calls.\n\n{\n\n  // Invalid options argument.\n\n  [\n\n    123,\n\n    123n,\n\n    Symbol(),\n\n    '',\n\n    true,\n\n  ].forEach(arg => assert.throws(() => {\n\n    getAssetAsBlob('utf8_test_text.txt', arg)\n\n  }, {\n\n    code: 'ERR_INVALID_ARG_TYPE'\n\n  }));\n\n\n\n  assert.throws(() => getAssetAsBlob('nonexistent'), {\n\n    code: 'ERR_SINGLE_EXECUTABLE_APPLICATION_ASSET_NOT_FOUND'\n\n  });\n\n}\n\n\n\nconst textAssetOnDisk = readFileSync(process.env.__TEST_UTF8_TEXT_PATH, 'utf8');\n\nconst binaryAssetOnDisk = readFileSync(process.env.__TEST_PERSON_JPG);\n\n\n\n// Check getAsset() buffer copies.\n\n{\n\n  // Check that the asset embedded is the same as the original.\n\n  const assetCopy1 = getAsset('person.jpg')\n\n  const assetCopyBuffer1 = Buffer.from(assetCopy1);\n\n  assert.deepStrictEqual(assetCopyBuffer1, binaryAssetOnDisk);\n\n\n\n  const assetCopy2 = getAsset('person.jpg');\n\n  const assetCopyBuffer2 = Buffer.from(assetCopy2);\n\n  assert.deepStrictEqual(assetCopyBuffer2, binaryAssetOnDisk);\n\n\n\n  // Zero-fill copy1.\n\n  assetCopyBuffer1.fill(0);\n\n\n\n  // Test that getAsset() returns an immutable copy.\n\n  assert.deepStrictEqual(assetCopyBuffer2, binaryAssetOnDisk);\n\n  assert.notDeepStrictEqual(assetCopyBuffer1, binaryAssetOnDisk);\n\n}\n\n\n\n// Check getAsset() with encoding.\n\n{\n\n  const actualAsset = getAsset('utf8_test_text.txt', 'utf8')\n\n  assert.strictEqual(actualAsset, textAssetOnDisk);\n\n}\n\n\n\n// Check getAssetAsBlob().\n\n{\n\n  let called = false;\n\n  async function test() {\n\n    const blob = getAssetAsBlob('person.jpg');\n\n    const buffer = await blob.arrayBuffer();\n\n    assert.deepStrictEqual(Buffer.from(buffer), binaryAssetOnDisk);\n\n    const blob2 = getAssetAsBlob('utf8_test_text.txt');\n\n    const text = await blob2.text();\n\n    assert.strictEqual(text, textAssetOnDisk);\n\n  }\n\n  test().then(() => {\n\n    called = true;\n\n  });\n\n  process.on('exit', () => {\n\n    assert(called);\n\n  });\n\n}\n\n\nRead SEA resource code 00007FF6CDCC6480, size=2585\nRead<uint64_t>()(8-byte), count=1: { 2 }, read 8 bytes\nRead SEA resource assets size 2\nRead<uint64_t>()(8-byte), count=1: { 18 }, read 8 bytes\nReadStringView(), length=18: 00007FF6CDCC6EA9, read 18 bytes, content: utf8_test_text.txt\nRead<uint64_t>()(8-byte), count=1: { 1167 }, read 8 bytes\nReadStringView(), length=1167: 00007FF6CDCC6EC3, read 1167 bytes\nRead SEA resource asset utf8_test_text.txt at 00007FF6CDCC6EC3, size=1167\nRead<uint64_t>()(8-byte), count=1: { 10 }, read 8 bytes\nReadStringView(), length=10: 00007FF6CDCC735A, read 10 bytes, content: person.jpg\nRead<uint64_t>()(8-byte), count=1: { 45658 }, read 8 bytes\nReadStringView(), length=45658: 00007FF6CDCC736C, read 45658 bytes\nRead SEA resource asset person.jpg at 00007FF6CDCC736C, size=45658\n(node:6388) ExperimentalWarning: Single executable application is an experimental feature and might change at any time\n(Use `sea --trace-warnings ...` to show where the warning was created)\n\n[process 6388]: --- stdout ---\n\n[process 6388]: status = 0, signal = null\nC:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\child_process.js:86\n    throw new Error(`${failures.join('\\n')}`);\n    ^\n\nError: - stdout did not match '永和九年，嵗在癸丑，暮春之初，會於會稽山隂之蘭亭，脩稧事也。羣賢畢至，少長咸集。此地有崇山峻領，茂林脩竹；又有清流激湍，暎帶左右。引以為流觴曲水，列坐其次。雖無絲竹管弦之盛，一觴一詠，亦足以暢敘幽情。是日也，天朗氣清，恵風和暢；仰觀宇宙之大，俯察品類之盛；所以遊目騁懐，足以極視聽之娛，信可樂也。夫人之相與，俯仰一世，或取諸懐抱，悟言一室之內，或因寄所託，放浪形骸之外。雖趣舎萬殊，靜躁不同，當其欣扵所遇，暫得扵己，怏然自足，不知老之將至。及其所之既惓，情隨事遷，感慨係之矣。向之所欣，俛仰之閒以為陳跡，猶不能不以之興懐；況脩短隨化，終期扵盡。古人云：「死生亦大矣。」豈不痛哉！每攬昔人興感之由，若合一契，未嘗不臨文嗟悼，不能喻之扵懐。固知一死生為虛誕，齊彭殤為妄作。後之視今，亦由今之視昔，悲夫！故列敘時人，錄其所述，雖世殊事異，所以興懐，其致一也。後之攬者，亦將有感扵斯文。'\n    at logAndThrow (C:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\child_process.js:86:11)\n    at expectSyncExit (C:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\child_process.js:109:5)\n    at spawnSyncAndExitWithoutError (C:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\child_process.js:125:10)\n    at Object.<anonymous> (C:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\sequential\\test-single-executable-application-assets.js:115:3)\n    at Module._compile (node:internal/modules/cjs/loader:1378:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1437:10)\n    at Module.load (node:internal/modules/cjs/loader:1212:32)\n    at Module._load (node:internal/modules/cjs/loader:1028:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:142:12)\n    at node:internal/main/run_main_module:28:49\n\nNode.js v22.0.0-pre"},"time":40897.401,"fullname":"sequential/test-single-executable-application-assets","closingTestPoint":false}},{"testName":"parallel/test-worker-nearheaplimit-deadlock","timestamp":1706726395893,"status":"FAILED","jobName":"node-test-binary-windows-js-suites","config":"node-test-binary-windows-js-suites » 2,win2016-COMPILED_BY-vs2022-x86 #25642","buildUrl":"https://ci.nodejs.org/job/node-test-binary-windows-js-suites/RUN_SUBSET=2,nodes=win2016-COMPILED_BY-vs2022-x86/25642/","buildNumber":25642,"builtOn":"test-rackspace-win2016_vs2015-x64-2","nodeVersion":"22.0.0","commitHash":"dd27a1d55836e193f8abc016105efdea6e13b779","callStack":[{"upstreamBuild":60530,"upstreamProject":"node-test-commit-windows-fanned","upstreamUrl":"job/node-test-commit-windows-fanned/"},{"upstreamBuild":68190,"upstreamProject":"node-test-commit","upstreamUrl":"job/node-test-commit/"},{"upstreamBuild":56987,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"prId":"50960"}],"tap":{"ok":false,"name":"parallel/test-worker-nearheaplimit-deadlock","id":884,"buffered":false,"tapError":null,"skip":false,"todo":": Fix flaky test","previous":null,"plan":null,"diag":{"severity":"flaky","exitcode":134,"stack":"\n<--- Last few GCs --->\n\n[8228:0B8ED9A0]      102 ms: Mark-Compact 1.5 (3.9) -> 1.5 (3.9) MB, 2.58 / 0.00 ms  (average mu = 0.726, current mu = 0.010) background allocation failure; GC in old space requested\n[8228:0B8ED9A0]      105 ms: Mark-Compact 1.5 (3.9) -> 1.5 (3.9) MB, 2.46 / 0.00 ms  (average mu = 0.628, current mu = 0.113) background allocation failure; GC in old space requested\n\n\n<--- JS stacktrace --->\n\nFATAL ERROR: LocalHeap: allocation failed Allocation failed - JavaScript heap out of memory\n----- Native stack trace -----"},"time":839.01,"fullname":"parallel/test-worker-nearheaplimit-deadlock","closingTestPoint":false}}]}