{"failedTests":[{"testName":"message/stdin_messages","timestamp":1714656652787,"status":"REGRESSION","jobName":"node-test-binary-windows-js-suites","config":"node-test-binary-windows-js-suites » 0,win10-COMPILED_BY-vs2022 #27524","buildUrl":"https://ci.nodejs.org/job/node-test-binary-windows-js-suites/RUN_SUBSET=0,nodes=win10-COMPILED_BY-vs2022/27524/","buildNumber":27524,"builtOn":"test-azure_msft-win10_vs2019-x64-1","nodeVersion":"23.0.0","commitHash":"fa7baf79faaaf6b88b9781d7f3544228b8fa1b0f","callStack":[{"upstreamBuild":62662,"upstreamProject":"node-test-commit-windows-fanned","upstreamUrl":"job/node-test-commit-windows-fanned/"},{"upstreamBuild":70431,"upstreamProject":"node-test-commit","upstreamUrl":"job/node-test-commit/"},{"upstreamBuild":58863,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"upstreamBuild":58847,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"prId":"52733"}],"tap":{"ok":false,"name":"message/stdin_messages","id":81,"buffered":false,"tapError":null,"skip":false,"todo":false,"previous":null,"plan":null,"diag":{"severity":"fail","stack":"[stdin]\n[stdin]:1\nwith(this){__filename}\n^^^^\n\nSyntaxError: Strict mode code may not include a with statement\n    at makeContextifyScript (node:internal/vm:185:14)\n    at node:internal/process/execution:107:22\n    at [stdin]-wrapper:6:24\n    at runScript (node:internal/process/execution:101:62)\n    at evalScript (node:internal/process/execution:136:3)\n    at node:internal/main/eval_stdin:32:5\n    at Socket.<anonymous> (node:internal/process/execution:237:5)\n    at SlowEventEmitter.emit (node:internal/events/slow_event_emitter:88:35)\n    at Socket.emit (node:internal/events/event_emitter:463:41)\n    at endReadableNT (node:internal/streams/readable:1700:12)\n\nNode.js v23.0.0-pre\n42\n42\n[stdin]:1\nthrow new Error(\"hello\")\n^\n\nError: hello\n    at [stdin]:1:7\n    at runScriptInThisContext (node:internal/vm:209:10)\n    at node:internal/process/execution:118:14\n    at [stdin]-wrapper:6:24\n    at runScript (node:internal/process/execution:101:62)\n    at evalScript (node:internal/process/execution:136:3)\n    at node:internal/main/eval_stdin:32:5\n    at Socket.<anonymous> (node:internal/process/execution:237:5)\n    at SlowEventEmitter.emit (node:internal/events/slow_event_emitter:88:35)\n    at Socket.emit (node:internal/events/event_emitter:463:41)\n\nNode.js v23.0.0-pre\n[stdin]:1\nthrow new Error(\"hello\")\n^\n\nError: hello\n    at [stdin]:1:7\n    at runScriptInThisContext (node:internal/vm:209:10)\n    at node:internal/process/execution:118:14\n    at [stdin]-wrapper:6:24\n    at runScript (node:internal/process/execution:101:62)\n    at evalScript (node:internal/process/execution:136:3)\n    at node:internal/main/eval_stdin:32:5\n    at Socket.<anonymous> (node:internal/process/execution:237:5)\n    at SlowEventEmitter.emit (node:internal/events/slow_event_emitter:88:35)\n    at Socket.emit (node:internal/events/event_emitter:463:41)\n\nNode.js v23.0.0-pre\n100\n[stdin]:1\nlet x = 100; y = x;\n               ^\n\nReferenceError: y is not defined\n    at [stdin]:1:16\n    at runScriptInThisContext (node:internal/vm:209:10)\n    at node:internal/process/execution:118:14\n    at [stdin]-wrapper:6:24\n    at runScript (node:internal/process/execution:101:62)\n    at evalScript (node:internal/process/execution:136:3)\n    at node:internal/main/eval_stdin:32:5\n    at Socket.<anonymous> (node:internal/process/execution:237:5)\n    at SlowEventEmitter.emit (node:internal/events/slow_event_emitter:88:35)\n    at Socket.emit (node:internal/events/event_emitter:463:41)\n\nNode.js v23.0.0-pre\n\n[stdin]:1\nlet ______________________________________________; throw 10\n                                                    ^\n10\n(Use `node --trace-uncaught ...` to show where the exception was thrown)\n\nNode.js v23.0.0-pre\n\n[stdin]:1\nlet ______________________________________________; throw 10\n                                                    ^\n10\n(Use `node --trace-uncaught ...` to show where the exception was thrown)\n\nNode.js v23.0.0-pre\ndone"},"time":1732.015,"fullname":"message/stdin_messages","closingTestPoint":false}},{"testName":"parallel/test-assert-builtins-not-read-from-filesystem","timestamp":1714656652787,"status":"REGRESSION","jobName":"node-test-binary-windows-js-suites","config":"node-test-binary-windows-js-suites » 1,win11-arm64-COMPILED_BY-vs2022-arm64 #27524","buildUrl":"https://ci.nodejs.org/job/node-test-binary-windows-js-suites/RUN_SUBSET=1,nodes=win11-arm64-COMPILED_BY-vs2022-arm64/27524/","buildNumber":27524,"builtOn":"test-azure_msft-win11_vs2022-arm64-3","nodeVersion":"23.0.0","commitHash":"fa7baf79faaaf6b88b9781d7f3544228b8fa1b0f","callStack":[{"upstreamBuild":62662,"upstreamProject":"node-test-commit-windows-fanned","upstreamUrl":"job/node-test-commit-windows-fanned/"},{"upstreamBuild":70431,"upstreamProject":"node-test-commit","upstreamUrl":"job/node-test-commit/"},{"upstreamBuild":58863,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"upstreamBuild":58847,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"prId":"52733"}],"tap":{"ok":false,"name":"parallel/test-assert-builtins-not-read-from-filesystem","id":69,"buffered":false,"tapError":null,"skip":false,"todo":false,"previous":null,"plan":null,"diag":{"severity":"fail","exitcode":1,"stack":"node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Exit code: 1\n,,node:fs:2348\n\n    return binding.writeFileUtf8(\n\n                   ^\n\n\n\nError: ENOENT: no such file or directory, open 'd:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\.tmp.67\\node:internal\\events\\fast_event_emitter'\n\n    at writeFileSync (node:fs:2348:20)\n\n    at Object.<anonymous> (d:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\parallel\\test-assert-builtins-not-read-from-filesystem.js:41:3)\n\n    at Module._compile (node:internal/modules/cjs/loader:1480:14)\n\n    at Module._extensions..js (node:internal/modules/cjs/loader:1564:10)\n\n    at Module.load (node:internal/modules/cjs/loader:1287:32)\n\n    at Module._load (node:internal/modules/cjs/loader:1103:12)\n\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:168:12)\n\n    at node:internal/main/run_main_module:30:49 {\n\n  errno: -4058,\n\n  code: 'ENOENT',\n\n  syscall: 'open',\n\n  path: 'd:\\\\workspace\\\\node-test-binary-windows-js-suites\\\\node\\\\test\\\\.tmp.67\\\\node:internal\\\\events\\\\fast_event_emitter'\n\n}\n\n\n\nNode.js v23.0.0-pre\n\n\n    at Object.<anonymous> (d:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\parallel\\test-assert-builtins-not-read-from-filesystem.js:31:12)\n    at Module._compile (node:internal/modules/cjs/loader:1480:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1564:10)\n    at Module.load (node:internal/modules/cjs/loader:1287:32)\n    at Module._load (node:internal/modules/cjs/loader:1103:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:168:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: false,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 0,\n  operator: 'strictEqual'\n}\n\nNode.js v23.0.0-pre"},"time":591.991,"fullname":"parallel/test-assert-builtins-not-read-from-filesystem","closingTestPoint":false}},{"testName":"parallel/test-assert-builtins-not-read-from-filesystem","timestamp":1714656652787,"status":"REGRESSION","jobName":"node-test-binary-windows-js-suites","config":"node-test-binary-windows-js-suites » 2,win2016-COMPILED_BY-vs2022-x86 #27524","buildUrl":"https://ci.nodejs.org/job/node-test-binary-windows-js-suites/RUN_SUBSET=2,nodes=win2016-COMPILED_BY-vs2022-x86/27524/","buildNumber":27524,"builtOn":"test-rackspace-win2016_vs2015-x64-2","nodeVersion":"23.0.0","commitHash":"fa7baf79faaaf6b88b9781d7f3544228b8fa1b0f","callStack":[{"upstreamBuild":62662,"upstreamProject":"node-test-commit-windows-fanned","upstreamUrl":"job/node-test-commit-windows-fanned/"},{"upstreamBuild":70431,"upstreamProject":"node-test-commit","upstreamUrl":"job/node-test-commit/"},{"upstreamBuild":58863,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"upstreamBuild":58847,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"prId":"52733"}],"tap":{"ok":false,"name":"parallel/test-assert-builtins-not-read-from-filesystem","id":71,"buffered":false,"tapError":null,"skip":false,"todo":false,"previous":null,"plan":null,"diag":{"severity":"fail","exitcode":1,"stack":"node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Exit code: 1\n,,node:fs:2348\n\n    return binding.writeFileUtf8(\n\n                   ^\n\n\n\nError: ENOENT: no such file or directory, open 'C:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\.tmp.68\\node:internal\\events\\fast_event_emitter'\n\n    at writeFileSync (node:fs:2348:20)\n\n    at Object.<anonymous> (C:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\parallel\\test-assert-builtins-not-read-from-filesystem.js:41:3)\n\n    at Module._compile (node:internal/modules/cjs/loader:1480:14)\n\n    at Module._extensions..js (node:internal/modules/cjs/loader:1564:10)\n\n    at Module.load (node:internal/modules/cjs/loader:1287:32)\n\n    at Module._load (node:internal/modules/cjs/loader:1103:12)\n\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:168:12)\n\n    at node:internal/main/run_main_module:30:49 {\n\n  errno: -4058,\n\n  code: 'ENOENT',\n\n  syscall: 'open',\n\n  path: 'C:\\\\workspace\\\\node-test-binary-windows-js-suites\\\\node\\\\test\\\\.tmp.68\\\\node:internal\\\\events\\\\fast_event_emitter'\n\n}\n\n\n\nNode.js v23.0.0-pre\n\n\n    at Object.<anonymous> (C:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\parallel\\test-assert-builtins-not-read-from-filesystem.js:31:12)\n    at Module._compile (node:internal/modules/cjs/loader:1480:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1564:10)\n    at Module.load (node:internal/modules/cjs/loader:1287:32)\n    at Module._load (node:internal/modules/cjs/loader:1103:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:168:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: false,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 0,\n  operator: 'strictEqual'\n}\n\nNode.js v23.0.0-pre"},"time":498.013,"fullname":"parallel/test-assert-builtins-not-read-from-filesystem","closingTestPoint":false}},{"testName":"parallel/test-disable-proto-delete","timestamp":1714656652787,"status":"REGRESSION","jobName":"node-test-binary-windows-js-suites","config":"node-test-binary-windows-js-suites » 2,win2016-COMPILED_BY-vs2022-x86 #27524","buildUrl":"https://ci.nodejs.org/job/node-test-binary-windows-js-suites/RUN_SUBSET=2,nodes=win2016-COMPILED_BY-vs2022-x86/27524/","buildNumber":27524,"builtOn":"test-rackspace-win2016_vs2015-x64-2","nodeVersion":"23.0.0","commitHash":"fa7baf79faaaf6b88b9781d7f3544228b8fa1b0f","callStack":[{"upstreamBuild":62662,"upstreamProject":"node-test-commit-windows-fanned","upstreamUrl":"job/node-test-commit-windows-fanned/"},{"upstreamBuild":70431,"upstreamProject":"node-test-commit","upstreamUrl":"job/node-test-commit/"},{"upstreamBuild":58863,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"upstreamBuild":58847,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"prId":"52733"}],"tap":{"ok":false,"name":"parallel/test-disable-proto-delete","id":221,"buffered":false,"tapError":null,"skip":false,"todo":false,"previous":null,"plan":null,"diag":{"severity":"fail","exitcode":1,"stack":"node:internal/events/slow_event_emitter:268\n    for (let i = listeners.length - 1; i >= 0; i--) {\n                           ^\n\nTypeError: Cannot read properties of null (reading 'length')\n    at SlowEventEmitter.removeAllListeners (node:internal/events/slow_event_emitter:268:28)\n    at Worker.removeAllListeners (node:internal/events/event_emitter:596:38)\n    at SlowEventEmitter.removeAllListeners (node:internal/events/slow_event_emitter:253:41)\n    at Worker.removeAllListeners (node:internal/events/event_emitter:596:38)\n    at [kOnExit] (node:internal/worker:316:10)\n    at Worker.<computed>.onexit (node:internal/worker:229:20)\n\nNode.js v23.0.0-pre"},"time":358.001,"fullname":"parallel/test-disable-proto-delete","closingTestPoint":false}},{"testName":"parallel/test-runner-output","timestamp":1714656652787,"status":"FAILED","jobName":"node-test-binary-windows-js-suites","config":"node-test-binary-windows-js-suites » 2,win2016-COMPILED_BY-vs2022-x86 #27524","buildUrl":"https://ci.nodejs.org/job/node-test-binary-windows-js-suites/RUN_SUBSET=2,nodes=win2016-COMPILED_BY-vs2022-x86/27524/","buildNumber":27524,"builtOn":"test-rackspace-win2016_vs2015-x64-2","nodeVersion":"23.0.0","commitHash":"fa7baf79faaaf6b88b9781d7f3544228b8fa1b0f","callStack":[{"upstreamBuild":62662,"upstreamProject":"node-test-commit-windows-fanned","upstreamUrl":"job/node-test-commit-windows-fanned/"},{"upstreamBuild":70431,"upstreamProject":"node-test-commit","upstreamUrl":"job/node-test-commit/"},{"upstreamBuild":58863,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"upstreamBuild":58847,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"prId":"52733"}],"tap":{"ok":false,"name":"parallel/test-runner-output","id":678,"buffered":false,"tapError":null,"skip":false,"todo":false,"previous":null,"plan":null,"diag":{"severity":"fail","exitcode":1,"stack":"TAP version 13\n# Subtest: test runner output\n    # Subtest: test-runner/output/abort.js\n    ok 1 - test-runner/output/abort.js\n      ---\n      duration_ms: 1607.3986\n      ...\n    # Subtest: test-runner/output/abort_suite.js\n    ok 2 - test-runner/output/abort_suite.js\n      ---\n      duration_ms: 1774.4193\n      ...\n    # Subtest: test-runner/output/abort_hooks.js\n    ok 3 - test-runner/output/abort_hooks.js\n      ---\n      duration_ms: 1571.5551\n      ...\n    # Subtest: test-runner/output/describe_it.js\n    ok 4 - test-runner/output/describe_it.js\n      ---\n      duration_ms: 1552.9967\n      ...\n    # Subtest: test-runner/output/describe_nested.js\n    ok 5 - test-runner/output/describe_nested.js\n      ---\n      duration_ms: 1544.7388\n      ...\n    # Subtest: test-runner/output/eval_dot.js\n    ok 6 - test-runner/output/eval_dot.js\n      ---\n      duration_ms: 1534.6809\n      ...\n    # Subtest: test-runner/output/eval_spec.js\n    ok 7 - test-runner/output/eval_spec.js\n      ---\n      duration_ms: 1517.0502\n      ...\n    # Subtest: test-runner/output/eval_tap.js\n    ok 8 - test-runner/output/eval_tap.js\n      ---\n      duration_ms: 1506.9307\n      ...\n    # Subtest: test-runner/output/hooks.js\n    ok 9 - test-runner/output/hooks.js\n      ---\n      duration_ms: 1496.5486\n      ...\n    # Subtest: test-runner/output/hooks_spec_reporter.js\n    ok 10 - test-runner/output/hooks_spec_reporter.js\n      ---\n      duration_ms: 1478.4519\n      ...\n    # Subtest: test-runner/output/skip-each-hooks.js\n    ok 11 - test-runner/output/skip-each-hooks.js\n      ---\n      duration_ms: 1470.2269\n      ...\n    # Subtest: test-runner/output/suite-skip-hooks.js\n    ok 12 - test-runner/output/suite-skip-hooks.js\n      ---\n      duration_ms: 1459.1018\n      ...\n    # Subtest: test-runner/output/timeout_in_before_each_should_not_affect_further_tests.js\n    ok 13 - test-runner/output/timeout_in_before_each_should_not_affect_further_tests.js\n      ---\n      duration_ms: 1783.2076\n      ...\n    # Subtest: test-runner/output/hooks-with-no-global-test.js\n    ok 14 - test-runner/output/hooks-with-no-global-test.js\n      ---\n      duration_ms: 1436.3604\n      ...\n    # Subtest: test-runner/output/global-hooks-with-no-tests.js\n    ok 15 - test-runner/output/global-hooks-with-no-tests.js\n      ---\n      duration_ms: 1425.0338\n      ...\n    # Subtest: test-runner/output/before-and-after-each-too-many-listeners.js\n    ok 16 - test-runner/output/before-and-after-each-too-many-listeners.js\n      ---\n      duration_ms: 1411.592\n      ...\n    # Subtest: test-runner/output/before-and-after-each-with-timeout-too-many-listeners.js\n    ok 17 - test-runner/output/before-and-after-each-with-timeout-too-many-listeners.js\n      ---\n      duration_ms: 1348.4506\n      ...\n    # Subtest: test-runner/output/force_exit.js\n    ok 18 - test-runner/output/force_exit.js\n      ---\n      duration_ms: 1327.8474\n      ...\n    # Subtest: test-runner/output/global_after_should_fail_the_test.js\n    ok 19 - test-runner/output/global_after_should_fail_the_test.js\n      ---\n      duration_ms: 1316.5979\n      ...\n    # Subtest: test-runner/output/no_refs.js\n    not ok 20 - test-runner/output/no_refs.js\n      ---\n      duration_ms: 1284.1685\n      location: 'C:\\\\workspace\\\\node-test-binary-windows-js-suites\\\\node\\\\test\\\\parallel\\\\test-runner-output.mjs:155:5'\n      failureType: 'testCodeFailure'\n      error: |-\n        Expected values to be strictly equal:\n        + actual - expected ... Lines skipped\n        \n          'TAP version 13\\n' +\n            '# Subtest: does not keep event loop alive\\n' +\n        ...\n            \"      error: 'Promise resolution is still pending but the event loop has already resolved'\\n\" +\n            \"      code: 'ERR_TEST_FAILURE'\\n\" +\n        +   '      ...\\n' +\n        +   '    1..1\\n' +\n        +   'not ok 1 - does not keep event loop alive\\n' +\n        +   '  ---\\n' +\n        +   '  duration_ms: *\\n' +\n        +   \"  location: '/test/fixtures/test-runner/output/no_refs.js:(LINE):1'\\n\" +\n        +   \"  failureType: 'cancelledByParent'\\n\" +\n        +   \"  error: 'Promise resolution is still pending but the event loop has already resolved'\\n\" +\n        +   \"  code: 'ERR_TEST_FAILURE'\\n\" +\n        -   '      stack: |-\\n' +\n        -   '        *\\n' +\n        -   '      ...\\n' +\n        -   '    1..1\\n' +\n        -   'not ok 1 - does not keep event loop alive\\n' +\n        -   '  ---\\n' +\n        -   '  duration_ms: *\\n' +\n        -   \"  location: '/test/fixtures/test-runner/output/no_refs.js:(LINE):1'\\n\" +\n        -   \"  failureType: 'cancelledByParent'\\n\" +\n        -   \"  error: 'Promise resolution is still pending but the event loop has already resolved'\\n\" +\n        -   \"  code: 'ERR_TEST_FAILURE'\\n\" +\n        -   '  stack: |-\\n' +\n        -   '    *\\n' +\n            '  ...\\n' +\n        ...\n            '# skipped 0\\n' +\n            '# todo 0\\n' +\n            '# duration_ms *\\n'\n      code: 'ERR_ASSERTION'\n      name: 'AssertionError'\n      expected: |-\n        TAP version 13\n        # Subtest: does not keep event loop alive\n            # Subtest: +does not keep event loop alive\n            not ok 1 - +does not keep event loop alive\n              ---\n              duration_ms: *\n              location: '/test/fixtures/test-runner/output/no_refs.js:(LINE):11'\n              failureType: 'cancelledByParent'\n              error: 'Promise resolution is still pending but the event loop has already resolved'\n              code: 'ERR_TEST_FAILURE'\n              stack: |-\n                *\n              ...\n            1..1\n        not ok 1 - does not keep event loop alive\n          ---\n          duration_ms: *\n          location: '/test/fixtures/test-runner/output/no_refs.js:(LINE):1'\n          failureType: 'cancelledByParent'\n          error: 'Promise resolution is still pending but the event loop has already resolved'\n          code: 'ERR_TEST_FAILURE'\n          stack: |-\n            *\n          ...\n        1..1\n        # tests 2\n        # suites 0\n        # pass 0\n        # fail 0\n        # cancelled 2\n        # skipped 0\n        # todo 0\n        # duration_ms *\n        \n      actual: |-\n        TAP version 13\n        # Subtest: does not keep event loop alive\n            # Subtest: +does not keep event loop alive\n            not ok 1 - +does not keep event loop alive\n              ---\n              duration_ms: *\n              location: '/test/fixtures/test-runner/output/no_refs.js:(LINE):11'\n              failureType: 'cancelledByParent'\n              error: 'Promise resolution is still pending but the event loop has already resolved'\n              code: 'ERR_TEST_FAILURE'\n              ...\n            1..1\n        not ok 1 - does not keep event loop alive\n          ---\n          duration_ms: *\n          location: '/test/fixtures/test-runner/output/no_refs.js:(LINE):1'\n          failureType: 'cancelledByParent'\n          error: 'Promise resolution is still pending but the event loop has already resolved'\n          code: 'ERR_TEST_FAILURE'\n          ...\n        1..1\n        # tests 2\n        # suites 0\n        # pass 0\n        # fail 0\n        # cancelled 2\n        # skipped 0\n        # todo 0\n        # duration_ms *\n        \n      operator: 'strictEqual'\n      stack: |-\n        assertSnapshot (C:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:56:12)\n        async Module.spawnAndAssert (C:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:84:3)\n        async TestContext.<anonymous> (file:///C:/workspace/node-test-binary-windows-js-suites/node/test/parallel/test-runner-output.mjs:149:5)\n        async Test.run (node:internal/test_runner/test:748:9)\n        async Promise.all (index 19)\n        async Suite.run (node:internal/test_runner/test:1106:7)\n        async Test.processPendingSubtests (node:internal/test_runner/test:461:7)\n      ...\n    # Subtest: test-runner/output/no_tests.js\n    ok 21 - test-runner/output/no_tests.js\n      ---\n      duration_ms: 1266.5159\n      ...\n    # Subtest: test-runner/output/only_tests.js\n    ok 22 - test-runner/output/only_tests.js\n      ---\n      duration_ms: 1257.1546\n      ...\n    # Subtest: test-runner/output/dot_reporter.js\n    ok 23 - test-runner/output/dot_reporter.js\n      ---\n      duration_ms: 2548.3816\n      ...\n    # Subtest: test-runner/output/junit_reporter.js\n    not ok 24 - test-runner/output/junit_reporter.js\n      ---\n      duration_ms: 2749.9372\n      location: 'C:\\\\workspace\\\\node-test-binary-windows-js-suites\\\\node\\\\test\\\\parallel\\\\test-runner-output.mjs:155:5'\n      failureType: 'testCodeFailure'\n      error: |-\n        Expected values to be strictly equal:\n        + actual - expected ... Lines skipped\n        \n          '<?xml version=\"1.0\" encoding=\"utf-8\"?>\\n' +\n            '<testsuites>\\n' +\n        ...\n            '\\t\\t</failure>\\n' +\n            '\\t</testcase>\\n' +\n        +   '\\t<testcase name=\"callback called twice\" time=\"*\" '... 11376 more characters\n        -   '\\t<testcase name=\"callback called twice\" time=\"*\" '... 11392 more characters\n      code: 'ERR_ASSERTION'\n      name: 'AssertionError'\n      expected: |-\n        <?xml version=\"1.0\" encoding=\"utf-8\"?>\n        <testsuites>\n        \t<testcase name=\"sync pass todo\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"todo\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync pass todo with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"todo\" message=\"this is a passing todo\"/>\n        \t</testcase>\n        \t<testcase name=\"sync fail todo\" time=\"*\" classname=\"test\" failure=\"thrown from sync fail todo\">\n        \t\t<skipped type=\"todo\" message=\"true\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync fail todo\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync fail todo] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync fail todo\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync fail todo with message\" time=\"*\" classname=\"test\" failure=\"thrown from sync fail todo with message\">\n        \t\t<skipped type=\"todo\" message=\"this is a failing todo\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync fail todo with message\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync fail todo with message] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync fail todo with message\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync skip pass\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip pass with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"this is skipped\"/>\n        \t</testcase>\n        \t<testcase name=\"sync pass\" time=\"*\" classname=\"test\"/>\n        \t<!-- this test should pass -->\n        \t<testcase name=\"sync throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from sync throw fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async skip pass\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"async pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from async throw fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from async throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from async throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async skip fail\" time=\"*\" classname=\"test\" failure=\"thrown from async throw fail\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from async throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from async throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async assertion fail\" time=\"*\" classname=\"test\" failure=\"Expected values to be strictly equal:true !== false\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Expected values to be strictly equal:true !== false\">\n        [Error [ERR_TEST_FAILURE]: Expected values to be strictly equal:\n        \n        true !== false\n        ] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n          \n          true !== false\n          \n              *\n              *\n              *\n              *\n              *\n              *\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: true,\n            expected: false,\n            operator: 'strictEqual'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"resolve pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"reject fail\" time=\"*\" classname=\"test\" failure=\"rejected from reject fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"rejected from reject fail\">\n        [Error [ERR_TEST_FAILURE]: rejected from reject fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: rejected from reject fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unhandled rejection - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async unhandled rejection - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate throw - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate reject - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate resolve pass\" time=\"*\" classname=\"test\"/>\n        \t<testsuite name=\"subtest sync throw fail\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"1\" failures=\"1\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"+sync throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fail\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fail\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fail\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<!-- this subtest should make its parent test fail -->\n        \t</testsuite>\n        \t<testcase name=\"sync throw non-error fail\" time=\"*\" classname=\"test\" failure=\"Symbol(thrown symbol from sync throw non-error fail)\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Symbol(thrown symbol from sync throw non-error fail)\">\n        [Error [ERR_TEST_FAILURE]: Symbol(thrown symbol from sync throw non-error fail)] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: Symbol(thrown symbol from sync throw non-error fail) }\n        \t\t</failure>\n        \t</testcase>\n        \t<testsuite name=\"level 0a\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"4\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"level 1a\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1b\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1c\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1d\" time=\"*\" classname=\"test\"/>\n        \t</testsuite>\n        \t<testsuite name=\"top level\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"2\" failures=\"1\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"+long running\" time=\"*\" classname=\"test\" failure=\"test did not finish before its parent and was cancelled\">\n        \t\t\t<failure type=\"cancelledByParent\" message=\"test did not finish before its parent and was cancelled\">\n        [Error [ERR_TEST_FAILURE]: test did not finish before its parent and was cancelled] { code: 'ERR_TEST_FAILURE', failureType: 'cancelledByParent', cause: 'test did not finish before its parent and was cancelled' }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<testsuite name=\"+short running\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"1\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t\t<testcase name=\"++short running\" time=\"*\" classname=\"test\"/>\n        \t\t</testsuite>\n        \t</testsuite>\n        \t<testcase name=\"invalid subtest - pass but subtest fails\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"sync skip option\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip option with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"this is skipped\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip option is false fail\" time=\"*\" classname=\"test\" failure=\"this should be executed\">\n        \t\t<failure type=\"testCodeFailure\" message=\"this should be executed\">\n        [Error [ERR_TEST_FAILURE]: this should be executed] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: this should be executed\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"functionOnly\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"test with only a name provided\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"test with a name and options provided\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"functionAndOptions\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"callback pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback fail\" time=\"*\" classname=\"test\" failure=\"callback failure\">\n        \t\t<failure type=\"testCodeFailure\" message=\"callback failure\">\n        [Error [ERR_TEST_FAILURE]: callback failure] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: callback failure\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback also returns a Promise\" time=\"*\" classname=\"test\" failure=\"passed a callback but also returned a Promise\">\n        \t\t<failure type=\"callbackAndPromisePresent\" message=\"passed a callback but also returned a Promise\">\n        [Error [ERR_TEST_FAILURE]: passed a callback but also returned a Promise] { code: 'ERR_TEST_FAILURE', failureType: 'callbackAndPromisePresent', cause: 'passed a callback but also returned a Promise' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback throw\" time=\"*\" classname=\"test\" failure=\"thrown from callback throw\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from callback throw\">\n        [Error [ERR_TEST_FAILURE]: thrown from callback throw] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from callback throw\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback called twice\" time=\"*\" classname=\"test\" failure=\"callback invoked multiple times\">\n        \t\t<failure type=\"multipleCallbackInvocations\" message=\"callback invoked multiple times\">\n        Error [ERR_TEST_FAILURE]: callback invoked multiple times\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'multipleCallbackInvocations',\n          cause: 'callback invoked multiple times'\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback called twice in different ticks\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback called twice in future tick\" time=\"*\" classname=\"test\" failure=\"callback invoked multiple times\">\n        \t\t<failure type=\"uncaughtException\" message=\"callback invoked multiple times\">\n        Error [ERR_TEST_FAILURE]: callback invoked multiple times\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error [ERR_TEST_FAILURE]: callback invoked multiple times\n              * {\n            code: 'ERR_TEST_FAILURE',\n            failureType: 'multipleCallbackInvocations',\n            cause: 'callback invoked multiple times'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback async throw\" time=\"*\" classname=\"test\" failure=\"thrown from callback async throw\">\n        \t\t<failure type=\"uncaughtException\" message=\"thrown from callback async throw\">\n        Error [ERR_TEST_FAILURE]: thrown from callback async throw\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error: thrown from callback async throw\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback async throw after done\" time=\"*\" classname=\"test\"/>\n        \t<testsuite name=\"only is set but not in only mode\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"4\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"running subtest 1\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"running subtest 2\" time=\"*\" classname=\"test\"/>\n        \t\t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t\t<testcase name=\"running subtest 3\" time=\"*\" classname=\"test\"/>\n        \t\t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t\t<testcase name=\"running subtest 4\" time=\"*\" classname=\"test\"/>\n        \t</testsuite>\n        \t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t<testcase name=\"custom inspect symbol fail\" time=\"*\" classname=\"test\" failure=\"customized\">\n        \t\t<failure type=\"testCodeFailure\" message=\"customized\">\n        [Error [ERR_TEST_FAILURE]: customized] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: customized }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"custom inspect symbol that throws fail\" time=\"*\" classname=\"test\" failure=\"{  foo: 1,  [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]}\">\n        \t\t<failure type=\"testCodeFailure\" message=\"{  foo: 1,  [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]}\">\n        [Error [ERR_TEST_FAILURE]: {\n          foo: 1,\n          [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]\n        }] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: { foo: 1, [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]] }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testsuite name=\"subtest sync throw fails\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"2\" failures=\"2\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"sync throw fails at first\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fails at first\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fails at first\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fails at first\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fails at first\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<testcase name=\"sync throw fails at second\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fails at second\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fails at second\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fails at second\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fails at second\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t</testsuite>\n        \t<testcase name=\"timed out async test\" time=\"*\" classname=\"test\" failure=\"test timed out after 5ms\">\n        \t\t<failure type=\"testTimeoutFailure\" message=\"test timed out after 5ms\">\n        [Error [ERR_TEST_FAILURE]: test timed out after 5ms] { code: 'ERR_TEST_FAILURE', failureType: 'testTimeoutFailure', cause: 'test timed out after 5ms' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"timed out callback test\" time=\"*\" classname=\"test\" failure=\"test timed out after 5ms\">\n        \t\t<failure type=\"testTimeoutFailure\" message=\"test timed out after 5ms\">\n        [Error [ERR_TEST_FAILURE]: test timed out after 5ms] { code: 'ERR_TEST_FAILURE', failureType: 'testTimeoutFailure', cause: 'test timed out after 5ms' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"large timeout async test is ok\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"large timeout callback test is ok\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"successful thenable\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"rejected thenable\" time=\"*\" classname=\"test\" failure=\"custom error\">\n        \t\t<failure type=\"testCodeFailure\" message=\"custom error\">\n        [Error [ERR_TEST_FAILURE]: custom error] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: 'custom error' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unfinished test with uncaughtException\" time=\"*\" classname=\"test\" failure=\"foo\">\n        \t\t<failure type=\"uncaughtException\" message=\"foo\">\n        Error [ERR_TEST_FAILURE]: foo\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error: foo\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unfinished test with unhandledRejection\" time=\"*\" classname=\"test\" failure=\"bar\">\n        \t\t<failure type=\"unhandledRejection\" message=\"bar\">\n        Error [ERR_TEST_FAILURE]: bar\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'unhandledRejection',\n          cause: Error: bar\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"assertion errors display actual and expected properly\" time=\"*\" classname=\"test\" failure=\"Expected values to be loosely deep-equal:{  bar: 1,  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  foo: 1}should loosely deep-equal{  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  circular: &lt;ref *1> {    bar: 2,    c: [Circular *1]  }}\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Expected values to be loosely deep-equal:{  bar: 1,  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  foo: 1}should loosely deep-equal{  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  circular: &lt;ref *1> {    bar: 2,    c: [Circular *1]  }}\">\n        [Error [ERR_TEST_FAILURE]: Expected values to be loosely deep-equal:\n        \n        {\n          bar: 1,\n          baz: {\n            date: 1970-01-01T00:00:00.000Z,\n            null: null,\n            number: 1,\n            string: 'Hello',\n            undefined: undefined\n          },\n          boo: [\n            1\n          ],\n          foo: 1\n        }\n        \n        should loosely deep-equal\n        \n        {\n          baz: {\n            date: 1970-01-01T00:00:00.000Z,\n            null: null,\n            number: 1,\n            string: 'Hello',\n            undefined: undefined\n          },\n          boo: [\n            1\n          ],\n          circular: &lt;ref *1> {\n            bar: 2,\n            c: [Circular *1]\n          }\n        }] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n          \n          {\n            bar: 1,\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            foo: 1\n          }\n          \n          should loosely deep-equal\n          \n          {\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            circular: &lt;ref *1> {\n              bar: 2,\n              c: [Circular *1]\n            }\n          }\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: [Object],\n            expected: [Object],\n            operator: 'deepEqual'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"invalid subtest fail\" time=\"*\" classname=\"test\" failure=\"test could not be started because its parent finished\">\n        \t\t<failure type=\"parentAlreadyFinished\" message=\"test could not be started because its parent finished\">\n        Error [ERR_TEST_FAILURE]: test could not be started because its parent finished\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'parentAlreadyFinished',\n          cause: 'test could not be started because its parent finished'\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<!-- Error: Test \"unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:72:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: Test \"async unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:76:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from async unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: A resource generated asynchronous activity after the test ended. This activity created the error \"Error: uncaught from outside of a test\" which triggered an uncaughtException event, caught by the test runner. -->\n        \t<!-- Error: Test \"immediate throw - passes but warns\" at test/fixtures/test-runner/output/output.js:80:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from immediate throw fail\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- Error: Test \"immediate reject - passes but warns\" at test/fixtures/test-runner/output/output.js:86:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from immediate reject fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: Test \"callback called twice in different ticks\" at test/fixtures/test-runner/output/output.js:251:1 generated asynchronous activity after the test ended. This activity created the error \"Error [ERR_TEST_FAILURE]: callback invoked multiple times\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- Error: Test \"callback async throw after done\" at test/fixtures/test-runner/output/output.js:269:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from callback async throw after done\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- tests 76 -->\n        \t<!-- suites 0 -->\n        \t<!-- pass 35 -->\n        \t<!-- fail 25 -->\n        \t<!-- cancelled 3 -->\n        \t<!-- skipped 9 -->\n        \t<!-- todo 4 -->\n        \t<!-- duration_ms * -->\n        </testsuites>\n        \n      actual: |-\n        <?xml version=\"1.0\" encoding=\"utf-8\"?>\n        <testsuites>\n        \t<testcase name=\"sync pass todo\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"todo\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync pass todo with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"todo\" message=\"this is a passing todo\"/>\n        \t</testcase>\n        \t<testcase name=\"sync fail todo\" time=\"*\" classname=\"test\" failure=\"thrown from sync fail todo\">\n        \t\t<skipped type=\"todo\" message=\"true\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync fail todo\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync fail todo] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync fail todo\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync fail todo with message\" time=\"*\" classname=\"test\" failure=\"thrown from sync fail todo with message\">\n        \t\t<skipped type=\"todo\" message=\"this is a failing todo\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync fail todo with message\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync fail todo with message] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync fail todo with message\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync skip pass\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip pass with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"this is skipped\"/>\n        \t</testcase>\n        \t<testcase name=\"sync pass\" time=\"*\" classname=\"test\"/>\n        \t<!-- this test should pass -->\n        \t<testcase name=\"sync throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from sync throw fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async skip pass\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"async pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from async throw fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from async throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from async throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async skip fail\" time=\"*\" classname=\"test\" failure=\"thrown from async throw fail\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from async throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from async throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async assertion fail\" time=\"*\" classname=\"test\" failure=\"Expected values to be strictly equal:true !== false\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Expected values to be strictly equal:true !== false\">\n        [Error [ERR_TEST_FAILURE]: Expected values to be strictly equal:\n        \n        true !== false\n        ] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n          \n          true !== false\n          \n              *\n              *\n              *\n              *\n              *\n              *\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: true,\n            expected: false,\n            operator: 'strictEqual'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"resolve pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"reject fail\" time=\"*\" classname=\"test\" failure=\"rejected from reject fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"rejected from reject fail\">\n        [Error [ERR_TEST_FAILURE]: rejected from reject fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: rejected from reject fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unhandled rejection - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async unhandled rejection - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate throw - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate reject - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate resolve pass\" time=\"*\" classname=\"test\"/>\n        \t<testsuite name=\"subtest sync throw fail\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"1\" failures=\"1\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"+sync throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fail\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fail\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fail\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<!-- this subtest should make its parent test fail -->\n        \t</testsuite>\n        \t<testcase name=\"sync throw non-error fail\" time=\"*\" classname=\"test\" failure=\"Symbol(thrown symbol from sync throw non-error fail)\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Symbol(thrown symbol from sync throw non-error fail)\">\n        [Error [ERR_TEST_FAILURE]: Symbol(thrown symbol from sync throw non-error fail)] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: Symbol(thrown symbol from sync throw non-error fail) }\n        \t\t</failure>\n        \t</testcase>\n        \t<testsuite name=\"level 0a\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"4\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"level 1a\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1b\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1c\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1d\" time=\"*\" classname=\"test\"/>\n        \t</testsuite>\n        \t<testsuite name=\"top level\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"2\" failures=\"1\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"+long running\" time=\"*\" classname=\"test\" failure=\"test did not finish before its parent and was cancelled\">\n        \t\t\t<failure type=\"cancelledByParent\" message=\"test did not finish before its parent and was cancelled\">\n        [Error [ERR_TEST_FAILURE]: test did not finish before its parent and was cancelled] { code: 'ERR_TEST_FAILURE', failureType: 'cancelledByParent', cause: 'test did not finish before its parent and was cancelled' }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<testsuite name=\"+short running\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"1\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t\t<testcase name=\"++short running\" time=\"*\" classname=\"test\"/>\n        \t\t</testsuite>\n        \t</testsuite>\n        \t<testcase name=\"invalid subtest - pass but subtest fails\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"sync skip option\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip option with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"this is skipped\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip option is false fail\" time=\"*\" classname=\"test\" failure=\"this should be executed\">\n        \t\t<failure type=\"testCodeFailure\" message=\"this should be executed\">\n        [Error [ERR_TEST_FAILURE]: this should be executed] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: this should be executed\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"functionOnly\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"test with only a name provided\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"test with a name and options provided\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"functionAndOptions\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"callback pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback fail\" time=\"*\" classname=\"test\" failure=\"callback failure\">\n        \t\t<failure type=\"testCodeFailure\" message=\"callback failure\">\n        [Error [ERR_TEST_FAILURE]: callback failure] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: callback failure\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback also returns a Promise\" time=\"*\" classname=\"test\" failure=\"passed a callback but also returned a Promise\">\n        \t\t<failure type=\"callbackAndPromisePresent\" message=\"passed a callback but also returned a Promise\">\n        [Error [ERR_TEST_FAILURE]: passed a callback but also returned a Promise] { code: 'ERR_TEST_FAILURE', failureType: 'callbackAndPromisePresent', cause: 'passed a callback but also returned a Promise' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback throw\" time=\"*\" classname=\"test\" failure=\"thrown from callback throw\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from callback throw\">\n        [Error [ERR_TEST_FAILURE]: thrown from callback throw] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from callback throw\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback called twice\" time=\"*\" classname=\"test\" failure=\"callback invoked multiple times\">\n        \t\t<failure type=\"multipleCallbackInvocations\" message=\"callback invoked multiple times\">\n        Error [ERR_TEST_FAILURE]: callback invoked multiple times\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'multipleCallbackInvocations',\n          cause: 'callback invoked multiple times'\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback called twice in different ticks\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback called twice in future tick\" time=\"*\" classname=\"test\" failure=\"callback invoked multiple times\">\n        \t\t<failure type=\"uncaughtException\" message=\"callback invoked multiple times\">\n        [Error [ERR_TEST_FAILURE]: callback invoked multiple times] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error [ERR_TEST_FAILURE]: callback invoked multiple times\n              * {\n            code: 'ERR_TEST_FAILURE',\n            failureType: 'multipleCallbackInvocations',\n            cause: 'callback invoked multiple times'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback async throw\" time=\"*\" classname=\"test\" failure=\"thrown from callback async throw\">\n        \t\t<failure type=\"uncaughtException\" message=\"thrown from callback async throw\">\n        [Error [ERR_TEST_FAILURE]: thrown from callback async throw] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error: thrown from callback async throw\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback async throw after done\" time=\"*\" classname=\"test\"/>\n        \t<testsuite name=\"only is set but not in only mode\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"4\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"running subtest 1\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"running subtest 2\" time=\"*\" classname=\"test\"/>\n        \t\t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t\t<testcase name=\"running subtest 3\" time=\"*\" classname=\"test\"/>\n        \t\t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t\t<testcase name=\"running subtest 4\" time=\"*\" classname=\"test\"/>\n        \t</testsuite>\n        \t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t<testcase name=\"custom inspect symbol fail\" time=\"*\" classname=\"test\" failure=\"customized\">\n        \t\t<failure type=\"testCodeFailure\" message=\"customized\">\n        [Error [ERR_TEST_FAILURE]: customized] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: customized }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"custom inspect symbol that throws fail\" time=\"*\" classname=\"test\" failure=\"{  foo: 1,  [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]}\">\n        \t\t<failure type=\"testCodeFailure\" message=\"{  foo: 1,  [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]}\">\n        [Error [ERR_TEST_FAILURE]: {\n          foo: 1,\n          [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]\n        }] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: { foo: 1, [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]] }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testsuite name=\"subtest sync throw fails\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"2\" failures=\"2\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"sync throw fails at first\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fails at first\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fails at first\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fails at first\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fails at first\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<testcase name=\"sync throw fails at second\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fails at second\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fails at second\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fails at second\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fails at second\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t</testsuite>\n        \t<testcase name=\"timed out async test\" time=\"*\" classname=\"test\" failure=\"test timed out after 5ms\">\n        \t\t<failure type=\"testTimeoutFailure\" message=\"test timed out after 5ms\">\n        [Error [ERR_TEST_FAILURE]: test timed out after 5ms] { code: 'ERR_TEST_FAILURE', failureType: 'testTimeoutFailure', cause: 'test timed out after 5ms' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"timed out callback test\" time=\"*\" classname=\"test\" failure=\"test timed out after 5ms\">\n        \t\t<failure type=\"testTimeoutFailure\" message=\"test timed out after 5ms\">\n        [Error [ERR_TEST_FAILURE]: test timed out after 5ms] { code: 'ERR_TEST_FAILURE', failureType: 'testTimeoutFailure', cause: 'test timed out after 5ms' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"large timeout async test is ok\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"large timeout callback test is ok\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"successful thenable\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"rejected thenable\" time=\"*\" classname=\"test\" failure=\"custom error\">\n        \t\t<failure type=\"testCodeFailure\" message=\"custom error\">\n        [Error [ERR_TEST_FAILURE]: custom error] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: 'custom error' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unfinished test with uncaughtException\" time=\"*\" classname=\"test\" failure=\"foo\">\n        \t\t<failure type=\"uncaughtException\" message=\"foo\">\n        [Error [ERR_TEST_FAILURE]: foo] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error: foo\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unfinished test with unhandledRejection\" time=\"*\" classname=\"test\" failure=\"bar\">\n        \t\t<failure type=\"unhandledRejection\" message=\"bar\">\n        [Error [ERR_TEST_FAILURE]: bar] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'unhandledRejection',\n          cause: Error: bar\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"assertion errors display actual and expected properly\" time=\"*\" classname=\"test\" failure=\"Expected values to be loosely deep-equal:{  bar: 1,  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  foo: 1}should loosely deep-equal{  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  circular: &lt;ref *1> {    bar: 2,    c: [Circular *1]  }}\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Expected values to be loosely deep-equal:{  bar: 1,  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  foo: 1}should loosely deep-equal{  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  circular: &lt;ref *1> {    bar: 2,    c: [Circular *1]  }}\">\n        [Error [ERR_TEST_FAILURE]: Expected values to be loosely deep-equal:\n        \n        {\n          bar: 1,\n          baz: {\n            date: 1970-01-01T00:00:00.000Z,\n            null: null,\n            number: 1,\n            string: 'Hello',\n            undefined: undefined\n          },\n          boo: [\n            1\n          ],\n          foo: 1\n        }\n        \n        should loosely deep-equal\n        \n        {\n          baz: {\n            date: 1970-01-01T00:00:00.000Z,\n            null: null,\n            number: 1,\n            string: 'Hello',\n            undefined: undefined\n          },\n          boo: [\n            1\n          ],\n          circular: &lt;ref *1> {\n            bar: 2,\n            c: [Circular *1]\n          }\n        }] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n          \n          {\n            bar: 1,\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            foo: 1\n          }\n          \n          should loosely deep-equal\n          \n          {\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            circular: &lt;ref *1> {\n              bar: 2,\n              c: [Circular *1]\n            }\n          }\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: [Object],\n            expected: [Object],\n            operator: 'deepEqual'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"invalid subtest fail\" time=\"*\" classname=\"test\" failure=\"test could not be started because its parent finished\">\n        \t\t<failure type=\"parentAlreadyFinished\" message=\"test could not be started because its parent finished\">\n        Error [ERR_TEST_FAILURE]: test could not be started because its parent finished\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'parentAlreadyFinished',\n          cause: 'test could not be started because its parent finished'\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<!-- Error: Test \"unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:72:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: Test \"async unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:76:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from async unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: A resource generated asynchronous activity after the test ended. This activity created the error \"Error: uncaught from outside of a test\" which triggered an uncaughtException event, caught by the test runner. -->\n        \t<!-- Error: Test \"immediate throw - passes but warns\" at test/fixtures/test-runner/output/output.js:80:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from immediate throw fail\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- Error: Test \"immediate reject - passes but warns\" at test/fixtures/test-runner/output/output.js:86:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from immediate reject fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: Test \"callback called twice in different ticks\" at test/fixtures/test-runner/output/output.js:251:1 generated asynchronous activity after the test ended. This activity created the error \"Error [ERR_TEST_FAILURE]: callback invoked multiple times\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- Error: Test \"callback async throw after done\" at test/fixtures/test-runner/output/output.js:269:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from callback async throw after done\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- tests 76 -->\n        \t<!-- suites 0 -->\n        \t<!-- pass 35 -->\n        \t<!-- fail 25 -->\n        \t<!-- cancelled 3 -->\n        \t<!-- skipped 9 -->\n        \t<!-- todo 4 -->\n        \t<!-- duration_ms * -->\n        </testsuites>\n        \n      operator: 'strictEqual'\n      stack: |-\n        assertSnapshot (C:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:56:12)\n        async Module.spawnAndAssert (C:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:84:3)\n        async TestContext.<anonymous> (file:///C:/workspace/node-test-binary-windows-js-suites/node/test/parallel/test-runner-output.mjs:149:5)\n        async Test.run (node:internal/test_runner/test:748:9)\n        async Promise.all (index 23)\n        async Suite.run (node:internal/test_runner/test:1106:7)\n        async Test.processPendingSubtests (node:internal/test_runner/test:461:7)\n      ...\n    # Subtest: test-runner/output/spec_reporter_successful.js\n    ok 25 - test-runner/output/spec_reporter_successful.js\n      ---\n      duration_ms: 1094.8615\n      ...\n    # Subtest: test-runner/output/spec_reporter.js\n    ok 26 - test-runner/output/spec_reporter.js\n      ---\n      duration_ms: 2648.4345\n      ...\n    # Subtest: test-runner/output/spec_reporter_cli.js\n    ok 27 - test-runner/output/spec_reporter_cli.js\n      ---\n      duration_ms: 3190.1721\n      ...\n    # Subtest: test-runner/output/source_mapped_locations.mjs\n    ok 28 - test-runner/output/source_mapped_locations.mjs\n      ---\n      duration_ms: 1180.6979\n      ...\n    # Subtest: test-runner/output/lcov_reporter.js\n    ok 29 - test-runner/output/lcov_reporter.js\n      ---\n      duration_ms: 3075.9951\n      ...\n    # Subtest: test-runner/output/output.js\n    ok 30 - test-runner/output/output.js\n      ---\n      duration_ms: 1270.984\n      ...\n    # Subtest: test-runner/output/output_cli.js\n    ok 31 - test-runner/output/output_cli.js\n      ---\n      duration_ms: 3735.4527\n      ...\n    # Subtest: test-runner/output/name_and_skip_patterns.js\n    ok 32 - test-runner/output/name_and_skip_patterns.js\n      ---\n      duration_ms: 900.4951\n      ...\n    # Subtest: test-runner/output/name_pattern.js\n    ok 33 - test-runner/output/name_pattern.js\n      ---\n      duration_ms: 943.5045\n      ...\n    # Subtest: test-runner/output/name_pattern_with_only.js\n    ok 34 - test-runner/output/name_pattern_with_only.js\n      ---\n      duration_ms: 1059.5446\n      ...\n    # Subtest: test-runner/output/skip_pattern.js\n    ok 35 - test-runner/output/skip_pattern.js\n      ---\n      duration_ms: 1275.8029\n      ...\n    # Subtest: test-runner/output/unfinished-suite-async-error.js\n    ok 36 - test-runner/output/unfinished-suite-async-error.js\n      ---\n      duration_ms: 1086.8876\n      ...\n    # Subtest: test-runner/output/unresolved_promise.js\n    not ok 37 - test-runner/output/unresolved_promise.js\n      ---\n      duration_ms: 1037.9664\n      location: 'C:\\\\workspace\\\\node-test-binary-windows-js-suites\\\\node\\\\test\\\\parallel\\\\test-runner-output.mjs:155:5'\n      failureType: 'testCodeFailure'\n      error: |-\n        Expected values to be strictly equal:\n        + actual - expected ... Lines skipped\n        \n          'TAP version 13\\n' +\n            '# Subtest: pass\\n' +\n        ...\n            \"  error: 'Promise resolution is still pending but the event loop has already resolved'\\n\" +\n            \"  code: 'ERR_TEST_FAILURE'\\n\" +\n        +   '  ...\\n' +\n        +   '# Subtest: fail\\n' +\n        +   'not ok 3 - fail\\n' +\n        +   '  ---\\n' +\n        +   '  duration_ms: *\\n' +\n        +   \"  location: '/test/fixtures/test-runner/output/unresolved_promise.js:(LINE):1'\\n\" +\n        +   \"  failureType: 'cancelledByParent'\\n\" +\n        +   \"  error: 'Promise resolution is still pending but the event loop has already resolved'\\n\" +\n        +   \"  code: 'ERR_TEST_FAILURE'\\n\" +\n        -   '  stack: |-\\n' +\n        -   '    *\\n' +\n        -   '  ...\\n' +\n        -   '# Subtest: fail\\n' +\n        -   'not ok 3 - fail\\n' +\n        -   '  ---\\n' +\n        -   '  duration_ms: *\\n' +\n        -   \"  location: '/test/fixtures/test-runner/output/unresolved_promise.js:(LINE):1'\\n\" +\n        -   \"  failureType: 'cancelledByParent'\\n\" +\n        -   \"  error: 'Promise resolution is still pending but the event loop has already resolved'\\n\" +\n        -   \"  code: 'ERR_TEST_FAILURE'\\n\" +\n        -   '  stack: |-\\n' +\n        -   '    *\\n' +\n            '  ...\\n' +\n        ...\n            '# skipped 0\\n' +\n            '# todo 0\\n' +\n            '# duration_ms *\\n'\n      code: 'ERR_ASSERTION'\n      name: 'AssertionError'\n      expected: |-\n        TAP version 13\n        # Subtest: pass\n        ok 1 - pass\n          ---\n          duration_ms: *\n          ...\n        # Subtest: never resolving promise\n        not ok 2 - never resolving promise\n          ---\n          duration_ms: *\n          location: '/test/fixtures/test-runner/output/unresolved_promise.js:(LINE):1'\n          failureType: 'cancelledByParent'\n          error: 'Promise resolution is still pending but the event loop has already resolved'\n          code: 'ERR_TEST_FAILURE'\n          stack: |-\n            *\n          ...\n        # Subtest: fail\n        not ok 3 - fail\n          ---\n          duration_ms: *\n          location: '/test/fixtures/test-runner/output/unresolved_promise.js:(LINE):1'\n          failureType: 'cancelledByParent'\n          error: 'Promise resolution is still pending but the event loop has already resolved'\n          code: 'ERR_TEST_FAILURE'\n          stack: |-\n            *\n          ...\n        1..3\n        # tests 3\n        # suites 0\n        # pass 1\n        # fail 0\n        # cancelled 2\n        # skipped 0\n        # todo 0\n        # duration_ms *\n        \n      actual: |-\n        TAP version 13\n        # Subtest: pass\n        ok 1 - pass\n          ---\n          duration_ms: *\n          ...\n        # Subtest: never resolving promise\n        not ok 2 - never resolving promise\n          ---\n          duration_ms: *\n          location: '/test/fixtures/test-runner/output/unresolved_promise.js:(LINE):1'\n          failureType: 'cancelledByParent'\n          error: 'Promise resolution is still pending but the event loop has already resolved'\n          code: 'ERR_TEST_FAILURE'\n          ...\n        # Subtest: fail\n        not ok 3 - fail\n          ---\n          duration_ms: *\n          location: '/test/fixtures/test-runner/output/unresolved_promise.js:(LINE):1'\n          failureType: 'cancelledByParent'\n          error: 'Promise resolution is still pending but the event loop has already resolved'\n          code: 'ERR_TEST_FAILURE'\n          ...\n        1..3\n        # tests 3\n        # suites 0\n        # pass 1\n        # fail 0\n        # cancelled 2\n        # skipped 0\n        # todo 0\n        # duration_ms *\n        \n      operator: 'strictEqual'\n      stack: |-\n        assertSnapshot (C:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:56:12)\n        async Module.spawnAndAssert (C:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:84:3)\n        async TestContext.<anonymous> (file:///C:/workspace/node-test-binary-windows-js-suites/node/test/parallel/test-runner-output.mjs:149:5)\n        async Test.run (node:internal/test_runner/test:748:9)\n        async Promise.all (index 36)\n        async Suite.run (node:internal/test_runner/test:1106:7)\n        async Test.processPendingSubtests (node:internal/test_runner/test:461:7)\n      ...\n    # Subtest: test-runner/output/default_output.js\n        # Subtest: <anonymous>\n        ok 1 - <anonymous> # SKIP Skipping pseudo-tty tests, as pseudo terminals are not available on Windows.\n          ---\n          duration_ms: 377.5003\n          ...\n        1..1\n    ok 38 - test-runner/output/default_output.js\n      ---\n      duration_ms: 378.727\n      ...\n    # Subtest: test-runner/output/arbitrary-output.js\n    ok 39 - test-runner/output/arbitrary-output.js\n      ---\n      duration_ms: 1584.3349\n      ...\n    # Subtest: test-runner/output/async-test-scheduling.mjs\n    ok 40 - test-runner/output/async-test-scheduling.mjs\n      ---\n      duration_ms: 1830.6376\n      ...\n    # Subtest: test-runner/output/arbitrary-output-colored.js\n        # Subtest: <anonymous>\n        ok 1 - <anonymous> # SKIP Skipping pseudo-tty tests, as pseudo terminals are not available on Windows.\n          ---\n          duration_ms: 113.6361\n          ...\n        1..1\n    ok 41 - test-runner/output/arbitrary-output-colored.js\n      ---\n      duration_ms: 114.4537\n      ...\n    # Subtest: test-runner/output/dot_output_custom_columns.js\n        # Subtest: <anonymous>\n        ok 1 - <anonymous> # SKIP Skipping pseudo-tty tests, as pseudo terminals are not available on Windows.\n          ---\n          duration_ms: 113.4502\n          ...\n        1..1\n    ok 42 - test-runner/output/dot_output_custom_columns.js\n      ---\n      duration_ms: 114.3023\n      ...\n    # Subtest: test-runner/output/tap_escape.js\n    ok 43 - test-runner/output/tap_escape.js\n      ---\n      duration_ms: 1293.535\n      ...\n    # Subtest: test-runner/output/coverage_failure.js\n    ok 44 - test-runner/output/coverage_failure.js\n      ---\n      duration_ms: 1305.8283\n      ...\n    1..44\nnot ok 1 - test runner output\n  ---\n  duration_ms: 4438.3848\n  type: 'suite'\n  location: 'C:\\\\workspace\\\\node-test-binary-windows-js-suites\\\\node\\\\test\\\\parallel\\\\test-runner-output.mjs:153:1'\n  failureType: 'subtestsFailed'\n  error: '3 subtests failed'\n  code: 'ERR_TEST_FAILURE'\n  ...\n1..1\n# tests 47\n# suites 1\n# pass 41\n# fail 3\n# cancelled 0\n# skipped 3\n# todo 0\n# duration_ms 4464.3928"},"time":5070.08,"fullname":"parallel/test-runner-output","closingTestPoint":false}},{"testName":"parallel/test-disable-proto-throw","timestamp":1714656652787,"status":"REGRESSION","jobName":"node-test-binary-windows-js-suites","config":"node-test-binary-windows-js-suites » 3,win2019-COMPILED_BY-vs2022 #27524","buildUrl":"https://ci.nodejs.org/job/node-test-binary-windows-js-suites/RUN_SUBSET=3,nodes=win2019-COMPILED_BY-vs2022/27524/","buildNumber":27524,"builtOn":"test-rackspace-win2019_vs2019-x64-3","nodeVersion":"23.0.0","commitHash":"fa7baf79faaaf6b88b9781d7f3544228b8fa1b0f","callStack":[{"upstreamBuild":62662,"upstreamProject":"node-test-commit-windows-fanned","upstreamUrl":"job/node-test-commit-windows-fanned/"},{"upstreamBuild":70431,"upstreamProject":"node-test-commit","upstreamUrl":"job/node-test-commit/"},{"upstreamBuild":58863,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"upstreamBuild":58847,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"prId":"52733"}],"tap":{"ok":false,"name":"parallel/test-disable-proto-throw","id":221,"buffered":false,"tapError":null,"skip":false,"todo":false,"previous":null,"plan":null,"diag":{"severity":"fail","exitcode":1,"stack":"node:internal/events/slow_event_emitter:37\n  fastEventEmitter._events.__proto__ = null;\n                                     ^\n\nError: Accessing Object.prototype.__proto__ has been disallowed with --disable-proto=throw\n    at Function.fromFastEventEmitter (node:internal/events/slow_event_emitter:37:38)\n    at EventEmitter.<computed> (node:internal/events/event_emitter:413:36)\n    at ReadableWorkerStdio.addListener (node:internal/events/event_emitter:484:47)\n    at Readable.on (node:internal/streams/readable:1130:35)\n    at ReadableWorkerStdio.once (node:internal/events/event_emitter:549:8)\n    at Readable.pipe (node:internal/streams/readable:935:9)\n    at pipeWithoutWarning (node:internal/worker:481:10)\n    at new Worker (node:internal/worker:244:7)\n    at Object.<anonymous> (C:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\parallel\\test-disable-proto-throw.js:41:3)\n    at Module._compile (node:internal/modules/cjs/loader:1480:14) {\n  code: 'ERR_PROTO_ACCESS'\n}\n\nNode.js v23.0.0-pre"},"time":354.992,"fullname":"parallel/test-disable-proto-throw","closingTestPoint":false}},{"testName":"parallel/test-assert-builtins-not-read-from-filesystem","timestamp":1714656652787,"status":"REGRESSION","jobName":"node-test-binary-windows-js-suites","config":"node-test-binary-windows-js-suites » 2,win11-COMPILED_BY-vs2022 #27524","buildUrl":"https://ci.nodejs.org/job/node-test-binary-windows-js-suites/RUN_SUBSET=2,nodes=win11-COMPILED_BY-vs2022/27524/","buildNumber":27524,"builtOn":"test-azure_msft-win11_vs2022-x64-2","nodeVersion":"23.0.0","commitHash":"fa7baf79faaaf6b88b9781d7f3544228b8fa1b0f","callStack":[{"upstreamBuild":62662,"upstreamProject":"node-test-commit-windows-fanned","upstreamUrl":"job/node-test-commit-windows-fanned/"},{"upstreamBuild":70431,"upstreamProject":"node-test-commit","upstreamUrl":"job/node-test-commit/"},{"upstreamBuild":58863,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"upstreamBuild":58847,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"prId":"52733"}],"tap":{"ok":false,"name":"parallel/test-assert-builtins-not-read-from-filesystem","id":70,"buffered":false,"tapError":null,"skip":false,"todo":false,"previous":null,"plan":null,"diag":{"severity":"fail","exitcode":1,"stack":"node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Exit code: 1\n,,node:fs:2348\n\n    return binding.writeFileUtf8(\n\n                   ^\n\n\n\nError: ENOENT: no such file or directory, open 'c:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\.tmp.68\\node:internal\\events\\fast_event_emitter'\n\n    at writeFileSync (node:fs:2348:20)\n\n    at Object.<anonymous> (c:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\parallel\\test-assert-builtins-not-read-from-filesystem.js:41:3)\n\n    at Module._compile (node:internal/modules/cjs/loader:1480:14)\n\n    at Module._extensions..js (node:internal/modules/cjs/loader:1564:10)\n\n    at Module.load (node:internal/modules/cjs/loader:1287:32)\n\n    at Module._load (node:internal/modules/cjs/loader:1103:12)\n\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:168:12)\n\n    at node:internal/main/run_main_module:30:49 {\n\n  errno: -4058,\n\n  code: 'ENOENT',\n\n  syscall: 'open',\n\n  path: 'c:\\\\workspace\\\\node-test-binary-windows-js-suites\\\\node\\\\test\\\\.tmp.68\\\\node:internal\\\\events\\\\fast_event_emitter'\n\n}\n\n\n\nNode.js v23.0.0-pre\n\n\n    at Object.<anonymous> (c:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\parallel\\test-assert-builtins-not-read-from-filesystem.js:31:12)\n    at Module._compile (node:internal/modules/cjs/loader:1480:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1564:10)\n    at Module.load (node:internal/modules/cjs/loader:1287:32)\n    at Module._load (node:internal/modules/cjs/loader:1103:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:168:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: false,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 0,\n  operator: 'strictEqual'\n}\n\nNode.js v23.0.0-pre"},"time":410.003,"fullname":"parallel/test-assert-builtins-not-read-from-filesystem","closingTestPoint":false}},{"testName":"parallel/test-disable-proto-delete","timestamp":1714656652787,"status":"REGRESSION","jobName":"node-test-binary-windows-js-suites","config":"node-test-binary-windows-js-suites » 2,win11-COMPILED_BY-vs2022 #27524","buildUrl":"https://ci.nodejs.org/job/node-test-binary-windows-js-suites/RUN_SUBSET=2,nodes=win11-COMPILED_BY-vs2022/27524/","buildNumber":27524,"builtOn":"test-azure_msft-win11_vs2022-x64-2","nodeVersion":"23.0.0","commitHash":"fa7baf79faaaf6b88b9781d7f3544228b8fa1b0f","callStack":[{"upstreamBuild":62662,"upstreamProject":"node-test-commit-windows-fanned","upstreamUrl":"job/node-test-commit-windows-fanned/"},{"upstreamBuild":70431,"upstreamProject":"node-test-commit","upstreamUrl":"job/node-test-commit/"},{"upstreamBuild":58863,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"upstreamBuild":58847,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"prId":"52733"}],"tap":{"ok":false,"name":"parallel/test-disable-proto-delete","id":223,"buffered":false,"tapError":null,"skip":false,"todo":false,"previous":null,"plan":null,"diag":{"severity":"fail","exitcode":1,"stack":"node:internal/events/slow_event_emitter:268\n    for (let i = listeners.length - 1; i >= 0; i--) {\n                           ^\n\nTypeError: Cannot read properties of null (reading 'length')\n    at SlowEventEmitter.removeAllListeners (node:internal/events/slow_event_emitter:268:28)\n    at Worker.removeAllListeners (node:internal/events/event_emitter:596:38)\n    at SlowEventEmitter.removeAllListeners (node:internal/events/slow_event_emitter:253:41)\n    at Worker.removeAllListeners (node:internal/events/event_emitter:596:38)\n    at [kOnExit] (node:internal/worker:316:10)\n    at Worker.<computed>.onexit (node:internal/worker:229:20)\n\nNode.js v23.0.0-pre"},"time":231,"fullname":"parallel/test-disable-proto-delete","closingTestPoint":false}},{"testName":"parallel/test-runner-output","timestamp":1714656652787,"status":"FAILED","jobName":"node-test-binary-windows-js-suites","config":"node-test-binary-windows-js-suites » 2,win11-COMPILED_BY-vs2022 #27524","buildUrl":"https://ci.nodejs.org/job/node-test-binary-windows-js-suites/RUN_SUBSET=2,nodes=win11-COMPILED_BY-vs2022/27524/","buildNumber":27524,"builtOn":"test-azure_msft-win11_vs2022-x64-2","nodeVersion":"23.0.0","commitHash":"fa7baf79faaaf6b88b9781d7f3544228b8fa1b0f","callStack":[{"upstreamBuild":62662,"upstreamProject":"node-test-commit-windows-fanned","upstreamUrl":"job/node-test-commit-windows-fanned/"},{"upstreamBuild":70431,"upstreamProject":"node-test-commit","upstreamUrl":"job/node-test-commit/"},{"upstreamBuild":58863,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"upstreamBuild":58847,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"prId":"52733"}],"tap":{"ok":false,"name":"parallel/test-runner-output","id":671,"buffered":false,"tapError":null,"skip":false,"todo":false,"previous":null,"plan":null,"diag":{"severity":"fail","exitcode":1,"stack":"TAP version 13\n# Subtest: test runner output\n    # Subtest: test-runner/output/abort.js\n    ok 1 - test-runner/output/abort.js\n      ---\n      duration_ms: 1594.6208\n      ...\n    # Subtest: test-runner/output/abort_suite.js\n    ok 2 - test-runner/output/abort_suite.js\n      ---\n      duration_ms: 1583.4698\n      ...\n    # Subtest: test-runner/output/abort_hooks.js\n    ok 3 - test-runner/output/abort_hooks.js\n      ---\n      duration_ms: 511.5528\n      ...\n    # Subtest: test-runner/output/describe_it.js\n    ok 4 - test-runner/output/describe_it.js\n      ---\n      duration_ms: 1129.4805\n      ...\n    # Subtest: test-runner/output/describe_nested.js\n    ok 5 - test-runner/output/describe_nested.js\n      ---\n      duration_ms: 796.6778\n      ...\n    # Subtest: test-runner/output/eval_dot.js\n    ok 6 - test-runner/output/eval_dot.js\n      ---\n      duration_ms: 788.3651\n      ...\n    # Subtest: test-runner/output/eval_spec.js\n    ok 7 - test-runner/output/eval_spec.js\n      ---\n      duration_ms: 922.2942\n      ...\n    # Subtest: test-runner/output/eval_tap.js\n    ok 8 - test-runner/output/eval_tap.js\n      ---\n      duration_ms: 907.8191\n      ...\n    # Subtest: test-runner/output/hooks.js\n    ok 9 - test-runner/output/hooks.js\n      ---\n      duration_ms: 1200.147\n      ...\n    # Subtest: test-runner/output/hooks_spec_reporter.js\n    ok 10 - test-runner/output/hooks_spec_reporter.js\n      ---\n      duration_ms: 2052.7051\n      ...\n    # Subtest: test-runner/output/skip-each-hooks.js\n    ok 11 - test-runner/output/skip-each-hooks.js\n      ---\n      duration_ms: 1054.2102\n      ...\n    # Subtest: test-runner/output/suite-skip-hooks.js\n    ok 12 - test-runner/output/suite-skip-hooks.js\n      ---\n      duration_ms: 876.9111\n      ...\n    # Subtest: test-runner/output/timeout_in_before_each_should_not_affect_further_tests.js\n    ok 13 - test-runner/output/timeout_in_before_each_should_not_affect_further_tests.js\n      ---\n      duration_ms: 2042.6214\n      ...\n    # Subtest: test-runner/output/hooks-with-no-global-test.js\n    ok 14 - test-runner/output/hooks-with-no-global-test.js\n      ---\n      duration_ms: 761.613\n      ...\n    # Subtest: test-runner/output/global-hooks-with-no-tests.js\n    ok 15 - test-runner/output/global-hooks-with-no-tests.js\n      ---\n      duration_ms: 1085.8005\n      ...\n    # Subtest: test-runner/output/before-and-after-each-too-many-listeners.js\n    ok 16 - test-runner/output/before-and-after-each-too-many-listeners.js\n      ---\n      duration_ms: 944.2821\n      ...\n    # Subtest: test-runner/output/before-and-after-each-with-timeout-too-many-listeners.js\n    ok 17 - test-runner/output/before-and-after-each-with-timeout-too-many-listeners.js\n      ---\n      duration_ms: 828.6046\n      ...\n    # Subtest: test-runner/output/force_exit.js\n    ok 18 - test-runner/output/force_exit.js\n      ---\n      duration_ms: 819.3246\n      ...\n    # Subtest: test-runner/output/global_after_should_fail_the_test.js\n    ok 19 - test-runner/output/global_after_should_fail_the_test.js\n      ---\n      duration_ms: 984.4681\n      ...\n    # Subtest: test-runner/output/no_refs.js\n    not ok 20 - test-runner/output/no_refs.js\n      ---\n      duration_ms: 903.7839\n      location: 'c:\\\\workspace\\\\node-test-binary-windows-js-suites\\\\node\\\\test\\\\parallel\\\\test-runner-output.mjs:155:5'\n      failureType: 'testCodeFailure'\n      error: |-\n        Expected values to be strictly equal:\n        + actual - expected ... Lines skipped\n        \n          'TAP version 13\\n' +\n            '# Subtest: does not keep event loop alive\\n' +\n        ...\n            \"      error: 'Promise resolution is still pending but the event loop has already resolved'\\n\" +\n            \"      code: 'ERR_TEST_FAILURE'\\n\" +\n        +   '      ...\\n' +\n        +   '    1..1\\n' +\n        +   'not ok 1 - does not keep event loop alive\\n' +\n        +   '  ---\\n' +\n        +   '  duration_ms: *\\n' +\n        +   \"  location: '/test/fixtures/test-runner/output/no_refs.js:(LINE):1'\\n\" +\n        +   \"  failureType: 'cancelledByParent'\\n\" +\n        +   \"  error: 'Promise resolution is still pending but the event loop has already resolved'\\n\" +\n        +   \"  code: 'ERR_TEST_FAILURE'\\n\" +\n        -   '      stack: |-\\n' +\n        -   '        *\\n' +\n        -   '      ...\\n' +\n        -   '    1..1\\n' +\n        -   'not ok 1 - does not keep event loop alive\\n' +\n        -   '  ---\\n' +\n        -   '  duration_ms: *\\n' +\n        -   \"  location: '/test/fixtures/test-runner/output/no_refs.js:(LINE):1'\\n\" +\n        -   \"  failureType: 'cancelledByParent'\\n\" +\n        -   \"  error: 'Promise resolution is still pending but the event loop has already resolved'\\n\" +\n        -   \"  code: 'ERR_TEST_FAILURE'\\n\" +\n        -   '  stack: |-\\n' +\n        -   '    *\\n' +\n            '  ...\\n' +\n        ...\n            '# skipped 0\\n' +\n            '# todo 0\\n' +\n            '# duration_ms *\\n'\n      code: 'ERR_ASSERTION'\n      name: 'AssertionError'\n      expected: |-\n        TAP version 13\n        # Subtest: does not keep event loop alive\n            # Subtest: +does not keep event loop alive\n            not ok 1 - +does not keep event loop alive\n              ---\n              duration_ms: *\n              location: '/test/fixtures/test-runner/output/no_refs.js:(LINE):11'\n              failureType: 'cancelledByParent'\n              error: 'Promise resolution is still pending but the event loop has already resolved'\n              code: 'ERR_TEST_FAILURE'\n              stack: |-\n                *\n              ...\n            1..1\n        not ok 1 - does not keep event loop alive\n          ---\n          duration_ms: *\n          location: '/test/fixtures/test-runner/output/no_refs.js:(LINE):1'\n          failureType: 'cancelledByParent'\n          error: 'Promise resolution is still pending but the event loop has already resolved'\n          code: 'ERR_TEST_FAILURE'\n          stack: |-\n            *\n          ...\n        1..1\n        # tests 2\n        # suites 0\n        # pass 0\n        # fail 0\n        # cancelled 2\n        # skipped 0\n        # todo 0\n        # duration_ms *\n        \n      actual: |-\n        TAP version 13\n        # Subtest: does not keep event loop alive\n            # Subtest: +does not keep event loop alive\n            not ok 1 - +does not keep event loop alive\n              ---\n              duration_ms: *\n              location: '/test/fixtures/test-runner/output/no_refs.js:(LINE):11'\n              failureType: 'cancelledByParent'\n              error: 'Promise resolution is still pending but the event loop has already resolved'\n              code: 'ERR_TEST_FAILURE'\n              ...\n            1..1\n        not ok 1 - does not keep event loop alive\n          ---\n          duration_ms: *\n          location: '/test/fixtures/test-runner/output/no_refs.js:(LINE):1'\n          failureType: 'cancelledByParent'\n          error: 'Promise resolution is still pending but the event loop has already resolved'\n          code: 'ERR_TEST_FAILURE'\n          ...\n        1..1\n        # tests 2\n        # suites 0\n        # pass 0\n        # fail 0\n        # cancelled 2\n        # skipped 0\n        # todo 0\n        # duration_ms *\n        \n      operator: 'strictEqual'\n      stack: |-\n        assertSnapshot (c:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:56:12)\n        async Module.spawnAndAssert (c:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:84:3)\n        async TestContext.<anonymous> (file:///c:/workspace/node-test-binary-windows-js-suites/node/test/parallel/test-runner-output.mjs:149:5)\n        async Test.run (node:internal/test_runner/test:748:9)\n        async Promise.all (index 19)\n        async Suite.run (node:internal/test_runner/test:1106:7)\n        async Test.processPendingSubtests (node:internal/test_runner/test:461:7)\n      ...\n    # Subtest: test-runner/output/no_tests.js\n    ok 21 - test-runner/output/no_tests.js\n      ---\n      duration_ms: 985.8502\n      ...\n    # Subtest: test-runner/output/only_tests.js\n    ok 22 - test-runner/output/only_tests.js\n      ---\n      duration_ms: 1005.1877\n      ...\n    # Subtest: test-runner/output/dot_reporter.js\n    ok 23 - test-runner/output/dot_reporter.js\n      ---\n      duration_ms: 2404.8749\n      ...\n    # Subtest: test-runner/output/junit_reporter.js\n    not ok 24 - test-runner/output/junit_reporter.js\n      ---\n      duration_ms: 2517.4545\n      location: 'c:\\\\workspace\\\\node-test-binary-windows-js-suites\\\\node\\\\test\\\\parallel\\\\test-runner-output.mjs:155:5'\n      failureType: 'testCodeFailure'\n      error: |-\n        Expected values to be strictly equal:\n        + actual - expected ... Lines skipped\n        \n          '<?xml version=\"1.0\" encoding=\"utf-8\"?>\\n' +\n            '<testsuites>\\n' +\n        ...\n            '\\t\\t</failure>\\n' +\n            '\\t</testcase>\\n' +\n        +   '\\t<testcase name=\"callback called twice\" time=\"*\" '... 11376 more characters\n        -   '\\t<testcase name=\"callback called twice\" time=\"*\" '... 11392 more characters\n      code: 'ERR_ASSERTION'\n      name: 'AssertionError'\n      expected: |-\n        <?xml version=\"1.0\" encoding=\"utf-8\"?>\n        <testsuites>\n        \t<testcase name=\"sync pass todo\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"todo\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync pass todo with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"todo\" message=\"this is a passing todo\"/>\n        \t</testcase>\n        \t<testcase name=\"sync fail todo\" time=\"*\" classname=\"test\" failure=\"thrown from sync fail todo\">\n        \t\t<skipped type=\"todo\" message=\"true\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync fail todo\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync fail todo] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync fail todo\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync fail todo with message\" time=\"*\" classname=\"test\" failure=\"thrown from sync fail todo with message\">\n        \t\t<skipped type=\"todo\" message=\"this is a failing todo\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync fail todo with message\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync fail todo with message] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync fail todo with message\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync skip pass\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip pass with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"this is skipped\"/>\n        \t</testcase>\n        \t<testcase name=\"sync pass\" time=\"*\" classname=\"test\"/>\n        \t<!-- this test should pass -->\n        \t<testcase name=\"sync throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from sync throw fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async skip pass\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"async pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from async throw fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from async throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from async throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async skip fail\" time=\"*\" classname=\"test\" failure=\"thrown from async throw fail\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from async throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from async throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async assertion fail\" time=\"*\" classname=\"test\" failure=\"Expected values to be strictly equal:true !== false\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Expected values to be strictly equal:true !== false\">\n        [Error [ERR_TEST_FAILURE]: Expected values to be strictly equal:\n        \n        true !== false\n        ] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n          \n          true !== false\n          \n              *\n              *\n              *\n              *\n              *\n              *\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: true,\n            expected: false,\n            operator: 'strictEqual'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"resolve pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"reject fail\" time=\"*\" classname=\"test\" failure=\"rejected from reject fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"rejected from reject fail\">\n        [Error [ERR_TEST_FAILURE]: rejected from reject fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: rejected from reject fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unhandled rejection - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async unhandled rejection - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate throw - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate reject - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate resolve pass\" time=\"*\" classname=\"test\"/>\n        \t<testsuite name=\"subtest sync throw fail\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"1\" failures=\"1\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"+sync throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fail\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fail\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fail\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<!-- this subtest should make its parent test fail -->\n        \t</testsuite>\n        \t<testcase name=\"sync throw non-error fail\" time=\"*\" classname=\"test\" failure=\"Symbol(thrown symbol from sync throw non-error fail)\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Symbol(thrown symbol from sync throw non-error fail)\">\n        [Error [ERR_TEST_FAILURE]: Symbol(thrown symbol from sync throw non-error fail)] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: Symbol(thrown symbol from sync throw non-error fail) }\n        \t\t</failure>\n        \t</testcase>\n        \t<testsuite name=\"level 0a\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"4\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"level 1a\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1b\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1c\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1d\" time=\"*\" classname=\"test\"/>\n        \t</testsuite>\n        \t<testsuite name=\"top level\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"2\" failures=\"1\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"+long running\" time=\"*\" classname=\"test\" failure=\"test did not finish before its parent and was cancelled\">\n        \t\t\t<failure type=\"cancelledByParent\" message=\"test did not finish before its parent and was cancelled\">\n        [Error [ERR_TEST_FAILURE]: test did not finish before its parent and was cancelled] { code: 'ERR_TEST_FAILURE', failureType: 'cancelledByParent', cause: 'test did not finish before its parent and was cancelled' }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<testsuite name=\"+short running\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"1\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t\t<testcase name=\"++short running\" time=\"*\" classname=\"test\"/>\n        \t\t</testsuite>\n        \t</testsuite>\n        \t<testcase name=\"invalid subtest - pass but subtest fails\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"sync skip option\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip option with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"this is skipped\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip option is false fail\" time=\"*\" classname=\"test\" failure=\"this should be executed\">\n        \t\t<failure type=\"testCodeFailure\" message=\"this should be executed\">\n        [Error [ERR_TEST_FAILURE]: this should be executed] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: this should be executed\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"functionOnly\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"test with only a name provided\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"test with a name and options provided\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"functionAndOptions\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"callback pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback fail\" time=\"*\" classname=\"test\" failure=\"callback failure\">\n        \t\t<failure type=\"testCodeFailure\" message=\"callback failure\">\n        [Error [ERR_TEST_FAILURE]: callback failure] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: callback failure\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback also returns a Promise\" time=\"*\" classname=\"test\" failure=\"passed a callback but also returned a Promise\">\n        \t\t<failure type=\"callbackAndPromisePresent\" message=\"passed a callback but also returned a Promise\">\n        [Error [ERR_TEST_FAILURE]: passed a callback but also returned a Promise] { code: 'ERR_TEST_FAILURE', failureType: 'callbackAndPromisePresent', cause: 'passed a callback but also returned a Promise' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback throw\" time=\"*\" classname=\"test\" failure=\"thrown from callback throw\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from callback throw\">\n        [Error [ERR_TEST_FAILURE]: thrown from callback throw] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from callback throw\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback called twice\" time=\"*\" classname=\"test\" failure=\"callback invoked multiple times\">\n        \t\t<failure type=\"multipleCallbackInvocations\" message=\"callback invoked multiple times\">\n        Error [ERR_TEST_FAILURE]: callback invoked multiple times\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'multipleCallbackInvocations',\n          cause: 'callback invoked multiple times'\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback called twice in different ticks\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback called twice in future tick\" time=\"*\" classname=\"test\" failure=\"callback invoked multiple times\">\n        \t\t<failure type=\"uncaughtException\" message=\"callback invoked multiple times\">\n        Error [ERR_TEST_FAILURE]: callback invoked multiple times\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error [ERR_TEST_FAILURE]: callback invoked multiple times\n              * {\n            code: 'ERR_TEST_FAILURE',\n            failureType: 'multipleCallbackInvocations',\n            cause: 'callback invoked multiple times'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback async throw\" time=\"*\" classname=\"test\" failure=\"thrown from callback async throw\">\n        \t\t<failure type=\"uncaughtException\" message=\"thrown from callback async throw\">\n        Error [ERR_TEST_FAILURE]: thrown from callback async throw\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error: thrown from callback async throw\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback async throw after done\" time=\"*\" classname=\"test\"/>\n        \t<testsuite name=\"only is set but not in only mode\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"4\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"running subtest 1\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"running subtest 2\" time=\"*\" classname=\"test\"/>\n        \t\t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t\t<testcase name=\"running subtest 3\" time=\"*\" classname=\"test\"/>\n        \t\t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t\t<testcase name=\"running subtest 4\" time=\"*\" classname=\"test\"/>\n        \t</testsuite>\n        \t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t<testcase name=\"custom inspect symbol fail\" time=\"*\" classname=\"test\" failure=\"customized\">\n        \t\t<failure type=\"testCodeFailure\" message=\"customized\">\n        [Error [ERR_TEST_FAILURE]: customized] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: customized }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"custom inspect symbol that throws fail\" time=\"*\" classname=\"test\" failure=\"{  foo: 1,  [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]}\">\n        \t\t<failure type=\"testCodeFailure\" message=\"{  foo: 1,  [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]}\">\n        [Error [ERR_TEST_FAILURE]: {\n          foo: 1,\n          [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]\n        }] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: { foo: 1, [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]] }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testsuite name=\"subtest sync throw fails\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"2\" failures=\"2\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"sync throw fails at first\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fails at first\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fails at first\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fails at first\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fails at first\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<testcase name=\"sync throw fails at second\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fails at second\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fails at second\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fails at second\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fails at second\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t</testsuite>\n        \t<testcase name=\"timed out async test\" time=\"*\" classname=\"test\" failure=\"test timed out after 5ms\">\n        \t\t<failure type=\"testTimeoutFailure\" message=\"test timed out after 5ms\">\n        [Error [ERR_TEST_FAILURE]: test timed out after 5ms] { code: 'ERR_TEST_FAILURE', failureType: 'testTimeoutFailure', cause: 'test timed out after 5ms' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"timed out callback test\" time=\"*\" classname=\"test\" failure=\"test timed out after 5ms\">\n        \t\t<failure type=\"testTimeoutFailure\" message=\"test timed out after 5ms\">\n        [Error [ERR_TEST_FAILURE]: test timed out after 5ms] { code: 'ERR_TEST_FAILURE', failureType: 'testTimeoutFailure', cause: 'test timed out after 5ms' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"large timeout async test is ok\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"large timeout callback test is ok\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"successful thenable\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"rejected thenable\" time=\"*\" classname=\"test\" failure=\"custom error\">\n        \t\t<failure type=\"testCodeFailure\" message=\"custom error\">\n        [Error [ERR_TEST_FAILURE]: custom error] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: 'custom error' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unfinished test with uncaughtException\" time=\"*\" classname=\"test\" failure=\"foo\">\n        \t\t<failure type=\"uncaughtException\" message=\"foo\">\n        Error [ERR_TEST_FAILURE]: foo\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error: foo\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unfinished test with unhandledRejection\" time=\"*\" classname=\"test\" failure=\"bar\">\n        \t\t<failure type=\"unhandledRejection\" message=\"bar\">\n        Error [ERR_TEST_FAILURE]: bar\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'unhandledRejection',\n          cause: Error: bar\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"assertion errors display actual and expected properly\" time=\"*\" classname=\"test\" failure=\"Expected values to be loosely deep-equal:{  bar: 1,  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  foo: 1}should loosely deep-equal{  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  circular: &lt;ref *1> {    bar: 2,    c: [Circular *1]  }}\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Expected values to be loosely deep-equal:{  bar: 1,  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  foo: 1}should loosely deep-equal{  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  circular: &lt;ref *1> {    bar: 2,    c: [Circular *1]  }}\">\n        [Error [ERR_TEST_FAILURE]: Expected values to be loosely deep-equal:\n        \n        {\n          bar: 1,\n          baz: {\n            date: 1970-01-01T00:00:00.000Z,\n            null: null,\n            number: 1,\n            string: 'Hello',\n            undefined: undefined\n          },\n          boo: [\n            1\n          ],\n          foo: 1\n        }\n        \n        should loosely deep-equal\n        \n        {\n          baz: {\n            date: 1970-01-01T00:00:00.000Z,\n            null: null,\n            number: 1,\n            string: 'Hello',\n            undefined: undefined\n          },\n          boo: [\n            1\n          ],\n          circular: &lt;ref *1> {\n            bar: 2,\n            c: [Circular *1]\n          }\n        }] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n          \n          {\n            bar: 1,\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            foo: 1\n          }\n          \n          should loosely deep-equal\n          \n          {\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            circular: &lt;ref *1> {\n              bar: 2,\n              c: [Circular *1]\n            }\n          }\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: [Object],\n            expected: [Object],\n            operator: 'deepEqual'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"invalid subtest fail\" time=\"*\" classname=\"test\" failure=\"test could not be started because its parent finished\">\n        \t\t<failure type=\"parentAlreadyFinished\" message=\"test could not be started because its parent finished\">\n        Error [ERR_TEST_FAILURE]: test could not be started because its parent finished\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'parentAlreadyFinished',\n          cause: 'test could not be started because its parent finished'\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<!-- Error: Test \"unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:72:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: Test \"async unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:76:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from async unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: A resource generated asynchronous activity after the test ended. This activity created the error \"Error: uncaught from outside of a test\" which triggered an uncaughtException event, caught by the test runner. -->\n        \t<!-- Error: Test \"immediate throw - passes but warns\" at test/fixtures/test-runner/output/output.js:80:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from immediate throw fail\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- Error: Test \"immediate reject - passes but warns\" at test/fixtures/test-runner/output/output.js:86:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from immediate reject fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: Test \"callback called twice in different ticks\" at test/fixtures/test-runner/output/output.js:251:1 generated asynchronous activity after the test ended. This activity created the error \"Error [ERR_TEST_FAILURE]: callback invoked multiple times\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- Error: Test \"callback async throw after done\" at test/fixtures/test-runner/output/output.js:269:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from callback async throw after done\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- tests 76 -->\n        \t<!-- suites 0 -->\n        \t<!-- pass 35 -->\n        \t<!-- fail 25 -->\n        \t<!-- cancelled 3 -->\n        \t<!-- skipped 9 -->\n        \t<!-- todo 4 -->\n        \t<!-- duration_ms * -->\n        </testsuites>\n        \n      actual: |-\n        <?xml version=\"1.0\" encoding=\"utf-8\"?>\n        <testsuites>\n        \t<testcase name=\"sync pass todo\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"todo\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync pass todo with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"todo\" message=\"this is a passing todo\"/>\n        \t</testcase>\n        \t<testcase name=\"sync fail todo\" time=\"*\" classname=\"test\" failure=\"thrown from sync fail todo\">\n        \t\t<skipped type=\"todo\" message=\"true\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync fail todo\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync fail todo] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync fail todo\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync fail todo with message\" time=\"*\" classname=\"test\" failure=\"thrown from sync fail todo with message\">\n        \t\t<skipped type=\"todo\" message=\"this is a failing todo\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync fail todo with message\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync fail todo with message] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync fail todo with message\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync skip pass\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip pass with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"this is skipped\"/>\n        \t</testcase>\n        \t<testcase name=\"sync pass\" time=\"*\" classname=\"test\"/>\n        \t<!-- this test should pass -->\n        \t<testcase name=\"sync throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from sync throw fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async skip pass\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"async pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from async throw fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from async throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from async throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async skip fail\" time=\"*\" classname=\"test\" failure=\"thrown from async throw fail\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from async throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from async throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async assertion fail\" time=\"*\" classname=\"test\" failure=\"Expected values to be strictly equal:true !== false\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Expected values to be strictly equal:true !== false\">\n        [Error [ERR_TEST_FAILURE]: Expected values to be strictly equal:\n        \n        true !== false\n        ] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n          \n          true !== false\n          \n              *\n              *\n              *\n              *\n              *\n              *\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: true,\n            expected: false,\n            operator: 'strictEqual'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"resolve pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"reject fail\" time=\"*\" classname=\"test\" failure=\"rejected from reject fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"rejected from reject fail\">\n        [Error [ERR_TEST_FAILURE]: rejected from reject fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: rejected from reject fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unhandled rejection - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async unhandled rejection - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate throw - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate reject - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate resolve pass\" time=\"*\" classname=\"test\"/>\n        \t<testsuite name=\"subtest sync throw fail\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"1\" failures=\"1\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"+sync throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fail\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fail\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fail\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<!-- this subtest should make its parent test fail -->\n        \t</testsuite>\n        \t<testcase name=\"sync throw non-error fail\" time=\"*\" classname=\"test\" failure=\"Symbol(thrown symbol from sync throw non-error fail)\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Symbol(thrown symbol from sync throw non-error fail)\">\n        [Error [ERR_TEST_FAILURE]: Symbol(thrown symbol from sync throw non-error fail)] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: Symbol(thrown symbol from sync throw non-error fail) }\n        \t\t</failure>\n        \t</testcase>\n        \t<testsuite name=\"level 0a\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"4\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"level 1a\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1b\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1c\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1d\" time=\"*\" classname=\"test\"/>\n        \t</testsuite>\n        \t<testsuite name=\"top level\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"2\" failures=\"1\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"+long running\" time=\"*\" classname=\"test\" failure=\"test did not finish before its parent and was cancelled\">\n        \t\t\t<failure type=\"cancelledByParent\" message=\"test did not finish before its parent and was cancelled\">\n        [Error [ERR_TEST_FAILURE]: test did not finish before its parent and was cancelled] { code: 'ERR_TEST_FAILURE', failureType: 'cancelledByParent', cause: 'test did not finish before its parent and was cancelled' }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<testsuite name=\"+short running\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"1\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t\t<testcase name=\"++short running\" time=\"*\" classname=\"test\"/>\n        \t\t</testsuite>\n        \t</testsuite>\n        \t<testcase name=\"invalid subtest - pass but subtest fails\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"sync skip option\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip option with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"this is skipped\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip option is false fail\" time=\"*\" classname=\"test\" failure=\"this should be executed\">\n        \t\t<failure type=\"testCodeFailure\" message=\"this should be executed\">\n        [Error [ERR_TEST_FAILURE]: this should be executed] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: this should be executed\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"functionOnly\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"test with only a name provided\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"test with a name and options provided\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"functionAndOptions\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"callback pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback fail\" time=\"*\" classname=\"test\" failure=\"callback failure\">\n        \t\t<failure type=\"testCodeFailure\" message=\"callback failure\">\n        [Error [ERR_TEST_FAILURE]: callback failure] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: callback failure\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback also returns a Promise\" time=\"*\" classname=\"test\" failure=\"passed a callback but also returned a Promise\">\n        \t\t<failure type=\"callbackAndPromisePresent\" message=\"passed a callback but also returned a Promise\">\n        [Error [ERR_TEST_FAILURE]: passed a callback but also returned a Promise] { code: 'ERR_TEST_FAILURE', failureType: 'callbackAndPromisePresent', cause: 'passed a callback but also returned a Promise' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback throw\" time=\"*\" classname=\"test\" failure=\"thrown from callback throw\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from callback throw\">\n        [Error [ERR_TEST_FAILURE]: thrown from callback throw] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from callback throw\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback called twice\" time=\"*\" classname=\"test\" failure=\"callback invoked multiple times\">\n        \t\t<failure type=\"multipleCallbackInvocations\" message=\"callback invoked multiple times\">\n        Error [ERR_TEST_FAILURE]: callback invoked multiple times\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'multipleCallbackInvocations',\n          cause: 'callback invoked multiple times'\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback called twice in different ticks\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback called twice in future tick\" time=\"*\" classname=\"test\" failure=\"callback invoked multiple times\">\n        \t\t<failure type=\"uncaughtException\" message=\"callback invoked multiple times\">\n        [Error [ERR_TEST_FAILURE]: callback invoked multiple times] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error [ERR_TEST_FAILURE]: callback invoked multiple times\n              * {\n            code: 'ERR_TEST_FAILURE',\n            failureType: 'multipleCallbackInvocations',\n            cause: 'callback invoked multiple times'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback async throw\" time=\"*\" classname=\"test\" failure=\"thrown from callback async throw\">\n        \t\t<failure type=\"uncaughtException\" message=\"thrown from callback async throw\">\n        [Error [ERR_TEST_FAILURE]: thrown from callback async throw] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error: thrown from callback async throw\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback async throw after done\" time=\"*\" classname=\"test\"/>\n        \t<testsuite name=\"only is set but not in only mode\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"4\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"running subtest 1\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"running subtest 2\" time=\"*\" classname=\"test\"/>\n        \t\t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t\t<testcase name=\"running subtest 3\" time=\"*\" classname=\"test\"/>\n        \t\t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t\t<testcase name=\"running subtest 4\" time=\"*\" classname=\"test\"/>\n        \t</testsuite>\n        \t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t<testcase name=\"custom inspect symbol fail\" time=\"*\" classname=\"test\" failure=\"customized\">\n        \t\t<failure type=\"testCodeFailure\" message=\"customized\">\n        [Error [ERR_TEST_FAILURE]: customized] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: customized }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"custom inspect symbol that throws fail\" time=\"*\" classname=\"test\" failure=\"{  foo: 1,  [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]}\">\n        \t\t<failure type=\"testCodeFailure\" message=\"{  foo: 1,  [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]}\">\n        [Error [ERR_TEST_FAILURE]: {\n          foo: 1,\n          [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]\n        }] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: { foo: 1, [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]] }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testsuite name=\"subtest sync throw fails\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"2\" failures=\"2\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"sync throw fails at first\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fails at first\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fails at first\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fails at first\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fails at first\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<testcase name=\"sync throw fails at second\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fails at second\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fails at second\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fails at second\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fails at second\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t</testsuite>\n        \t<testcase name=\"timed out async test\" time=\"*\" classname=\"test\" failure=\"test timed out after 5ms\">\n        \t\t<failure type=\"testTimeoutFailure\" message=\"test timed out after 5ms\">\n        [Error [ERR_TEST_FAILURE]: test timed out after 5ms] { code: 'ERR_TEST_FAILURE', failureType: 'testTimeoutFailure', cause: 'test timed out after 5ms' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"timed out callback test\" time=\"*\" classname=\"test\" failure=\"test timed out after 5ms\">\n        \t\t<failure type=\"testTimeoutFailure\" message=\"test timed out after 5ms\">\n        [Error [ERR_TEST_FAILURE]: test timed out after 5ms] { code: 'ERR_TEST_FAILURE', failureType: 'testTimeoutFailure', cause: 'test timed out after 5ms' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"large timeout async test is ok\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"large timeout callback test is ok\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"successful thenable\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"rejected thenable\" time=\"*\" classname=\"test\" failure=\"custom error\">\n        \t\t<failure type=\"testCodeFailure\" message=\"custom error\">\n        [Error [ERR_TEST_FAILURE]: custom error] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: 'custom error' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unfinished test with uncaughtException\" time=\"*\" classname=\"test\" failure=\"foo\">\n        \t\t<failure type=\"uncaughtException\" message=\"foo\">\n        [Error [ERR_TEST_FAILURE]: foo] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error: foo\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unfinished test with unhandledRejection\" time=\"*\" classname=\"test\" failure=\"bar\">\n        \t\t<failure type=\"unhandledRejection\" message=\"bar\">\n        [Error [ERR_TEST_FAILURE]: bar] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'unhandledRejection',\n          cause: Error: bar\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"assertion errors display actual and expected properly\" time=\"*\" classname=\"test\" failure=\"Expected values to be loosely deep-equal:{  bar: 1,  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  foo: 1}should loosely deep-equal{  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  circular: &lt;ref *1> {    bar: 2,    c: [Circular *1]  }}\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Expected values to be loosely deep-equal:{  bar: 1,  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  foo: 1}should loosely deep-equal{  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  circular: &lt;ref *1> {    bar: 2,    c: [Circular *1]  }}\">\n        [Error [ERR_TEST_FAILURE]: Expected values to be loosely deep-equal:\n        \n        {\n          bar: 1,\n          baz: {\n            date: 1970-01-01T00:00:00.000Z,\n            null: null,\n            number: 1,\n            string: 'Hello',\n            undefined: undefined\n          },\n          boo: [\n            1\n          ],\n          foo: 1\n        }\n        \n        should loosely deep-equal\n        \n        {\n          baz: {\n            date: 1970-01-01T00:00:00.000Z,\n            null: null,\n            number: 1,\n            string: 'Hello',\n            undefined: undefined\n          },\n          boo: [\n            1\n          ],\n          circular: &lt;ref *1> {\n            bar: 2,\n            c: [Circular *1]\n          }\n        }] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n          \n          {\n            bar: 1,\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            foo: 1\n          }\n          \n          should loosely deep-equal\n          \n          {\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            circular: &lt;ref *1> {\n              bar: 2,\n              c: [Circular *1]\n            }\n          }\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: [Object],\n            expected: [Object],\n            operator: 'deepEqual'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"invalid subtest fail\" time=\"*\" classname=\"test\" failure=\"test could not be started because its parent finished\">\n        \t\t<failure type=\"parentAlreadyFinished\" message=\"test could not be started because its parent finished\">\n        Error [ERR_TEST_FAILURE]: test could not be started because its parent finished\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'parentAlreadyFinished',\n          cause: 'test could not be started because its parent finished'\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<!-- Error: Test \"unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:72:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: Test \"async unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:76:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from async unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: A resource generated asynchronous activity after the test ended. This activity created the error \"Error: uncaught from outside of a test\" which triggered an uncaughtException event, caught by the test runner. -->\n        \t<!-- Error: Test \"immediate throw - passes but warns\" at test/fixtures/test-runner/output/output.js:80:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from immediate throw fail\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- Error: Test \"immediate reject - passes but warns\" at test/fixtures/test-runner/output/output.js:86:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from immediate reject fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: Test \"callback called twice in different ticks\" at test/fixtures/test-runner/output/output.js:251:1 generated asynchronous activity after the test ended. This activity created the error \"Error [ERR_TEST_FAILURE]: callback invoked multiple times\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- Error: Test \"callback async throw after done\" at test/fixtures/test-runner/output/output.js:269:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from callback async throw after done\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- tests 76 -->\n        \t<!-- suites 0 -->\n        \t<!-- pass 35 -->\n        \t<!-- fail 25 -->\n        \t<!-- cancelled 3 -->\n        \t<!-- skipped 9 -->\n        \t<!-- todo 4 -->\n        \t<!-- duration_ms * -->\n        </testsuites>\n        \n      operator: 'strictEqual'\n      stack: |-\n        assertSnapshot (c:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:56:12)\n        async Module.spawnAndAssert (c:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:84:3)\n        async TestContext.<anonymous> (file:///c:/workspace/node-test-binary-windows-js-suites/node/test/parallel/test-runner-output.mjs:149:5)\n        async Test.run (node:internal/test_runner/test:748:9)\n        async Promise.all (index 23)\n        async Suite.run (node:internal/test_runner/test:1106:7)\n        async Test.processPendingSubtests (node:internal/test_runner/test:461:7)\n      ...\n    # Subtest: test-runner/output/spec_reporter_successful.js\n    ok 25 - test-runner/output/spec_reporter_successful.js\n      ---\n      duration_ms: 1323.6115\n      ...\n    # Subtest: test-runner/output/spec_reporter.js\n    ok 26 - test-runner/output/spec_reporter.js\n      ---\n      duration_ms: 2317.8243\n      ...\n    # Subtest: test-runner/output/spec_reporter_cli.js\n    ok 27 - test-runner/output/spec_reporter_cli.js\n      ---\n      duration_ms: 2668.3585\n      ...\n    # Subtest: test-runner/output/source_mapped_locations.mjs\n    ok 28 - test-runner/output/source_mapped_locations.mjs\n      ---\n      duration_ms: 1154.2618\n      ...\n    # Subtest: test-runner/output/lcov_reporter.js\n    ok 29 - test-runner/output/lcov_reporter.js\n      ---\n      duration_ms: 2307.9889\n      ...\n    # Subtest: test-runner/output/output.js\n    ok 30 - test-runner/output/output.js\n      ---\n      duration_ms: 1716.1976\n      ...\n    # Subtest: test-runner/output/output_cli.js\n    ok 31 - test-runner/output/output_cli.js\n      ---\n      duration_ms: 2648.2489\n      ...\n    # Subtest: test-runner/output/name_and_skip_patterns.js\n    ok 32 - test-runner/output/name_and_skip_patterns.js\n      ---\n      duration_ms: 1498.8079\n      ...\n    # Subtest: test-runner/output/name_pattern.js\n    ok 33 - test-runner/output/name_pattern.js\n      ---\n      duration_ms: 1346.3366\n      ...\n    # Subtest: test-runner/output/name_pattern_with_only.js\n    ok 34 - test-runner/output/name_pattern_with_only.js\n      ---\n      duration_ms: 1339.3337\n      ...\n    # Subtest: test-runner/output/skip_pattern.js\n    ok 35 - test-runner/output/skip_pattern.js\n      ---\n      duration_ms: 925.2312\n      ...\n    # Subtest: test-runner/output/unfinished-suite-async-error.js\n    ok 36 - test-runner/output/unfinished-suite-async-error.js\n      ---\n      duration_ms: 1094.702\n      ...\n    # Subtest: test-runner/output/unresolved_promise.js\n    not ok 37 - test-runner/output/unresolved_promise.js\n      ---\n      duration_ms: 800.6782\n      location: 'c:\\\\workspace\\\\node-test-binary-windows-js-suites\\\\node\\\\test\\\\parallel\\\\test-runner-output.mjs:155:5'\n      failureType: 'testCodeFailure'\n      error: |-\n        Expected values to be strictly equal:\n        + actual - expected ... Lines skipped\n        \n          'TAP version 13\\n' +\n            '# Subtest: pass\\n' +\n        ...\n            \"  error: 'Promise resolution is still pending but the event loop has already resolved'\\n\" +\n            \"  code: 'ERR_TEST_FAILURE'\\n\" +\n        +   '  ...\\n' +\n        +   '# Subtest: fail\\n' +\n        +   'not ok 3 - fail\\n' +\n        +   '  ---\\n' +\n        +   '  duration_ms: *\\n' +\n        +   \"  location: '/test/fixtures/test-runner/output/unresolved_promise.js:(LINE):1'\\n\" +\n        +   \"  failureType: 'cancelledByParent'\\n\" +\n        +   \"  error: 'Promise resolution is still pending but the event loop has already resolved'\\n\" +\n        +   \"  code: 'ERR_TEST_FAILURE'\\n\" +\n        -   '  stack: |-\\n' +\n        -   '    *\\n' +\n        -   '  ...\\n' +\n        -   '# Subtest: fail\\n' +\n        -   'not ok 3 - fail\\n' +\n        -   '  ---\\n' +\n        -   '  duration_ms: *\\n' +\n        -   \"  location: '/test/fixtures/test-runner/output/unresolved_promise.js:(LINE):1'\\n\" +\n        -   \"  failureType: 'cancelledByParent'\\n\" +\n        -   \"  error: 'Promise resolution is still pending but the event loop has already resolved'\\n\" +\n        -   \"  code: 'ERR_TEST_FAILURE'\\n\" +\n        -   '  stack: |-\\n' +\n        -   '    *\\n' +\n            '  ...\\n' +\n        ...\n            '# skipped 0\\n' +\n            '# todo 0\\n' +\n            '# duration_ms *\\n'\n      code: 'ERR_ASSERTION'\n      name: 'AssertionError'\n      expected: |-\n        TAP version 13\n        # Subtest: pass\n        ok 1 - pass\n          ---\n          duration_ms: *\n          ...\n        # Subtest: never resolving promise\n        not ok 2 - never resolving promise\n          ---\n          duration_ms: *\n          location: '/test/fixtures/test-runner/output/unresolved_promise.js:(LINE):1'\n          failureType: 'cancelledByParent'\n          error: 'Promise resolution is still pending but the event loop has already resolved'\n          code: 'ERR_TEST_FAILURE'\n          stack: |-\n            *\n          ...\n        # Subtest: fail\n        not ok 3 - fail\n          ---\n          duration_ms: *\n          location: '/test/fixtures/test-runner/output/unresolved_promise.js:(LINE):1'\n          failureType: 'cancelledByParent'\n          error: 'Promise resolution is still pending but the event loop has already resolved'\n          code: 'ERR_TEST_FAILURE'\n          stack: |-\n            *\n          ...\n        1..3\n        # tests 3\n        # suites 0\n        # pass 1\n        # fail 0\n        # cancelled 2\n        # skipped 0\n        # todo 0\n        # duration_ms *\n        \n      actual: |-\n        TAP version 13\n        # Subtest: pass\n        ok 1 - pass\n          ---\n          duration_ms: *\n          ...\n        # Subtest: never resolving promise\n        not ok 2 - never resolving promise\n          ---\n          duration_ms: *\n          location: '/test/fixtures/test-runner/output/unresolved_promise.js:(LINE):1'\n          failureType: 'cancelledByParent'\n          error: 'Promise resolution is still pending but the event loop has already resolved'\n          code: 'ERR_TEST_FAILURE'\n          ...\n        # Subtest: fail\n        not ok 3 - fail\n          ---\n          duration_ms: *\n          location: '/test/fixtures/test-runner/output/unresolved_promise.js:(LINE):1'\n          failureType: 'cancelledByParent'\n          error: 'Promise resolution is still pending but the event loop has already resolved'\n          code: 'ERR_TEST_FAILURE'\n          ...\n        1..3\n        # tests 3\n        # suites 0\n        # pass 1\n        # fail 0\n        # cancelled 2\n        # skipped 0\n        # todo 0\n        # duration_ms *\n        \n      operator: 'strictEqual'\n      stack: |-\n        assertSnapshot (c:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:56:12)\n        async Module.spawnAndAssert (c:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:84:3)\n        async TestContext.<anonymous> (file:///c:/workspace/node-test-binary-windows-js-suites/node/test/parallel/test-runner-output.mjs:149:5)\n        async Test.run (node:internal/test_runner/test:748:9)\n        async Promise.all (index 36)\n        async Suite.run (node:internal/test_runner/test:1106:7)\n        async Test.processPendingSubtests (node:internal/test_runner/test:461:7)\n      ...\n    # Subtest: test-runner/output/default_output.js\n        # Subtest: <anonymous>\n        ok 1 - <anonymous> # SKIP Skipping pseudo-tty tests, as pseudo terminals are not available on Windows.\n          ---\n          duration_ms: 116.2929\n          ...\n        1..1\n    ok 38 - test-runner/output/default_output.js\n      ---\n      duration_ms: 116.8685\n      ...\n    # Subtest: test-runner/output/arbitrary-output.js\n    ok 39 - test-runner/output/arbitrary-output.js\n      ---\n      duration_ms: 1719.2629\n      ...\n    # Subtest: test-runner/output/async-test-scheduling.mjs\n    ok 40 - test-runner/output/async-test-scheduling.mjs\n      ---\n      duration_ms: 1479.1353\n      ...\n    # Subtest: test-runner/output/arbitrary-output-colored.js\n        # Subtest: <anonymous>\n        ok 1 - <anonymous> # SKIP Skipping pseudo-tty tests, as pseudo terminals are not available on Windows.\n          ---\n          duration_ms: 19.6759\n          ...\n        1..1\n    ok 41 - test-runner/output/arbitrary-output-colored.js\n      ---\n      duration_ms: 20.0246\n      ...\n    # Subtest: test-runner/output/dot_output_custom_columns.js\n        # Subtest: <anonymous>\n        ok 1 - <anonymous> # SKIP Skipping pseudo-tty tests, as pseudo terminals are not available on Windows.\n          ---\n          duration_ms: 19.6087\n          ...\n        1..1\n    ok 42 - test-runner/output/dot_output_custom_columns.js\n      ---\n      duration_ms: 19.8598\n      ...\n    # Subtest: test-runner/output/tap_escape.js\n    ok 43 - test-runner/output/tap_escape.js\n      ---\n      duration_ms: 1161.9441\n      ...\n    # Subtest: test-runner/output/coverage_failure.js\n    ok 44 - test-runner/output/coverage_failure.js\n      ---\n      duration_ms: 1117.8134\n      ...\n    1..44\nnot ok 1 - test runner output\n  ---\n  duration_ms: 2961.8303\n  type: 'suite'\n  location: 'c:\\\\workspace\\\\node-test-binary-windows-js-suites\\\\node\\\\test\\\\parallel\\\\test-runner-output.mjs:153:1'\n  failureType: 'subtestsFailed'\n  error: '3 subtests failed'\n  code: 'ERR_TEST_FAILURE'\n  ...\n1..1\n# tests 47\n# suites 1\n# pass 41\n# fail 3\n# cancelled 0\n# skipped 3\n# todo 0\n# duration_ms 2973.9839"},"time":3282.046,"fullname":"parallel/test-runner-output","closingTestPoint":false}},{"testName":"message/stdin_messages","timestamp":1714656652787,"status":"REGRESSION","jobName":"node-test-binary-windows-js-suites","config":"node-test-binary-windows-js-suites » 0,win2016-COMPILED_BY-vs2022-x86 #27524","buildUrl":"https://ci.nodejs.org/job/node-test-binary-windows-js-suites/RUN_SUBSET=0,nodes=win2016-COMPILED_BY-vs2022-x86/27524/","buildNumber":27524,"builtOn":"test-rackspace-win2016_vs2015-x64-1","nodeVersion":"23.0.0","commitHash":"fa7baf79faaaf6b88b9781d7f3544228b8fa1b0f","callStack":[{"upstreamBuild":62662,"upstreamProject":"node-test-commit-windows-fanned","upstreamUrl":"job/node-test-commit-windows-fanned/"},{"upstreamBuild":70431,"upstreamProject":"node-test-commit","upstreamUrl":"job/node-test-commit/"},{"upstreamBuild":58863,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"upstreamBuild":58847,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"prId":"52733"}],"tap":{"ok":false,"name":"message/stdin_messages","id":84,"buffered":false,"tapError":null,"skip":false,"todo":false,"previous":null,"plan":null,"diag":{"severity":"fail","stack":"[stdin]\n[stdin]:1\nwith(this){__filename}\n^^^^\n\nSyntaxError: Strict mode code may not include a with statement\n    at makeContextifyScript (node:internal/vm:185:14)\n    at node:internal/process/execution:107:22\n    at [stdin]-wrapper:6:24\n    at runScript (node:internal/process/execution:101:62)\n    at evalScript (node:internal/process/execution:136:3)\n    at node:internal/main/eval_stdin:32:5\n    at Socket.<anonymous> (node:internal/process/execution:237:5)\n    at SlowEventEmitter.emit (node:internal/events/slow_event_emitter:88:35)\n    at Socket.emit (node:internal/events/event_emitter:463:41)\n    at endReadableNT (node:internal/streams/readable:1700:12)\n\nNode.js v23.0.0-pre\n42\n42\n[stdin]:1\nthrow new Error(\"hello\")\n^\n\nError: hello\n    at [stdin]:1:7\n    at runScriptInThisContext (node:internal/vm:209:10)\n    at node:internal/process/execution:118:14\n    at [stdin]-wrapper:6:24\n    at runScript (node:internal/process/execution:101:62)\n    at evalScript (node:internal/process/execution:136:3)\n    at node:internal/main/eval_stdin:32:5\n    at Socket.<anonymous> (node:internal/process/execution:237:5)\n    at SlowEventEmitter.emit (node:internal/events/slow_event_emitter:88:35)\n    at Socket.emit (node:internal/events/event_emitter:463:41)\n\nNode.js v23.0.0-pre\n[stdin]:1\nthrow new Error(\"hello\")\n^\n\nError: hello\n    at [stdin]:1:7\n    at runScriptInThisContext (node:internal/vm:209:10)\n    at node:internal/process/execution:118:14\n    at [stdin]-wrapper:6:24\n    at runScript (node:internal/process/execution:101:62)\n    at evalScript (node:internal/process/execution:136:3)\n    at node:internal/main/eval_stdin:32:5\n    at Socket.<anonymous> (node:internal/process/execution:237:5)\n    at SlowEventEmitter.emit (node:internal/events/slow_event_emitter:88:35)\n    at Socket.emit (node:internal/events/event_emitter:463:41)\n\nNode.js v23.0.0-pre\n100\n[stdin]:1\nlet x = 100; y = x;\n               ^\n\nReferenceError: y is not defined\n    at [stdin]:1:16\n    at runScriptInThisContext (node:internal/vm:209:10)\n    at node:internal/process/execution:118:14\n    at [stdin]-wrapper:6:24\n    at runScript (node:internal/process/execution:101:62)\n    at evalScript (node:internal/process/execution:136:3)\n    at node:internal/main/eval_stdin:32:5\n    at Socket.<anonymous> (node:internal/process/execution:237:5)\n    at SlowEventEmitter.emit (node:internal/events/slow_event_emitter:88:35)\n    at Socket.emit (node:internal/events/event_emitter:463:41)\n\nNode.js v23.0.0-pre\n\n[stdin]:1\nlet ______________________________________________; throw 10\n                                                    ^\n10\n(Use `node --trace-uncaught ...` to show where the exception was thrown)\n\nNode.js v23.0.0-pre\n\n[stdin]:1\nlet ______________________________________________; throw 10\n                                                    ^\n10\n(Use `node --trace-uncaught ...` to show where the exception was thrown)\n\nNode.js v23.0.0-pre\ndone"},"time":1616.236,"fullname":"message/stdin_messages","closingTestPoint":false}},{"testName":"parallel/test-disable-proto-throw","timestamp":1714656652787,"status":"REGRESSION","jobName":"node-test-binary-windows-js-suites","config":"node-test-binary-windows-js-suites » 0,win11-arm64-COMPILED_BY-vs2022-arm64 #27524","buildUrl":"https://ci.nodejs.org/job/node-test-binary-windows-js-suites/RUN_SUBSET=0,nodes=win11-arm64-COMPILED_BY-vs2022-arm64/27524/","buildNumber":27524,"builtOn":"test-azure_msft-win11_vs2022-arm64-6","nodeVersion":"23.0.0","commitHash":"fa7baf79faaaf6b88b9781d7f3544228b8fa1b0f","callStack":[{"upstreamBuild":62662,"upstreamProject":"node-test-commit-windows-fanned","upstreamUrl":"job/node-test-commit-windows-fanned/"},{"upstreamBuild":70431,"upstreamProject":"node-test-commit","upstreamUrl":"job/node-test-commit/"},{"upstreamBuild":58863,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"upstreamBuild":58847,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"prId":"52733"}],"tap":{"ok":false,"name":"parallel/test-disable-proto-throw","id":218,"buffered":false,"tapError":null,"skip":false,"todo":false,"previous":null,"plan":null,"diag":{"severity":"fail","exitcode":1,"stack":"node:internal/events/slow_event_emitter:37\n  fastEventEmitter._events.__proto__ = null;\n                                     ^\n\nError: Accessing Object.prototype.__proto__ has been disallowed with --disable-proto=throw\n    at Function.fromFastEventEmitter (node:internal/events/slow_event_emitter:37:38)\n    at EventEmitter.<computed> (node:internal/events/event_emitter:413:36)\n    at process.addListener (node:internal/events/event_emitter:484:47)\n    at node:internal/bootstrap/switches/is_main_thread:42:9\n\nNode.js v23.0.0-pre"},"time":132.995,"fullname":"parallel/test-disable-proto-throw","closingTestPoint":false}},{"testName":"parallel/test-disable-proto-throw","timestamp":1714656652787,"status":"REGRESSION","jobName":"node-test-binary-windows-js-suites","config":"node-test-binary-windows-js-suites » 3,win11-COMPILED_BY-vs2022 #27524","buildUrl":"https://ci.nodejs.org/job/node-test-binary-windows-js-suites/RUN_SUBSET=3,nodes=win11-COMPILED_BY-vs2022/27524/","buildNumber":27524,"builtOn":"test-azure_msft-win11_vs2022-x64-1","nodeVersion":"23.0.0","commitHash":"fa7baf79faaaf6b88b9781d7f3544228b8fa1b0f","callStack":[{"upstreamBuild":62662,"upstreamProject":"node-test-commit-windows-fanned","upstreamUrl":"job/node-test-commit-windows-fanned/"},{"upstreamBuild":70431,"upstreamProject":"node-test-commit","upstreamUrl":"job/node-test-commit/"},{"upstreamBuild":58863,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"upstreamBuild":58847,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"prId":"52733"}],"tap":{"ok":false,"name":"parallel/test-disable-proto-throw","id":223,"buffered":false,"tapError":null,"skip":false,"todo":false,"previous":null,"plan":null,"diag":{"severity":"fail","exitcode":1,"stack":"node:internal/events/slow_event_emitter:37\n  fastEventEmitter._events.__proto__ = null;\n                                     ^\n\nError: Accessing Object.prototype.__proto__ has been disallowed with --disable-proto=throw\n    at Function.fromFastEventEmitter (node:internal/events/slow_event_emitter:37:38)\n    at EventEmitter.<computed> (node:internal/events/event_emitter:413:36)\n    at ReadableWorkerStdio.addListener (node:internal/events/event_emitter:484:47)\n    at Readable.on (node:internal/streams/readable:1130:35)\n    at ReadableWorkerStdio.once (node:internal/events/event_emitter:549:8)\n    at Readable.pipe (node:internal/streams/readable:935:9)\n    at pipeWithoutWarning (node:internal/worker:481:10)\n    at new Worker (node:internal/worker:244:7)\n    at Object.<anonymous> (c:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\parallel\\test-disable-proto-throw.js:41:3)\n    at Module._compile (node:internal/modules/cjs/loader:1480:14) {\n  code: 'ERR_PROTO_ACCESS'\n}\n\nNode.js v23.0.0-pre"},"time":185.001,"fullname":"parallel/test-disable-proto-throw","closingTestPoint":false}},{"testName":"message/stdin_messages","timestamp":1714656652787,"status":"REGRESSION","jobName":"node-test-binary-windows-js-suites","config":"node-test-binary-windows-js-suites » 0,win2019-COMPILED_BY-vs2022 #27524","buildUrl":"https://ci.nodejs.org/job/node-test-binary-windows-js-suites/RUN_SUBSET=0,nodes=win2019-COMPILED_BY-vs2022/27524/","buildNumber":27524,"builtOn":"test-rackspace-win2019_vs2019-x64-1","nodeVersion":"23.0.0","commitHash":"fa7baf79faaaf6b88b9781d7f3544228b8fa1b0f","callStack":[{"upstreamBuild":62662,"upstreamProject":"node-test-commit-windows-fanned","upstreamUrl":"job/node-test-commit-windows-fanned/"},{"upstreamBuild":70431,"upstreamProject":"node-test-commit","upstreamUrl":"job/node-test-commit/"},{"upstreamBuild":58863,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"upstreamBuild":58847,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"prId":"52733"}],"tap":{"ok":false,"name":"message/stdin_messages","id":83,"buffered":false,"tapError":null,"skip":false,"todo":false,"previous":null,"plan":null,"diag":{"severity":"fail","stack":"[stdin]\n[stdin]:1\nwith(this){__filename}\n^^^^\n\nSyntaxError: Strict mode code may not include a with statement\n    at makeContextifyScript (node:internal/vm:185:14)\n    at node:internal/process/execution:107:22\n    at [stdin]-wrapper:6:24\n    at runScript (node:internal/process/execution:101:62)\n    at evalScript (node:internal/process/execution:136:3)\n    at node:internal/main/eval_stdin:32:5\n    at Socket.<anonymous> (node:internal/process/execution:237:5)\n    at SlowEventEmitter.emit (node:internal/events/slow_event_emitter:88:35)\n    at Socket.emit (node:internal/events/event_emitter:463:41)\n    at endReadableNT (node:internal/streams/readable:1700:12)\n\nNode.js v23.0.0-pre\n42\n42\n[stdin]:1\nthrow new Error(\"hello\")\n^\n\nError: hello\n    at [stdin]:1:7\n    at runScriptInThisContext (node:internal/vm:209:10)\n    at node:internal/process/execution:118:14\n    at [stdin]-wrapper:6:24\n    at runScript (node:internal/process/execution:101:62)\n    at evalScript (node:internal/process/execution:136:3)\n    at node:internal/main/eval_stdin:32:5\n    at Socket.<anonymous> (node:internal/process/execution:237:5)\n    at SlowEventEmitter.emit (node:internal/events/slow_event_emitter:88:35)\n    at Socket.emit (node:internal/events/event_emitter:463:41)\n\nNode.js v23.0.0-pre\n[stdin]:1\nthrow new Error(\"hello\")\n^\n\nError: hello\n    at [stdin]:1:7\n    at runScriptInThisContext (node:internal/vm:209:10)\n    at node:internal/process/execution:118:14\n    at [stdin]-wrapper:6:24\n    at runScript (node:internal/process/execution:101:62)\n    at evalScript (node:internal/process/execution:136:3)\n    at node:internal/main/eval_stdin:32:5\n    at Socket.<anonymous> (node:internal/process/execution:237:5)\n    at SlowEventEmitter.emit (node:internal/events/slow_event_emitter:88:35)\n    at Socket.emit (node:internal/events/event_emitter:463:41)\n\nNode.js v23.0.0-pre\n100\n[stdin]:1\nlet x = 100; y = x;\n               ^\n\nReferenceError: y is not defined\n    at [stdin]:1:16\n    at runScriptInThisContext (node:internal/vm:209:10)\n    at node:internal/process/execution:118:14\n    at [stdin]-wrapper:6:24\n    at runScript (node:internal/process/execution:101:62)\n    at evalScript (node:internal/process/execution:136:3)\n    at node:internal/main/eval_stdin:32:5\n    at Socket.<anonymous> (node:internal/process/execution:237:5)\n    at SlowEventEmitter.emit (node:internal/events/slow_event_emitter:88:35)\n    at Socket.emit (node:internal/events/event_emitter:463:41)\n\nNode.js v23.0.0-pre\n\n[stdin]:1\nlet ______________________________________________; throw 10\n                                                    ^\n10\n(Use `node --trace-uncaught ...` to show where the exception was thrown)\n\nNode.js v23.0.0-pre\n\n[stdin]:1\nlet ______________________________________________; throw 10\n                                                    ^\n10\n(Use `node --trace-uncaught ...` to show where the exception was thrown)\n\nNode.js v23.0.0-pre\ndone"},"time":1852.072,"fullname":"message/stdin_messages","closingTestPoint":false}},{"testName":"parallel/test-disable-proto-throw","timestamp":1714656652787,"status":"REGRESSION","jobName":"node-test-binary-windows-js-suites","config":"node-test-binary-windows-js-suites » 3,win10-COMPILED_BY-vs2022 #27524","buildUrl":"https://ci.nodejs.org/job/node-test-binary-windows-js-suites/RUN_SUBSET=3,nodes=win10-COMPILED_BY-vs2022/27524/","buildNumber":27524,"builtOn":"test-azure_msft-win10_vs2019-x64-3","nodeVersion":"23.0.0","commitHash":"fa7baf79faaaf6b88b9781d7f3544228b8fa1b0f","callStack":[{"upstreamBuild":62662,"upstreamProject":"node-test-commit-windows-fanned","upstreamUrl":"job/node-test-commit-windows-fanned/"},{"upstreamBuild":70431,"upstreamProject":"node-test-commit","upstreamUrl":"job/node-test-commit/"},{"upstreamBuild":58863,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"upstreamBuild":58847,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"prId":"52733"}],"tap":{"ok":false,"name":"parallel/test-disable-proto-throw","id":223,"buffered":false,"tapError":null,"skip":false,"todo":false,"previous":null,"plan":null,"diag":{"severity":"fail","exitcode":1,"stack":"node:internal/events/slow_event_emitter:37\n  fastEventEmitter._events.__proto__ = null;\n                                     ^\n\nError: Accessing Object.prototype.__proto__ has been disallowed with --disable-proto=throw\n    at Function.fromFastEventEmitter (node:internal/events/slow_event_emitter:37:38)\n    at EventEmitter.<computed> (node:internal/events/event_emitter:413:36)\n    at ReadableWorkerStdio.addListener (node:internal/events/event_emitter:484:47)\n    at Readable.on (node:internal/streams/readable:1130:35)\n    at ReadableWorkerStdio.once (node:internal/events/event_emitter:549:8)\n    at Readable.pipe (node:internal/streams/readable:935:9)\n    at pipeWithoutWarning (node:internal/worker:481:10)\n    at new Worker (node:internal/worker:244:7)\n    at Object.<anonymous> (c:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\parallel\\test-disable-proto-throw.js:41:3)\n    at Module._compile (node:internal/modules/cjs/loader:1480:14) {\n  code: 'ERR_PROTO_ACCESS'\n}\n\nNode.js v23.0.0-pre"},"time":188.009,"fullname":"parallel/test-disable-proto-throw","closingTestPoint":false}},{"testName":"message/stdin_messages","timestamp":1714656652787,"status":"REGRESSION","jobName":"node-test-binary-windows-js-suites","config":"node-test-binary-windows-js-suites » 0,win2022-COMPILED_BY-vs2022 #27524","buildUrl":"https://ci.nodejs.org/job/node-test-binary-windows-js-suites/RUN_SUBSET=0,nodes=win2022-COMPILED_BY-vs2022/27524/","buildNumber":27524,"builtOn":"test-rackspace-win2022_vs2022-x64-3","nodeVersion":"23.0.0","commitHash":"fa7baf79faaaf6b88b9781d7f3544228b8fa1b0f","callStack":[{"upstreamBuild":62662,"upstreamProject":"node-test-commit-windows-fanned","upstreamUrl":"job/node-test-commit-windows-fanned/"},{"upstreamBuild":70431,"upstreamProject":"node-test-commit","upstreamUrl":"job/node-test-commit/"},{"upstreamBuild":58863,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"upstreamBuild":58847,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"prId":"52733"}],"tap":{"ok":false,"name":"message/stdin_messages","id":88,"buffered":false,"tapError":null,"skip":false,"todo":false,"previous":null,"plan":null,"diag":{"severity":"fail","stack":"[stdin]\n[stdin]:1\nwith(this){__filename}\n^^^^\n\nSyntaxError: Strict mode code may not include a with statement\n    at makeContextifyScript (node:internal/vm:185:14)\n    at node:internal/process/execution:107:22\n    at [stdin]-wrapper:6:24\n    at runScript (node:internal/process/execution:101:62)\n    at evalScript (node:internal/process/execution:136:3)\n    at node:internal/main/eval_stdin:32:5\n    at Socket.<anonymous> (node:internal/process/execution:237:5)\n    at SlowEventEmitter.emit (node:internal/events/slow_event_emitter:88:35)\n    at Socket.emit (node:internal/events/event_emitter:463:41)\n    at endReadableNT (node:internal/streams/readable:1700:12)\n\nNode.js v23.0.0-pre\n42\n42\n[stdin]:1\nthrow new Error(\"hello\")\n^\n\nError: hello\n    at [stdin]:1:7\n    at runScriptInThisContext (node:internal/vm:209:10)\n    at node:internal/process/execution:118:14\n    at [stdin]-wrapper:6:24\n    at runScript (node:internal/process/execution:101:62)\n    at evalScript (node:internal/process/execution:136:3)\n    at node:internal/main/eval_stdin:32:5\n    at Socket.<anonymous> (node:internal/process/execution:237:5)\n    at SlowEventEmitter.emit (node:internal/events/slow_event_emitter:88:35)\n    at Socket.emit (node:internal/events/event_emitter:463:41)\n\nNode.js v23.0.0-pre\n[stdin]:1\nthrow new Error(\"hello\")\n^\n\nError: hello\n    at [stdin]:1:7\n    at runScriptInThisContext (node:internal/vm:209:10)\n    at node:internal/process/execution:118:14\n    at [stdin]-wrapper:6:24\n    at runScript (node:internal/process/execution:101:62)\n    at evalScript (node:internal/process/execution:136:3)\n    at node:internal/main/eval_stdin:32:5\n    at Socket.<anonymous> (node:internal/process/execution:237:5)\n    at SlowEventEmitter.emit (node:internal/events/slow_event_emitter:88:35)\n    at Socket.emit (node:internal/events/event_emitter:463:41)\n\nNode.js v23.0.0-pre\n100\n[stdin]:1\nlet x = 100; y = x;\n               ^\n\nReferenceError: y is not defined\n    at [stdin]:1:16\n    at runScriptInThisContext (node:internal/vm:209:10)\n    at node:internal/process/execution:118:14\n    at [stdin]-wrapper:6:24\n    at runScript (node:internal/process/execution:101:62)\n    at evalScript (node:internal/process/execution:136:3)\n    at node:internal/main/eval_stdin:32:5\n    at Socket.<anonymous> (node:internal/process/execution:237:5)\n    at SlowEventEmitter.emit (node:internal/events/slow_event_emitter:88:35)\n    at Socket.emit (node:internal/events/event_emitter:463:41)\n\nNode.js v23.0.0-pre\n\n[stdin]:1\nlet ______________________________________________; throw 10\n                                                    ^\n10\n(Use `node --trace-uncaught ...` to show where the exception was thrown)\n\nNode.js v23.0.0-pre\n\n[stdin]:1\nlet ______________________________________________; throw 10\n                                                    ^\n10\n(Use `node --trace-uncaught ...` to show where the exception was thrown)\n\nNode.js v23.0.0-pre\ndone"},"time":2018.076,"fullname":"message/stdin_messages","closingTestPoint":false}},{"testName":"parallel/test-assert-builtins-not-read-from-filesystem","timestamp":1714656652787,"status":"REGRESSION","jobName":"node-test-binary-windows-js-suites","config":"node-test-binary-windows-js-suites » 2,win10-COMPILED_BY-vs2022 #27524","buildUrl":"https://ci.nodejs.org/job/node-test-binary-windows-js-suites/RUN_SUBSET=2,nodes=win10-COMPILED_BY-vs2022/27524/","buildNumber":27524,"builtOn":"test-azure_msft-win10_vs2019-x64-1","nodeVersion":"23.0.0","commitHash":"fa7baf79faaaf6b88b9781d7f3544228b8fa1b0f","callStack":[{"upstreamBuild":62662,"upstreamProject":"node-test-commit-windows-fanned","upstreamUrl":"job/node-test-commit-windows-fanned/"},{"upstreamBuild":70431,"upstreamProject":"node-test-commit","upstreamUrl":"job/node-test-commit/"},{"upstreamBuild":58863,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"upstreamBuild":58847,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"prId":"52733"}],"tap":{"ok":false,"name":"parallel/test-assert-builtins-not-read-from-filesystem","id":70,"buffered":false,"tapError":null,"skip":false,"todo":false,"previous":null,"plan":null,"diag":{"severity":"fail","exitcode":1,"stack":"node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Exit code: 1\n,,node:fs:2348\n\n    return binding.writeFileUtf8(\n\n                   ^\n\n\n\nError: ENOENT: no such file or directory, open 'c:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\.tmp.68\\node:internal\\events\\fast_event_emitter'\n\n    at writeFileSync (node:fs:2348:20)\n\n    at Object.<anonymous> (c:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\parallel\\test-assert-builtins-not-read-from-filesystem.js:41:3)\n\n    at Module._compile (node:internal/modules/cjs/loader:1480:14)\n\n    at Module._extensions..js (node:internal/modules/cjs/loader:1564:10)\n\n    at Module.load (node:internal/modules/cjs/loader:1287:32)\n\n    at Module._load (node:internal/modules/cjs/loader:1103:12)\n\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:168:12)\n\n    at node:internal/main/run_main_module:30:49 {\n\n  errno: -4058,\n\n  code: 'ENOENT',\n\n  syscall: 'open',\n\n  path: 'c:\\\\workspace\\\\node-test-binary-windows-js-suites\\\\node\\\\test\\\\.tmp.68\\\\node:internal\\\\events\\\\fast_event_emitter'\n\n}\n\n\n\nNode.js v23.0.0-pre\n\n\n    at Object.<anonymous> (c:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\parallel\\test-assert-builtins-not-read-from-filesystem.js:31:12)\n    at Module._compile (node:internal/modules/cjs/loader:1480:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1564:10)\n    at Module.load (node:internal/modules/cjs/loader:1287:32)\n    at Module._load (node:internal/modules/cjs/loader:1103:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:168:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: false,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 0,\n  operator: 'strictEqual'\n}\n\nNode.js v23.0.0-pre"},"time":492.003,"fullname":"parallel/test-assert-builtins-not-read-from-filesystem","closingTestPoint":false}},{"testName":"parallel/test-disable-proto-delete","timestamp":1714656652787,"status":"REGRESSION","jobName":"node-test-binary-windows-js-suites","config":"node-test-binary-windows-js-suites » 2,win10-COMPILED_BY-vs2022 #27524","buildUrl":"https://ci.nodejs.org/job/node-test-binary-windows-js-suites/RUN_SUBSET=2,nodes=win10-COMPILED_BY-vs2022/27524/","buildNumber":27524,"builtOn":"test-azure_msft-win10_vs2019-x64-1","nodeVersion":"23.0.0","commitHash":"fa7baf79faaaf6b88b9781d7f3544228b8fa1b0f","callStack":[{"upstreamBuild":62662,"upstreamProject":"node-test-commit-windows-fanned","upstreamUrl":"job/node-test-commit-windows-fanned/"},{"upstreamBuild":70431,"upstreamProject":"node-test-commit","upstreamUrl":"job/node-test-commit/"},{"upstreamBuild":58863,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"upstreamBuild":58847,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"prId":"52733"}],"tap":{"ok":false,"name":"parallel/test-disable-proto-delete","id":222,"buffered":false,"tapError":null,"skip":false,"todo":false,"previous":null,"plan":null,"diag":{"severity":"fail","exitcode":1,"stack":"node:internal/events/slow_event_emitter:268\n    for (let i = listeners.length - 1; i >= 0; i--) {\n                           ^\n\nTypeError: Cannot read properties of null (reading 'length')\n    at SlowEventEmitter.removeAllListeners (node:internal/events/slow_event_emitter:268:28)\n    at Worker.removeAllListeners (node:internal/events/event_emitter:596:38)\n    at SlowEventEmitter.removeAllListeners (node:internal/events/slow_event_emitter:253:41)\n    at Worker.removeAllListeners (node:internal/events/event_emitter:596:38)\n    at [kOnExit] (node:internal/worker:316:10)\n    at Worker.<computed>.onexit (node:internal/worker:229:20)\n\nNode.js v23.0.0-pre"},"time":271.002,"fullname":"parallel/test-disable-proto-delete","closingTestPoint":false}},{"testName":"parallel/test-runner-output","timestamp":1714656652787,"status":"FAILED","jobName":"node-test-binary-windows-js-suites","config":"node-test-binary-windows-js-suites » 2,win10-COMPILED_BY-vs2022 #27524","buildUrl":"https://ci.nodejs.org/job/node-test-binary-windows-js-suites/RUN_SUBSET=2,nodes=win10-COMPILED_BY-vs2022/27524/","buildNumber":27524,"builtOn":"test-azure_msft-win10_vs2019-x64-1","nodeVersion":"23.0.0","commitHash":"fa7baf79faaaf6b88b9781d7f3544228b8fa1b0f","callStack":[{"upstreamBuild":62662,"upstreamProject":"node-test-commit-windows-fanned","upstreamUrl":"job/node-test-commit-windows-fanned/"},{"upstreamBuild":70431,"upstreamProject":"node-test-commit","upstreamUrl":"job/node-test-commit/"},{"upstreamBuild":58863,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"upstreamBuild":58847,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"prId":"52733"}],"tap":{"ok":false,"name":"parallel/test-runner-output","id":672,"buffered":false,"tapError":null,"skip":false,"todo":false,"previous":null,"plan":null,"diag":{"severity":"fail","exitcode":1,"stack":"TAP version 13\n# Subtest: test runner output\n    # Subtest: test-runner/output/abort.js\n    ok 1 - test-runner/output/abort.js\n      ---\n      duration_ms: 1861.9038\n      ...\n    # Subtest: test-runner/output/abort_suite.js\n    ok 2 - test-runner/output/abort_suite.js\n      ---\n      duration_ms: 1971.3237\n      ...\n    # Subtest: test-runner/output/abort_hooks.js\n    ok 3 - test-runner/output/abort_hooks.js\n      ---\n      duration_ms: 873.6448\n      ...\n    # Subtest: test-runner/output/describe_it.js\n    ok 4 - test-runner/output/describe_it.js\n      ---\n      duration_ms: 2033.6843\n      ...\n    # Subtest: test-runner/output/describe_nested.js\n    ok 5 - test-runner/output/describe_nested.js\n      ---\n      duration_ms: 854.3798\n      ...\n    # Subtest: test-runner/output/eval_dot.js\n    ok 6 - test-runner/output/eval_dot.js\n      ---\n      duration_ms: 987.263\n      ...\n    # Subtest: test-runner/output/eval_spec.js\n    ok 7 - test-runner/output/eval_spec.js\n      ---\n      duration_ms: 836.4168\n      ...\n    # Subtest: test-runner/output/eval_tap.js\n    ok 8 - test-runner/output/eval_tap.js\n      ---\n      duration_ms: 1018.7113\n      ...\n    # Subtest: test-runner/output/hooks.js\n    ok 9 - test-runner/output/hooks.js\n      ---\n      duration_ms: 1448.5527\n      ...\n    # Subtest: test-runner/output/hooks_spec_reporter.js\n    ok 10 - test-runner/output/hooks_spec_reporter.js\n      ---\n      duration_ms: 2757.7392\n      ...\n    # Subtest: test-runner/output/skip-each-hooks.js\n    ok 11 - test-runner/output/skip-each-hooks.js\n      ---\n      duration_ms: 944.4301\n      ...\n    # Subtest: test-runner/output/suite-skip-hooks.js\n    ok 12 - test-runner/output/suite-skip-hooks.js\n      ---\n      duration_ms: 985.9497\n      ...\n    # Subtest: test-runner/output/timeout_in_before_each_should_not_affect_further_tests.js\n    ok 13 - test-runner/output/timeout_in_before_each_should_not_affect_further_tests.js\n      ---\n      duration_ms: 2284.3881\n      ...\n    # Subtest: test-runner/output/hooks-with-no-global-test.js\n    ok 14 - test-runner/output/hooks-with-no-global-test.js\n      ---\n      duration_ms: 1387.9039\n      ...\n    # Subtest: test-runner/output/global-hooks-with-no-tests.js\n    ok 15 - test-runner/output/global-hooks-with-no-tests.js\n      ---\n      duration_ms: 1918.2632\n      ...\n    # Subtest: test-runner/output/before-and-after-each-too-many-listeners.js\n    ok 16 - test-runner/output/before-and-after-each-too-many-listeners.js\n      ---\n      duration_ms: 1504.7595\n      ...\n    # Subtest: test-runner/output/before-and-after-each-with-timeout-too-many-listeners.js\n    ok 17 - test-runner/output/before-and-after-each-with-timeout-too-many-listeners.js\n      ---\n      duration_ms: 1644.017\n      ...\n    # Subtest: test-runner/output/force_exit.js\n    ok 18 - test-runner/output/force_exit.js\n      ---\n      duration_ms: 1486.2806\n      ...\n    # Subtest: test-runner/output/global_after_should_fail_the_test.js\n    ok 19 - test-runner/output/global_after_should_fail_the_test.js\n      ---\n      duration_ms: 1473.5267\n      ...\n    # Subtest: test-runner/output/no_refs.js\n    not ok 20 - test-runner/output/no_refs.js\n      ---\n      duration_ms: 1614.3338\n      location: 'c:\\\\workspace\\\\node-test-binary-windows-js-suites\\\\node\\\\test\\\\parallel\\\\test-runner-output.mjs:155:5'\n      failureType: 'testCodeFailure'\n      error: |-\n        Expected values to be strictly equal:\n        + actual - expected ... Lines skipped\n        \n          'TAP version 13\\n' +\n            '# Subtest: does not keep event loop alive\\n' +\n        ...\n            \"      error: 'Promise resolution is still pending but the event loop has already resolved'\\n\" +\n            \"      code: 'ERR_TEST_FAILURE'\\n\" +\n        +   '      ...\\n' +\n        +   '    1..1\\n' +\n        +   'not ok 1 - does not keep event loop alive\\n' +\n        +   '  ---\\n' +\n        +   '  duration_ms: *\\n' +\n        +   \"  location: '/test/fixtures/test-runner/output/no_refs.js:(LINE):1'\\n\" +\n        +   \"  failureType: 'cancelledByParent'\\n\" +\n        +   \"  error: 'Promise resolution is still pending but the event loop has already resolved'\\n\" +\n        +   \"  code: 'ERR_TEST_FAILURE'\\n\" +\n        -   '      stack: |-\\n' +\n        -   '        *\\n' +\n        -   '      ...\\n' +\n        -   '    1..1\\n' +\n        -   'not ok 1 - does not keep event loop alive\\n' +\n        -   '  ---\\n' +\n        -   '  duration_ms: *\\n' +\n        -   \"  location: '/test/fixtures/test-runner/output/no_refs.js:(LINE):1'\\n\" +\n        -   \"  failureType: 'cancelledByParent'\\n\" +\n        -   \"  error: 'Promise resolution is still pending but the event loop has already resolved'\\n\" +\n        -   \"  code: 'ERR_TEST_FAILURE'\\n\" +\n        -   '  stack: |-\\n' +\n        -   '    *\\n' +\n            '  ...\\n' +\n        ...\n            '# skipped 0\\n' +\n            '# todo 0\\n' +\n            '# duration_ms *\\n'\n      code: 'ERR_ASSERTION'\n      name: 'AssertionError'\n      expected: |-\n        TAP version 13\n        # Subtest: does not keep event loop alive\n            # Subtest: +does not keep event loop alive\n            not ok 1 - +does not keep event loop alive\n              ---\n              duration_ms: *\n              location: '/test/fixtures/test-runner/output/no_refs.js:(LINE):11'\n              failureType: 'cancelledByParent'\n              error: 'Promise resolution is still pending but the event loop has already resolved'\n              code: 'ERR_TEST_FAILURE'\n              stack: |-\n                *\n              ...\n            1..1\n        not ok 1 - does not keep event loop alive\n          ---\n          duration_ms: *\n          location: '/test/fixtures/test-runner/output/no_refs.js:(LINE):1'\n          failureType: 'cancelledByParent'\n          error: 'Promise resolution is still pending but the event loop has already resolved'\n          code: 'ERR_TEST_FAILURE'\n          stack: |-\n            *\n          ...\n        1..1\n        # tests 2\n        # suites 0\n        # pass 0\n        # fail 0\n        # cancelled 2\n        # skipped 0\n        # todo 0\n        # duration_ms *\n        \n      actual: |-\n        TAP version 13\n        # Subtest: does not keep event loop alive\n            # Subtest: +does not keep event loop alive\n            not ok 1 - +does not keep event loop alive\n              ---\n              duration_ms: *\n              location: '/test/fixtures/test-runner/output/no_refs.js:(LINE):11'\n              failureType: 'cancelledByParent'\n              error: 'Promise resolution is still pending but the event loop has already resolved'\n              code: 'ERR_TEST_FAILURE'\n              ...\n            1..1\n        not ok 1 - does not keep event loop alive\n          ---\n          duration_ms: *\n          location: '/test/fixtures/test-runner/output/no_refs.js:(LINE):1'\n          failureType: 'cancelledByParent'\n          error: 'Promise resolution is still pending but the event loop has already resolved'\n          code: 'ERR_TEST_FAILURE'\n          ...\n        1..1\n        # tests 2\n        # suites 0\n        # pass 0\n        # fail 0\n        # cancelled 2\n        # skipped 0\n        # todo 0\n        # duration_ms *\n        \n      operator: 'strictEqual'\n      stack: |-\n        assertSnapshot (c:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:56:12)\n        async Module.spawnAndAssert (c:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:84:3)\n        async TestContext.<anonymous> (file:///c:/workspace/node-test-binary-windows-js-suites/node/test/parallel/test-runner-output.mjs:149:5)\n        async Test.run (node:internal/test_runner/test:748:9)\n        async Promise.all (index 19)\n        async Suite.run (node:internal/test_runner/test:1106:7)\n        async Test.processPendingSubtests (node:internal/test_runner/test:461:7)\n      ...\n    # Subtest: test-runner/output/no_tests.js\n    ok 21 - test-runner/output/no_tests.js\n      ---\n      duration_ms: 1454.4709\n      ...\n    # Subtest: test-runner/output/only_tests.js\n    ok 22 - test-runner/output/only_tests.js\n      ---\n      duration_ms: 1594.8361\n      ...\n    # Subtest: test-runner/output/dot_reporter.js\n    ok 23 - test-runner/output/dot_reporter.js\n      ---\n      duration_ms: 3912.0479\n      ...\n    # Subtest: test-runner/output/junit_reporter.js\n    not ok 24 - test-runner/output/junit_reporter.js\n      ---\n      duration_ms: 3734.1846\n      location: 'c:\\\\workspace\\\\node-test-binary-windows-js-suites\\\\node\\\\test\\\\parallel\\\\test-runner-output.mjs:155:5'\n      failureType: 'testCodeFailure'\n      error: |-\n        Expected values to be strictly equal:\n        + actual - expected ... Lines skipped\n        \n          '<?xml version=\"1.0\" encoding=\"utf-8\"?>\\n' +\n            '<testsuites>\\n' +\n        ...\n            '\\t\\t</failure>\\n' +\n            '\\t</testcase>\\n' +\n        +   '\\t<testcase name=\"callback called twice\" time=\"*\" '... 11376 more characters\n        -   '\\t<testcase name=\"callback called twice\" time=\"*\" '... 11392 more characters\n      code: 'ERR_ASSERTION'\n      name: 'AssertionError'\n      expected: |-\n        <?xml version=\"1.0\" encoding=\"utf-8\"?>\n        <testsuites>\n        \t<testcase name=\"sync pass todo\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"todo\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync pass todo with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"todo\" message=\"this is a passing todo\"/>\n        \t</testcase>\n        \t<testcase name=\"sync fail todo\" time=\"*\" classname=\"test\" failure=\"thrown from sync fail todo\">\n        \t\t<skipped type=\"todo\" message=\"true\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync fail todo\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync fail todo] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync fail todo\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync fail todo with message\" time=\"*\" classname=\"test\" failure=\"thrown from sync fail todo with message\">\n        \t\t<skipped type=\"todo\" message=\"this is a failing todo\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync fail todo with message\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync fail todo with message] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync fail todo with message\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync skip pass\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip pass with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"this is skipped\"/>\n        \t</testcase>\n        \t<testcase name=\"sync pass\" time=\"*\" classname=\"test\"/>\n        \t<!-- this test should pass -->\n        \t<testcase name=\"sync throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from sync throw fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async skip pass\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"async pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from async throw fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from async throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from async throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async skip fail\" time=\"*\" classname=\"test\" failure=\"thrown from async throw fail\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from async throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from async throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async assertion fail\" time=\"*\" classname=\"test\" failure=\"Expected values to be strictly equal:true !== false\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Expected values to be strictly equal:true !== false\">\n        [Error [ERR_TEST_FAILURE]: Expected values to be strictly equal:\n        \n        true !== false\n        ] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n          \n          true !== false\n          \n              *\n              *\n              *\n              *\n              *\n              *\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: true,\n            expected: false,\n            operator: 'strictEqual'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"resolve pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"reject fail\" time=\"*\" classname=\"test\" failure=\"rejected from reject fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"rejected from reject fail\">\n        [Error [ERR_TEST_FAILURE]: rejected from reject fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: rejected from reject fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unhandled rejection - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async unhandled rejection - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate throw - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate reject - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate resolve pass\" time=\"*\" classname=\"test\"/>\n        \t<testsuite name=\"subtest sync throw fail\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"1\" failures=\"1\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"+sync throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fail\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fail\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fail\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<!-- this subtest should make its parent test fail -->\n        \t</testsuite>\n        \t<testcase name=\"sync throw non-error fail\" time=\"*\" classname=\"test\" failure=\"Symbol(thrown symbol from sync throw non-error fail)\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Symbol(thrown symbol from sync throw non-error fail)\">\n        [Error [ERR_TEST_FAILURE]: Symbol(thrown symbol from sync throw non-error fail)] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: Symbol(thrown symbol from sync throw non-error fail) }\n        \t\t</failure>\n        \t</testcase>\n        \t<testsuite name=\"level 0a\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"4\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"level 1a\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1b\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1c\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1d\" time=\"*\" classname=\"test\"/>\n        \t</testsuite>\n        \t<testsuite name=\"top level\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"2\" failures=\"1\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"+long running\" time=\"*\" classname=\"test\" failure=\"test did not finish before its parent and was cancelled\">\n        \t\t\t<failure type=\"cancelledByParent\" message=\"test did not finish before its parent and was cancelled\">\n        [Error [ERR_TEST_FAILURE]: test did not finish before its parent and was cancelled] { code: 'ERR_TEST_FAILURE', failureType: 'cancelledByParent', cause: 'test did not finish before its parent and was cancelled' }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<testsuite name=\"+short running\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"1\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t\t<testcase name=\"++short running\" time=\"*\" classname=\"test\"/>\n        \t\t</testsuite>\n        \t</testsuite>\n        \t<testcase name=\"invalid subtest - pass but subtest fails\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"sync skip option\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip option with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"this is skipped\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip option is false fail\" time=\"*\" classname=\"test\" failure=\"this should be executed\">\n        \t\t<failure type=\"testCodeFailure\" message=\"this should be executed\">\n        [Error [ERR_TEST_FAILURE]: this should be executed] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: this should be executed\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"functionOnly\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"test with only a name provided\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"test with a name and options provided\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"functionAndOptions\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"callback pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback fail\" time=\"*\" classname=\"test\" failure=\"callback failure\">\n        \t\t<failure type=\"testCodeFailure\" message=\"callback failure\">\n        [Error [ERR_TEST_FAILURE]: callback failure] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: callback failure\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback also returns a Promise\" time=\"*\" classname=\"test\" failure=\"passed a callback but also returned a Promise\">\n        \t\t<failure type=\"callbackAndPromisePresent\" message=\"passed a callback but also returned a Promise\">\n        [Error [ERR_TEST_FAILURE]: passed a callback but also returned a Promise] { code: 'ERR_TEST_FAILURE', failureType: 'callbackAndPromisePresent', cause: 'passed a callback but also returned a Promise' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback throw\" time=\"*\" classname=\"test\" failure=\"thrown from callback throw\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from callback throw\">\n        [Error [ERR_TEST_FAILURE]: thrown from callback throw] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from callback throw\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback called twice\" time=\"*\" classname=\"test\" failure=\"callback invoked multiple times\">\n        \t\t<failure type=\"multipleCallbackInvocations\" message=\"callback invoked multiple times\">\n        Error [ERR_TEST_FAILURE]: callback invoked multiple times\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'multipleCallbackInvocations',\n          cause: 'callback invoked multiple times'\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback called twice in different ticks\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback called twice in future tick\" time=\"*\" classname=\"test\" failure=\"callback invoked multiple times\">\n        \t\t<failure type=\"uncaughtException\" message=\"callback invoked multiple times\">\n        Error [ERR_TEST_FAILURE]: callback invoked multiple times\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error [ERR_TEST_FAILURE]: callback invoked multiple times\n              * {\n            code: 'ERR_TEST_FAILURE',\n            failureType: 'multipleCallbackInvocations',\n            cause: 'callback invoked multiple times'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback async throw\" time=\"*\" classname=\"test\" failure=\"thrown from callback async throw\">\n        \t\t<failure type=\"uncaughtException\" message=\"thrown from callback async throw\">\n        Error [ERR_TEST_FAILURE]: thrown from callback async throw\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error: thrown from callback async throw\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback async throw after done\" time=\"*\" classname=\"test\"/>\n        \t<testsuite name=\"only is set but not in only mode\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"4\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"running subtest 1\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"running subtest 2\" time=\"*\" classname=\"test\"/>\n        \t\t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t\t<testcase name=\"running subtest 3\" time=\"*\" classname=\"test\"/>\n        \t\t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t\t<testcase name=\"running subtest 4\" time=\"*\" classname=\"test\"/>\n        \t</testsuite>\n        \t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t<testcase name=\"custom inspect symbol fail\" time=\"*\" classname=\"test\" failure=\"customized\">\n        \t\t<failure type=\"testCodeFailure\" message=\"customized\">\n        [Error [ERR_TEST_FAILURE]: customized] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: customized }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"custom inspect symbol that throws fail\" time=\"*\" classname=\"test\" failure=\"{  foo: 1,  [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]}\">\n        \t\t<failure type=\"testCodeFailure\" message=\"{  foo: 1,  [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]}\">\n        [Error [ERR_TEST_FAILURE]: {\n          foo: 1,\n          [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]\n        }] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: { foo: 1, [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]] }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testsuite name=\"subtest sync throw fails\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"2\" failures=\"2\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"sync throw fails at first\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fails at first\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fails at first\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fails at first\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fails at first\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<testcase name=\"sync throw fails at second\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fails at second\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fails at second\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fails at second\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fails at second\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t</testsuite>\n        \t<testcase name=\"timed out async test\" time=\"*\" classname=\"test\" failure=\"test timed out after 5ms\">\n        \t\t<failure type=\"testTimeoutFailure\" message=\"test timed out after 5ms\">\n        [Error [ERR_TEST_FAILURE]: test timed out after 5ms] { code: 'ERR_TEST_FAILURE', failureType: 'testTimeoutFailure', cause: 'test timed out after 5ms' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"timed out callback test\" time=\"*\" classname=\"test\" failure=\"test timed out after 5ms\">\n        \t\t<failure type=\"testTimeoutFailure\" message=\"test timed out after 5ms\">\n        [Error [ERR_TEST_FAILURE]: test timed out after 5ms] { code: 'ERR_TEST_FAILURE', failureType: 'testTimeoutFailure', cause: 'test timed out after 5ms' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"large timeout async test is ok\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"large timeout callback test is ok\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"successful thenable\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"rejected thenable\" time=\"*\" classname=\"test\" failure=\"custom error\">\n        \t\t<failure type=\"testCodeFailure\" message=\"custom error\">\n        [Error [ERR_TEST_FAILURE]: custom error] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: 'custom error' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unfinished test with uncaughtException\" time=\"*\" classname=\"test\" failure=\"foo\">\n        \t\t<failure type=\"uncaughtException\" message=\"foo\">\n        Error [ERR_TEST_FAILURE]: foo\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error: foo\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unfinished test with unhandledRejection\" time=\"*\" classname=\"test\" failure=\"bar\">\n        \t\t<failure type=\"unhandledRejection\" message=\"bar\">\n        Error [ERR_TEST_FAILURE]: bar\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'unhandledRejection',\n          cause: Error: bar\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"assertion errors display actual and expected properly\" time=\"*\" classname=\"test\" failure=\"Expected values to be loosely deep-equal:{  bar: 1,  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  foo: 1}should loosely deep-equal{  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  circular: &lt;ref *1> {    bar: 2,    c: [Circular *1]  }}\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Expected values to be loosely deep-equal:{  bar: 1,  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  foo: 1}should loosely deep-equal{  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  circular: &lt;ref *1> {    bar: 2,    c: [Circular *1]  }}\">\n        [Error [ERR_TEST_FAILURE]: Expected values to be loosely deep-equal:\n        \n        {\n          bar: 1,\n          baz: {\n            date: 1970-01-01T00:00:00.000Z,\n            null: null,\n            number: 1,\n            string: 'Hello',\n            undefined: undefined\n          },\n          boo: [\n            1\n          ],\n          foo: 1\n        }\n        \n        should loosely deep-equal\n        \n        {\n          baz: {\n            date: 1970-01-01T00:00:00.000Z,\n            null: null,\n            number: 1,\n            string: 'Hello',\n            undefined: undefined\n          },\n          boo: [\n            1\n          ],\n          circular: &lt;ref *1> {\n            bar: 2,\n            c: [Circular *1]\n          }\n        }] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n          \n          {\n            bar: 1,\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            foo: 1\n          }\n          \n          should loosely deep-equal\n          \n          {\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            circular: &lt;ref *1> {\n              bar: 2,\n              c: [Circular *1]\n            }\n          }\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: [Object],\n            expected: [Object],\n            operator: 'deepEqual'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"invalid subtest fail\" time=\"*\" classname=\"test\" failure=\"test could not be started because its parent finished\">\n        \t\t<failure type=\"parentAlreadyFinished\" message=\"test could not be started because its parent finished\">\n        Error [ERR_TEST_FAILURE]: test could not be started because its parent finished\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'parentAlreadyFinished',\n          cause: 'test could not be started because its parent finished'\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<!-- Error: Test \"unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:72:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: Test \"async unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:76:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from async unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: A resource generated asynchronous activity after the test ended. This activity created the error \"Error: uncaught from outside of a test\" which triggered an uncaughtException event, caught by the test runner. -->\n        \t<!-- Error: Test \"immediate throw - passes but warns\" at test/fixtures/test-runner/output/output.js:80:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from immediate throw fail\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- Error: Test \"immediate reject - passes but warns\" at test/fixtures/test-runner/output/output.js:86:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from immediate reject fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: Test \"callback called twice in different ticks\" at test/fixtures/test-runner/output/output.js:251:1 generated asynchronous activity after the test ended. This activity created the error \"Error [ERR_TEST_FAILURE]: callback invoked multiple times\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- Error: Test \"callback async throw after done\" at test/fixtures/test-runner/output/output.js:269:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from callback async throw after done\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- tests 76 -->\n        \t<!-- suites 0 -->\n        \t<!-- pass 35 -->\n        \t<!-- fail 25 -->\n        \t<!-- cancelled 3 -->\n        \t<!-- skipped 9 -->\n        \t<!-- todo 4 -->\n        \t<!-- duration_ms * -->\n        </testsuites>\n        \n      actual: |-\n        <?xml version=\"1.0\" encoding=\"utf-8\"?>\n        <testsuites>\n        \t<testcase name=\"sync pass todo\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"todo\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync pass todo with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"todo\" message=\"this is a passing todo\"/>\n        \t</testcase>\n        \t<testcase name=\"sync fail todo\" time=\"*\" classname=\"test\" failure=\"thrown from sync fail todo\">\n        \t\t<skipped type=\"todo\" message=\"true\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync fail todo\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync fail todo] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync fail todo\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync fail todo with message\" time=\"*\" classname=\"test\" failure=\"thrown from sync fail todo with message\">\n        \t\t<skipped type=\"todo\" message=\"this is a failing todo\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync fail todo with message\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync fail todo with message] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync fail todo with message\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync skip pass\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip pass with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"this is skipped\"/>\n        \t</testcase>\n        \t<testcase name=\"sync pass\" time=\"*\" classname=\"test\"/>\n        \t<!-- this test should pass -->\n        \t<testcase name=\"sync throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from sync throw fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async skip pass\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"async pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from async throw fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from async throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from async throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async skip fail\" time=\"*\" classname=\"test\" failure=\"thrown from async throw fail\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from async throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from async throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async assertion fail\" time=\"*\" classname=\"test\" failure=\"Expected values to be strictly equal:true !== false\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Expected values to be strictly equal:true !== false\">\n        [Error [ERR_TEST_FAILURE]: Expected values to be strictly equal:\n        \n        true !== false\n        ] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n          \n          true !== false\n          \n              *\n              *\n              *\n              *\n              *\n              *\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: true,\n            expected: false,\n            operator: 'strictEqual'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"resolve pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"reject fail\" time=\"*\" classname=\"test\" failure=\"rejected from reject fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"rejected from reject fail\">\n        [Error [ERR_TEST_FAILURE]: rejected from reject fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: rejected from reject fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unhandled rejection - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async unhandled rejection - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate throw - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate reject - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate resolve pass\" time=\"*\" classname=\"test\"/>\n        \t<testsuite name=\"subtest sync throw fail\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"1\" failures=\"1\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"+sync throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fail\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fail\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fail\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<!-- this subtest should make its parent test fail -->\n        \t</testsuite>\n        \t<testcase name=\"sync throw non-error fail\" time=\"*\" classname=\"test\" failure=\"Symbol(thrown symbol from sync throw non-error fail)\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Symbol(thrown symbol from sync throw non-error fail)\">\n        [Error [ERR_TEST_FAILURE]: Symbol(thrown symbol from sync throw non-error fail)] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: Symbol(thrown symbol from sync throw non-error fail) }\n        \t\t</failure>\n        \t</testcase>\n        \t<testsuite name=\"level 0a\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"4\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"level 1a\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1b\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1c\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1d\" time=\"*\" classname=\"test\"/>\n        \t</testsuite>\n        \t<testsuite name=\"top level\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"2\" failures=\"1\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"+long running\" time=\"*\" classname=\"test\" failure=\"test did not finish before its parent and was cancelled\">\n        \t\t\t<failure type=\"cancelledByParent\" message=\"test did not finish before its parent and was cancelled\">\n        [Error [ERR_TEST_FAILURE]: test did not finish before its parent and was cancelled] { code: 'ERR_TEST_FAILURE', failureType: 'cancelledByParent', cause: 'test did not finish before its parent and was cancelled' }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<testsuite name=\"+short running\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"1\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t\t<testcase name=\"++short running\" time=\"*\" classname=\"test\"/>\n        \t\t</testsuite>\n        \t</testsuite>\n        \t<testcase name=\"invalid subtest - pass but subtest fails\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"sync skip option\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip option with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"this is skipped\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip option is false fail\" time=\"*\" classname=\"test\" failure=\"this should be executed\">\n        \t\t<failure type=\"testCodeFailure\" message=\"this should be executed\">\n        [Error [ERR_TEST_FAILURE]: this should be executed] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: this should be executed\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"functionOnly\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"test with only a name provided\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"test with a name and options provided\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"functionAndOptions\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"callback pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback fail\" time=\"*\" classname=\"test\" failure=\"callback failure\">\n        \t\t<failure type=\"testCodeFailure\" message=\"callback failure\">\n        [Error [ERR_TEST_FAILURE]: callback failure] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: callback failure\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback also returns a Promise\" time=\"*\" classname=\"test\" failure=\"passed a callback but also returned a Promise\">\n        \t\t<failure type=\"callbackAndPromisePresent\" message=\"passed a callback but also returned a Promise\">\n        [Error [ERR_TEST_FAILURE]: passed a callback but also returned a Promise] { code: 'ERR_TEST_FAILURE', failureType: 'callbackAndPromisePresent', cause: 'passed a callback but also returned a Promise' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback throw\" time=\"*\" classname=\"test\" failure=\"thrown from callback throw\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from callback throw\">\n        [Error [ERR_TEST_FAILURE]: thrown from callback throw] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from callback throw\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback called twice\" time=\"*\" classname=\"test\" failure=\"callback invoked multiple times\">\n        \t\t<failure type=\"multipleCallbackInvocations\" message=\"callback invoked multiple times\">\n        Error [ERR_TEST_FAILURE]: callback invoked multiple times\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'multipleCallbackInvocations',\n          cause: 'callback invoked multiple times'\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback called twice in different ticks\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback called twice in future tick\" time=\"*\" classname=\"test\" failure=\"callback invoked multiple times\">\n        \t\t<failure type=\"uncaughtException\" message=\"callback invoked multiple times\">\n        [Error [ERR_TEST_FAILURE]: callback invoked multiple times] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error [ERR_TEST_FAILURE]: callback invoked multiple times\n              * {\n            code: 'ERR_TEST_FAILURE',\n            failureType: 'multipleCallbackInvocations',\n            cause: 'callback invoked multiple times'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback async throw\" time=\"*\" classname=\"test\" failure=\"thrown from callback async throw\">\n        \t\t<failure type=\"uncaughtException\" message=\"thrown from callback async throw\">\n        [Error [ERR_TEST_FAILURE]: thrown from callback async throw] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error: thrown from callback async throw\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback async throw after done\" time=\"*\" classname=\"test\"/>\n        \t<testsuite name=\"only is set but not in only mode\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"4\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"running subtest 1\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"running subtest 2\" time=\"*\" classname=\"test\"/>\n        \t\t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t\t<testcase name=\"running subtest 3\" time=\"*\" classname=\"test\"/>\n        \t\t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t\t<testcase name=\"running subtest 4\" time=\"*\" classname=\"test\"/>\n        \t</testsuite>\n        \t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t<testcase name=\"custom inspect symbol fail\" time=\"*\" classname=\"test\" failure=\"customized\">\n        \t\t<failure type=\"testCodeFailure\" message=\"customized\">\n        [Error [ERR_TEST_FAILURE]: customized] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: customized }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"custom inspect symbol that throws fail\" time=\"*\" classname=\"test\" failure=\"{  foo: 1,  [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]}\">\n        \t\t<failure type=\"testCodeFailure\" message=\"{  foo: 1,  [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]}\">\n        [Error [ERR_TEST_FAILURE]: {\n          foo: 1,\n          [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]\n        }] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: { foo: 1, [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]] }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testsuite name=\"subtest sync throw fails\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"2\" failures=\"2\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"sync throw fails at first\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fails at first\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fails at first\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fails at first\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fails at first\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<testcase name=\"sync throw fails at second\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fails at second\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fails at second\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fails at second\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fails at second\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t</testsuite>\n        \t<testcase name=\"timed out async test\" time=\"*\" classname=\"test\" failure=\"test timed out after 5ms\">\n        \t\t<failure type=\"testTimeoutFailure\" message=\"test timed out after 5ms\">\n        [Error [ERR_TEST_FAILURE]: test timed out after 5ms] { code: 'ERR_TEST_FAILURE', failureType: 'testTimeoutFailure', cause: 'test timed out after 5ms' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"timed out callback test\" time=\"*\" classname=\"test\" failure=\"test timed out after 5ms\">\n        \t\t<failure type=\"testTimeoutFailure\" message=\"test timed out after 5ms\">\n        [Error [ERR_TEST_FAILURE]: test timed out after 5ms] { code: 'ERR_TEST_FAILURE', failureType: 'testTimeoutFailure', cause: 'test timed out after 5ms' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"large timeout async test is ok\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"large timeout callback test is ok\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"successful thenable\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"rejected thenable\" time=\"*\" classname=\"test\" failure=\"custom error\">\n        \t\t<failure type=\"testCodeFailure\" message=\"custom error\">\n        [Error [ERR_TEST_FAILURE]: custom error] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: 'custom error' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unfinished test with uncaughtException\" time=\"*\" classname=\"test\" failure=\"foo\">\n        \t\t<failure type=\"uncaughtException\" message=\"foo\">\n        [Error [ERR_TEST_FAILURE]: foo] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error: foo\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unfinished test with unhandledRejection\" time=\"*\" classname=\"test\" failure=\"bar\">\n        \t\t<failure type=\"unhandledRejection\" message=\"bar\">\n        [Error [ERR_TEST_FAILURE]: bar] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'unhandledRejection',\n          cause: Error: bar\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"assertion errors display actual and expected properly\" time=\"*\" classname=\"test\" failure=\"Expected values to be loosely deep-equal:{  bar: 1,  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  foo: 1}should loosely deep-equal{  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  circular: &lt;ref *1> {    bar: 2,    c: [Circular *1]  }}\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Expected values to be loosely deep-equal:{  bar: 1,  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  foo: 1}should loosely deep-equal{  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  circular: &lt;ref *1> {    bar: 2,    c: [Circular *1]  }}\">\n        [Error [ERR_TEST_FAILURE]: Expected values to be loosely deep-equal:\n        \n        {\n          bar: 1,\n          baz: {\n            date: 1970-01-01T00:00:00.000Z,\n            null: null,\n            number: 1,\n            string: 'Hello',\n            undefined: undefined\n          },\n          boo: [\n            1\n          ],\n          foo: 1\n        }\n        \n        should loosely deep-equal\n        \n        {\n          baz: {\n            date: 1970-01-01T00:00:00.000Z,\n            null: null,\n            number: 1,\n            string: 'Hello',\n            undefined: undefined\n          },\n          boo: [\n            1\n          ],\n          circular: &lt;ref *1> {\n            bar: 2,\n            c: [Circular *1]\n          }\n        }] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n          \n          {\n            bar: 1,\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            foo: 1\n          }\n          \n          should loosely deep-equal\n          \n          {\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            circular: &lt;ref *1> {\n              bar: 2,\n              c: [Circular *1]\n            }\n          }\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: [Object],\n            expected: [Object],\n            operator: 'deepEqual'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"invalid subtest fail\" time=\"*\" classname=\"test\" failure=\"test could not be started because its parent finished\">\n        \t\t<failure type=\"parentAlreadyFinished\" message=\"test could not be started because its parent finished\">\n        Error [ERR_TEST_FAILURE]: test could not be started because its parent finished\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'parentAlreadyFinished',\n          cause: 'test could not be started because its parent finished'\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<!-- Error: Test \"unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:72:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: Test \"async unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:76:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from async unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: A resource generated asynchronous activity after the test ended. This activity created the error \"Error: uncaught from outside of a test\" which triggered an uncaughtException event, caught by the test runner. -->\n        \t<!-- Error: Test \"immediate throw - passes but warns\" at test/fixtures/test-runner/output/output.js:80:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from immediate throw fail\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- Error: Test \"immediate reject - passes but warns\" at test/fixtures/test-runner/output/output.js:86:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from immediate reject fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: Test \"callback called twice in different ticks\" at test/fixtures/test-runner/output/output.js:251:1 generated asynchronous activity after the test ended. This activity created the error \"Error [ERR_TEST_FAILURE]: callback invoked multiple times\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- Error: Test \"callback async throw after done\" at test/fixtures/test-runner/output/output.js:269:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from callback async throw after done\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- tests 76 -->\n        \t<!-- suites 0 -->\n        \t<!-- pass 35 -->\n        \t<!-- fail 25 -->\n        \t<!-- cancelled 3 -->\n        \t<!-- skipped 9 -->\n        \t<!-- todo 4 -->\n        \t<!-- duration_ms * -->\n        </testsuites>\n        \n      operator: 'strictEqual'\n      stack: |-\n        assertSnapshot (c:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:56:12)\n        async Module.spawnAndAssert (c:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:84:3)\n        async TestContext.<anonymous> (file:///c:/workspace/node-test-binary-windows-js-suites/node/test/parallel/test-runner-output.mjs:149:5)\n        async Test.run (node:internal/test_runner/test:748:9)\n        async Promise.all (index 23)\n        async Suite.run (node:internal/test_runner/test:1106:7)\n        async Test.processPendingSubtests (node:internal/test_runner/test:461:7)\n      ...\n    # Subtest: test-runner/output/spec_reporter_successful.js\n    ok 25 - test-runner/output/spec_reporter_successful.js\n      ---\n      duration_ms: 1703.2466\n      ...\n    # Subtest: test-runner/output/spec_reporter.js\n    ok 26 - test-runner/output/spec_reporter.js\n      ---\n      duration_ms: 3831.6868\n      ...\n    # Subtest: test-runner/output/spec_reporter_cli.js\n    ok 27 - test-runner/output/spec_reporter_cli.js\n      ---\n      duration_ms: 4631.7833\n      ...\n    # Subtest: test-runner/output/source_mapped_locations.mjs\n    ok 28 - test-runner/output/source_mapped_locations.mjs\n      ---\n      duration_ms: 1795.4758\n      ...\n    # Subtest: test-runner/output/lcov_reporter.js\n    ok 29 - test-runner/output/lcov_reporter.js\n      ---\n      duration_ms: 3879.8899\n      ...\n    # Subtest: test-runner/output/output.js\n    ok 30 - test-runner/output/output.js\n      ---\n      duration_ms: 2439.8566\n      ...\n    # Subtest: test-runner/output/output_cli.js\n    ok 31 - test-runner/output/output_cli.js\n      ---\n      duration_ms: 4634.54\n      ...\n    # Subtest: test-runner/output/name_and_skip_patterns.js\n    ok 32 - test-runner/output/name_and_skip_patterns.js\n      ---\n      duration_ms: 1748.6929\n      ...\n    # Subtest: test-runner/output/name_pattern.js\n    ok 33 - test-runner/output/name_pattern.js\n      ---\n      duration_ms: 1543.1064\n      ...\n    # Subtest: test-runner/output/name_pattern_with_only.js\n    ok 34 - test-runner/output/name_pattern_with_only.js\n      ---\n      duration_ms: 1603.8735\n      ...\n    # Subtest: test-runner/output/skip_pattern.js\n    ok 35 - test-runner/output/skip_pattern.js\n      ---\n      duration_ms: 1924.7215\n      ...\n    # Subtest: test-runner/output/unfinished-suite-async-error.js\n    ok 36 - test-runner/output/unfinished-suite-async-error.js\n      ---\n      duration_ms: 1703.5557\n      ...\n    # Subtest: test-runner/output/unresolved_promise.js\n    not ok 37 - test-runner/output/unresolved_promise.js\n      ---\n      duration_ms: 1693.4457\n      location: 'c:\\\\workspace\\\\node-test-binary-windows-js-suites\\\\node\\\\test\\\\parallel\\\\test-runner-output.mjs:155:5'\n      failureType: 'testCodeFailure'\n      error: |-\n        Expected values to be strictly equal:\n        + actual - expected ... Lines skipped\n        \n          'TAP version 13\\n' +\n            '# Subtest: pass\\n' +\n        ...\n            \"  error: 'Promise resolution is still pending but the event loop has already resolved'\\n\" +\n            \"  code: 'ERR_TEST_FAILURE'\\n\" +\n        +   '  ...\\n' +\n        +   '# Subtest: fail\\n' +\n        +   'not ok 3 - fail\\n' +\n        +   '  ---\\n' +\n        +   '  duration_ms: *\\n' +\n        +   \"  location: '/test/fixtures/test-runner/output/unresolved_promise.js:(LINE):1'\\n\" +\n        +   \"  failureType: 'cancelledByParent'\\n\" +\n        +   \"  error: 'Promise resolution is still pending but the event loop has already resolved'\\n\" +\n        +   \"  code: 'ERR_TEST_FAILURE'\\n\" +\n        -   '  stack: |-\\n' +\n        -   '    *\\n' +\n        -   '  ...\\n' +\n        -   '# Subtest: fail\\n' +\n        -   'not ok 3 - fail\\n' +\n        -   '  ---\\n' +\n        -   '  duration_ms: *\\n' +\n        -   \"  location: '/test/fixtures/test-runner/output/unresolved_promise.js:(LINE):1'\\n\" +\n        -   \"  failureType: 'cancelledByParent'\\n\" +\n        -   \"  error: 'Promise resolution is still pending but the event loop has already resolved'\\n\" +\n        -   \"  code: 'ERR_TEST_FAILURE'\\n\" +\n        -   '  stack: |-\\n' +\n        -   '    *\\n' +\n            '  ...\\n' +\n        ...\n            '# skipped 0\\n' +\n            '# todo 0\\n' +\n            '# duration_ms *\\n'\n      code: 'ERR_ASSERTION'\n      name: 'AssertionError'\n      expected: |-\n        TAP version 13\n        # Subtest: pass\n        ok 1 - pass\n          ---\n          duration_ms: *\n          ...\n        # Subtest: never resolving promise\n        not ok 2 - never resolving promise\n          ---\n          duration_ms: *\n          location: '/test/fixtures/test-runner/output/unresolved_promise.js:(LINE):1'\n          failureType: 'cancelledByParent'\n          error: 'Promise resolution is still pending but the event loop has already resolved'\n          code: 'ERR_TEST_FAILURE'\n          stack: |-\n            *\n          ...\n        # Subtest: fail\n        not ok 3 - fail\n          ---\n          duration_ms: *\n          location: '/test/fixtures/test-runner/output/unresolved_promise.js:(LINE):1'\n          failureType: 'cancelledByParent'\n          error: 'Promise resolution is still pending but the event loop has already resolved'\n          code: 'ERR_TEST_FAILURE'\n          stack: |-\n            *\n          ...\n        1..3\n        # tests 3\n        # suites 0\n        # pass 1\n        # fail 0\n        # cancelled 2\n        # skipped 0\n        # todo 0\n        # duration_ms *\n        \n      actual: |-\n        TAP version 13\n        # Subtest: pass\n        ok 1 - pass\n          ---\n          duration_ms: *\n          ...\n        # Subtest: never resolving promise\n        not ok 2 - never resolving promise\n          ---\n          duration_ms: *\n          location: '/test/fixtures/test-runner/output/unresolved_promise.js:(LINE):1'\n          failureType: 'cancelledByParent'\n          error: 'Promise resolution is still pending but the event loop has already resolved'\n          code: 'ERR_TEST_FAILURE'\n          ...\n        # Subtest: fail\n        not ok 3 - fail\n          ---\n          duration_ms: *\n          location: '/test/fixtures/test-runner/output/unresolved_promise.js:(LINE):1'\n          failureType: 'cancelledByParent'\n          error: 'Promise resolution is still pending but the event loop has already resolved'\n          code: 'ERR_TEST_FAILURE'\n          ...\n        1..3\n        # tests 3\n        # suites 0\n        # pass 1\n        # fail 0\n        # cancelled 2\n        # skipped 0\n        # todo 0\n        # duration_ms *\n        \n      operator: 'strictEqual'\n      stack: |-\n        assertSnapshot (c:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:56:12)\n        async Module.spawnAndAssert (c:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:84:3)\n        async TestContext.<anonymous> (file:///c:/workspace/node-test-binary-windows-js-suites/node/test/parallel/test-runner-output.mjs:149:5)\n        async Test.run (node:internal/test_runner/test:748:9)\n        async Promise.all (index 36)\n        async Suite.run (node:internal/test_runner/test:1106:7)\n        async Test.processPendingSubtests (node:internal/test_runner/test:461:7)\n      ...\n    # Subtest: test-runner/output/default_output.js\n        # Subtest: <anonymous>\n        ok 1 - <anonymous> # SKIP Skipping pseudo-tty tests, as pseudo terminals are not available on Windows.\n          ---\n          duration_ms: 47.8368\n          ...\n        1..1\n    ok 38 - test-runner/output/default_output.js\n      ---\n      duration_ms: 48.6904\n      ...\n    # Subtest: test-runner/output/arbitrary-output.js\n    ok 39 - test-runner/output/arbitrary-output.js\n      ---\n      duration_ms: 3018.3072\n      ...\n    # Subtest: test-runner/output/async-test-scheduling.mjs\n    ok 40 - test-runner/output/async-test-scheduling.mjs\n      ---\n      duration_ms: 2349.9484\n      ...\n    # Subtest: test-runner/output/arbitrary-output-colored.js\n        # Subtest: <anonymous>\n        ok 1 - <anonymous> # SKIP Skipping pseudo-tty tests, as pseudo terminals are not available on Windows.\n          ---\n          duration_ms: 24.3963\n          ...\n        1..1\n    ok 41 - test-runner/output/arbitrary-output-colored.js\n      ---\n      duration_ms: 24.8255\n      ...\n    # Subtest: test-runner/output/dot_output_custom_columns.js\n        # Subtest: <anonymous>\n        ok 1 - <anonymous> # SKIP Skipping pseudo-tty tests, as pseudo terminals are not available on Windows.\n          ---\n          duration_ms: 24.2881\n          ...\n        1..1\n    ok 42 - test-runner/output/dot_output_custom_columns.js\n      ---\n      duration_ms: 24.6455\n      ...\n    # Subtest: test-runner/output/tap_escape.js\n    ok 43 - test-runner/output/tap_escape.js\n      ---\n      duration_ms: 1656.373\n      ...\n    # Subtest: test-runner/output/coverage_failure.js\n    ok 44 - test-runner/output/coverage_failure.js\n      ---\n      duration_ms: 1600.5911\n      ...\n    1..44\nnot ok 1 - test runner output\n  ---\n  duration_ms: 5057.5946\n  type: 'suite'\n  location: 'c:\\\\workspace\\\\node-test-binary-windows-js-suites\\\\node\\\\test\\\\parallel\\\\test-runner-output.mjs:153:1'\n  failureType: 'subtestsFailed'\n  error: '3 subtests failed'\n  code: 'ERR_TEST_FAILURE'\n  ...\n1..1\n# tests 47\n# suites 1\n# pass 41\n# fail 3\n# cancelled 0\n# skipped 3\n# todo 0\n# duration_ms 5079.1767"},"time":5567.04,"fullname":"parallel/test-runner-output","closingTestPoint":false}},{"testName":"message/stdin_messages","timestamp":1714656652787,"status":"REGRESSION","jobName":"node-test-binary-windows-js-suites","config":"node-test-binary-windows-js-suites » 0,win11-COMPILED_BY-vs2022 #27524","buildUrl":"https://ci.nodejs.org/job/node-test-binary-windows-js-suites/RUN_SUBSET=0,nodes=win11-COMPILED_BY-vs2022/27524/","buildNumber":27524,"builtOn":"test-azure_msft-win11_vs2022-x64-4","nodeVersion":"23.0.0","commitHash":"fa7baf79faaaf6b88b9781d7f3544228b8fa1b0f","callStack":[{"upstreamBuild":62662,"upstreamProject":"node-test-commit-windows-fanned","upstreamUrl":"job/node-test-commit-windows-fanned/"},{"upstreamBuild":70431,"upstreamProject":"node-test-commit","upstreamUrl":"job/node-test-commit/"},{"upstreamBuild":58863,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"upstreamBuild":58847,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"prId":"52733"}],"tap":{"ok":false,"name":"message/stdin_messages","id":81,"buffered":false,"tapError":null,"skip":false,"todo":false,"previous":null,"plan":null,"diag":{"severity":"fail","stack":"[stdin]\n[stdin]:1\nwith(this){__filename}\n^^^^\n\nSyntaxError: Strict mode code may not include a with statement\n    at makeContextifyScript (node:internal/vm:185:14)\n    at node:internal/process/execution:107:22\n    at [stdin]-wrapper:6:24\n    at runScript (node:internal/process/execution:101:62)\n    at evalScript (node:internal/process/execution:136:3)\n    at node:internal/main/eval_stdin:32:5\n    at Socket.<anonymous> (node:internal/process/execution:237:5)\n    at SlowEventEmitter.emit (node:internal/events/slow_event_emitter:88:35)\n    at Socket.emit (node:internal/events/event_emitter:463:41)\n    at endReadableNT (node:internal/streams/readable:1700:12)\n\nNode.js v23.0.0-pre\n42\n42\n[stdin]:1\nthrow new Error(\"hello\")\n^\n\nError: hello\n    at [stdin]:1:7\n    at runScriptInThisContext (node:internal/vm:209:10)\n    at node:internal/process/execution:118:14\n    at [stdin]-wrapper:6:24\n    at runScript (node:internal/process/execution:101:62)\n    at evalScript (node:internal/process/execution:136:3)\n    at node:internal/main/eval_stdin:32:5\n    at Socket.<anonymous> (node:internal/process/execution:237:5)\n    at SlowEventEmitter.emit (node:internal/events/slow_event_emitter:88:35)\n    at Socket.emit (node:internal/events/event_emitter:463:41)\n\nNode.js v23.0.0-pre\n[stdin]:1\nthrow new Error(\"hello\")\n^\n\nError: hello\n    at [stdin]:1:7\n    at runScriptInThisContext (node:internal/vm:209:10)\n    at node:internal/process/execution:118:14\n    at [stdin]-wrapper:6:24\n    at runScript (node:internal/process/execution:101:62)\n    at evalScript (node:internal/process/execution:136:3)\n    at node:internal/main/eval_stdin:32:5\n    at Socket.<anonymous> (node:internal/process/execution:237:5)\n    at SlowEventEmitter.emit (node:internal/events/slow_event_emitter:88:35)\n    at Socket.emit (node:internal/events/event_emitter:463:41)\n\nNode.js v23.0.0-pre\n100\n[stdin]:1\nlet x = 100; y = x;\n               ^\n\nReferenceError: y is not defined\n    at [stdin]:1:16\n    at runScriptInThisContext (node:internal/vm:209:10)\n    at node:internal/process/execution:118:14\n    at [stdin]-wrapper:6:24\n    at runScript (node:internal/process/execution:101:62)\n    at evalScript (node:internal/process/execution:136:3)\n    at node:internal/main/eval_stdin:32:5\n    at Socket.<anonymous> (node:internal/process/execution:237:5)\n    at SlowEventEmitter.emit (node:internal/events/slow_event_emitter:88:35)\n    at Socket.emit (node:internal/events/event_emitter:463:41)\n\nNode.js v23.0.0-pre\n\n[stdin]:1\nlet ______________________________________________; throw 10\n                                                    ^\n10\n(Use `node --trace-uncaught ...` to show where the exception was thrown)\n\nNode.js v23.0.0-pre\n\n[stdin]:1\nlet ______________________________________________; throw 10\n                                                    ^\n10\n(Use `node --trace-uncaught ...` to show where the exception was thrown)\n\nNode.js v23.0.0-pre\ndone"},"time":1257.994,"fullname":"message/stdin_messages","closingTestPoint":false}},{"testName":"parallel/test-assert-builtins-not-read-from-filesystem","timestamp":1714656652787,"status":"REGRESSION","jobName":"node-test-binary-windows-js-suites","config":"node-test-binary-windows-js-suites » 2,win2019-COMPILED_BY-vs2022 #27524","buildUrl":"https://ci.nodejs.org/job/node-test-binary-windows-js-suites/RUN_SUBSET=2,nodes=win2019-COMPILED_BY-vs2022/27524/","buildNumber":27524,"builtOn":"test-rackspace-win2019_vs2019-x64-2","nodeVersion":"23.0.0","commitHash":"fa7baf79faaaf6b88b9781d7f3544228b8fa1b0f","callStack":[{"upstreamBuild":62662,"upstreamProject":"node-test-commit-windows-fanned","upstreamUrl":"job/node-test-commit-windows-fanned/"},{"upstreamBuild":70431,"upstreamProject":"node-test-commit","upstreamUrl":"job/node-test-commit/"},{"upstreamBuild":58863,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"upstreamBuild":58847,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"prId":"52733"}],"tap":{"ok":false,"name":"parallel/test-assert-builtins-not-read-from-filesystem","id":69,"buffered":false,"tapError":null,"skip":false,"todo":false,"previous":null,"plan":null,"diag":{"severity":"fail","exitcode":1,"stack":"node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Exit code: 1\n,,node:fs:2348\n\n    return binding.writeFileUtf8(\n\n                   ^\n\n\n\nError: ENOENT: no such file or directory, open 'C:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\.tmp.68\\node:internal\\events\\fast_event_emitter'\n\n    at writeFileSync (node:fs:2348:20)\n\n    at Object.<anonymous> (C:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\parallel\\test-assert-builtins-not-read-from-filesystem.js:41:3)\n\n    at Module._compile (node:internal/modules/cjs/loader:1480:14)\n\n    at Module._extensions..js (node:internal/modules/cjs/loader:1564:10)\n\n    at Module.load (node:internal/modules/cjs/loader:1287:32)\n\n    at Module._load (node:internal/modules/cjs/loader:1103:12)\n\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:168:12)\n\n    at node:internal/main/run_main_module:30:49 {\n\n  errno: -4058,\n\n  code: 'ENOENT',\n\n  syscall: 'open',\n\n  path: 'C:\\\\workspace\\\\node-test-binary-windows-js-suites\\\\node\\\\test\\\\.tmp.68\\\\node:internal\\\\events\\\\fast_event_emitter'\n\n}\n\n\n\nNode.js v23.0.0-pre\n\n\n    at Object.<anonymous> (C:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\parallel\\test-assert-builtins-not-read-from-filesystem.js:31:12)\n    at Module._compile (node:internal/modules/cjs/loader:1480:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1564:10)\n    at Module.load (node:internal/modules/cjs/loader:1287:32)\n    at Module._load (node:internal/modules/cjs/loader:1103:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:168:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: false,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 0,\n  operator: 'strictEqual'\n}\n\nNode.js v23.0.0-pre"},"time":540.004,"fullname":"parallel/test-assert-builtins-not-read-from-filesystem","closingTestPoint":false}},{"testName":"parallel/test-disable-proto-delete","timestamp":1714656652787,"status":"REGRESSION","jobName":"node-test-binary-windows-js-suites","config":"node-test-binary-windows-js-suites » 2,win2019-COMPILED_BY-vs2022 #27524","buildUrl":"https://ci.nodejs.org/job/node-test-binary-windows-js-suites/RUN_SUBSET=2,nodes=win2019-COMPILED_BY-vs2022/27524/","buildNumber":27524,"builtOn":"test-rackspace-win2019_vs2019-x64-2","nodeVersion":"23.0.0","commitHash":"fa7baf79faaaf6b88b9781d7f3544228b8fa1b0f","callStack":[{"upstreamBuild":62662,"upstreamProject":"node-test-commit-windows-fanned","upstreamUrl":"job/node-test-commit-windows-fanned/"},{"upstreamBuild":70431,"upstreamProject":"node-test-commit","upstreamUrl":"job/node-test-commit/"},{"upstreamBuild":58863,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"upstreamBuild":58847,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"prId":"52733"}],"tap":{"ok":false,"name":"parallel/test-disable-proto-delete","id":223,"buffered":false,"tapError":null,"skip":false,"todo":false,"previous":null,"plan":null,"diag":{"severity":"fail","exitcode":1,"stack":"node:internal/events/slow_event_emitter:268\n    for (let i = listeners.length - 1; i >= 0; i--) {\n                           ^\n\nTypeError: Cannot read properties of null (reading 'length')\n    at SlowEventEmitter.removeAllListeners (node:internal/events/slow_event_emitter:268:28)\n    at Worker.removeAllListeners (node:internal/events/event_emitter:596:38)\n    at SlowEventEmitter.removeAllListeners (node:internal/events/slow_event_emitter:253:41)\n    at Worker.removeAllListeners (node:internal/events/event_emitter:596:38)\n    at [kOnExit] (node:internal/worker:316:10)\n    at Worker.<computed>.onexit (node:internal/worker:229:20)\n\nNode.js v23.0.0-pre"},"time":383.008,"fullname":"parallel/test-disable-proto-delete","closingTestPoint":false}},{"testName":"parallel/test-runner-output","timestamp":1714656652787,"status":"FAILED","jobName":"node-test-binary-windows-js-suites","config":"node-test-binary-windows-js-suites » 2,win2019-COMPILED_BY-vs2022 #27524","buildUrl":"https://ci.nodejs.org/job/node-test-binary-windows-js-suites/RUN_SUBSET=2,nodes=win2019-COMPILED_BY-vs2022/27524/","buildNumber":27524,"builtOn":"test-rackspace-win2019_vs2019-x64-2","nodeVersion":"23.0.0","commitHash":"fa7baf79faaaf6b88b9781d7f3544228b8fa1b0f","callStack":[{"upstreamBuild":62662,"upstreamProject":"node-test-commit-windows-fanned","upstreamUrl":"job/node-test-commit-windows-fanned/"},{"upstreamBuild":70431,"upstreamProject":"node-test-commit","upstreamUrl":"job/node-test-commit/"},{"upstreamBuild":58863,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"upstreamBuild":58847,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"prId":"52733"}],"tap":{"ok":false,"name":"parallel/test-runner-output","id":679,"buffered":false,"tapError":null,"skip":false,"todo":false,"previous":null,"plan":null,"diag":{"severity":"fail","exitcode":1,"stack":"TAP version 13\n# Subtest: test runner output\n    # Subtest: test-runner/output/abort.js\n    ok 1 - test-runner/output/abort.js\n      ---\n      duration_ms: 1775.755\n      ...\n    # Subtest: test-runner/output/abort_suite.js\n    ok 2 - test-runner/output/abort_suite.js\n      ---\n      duration_ms: 1918.5529\n      ...\n    # Subtest: test-runner/output/abort_hooks.js\n    ok 3 - test-runner/output/abort_hooks.js\n      ---\n      duration_ms: 853.7961\n      ...\n    # Subtest: test-runner/output/describe_it.js\n    ok 4 - test-runner/output/describe_it.js\n      ---\n      duration_ms: 1282.383\n      ...\n    # Subtest: test-runner/output/describe_nested.js\n    ok 5 - test-runner/output/describe_nested.js\n      ---\n      duration_ms: 831.2475\n      ...\n    # Subtest: test-runner/output/eval_dot.js\n    ok 6 - test-runner/output/eval_dot.js\n      ---\n      duration_ms: 821.2019\n      ...\n    # Subtest: test-runner/output/eval_spec.js\n    ok 7 - test-runner/output/eval_spec.js\n      ---\n      duration_ms: 811.3833\n      ...\n    # Subtest: test-runner/output/eval_tap.js\n    ok 8 - test-runner/output/eval_tap.js\n      ---\n      duration_ms: 955.3034\n      ...\n    # Subtest: test-runner/output/hooks.js\n    ok 9 - test-runner/output/hooks.js\n      ---\n      duration_ms: 794.6166\n      ...\n    # Subtest: test-runner/output/hooks_spec_reporter.js\n    ok 10 - test-runner/output/hooks_spec_reporter.js\n      ---\n      duration_ms: 2498.7052\n      ...\n    # Subtest: test-runner/output/skip-each-hooks.js\n    ok 11 - test-runner/output/skip-each-hooks.js\n      ---\n      duration_ms: 865.7157\n      ...\n    # Subtest: test-runner/output/suite-skip-hooks.js\n    ok 12 - test-runner/output/suite-skip-hooks.js\n      ---\n      duration_ms: 697.828\n      ...\n    # Subtest: test-runner/output/timeout_in_before_each_should_not_affect_further_tests.js\n    ok 13 - test-runner/output/timeout_in_before_each_should_not_affect_further_tests.js\n      ---\n      duration_ms: 2488.3786\n      ...\n    # Subtest: test-runner/output/hooks-with-no-global-test.js\n    ok 14 - test-runner/output/hooks-with-no-global-test.js\n      ---\n      duration_ms: 891.3034\n      ...\n    # Subtest: test-runner/output/global-hooks-with-no-tests.js\n    ok 15 - test-runner/output/global-hooks-with-no-tests.js\n      ---\n      duration_ms: 998.4418\n      ...\n    # Subtest: test-runner/output/before-and-after-each-too-many-listeners.js\n    ok 16 - test-runner/output/before-and-after-each-too-many-listeners.js\n      ---\n      duration_ms: 916.5154\n      ...\n    # Subtest: test-runner/output/before-and-after-each-with-timeout-too-many-listeners.js\n    ok 17 - test-runner/output/before-and-after-each-with-timeout-too-many-listeners.js\n      ---\n      duration_ms: 851.5863\n      ...\n    # Subtest: test-runner/output/force_exit.js\n    ok 18 - test-runner/output/force_exit.js\n      ---\n      duration_ms: 801.365\n      ...\n    # Subtest: test-runner/output/global_after_should_fail_the_test.js\n    ok 19 - test-runner/output/global_after_should_fail_the_test.js\n      ---\n      duration_ms: 1215.0677\n      ...\n    # Subtest: test-runner/output/no_refs.js\n    not ok 20 - test-runner/output/no_refs.js\n      ---\n      duration_ms: 661.3076\n      location: 'C:\\\\workspace\\\\node-test-binary-windows-js-suites\\\\node\\\\test\\\\parallel\\\\test-runner-output.mjs:155:5'\n      failureType: 'testCodeFailure'\n      error: |-\n        Expected values to be strictly equal:\n        + actual - expected ... Lines skipped\n        \n          'TAP version 13\\n' +\n            '# Subtest: does not keep event loop alive\\n' +\n        ...\n            \"      error: 'Promise resolution is still pending but the event loop has already resolved'\\n\" +\n            \"      code: 'ERR_TEST_FAILURE'\\n\" +\n        +   '      ...\\n' +\n        +   '    1..1\\n' +\n        +   'not ok 1 - does not keep event loop alive\\n' +\n        +   '  ---\\n' +\n        +   '  duration_ms: *\\n' +\n        +   \"  location: '/test/fixtures/test-runner/output/no_refs.js:(LINE):1'\\n\" +\n        +   \"  failureType: 'cancelledByParent'\\n\" +\n        +   \"  error: 'Promise resolution is still pending but the event loop has already resolved'\\n\" +\n        +   \"  code: 'ERR_TEST_FAILURE'\\n\" +\n        -   '      stack: |-\\n' +\n        -   '        *\\n' +\n        -   '      ...\\n' +\n        -   '    1..1\\n' +\n        -   'not ok 1 - does not keep event loop alive\\n' +\n        -   '  ---\\n' +\n        -   '  duration_ms: *\\n' +\n        -   \"  location: '/test/fixtures/test-runner/output/no_refs.js:(LINE):1'\\n\" +\n        -   \"  failureType: 'cancelledByParent'\\n\" +\n        -   \"  error: 'Promise resolution is still pending but the event loop has already resolved'\\n\" +\n        -   \"  code: 'ERR_TEST_FAILURE'\\n\" +\n        -   '  stack: |-\\n' +\n        -   '    *\\n' +\n            '  ...\\n' +\n        ...\n            '# skipped 0\\n' +\n            '# todo 0\\n' +\n            '# duration_ms *\\n'\n      code: 'ERR_ASSERTION'\n      name: 'AssertionError'\n      expected: |-\n        TAP version 13\n        # Subtest: does not keep event loop alive\n            # Subtest: +does not keep event loop alive\n            not ok 1 - +does not keep event loop alive\n              ---\n              duration_ms: *\n              location: '/test/fixtures/test-runner/output/no_refs.js:(LINE):11'\n              failureType: 'cancelledByParent'\n              error: 'Promise resolution is still pending but the event loop has already resolved'\n              code: 'ERR_TEST_FAILURE'\n              stack: |-\n                *\n              ...\n            1..1\n        not ok 1 - does not keep event loop alive\n          ---\n          duration_ms: *\n          location: '/test/fixtures/test-runner/output/no_refs.js:(LINE):1'\n          failureType: 'cancelledByParent'\n          error: 'Promise resolution is still pending but the event loop has already resolved'\n          code: 'ERR_TEST_FAILURE'\n          stack: |-\n            *\n          ...\n        1..1\n        # tests 2\n        # suites 0\n        # pass 0\n        # fail 0\n        # cancelled 2\n        # skipped 0\n        # todo 0\n        # duration_ms *\n        \n      actual: |-\n        TAP version 13\n        # Subtest: does not keep event loop alive\n            # Subtest: +does not keep event loop alive\n            not ok 1 - +does not keep event loop alive\n              ---\n              duration_ms: *\n              location: '/test/fixtures/test-runner/output/no_refs.js:(LINE):11'\n              failureType: 'cancelledByParent'\n              error: 'Promise resolution is still pending but the event loop has already resolved'\n              code: 'ERR_TEST_FAILURE'\n              ...\n            1..1\n        not ok 1 - does not keep event loop alive\n          ---\n          duration_ms: *\n          location: '/test/fixtures/test-runner/output/no_refs.js:(LINE):1'\n          failureType: 'cancelledByParent'\n          error: 'Promise resolution is still pending but the event loop has already resolved'\n          code: 'ERR_TEST_FAILURE'\n          ...\n        1..1\n        # tests 2\n        # suites 0\n        # pass 0\n        # fail 0\n        # cancelled 2\n        # skipped 0\n        # todo 0\n        # duration_ms *\n        \n      operator: 'strictEqual'\n      stack: |-\n        assertSnapshot (C:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:56:12)\n        async Module.spawnAndAssert (C:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:84:3)\n        async TestContext.<anonymous> (file:///C:/workspace/node-test-binary-windows-js-suites/node/test/parallel/test-runner-output.mjs:149:5)\n        async Test.run (node:internal/test_runner/test:748:9)\n        async Promise.all (index 19)\n        async Suite.run (node:internal/test_runner/test:1106:7)\n        async Test.processPendingSubtests (node:internal/test_runner/test:461:7)\n      ...\n    # Subtest: test-runner/output/no_tests.js\n    ok 21 - test-runner/output/no_tests.js\n      ---\n      duration_ms: 651.6052\n      ...\n    # Subtest: test-runner/output/only_tests.js\n    ok 22 - test-runner/output/only_tests.js\n      ---\n      duration_ms: 1120.8089\n      ...\n    # Subtest: test-runner/output/dot_reporter.js\n    ok 23 - test-runner/output/dot_reporter.js\n      ---\n      duration_ms: 2967.9442\n      ...\n    # Subtest: test-runner/output/junit_reporter.js\n    not ok 24 - test-runner/output/junit_reporter.js\n      ---\n      duration_ms: 2633.5952\n      location: 'C:\\\\workspace\\\\node-test-binary-windows-js-suites\\\\node\\\\test\\\\parallel\\\\test-runner-output.mjs:155:5'\n      failureType: 'testCodeFailure'\n      error: |-\n        Expected values to be strictly equal:\n        + actual - expected ... Lines skipped\n        \n          '<?xml version=\"1.0\" encoding=\"utf-8\"?>\\n' +\n            '<testsuites>\\n' +\n        ...\n            '\\t\\t</failure>\\n' +\n            '\\t</testcase>\\n' +\n        +   '\\t<testcase name=\"callback called twice\" time=\"*\" '... 11376 more characters\n        -   '\\t<testcase name=\"callback called twice\" time=\"*\" '... 11392 more characters\n      code: 'ERR_ASSERTION'\n      name: 'AssertionError'\n      expected: |-\n        <?xml version=\"1.0\" encoding=\"utf-8\"?>\n        <testsuites>\n        \t<testcase name=\"sync pass todo\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"todo\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync pass todo with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"todo\" message=\"this is a passing todo\"/>\n        \t</testcase>\n        \t<testcase name=\"sync fail todo\" time=\"*\" classname=\"test\" failure=\"thrown from sync fail todo\">\n        \t\t<skipped type=\"todo\" message=\"true\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync fail todo\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync fail todo] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync fail todo\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync fail todo with message\" time=\"*\" classname=\"test\" failure=\"thrown from sync fail todo with message\">\n        \t\t<skipped type=\"todo\" message=\"this is a failing todo\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync fail todo with message\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync fail todo with message] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync fail todo with message\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync skip pass\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip pass with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"this is skipped\"/>\n        \t</testcase>\n        \t<testcase name=\"sync pass\" time=\"*\" classname=\"test\"/>\n        \t<!-- this test should pass -->\n        \t<testcase name=\"sync throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from sync throw fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async skip pass\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"async pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from async throw fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from async throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from async throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async skip fail\" time=\"*\" classname=\"test\" failure=\"thrown from async throw fail\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from async throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from async throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async assertion fail\" time=\"*\" classname=\"test\" failure=\"Expected values to be strictly equal:true !== false\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Expected values to be strictly equal:true !== false\">\n        [Error [ERR_TEST_FAILURE]: Expected values to be strictly equal:\n        \n        true !== false\n        ] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n          \n          true !== false\n          \n              *\n              *\n              *\n              *\n              *\n              *\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: true,\n            expected: false,\n            operator: 'strictEqual'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"resolve pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"reject fail\" time=\"*\" classname=\"test\" failure=\"rejected from reject fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"rejected from reject fail\">\n        [Error [ERR_TEST_FAILURE]: rejected from reject fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: rejected from reject fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unhandled rejection - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async unhandled rejection - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate throw - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate reject - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate resolve pass\" time=\"*\" classname=\"test\"/>\n        \t<testsuite name=\"subtest sync throw fail\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"1\" failures=\"1\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"+sync throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fail\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fail\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fail\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<!-- this subtest should make its parent test fail -->\n        \t</testsuite>\n        \t<testcase name=\"sync throw non-error fail\" time=\"*\" classname=\"test\" failure=\"Symbol(thrown symbol from sync throw non-error fail)\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Symbol(thrown symbol from sync throw non-error fail)\">\n        [Error [ERR_TEST_FAILURE]: Symbol(thrown symbol from sync throw non-error fail)] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: Symbol(thrown symbol from sync throw non-error fail) }\n        \t\t</failure>\n        \t</testcase>\n        \t<testsuite name=\"level 0a\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"4\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"level 1a\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1b\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1c\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1d\" time=\"*\" classname=\"test\"/>\n        \t</testsuite>\n        \t<testsuite name=\"top level\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"2\" failures=\"1\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"+long running\" time=\"*\" classname=\"test\" failure=\"test did not finish before its parent and was cancelled\">\n        \t\t\t<failure type=\"cancelledByParent\" message=\"test did not finish before its parent and was cancelled\">\n        [Error [ERR_TEST_FAILURE]: test did not finish before its parent and was cancelled] { code: 'ERR_TEST_FAILURE', failureType: 'cancelledByParent', cause: 'test did not finish before its parent and was cancelled' }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<testsuite name=\"+short running\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"1\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t\t<testcase name=\"++short running\" time=\"*\" classname=\"test\"/>\n        \t\t</testsuite>\n        \t</testsuite>\n        \t<testcase name=\"invalid subtest - pass but subtest fails\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"sync skip option\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip option with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"this is skipped\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip option is false fail\" time=\"*\" classname=\"test\" failure=\"this should be executed\">\n        \t\t<failure type=\"testCodeFailure\" message=\"this should be executed\">\n        [Error [ERR_TEST_FAILURE]: this should be executed] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: this should be executed\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"functionOnly\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"test with only a name provided\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"test with a name and options provided\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"functionAndOptions\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"callback pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback fail\" time=\"*\" classname=\"test\" failure=\"callback failure\">\n        \t\t<failure type=\"testCodeFailure\" message=\"callback failure\">\n        [Error [ERR_TEST_FAILURE]: callback failure] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: callback failure\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback also returns a Promise\" time=\"*\" classname=\"test\" failure=\"passed a callback but also returned a Promise\">\n        \t\t<failure type=\"callbackAndPromisePresent\" message=\"passed a callback but also returned a Promise\">\n        [Error [ERR_TEST_FAILURE]: passed a callback but also returned a Promise] { code: 'ERR_TEST_FAILURE', failureType: 'callbackAndPromisePresent', cause: 'passed a callback but also returned a Promise' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback throw\" time=\"*\" classname=\"test\" failure=\"thrown from callback throw\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from callback throw\">\n        [Error [ERR_TEST_FAILURE]: thrown from callback throw] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from callback throw\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback called twice\" time=\"*\" classname=\"test\" failure=\"callback invoked multiple times\">\n        \t\t<failure type=\"multipleCallbackInvocations\" message=\"callback invoked multiple times\">\n        Error [ERR_TEST_FAILURE]: callback invoked multiple times\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'multipleCallbackInvocations',\n          cause: 'callback invoked multiple times'\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback called twice in different ticks\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback called twice in future tick\" time=\"*\" classname=\"test\" failure=\"callback invoked multiple times\">\n        \t\t<failure type=\"uncaughtException\" message=\"callback invoked multiple times\">\n        Error [ERR_TEST_FAILURE]: callback invoked multiple times\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error [ERR_TEST_FAILURE]: callback invoked multiple times\n              * {\n            code: 'ERR_TEST_FAILURE',\n            failureType: 'multipleCallbackInvocations',\n            cause: 'callback invoked multiple times'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback async throw\" time=\"*\" classname=\"test\" failure=\"thrown from callback async throw\">\n        \t\t<failure type=\"uncaughtException\" message=\"thrown from callback async throw\">\n        Error [ERR_TEST_FAILURE]: thrown from callback async throw\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error: thrown from callback async throw\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback async throw after done\" time=\"*\" classname=\"test\"/>\n        \t<testsuite name=\"only is set but not in only mode\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"4\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"running subtest 1\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"running subtest 2\" time=\"*\" classname=\"test\"/>\n        \t\t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t\t<testcase name=\"running subtest 3\" time=\"*\" classname=\"test\"/>\n        \t\t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t\t<testcase name=\"running subtest 4\" time=\"*\" classname=\"test\"/>\n        \t</testsuite>\n        \t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t<testcase name=\"custom inspect symbol fail\" time=\"*\" classname=\"test\" failure=\"customized\">\n        \t\t<failure type=\"testCodeFailure\" message=\"customized\">\n        [Error [ERR_TEST_FAILURE]: customized] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: customized }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"custom inspect symbol that throws fail\" time=\"*\" classname=\"test\" failure=\"{  foo: 1,  [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]}\">\n        \t\t<failure type=\"testCodeFailure\" message=\"{  foo: 1,  [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]}\">\n        [Error [ERR_TEST_FAILURE]: {\n          foo: 1,\n          [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]\n        }] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: { foo: 1, [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]] }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testsuite name=\"subtest sync throw fails\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"2\" failures=\"2\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"sync throw fails at first\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fails at first\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fails at first\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fails at first\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fails at first\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<testcase name=\"sync throw fails at second\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fails at second\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fails at second\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fails at second\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fails at second\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t</testsuite>\n        \t<testcase name=\"timed out async test\" time=\"*\" classname=\"test\" failure=\"test timed out after 5ms\">\n        \t\t<failure type=\"testTimeoutFailure\" message=\"test timed out after 5ms\">\n        [Error [ERR_TEST_FAILURE]: test timed out after 5ms] { code: 'ERR_TEST_FAILURE', failureType: 'testTimeoutFailure', cause: 'test timed out after 5ms' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"timed out callback test\" time=\"*\" classname=\"test\" failure=\"test timed out after 5ms\">\n        \t\t<failure type=\"testTimeoutFailure\" message=\"test timed out after 5ms\">\n        [Error [ERR_TEST_FAILURE]: test timed out after 5ms] { code: 'ERR_TEST_FAILURE', failureType: 'testTimeoutFailure', cause: 'test timed out after 5ms' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"large timeout async test is ok\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"large timeout callback test is ok\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"successful thenable\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"rejected thenable\" time=\"*\" classname=\"test\" failure=\"custom error\">\n        \t\t<failure type=\"testCodeFailure\" message=\"custom error\">\n        [Error [ERR_TEST_FAILURE]: custom error] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: 'custom error' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unfinished test with uncaughtException\" time=\"*\" classname=\"test\" failure=\"foo\">\n        \t\t<failure type=\"uncaughtException\" message=\"foo\">\n        Error [ERR_TEST_FAILURE]: foo\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error: foo\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unfinished test with unhandledRejection\" time=\"*\" classname=\"test\" failure=\"bar\">\n        \t\t<failure type=\"unhandledRejection\" message=\"bar\">\n        Error [ERR_TEST_FAILURE]: bar\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'unhandledRejection',\n          cause: Error: bar\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"assertion errors display actual and expected properly\" time=\"*\" classname=\"test\" failure=\"Expected values to be loosely deep-equal:{  bar: 1,  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  foo: 1}should loosely deep-equal{  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  circular: &lt;ref *1> {    bar: 2,    c: [Circular *1]  }}\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Expected values to be loosely deep-equal:{  bar: 1,  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  foo: 1}should loosely deep-equal{  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  circular: &lt;ref *1> {    bar: 2,    c: [Circular *1]  }}\">\n        [Error [ERR_TEST_FAILURE]: Expected values to be loosely deep-equal:\n        \n        {\n          bar: 1,\n          baz: {\n            date: 1970-01-01T00:00:00.000Z,\n            null: null,\n            number: 1,\n            string: 'Hello',\n            undefined: undefined\n          },\n          boo: [\n            1\n          ],\n          foo: 1\n        }\n        \n        should loosely deep-equal\n        \n        {\n          baz: {\n            date: 1970-01-01T00:00:00.000Z,\n            null: null,\n            number: 1,\n            string: 'Hello',\n            undefined: undefined\n          },\n          boo: [\n            1\n          ],\n          circular: &lt;ref *1> {\n            bar: 2,\n            c: [Circular *1]\n          }\n        }] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n          \n          {\n            bar: 1,\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            foo: 1\n          }\n          \n          should loosely deep-equal\n          \n          {\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            circular: &lt;ref *1> {\n              bar: 2,\n              c: [Circular *1]\n            }\n          }\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: [Object],\n            expected: [Object],\n            operator: 'deepEqual'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"invalid subtest fail\" time=\"*\" classname=\"test\" failure=\"test could not be started because its parent finished\">\n        \t\t<failure type=\"parentAlreadyFinished\" message=\"test could not be started because its parent finished\">\n        Error [ERR_TEST_FAILURE]: test could not be started because its parent finished\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'parentAlreadyFinished',\n          cause: 'test could not be started because its parent finished'\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<!-- Error: Test \"unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:72:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: Test \"async unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:76:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from async unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: A resource generated asynchronous activity after the test ended. This activity created the error \"Error: uncaught from outside of a test\" which triggered an uncaughtException event, caught by the test runner. -->\n        \t<!-- Error: Test \"immediate throw - passes but warns\" at test/fixtures/test-runner/output/output.js:80:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from immediate throw fail\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- Error: Test \"immediate reject - passes but warns\" at test/fixtures/test-runner/output/output.js:86:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from immediate reject fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: Test \"callback called twice in different ticks\" at test/fixtures/test-runner/output/output.js:251:1 generated asynchronous activity after the test ended. This activity created the error \"Error [ERR_TEST_FAILURE]: callback invoked multiple times\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- Error: Test \"callback async throw after done\" at test/fixtures/test-runner/output/output.js:269:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from callback async throw after done\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- tests 76 -->\n        \t<!-- suites 0 -->\n        \t<!-- pass 35 -->\n        \t<!-- fail 25 -->\n        \t<!-- cancelled 3 -->\n        \t<!-- skipped 9 -->\n        \t<!-- todo 4 -->\n        \t<!-- duration_ms * -->\n        </testsuites>\n        \n      actual: |-\n        <?xml version=\"1.0\" encoding=\"utf-8\"?>\n        <testsuites>\n        \t<testcase name=\"sync pass todo\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"todo\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync pass todo with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"todo\" message=\"this is a passing todo\"/>\n        \t</testcase>\n        \t<testcase name=\"sync fail todo\" time=\"*\" classname=\"test\" failure=\"thrown from sync fail todo\">\n        \t\t<skipped type=\"todo\" message=\"true\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync fail todo\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync fail todo] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync fail todo\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync fail todo with message\" time=\"*\" classname=\"test\" failure=\"thrown from sync fail todo with message\">\n        \t\t<skipped type=\"todo\" message=\"this is a failing todo\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync fail todo with message\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync fail todo with message] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync fail todo with message\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync skip pass\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip pass with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"this is skipped\"/>\n        \t</testcase>\n        \t<testcase name=\"sync pass\" time=\"*\" classname=\"test\"/>\n        \t<!-- this test should pass -->\n        \t<testcase name=\"sync throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from sync throw fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async skip pass\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"async pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from async throw fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from async throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from async throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async skip fail\" time=\"*\" classname=\"test\" failure=\"thrown from async throw fail\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from async throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from async throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async assertion fail\" time=\"*\" classname=\"test\" failure=\"Expected values to be strictly equal:true !== false\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Expected values to be strictly equal:true !== false\">\n        [Error [ERR_TEST_FAILURE]: Expected values to be strictly equal:\n        \n        true !== false\n        ] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n          \n          true !== false\n          \n              *\n              *\n              *\n              *\n              *\n              *\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: true,\n            expected: false,\n            operator: 'strictEqual'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"resolve pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"reject fail\" time=\"*\" classname=\"test\" failure=\"rejected from reject fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"rejected from reject fail\">\n        [Error [ERR_TEST_FAILURE]: rejected from reject fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: rejected from reject fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unhandled rejection - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async unhandled rejection - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate throw - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate reject - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate resolve pass\" time=\"*\" classname=\"test\"/>\n        \t<testsuite name=\"subtest sync throw fail\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"1\" failures=\"1\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"+sync throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fail\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fail\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fail\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<!-- this subtest should make its parent test fail -->\n        \t</testsuite>\n        \t<testcase name=\"sync throw non-error fail\" time=\"*\" classname=\"test\" failure=\"Symbol(thrown symbol from sync throw non-error fail)\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Symbol(thrown symbol from sync throw non-error fail)\">\n        [Error [ERR_TEST_FAILURE]: Symbol(thrown symbol from sync throw non-error fail)] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: Symbol(thrown symbol from sync throw non-error fail) }\n        \t\t</failure>\n        \t</testcase>\n        \t<testsuite name=\"level 0a\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"4\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"level 1a\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1b\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1c\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1d\" time=\"*\" classname=\"test\"/>\n        \t</testsuite>\n        \t<testsuite name=\"top level\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"2\" failures=\"1\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"+long running\" time=\"*\" classname=\"test\" failure=\"test did not finish before its parent and was cancelled\">\n        \t\t\t<failure type=\"cancelledByParent\" message=\"test did not finish before its parent and was cancelled\">\n        [Error [ERR_TEST_FAILURE]: test did not finish before its parent and was cancelled] { code: 'ERR_TEST_FAILURE', failureType: 'cancelledByParent', cause: 'test did not finish before its parent and was cancelled' }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<testsuite name=\"+short running\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"1\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t\t<testcase name=\"++short running\" time=\"*\" classname=\"test\"/>\n        \t\t</testsuite>\n        \t</testsuite>\n        \t<testcase name=\"invalid subtest - pass but subtest fails\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"sync skip option\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip option with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"this is skipped\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip option is false fail\" time=\"*\" classname=\"test\" failure=\"this should be executed\">\n        \t\t<failure type=\"testCodeFailure\" message=\"this should be executed\">\n        [Error [ERR_TEST_FAILURE]: this should be executed] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: this should be executed\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"functionOnly\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"test with only a name provided\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"test with a name and options provided\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"functionAndOptions\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"callback pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback fail\" time=\"*\" classname=\"test\" failure=\"callback failure\">\n        \t\t<failure type=\"testCodeFailure\" message=\"callback failure\">\n        [Error [ERR_TEST_FAILURE]: callback failure] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: callback failure\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback also returns a Promise\" time=\"*\" classname=\"test\" failure=\"passed a callback but also returned a Promise\">\n        \t\t<failure type=\"callbackAndPromisePresent\" message=\"passed a callback but also returned a Promise\">\n        [Error [ERR_TEST_FAILURE]: passed a callback but also returned a Promise] { code: 'ERR_TEST_FAILURE', failureType: 'callbackAndPromisePresent', cause: 'passed a callback but also returned a Promise' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback throw\" time=\"*\" classname=\"test\" failure=\"thrown from callback throw\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from callback throw\">\n        [Error [ERR_TEST_FAILURE]: thrown from callback throw] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from callback throw\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback called twice\" time=\"*\" classname=\"test\" failure=\"callback invoked multiple times\">\n        \t\t<failure type=\"multipleCallbackInvocations\" message=\"callback invoked multiple times\">\n        Error [ERR_TEST_FAILURE]: callback invoked multiple times\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'multipleCallbackInvocations',\n          cause: 'callback invoked multiple times'\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback called twice in different ticks\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback called twice in future tick\" time=\"*\" classname=\"test\" failure=\"callback invoked multiple times\">\n        \t\t<failure type=\"uncaughtException\" message=\"callback invoked multiple times\">\n        [Error [ERR_TEST_FAILURE]: callback invoked multiple times] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error [ERR_TEST_FAILURE]: callback invoked multiple times\n              * {\n            code: 'ERR_TEST_FAILURE',\n            failureType: 'multipleCallbackInvocations',\n            cause: 'callback invoked multiple times'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback async throw\" time=\"*\" classname=\"test\" failure=\"thrown from callback async throw\">\n        \t\t<failure type=\"uncaughtException\" message=\"thrown from callback async throw\">\n        [Error [ERR_TEST_FAILURE]: thrown from callback async throw] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error: thrown from callback async throw\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback async throw after done\" time=\"*\" classname=\"test\"/>\n        \t<testsuite name=\"only is set but not in only mode\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"4\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"running subtest 1\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"running subtest 2\" time=\"*\" classname=\"test\"/>\n        \t\t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t\t<testcase name=\"running subtest 3\" time=\"*\" classname=\"test\"/>\n        \t\t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t\t<testcase name=\"running subtest 4\" time=\"*\" classname=\"test\"/>\n        \t</testsuite>\n        \t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t<testcase name=\"custom inspect symbol fail\" time=\"*\" classname=\"test\" failure=\"customized\">\n        \t\t<failure type=\"testCodeFailure\" message=\"customized\">\n        [Error [ERR_TEST_FAILURE]: customized] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: customized }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"custom inspect symbol that throws fail\" time=\"*\" classname=\"test\" failure=\"{  foo: 1,  [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]}\">\n        \t\t<failure type=\"testCodeFailure\" message=\"{  foo: 1,  [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]}\">\n        [Error [ERR_TEST_FAILURE]: {\n          foo: 1,\n          [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]\n        }] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: { foo: 1, [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]] }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testsuite name=\"subtest sync throw fails\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"2\" failures=\"2\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"sync throw fails at first\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fails at first\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fails at first\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fails at first\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fails at first\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<testcase name=\"sync throw fails at second\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fails at second\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fails at second\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fails at second\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fails at second\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t</testsuite>\n        \t<testcase name=\"timed out async test\" time=\"*\" classname=\"test\" failure=\"test timed out after 5ms\">\n        \t\t<failure type=\"testTimeoutFailure\" message=\"test timed out after 5ms\">\n        [Error [ERR_TEST_FAILURE]: test timed out after 5ms] { code: 'ERR_TEST_FAILURE', failureType: 'testTimeoutFailure', cause: 'test timed out after 5ms' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"timed out callback test\" time=\"*\" classname=\"test\" failure=\"test timed out after 5ms\">\n        \t\t<failure type=\"testTimeoutFailure\" message=\"test timed out after 5ms\">\n        [Error [ERR_TEST_FAILURE]: test timed out after 5ms] { code: 'ERR_TEST_FAILURE', failureType: 'testTimeoutFailure', cause: 'test timed out after 5ms' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"large timeout async test is ok\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"large timeout callback test is ok\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"successful thenable\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"rejected thenable\" time=\"*\" classname=\"test\" failure=\"custom error\">\n        \t\t<failure type=\"testCodeFailure\" message=\"custom error\">\n        [Error [ERR_TEST_FAILURE]: custom error] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: 'custom error' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unfinished test with uncaughtException\" time=\"*\" classname=\"test\" failure=\"foo\">\n        \t\t<failure type=\"uncaughtException\" message=\"foo\">\n        [Error [ERR_TEST_FAILURE]: foo] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error: foo\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unfinished test with unhandledRejection\" time=\"*\" classname=\"test\" failure=\"bar\">\n        \t\t<failure type=\"unhandledRejection\" message=\"bar\">\n        [Error [ERR_TEST_FAILURE]: bar] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'unhandledRejection',\n          cause: Error: bar\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"assertion errors display actual and expected properly\" time=\"*\" classname=\"test\" failure=\"Expected values to be loosely deep-equal:{  bar: 1,  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  foo: 1}should loosely deep-equal{  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  circular: &lt;ref *1> {    bar: 2,    c: [Circular *1]  }}\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Expected values to be loosely deep-equal:{  bar: 1,  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  foo: 1}should loosely deep-equal{  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  circular: &lt;ref *1> {    bar: 2,    c: [Circular *1]  }}\">\n        [Error [ERR_TEST_FAILURE]: Expected values to be loosely deep-equal:\n        \n        {\n          bar: 1,\n          baz: {\n            date: 1970-01-01T00:00:00.000Z,\n            null: null,\n            number: 1,\n            string: 'Hello',\n            undefined: undefined\n          },\n          boo: [\n            1\n          ],\n          foo: 1\n        }\n        \n        should loosely deep-equal\n        \n        {\n          baz: {\n            date: 1970-01-01T00:00:00.000Z,\n            null: null,\n            number: 1,\n            string: 'Hello',\n            undefined: undefined\n          },\n          boo: [\n            1\n          ],\n          circular: &lt;ref *1> {\n            bar: 2,\n            c: [Circular *1]\n          }\n        }] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n          \n          {\n            bar: 1,\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            foo: 1\n          }\n          \n          should loosely deep-equal\n          \n          {\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            circular: &lt;ref *1> {\n              bar: 2,\n              c: [Circular *1]\n            }\n          }\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: [Object],\n            expected: [Object],\n            operator: 'deepEqual'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"invalid subtest fail\" time=\"*\" classname=\"test\" failure=\"test could not be started because its parent finished\">\n        \t\t<failure type=\"parentAlreadyFinished\" message=\"test could not be started because its parent finished\">\n        Error [ERR_TEST_FAILURE]: test could not be started because its parent finished\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'parentAlreadyFinished',\n          cause: 'test could not be started because its parent finished'\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<!-- Error: Test \"unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:72:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: Test \"async unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:76:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from async unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: A resource generated asynchronous activity after the test ended. This activity created the error \"Error: uncaught from outside of a test\" which triggered an uncaughtException event, caught by the test runner. -->\n        \t<!-- Error: Test \"immediate throw - passes but warns\" at test/fixtures/test-runner/output/output.js:80:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from immediate throw fail\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- Error: Test \"immediate reject - passes but warns\" at test/fixtures/test-runner/output/output.js:86:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from immediate reject fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: Test \"callback called twice in different ticks\" at test/fixtures/test-runner/output/output.js:251:1 generated asynchronous activity after the test ended. This activity created the error \"Error [ERR_TEST_FAILURE]: callback invoked multiple times\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- Error: Test \"callback async throw after done\" at test/fixtures/test-runner/output/output.js:269:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from callback async throw after done\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- tests 76 -->\n        \t<!-- suites 0 -->\n        \t<!-- pass 35 -->\n        \t<!-- fail 25 -->\n        \t<!-- cancelled 3 -->\n        \t<!-- skipped 9 -->\n        \t<!-- todo 4 -->\n        \t<!-- duration_ms * -->\n        </testsuites>\n        \n      operator: 'strictEqual'\n      stack: |-\n        assertSnapshot (C:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:56:12)\n        async Module.spawnAndAssert (C:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:84:3)\n        async TestContext.<anonymous> (file:///C:/workspace/node-test-binary-windows-js-suites/node/test/parallel/test-runner-output.mjs:149:5)\n        async Test.run (node:internal/test_runner/test:748:9)\n        async Promise.all (index 23)\n        async Suite.run (node:internal/test_runner/test:1106:7)\n        async Test.processPendingSubtests (node:internal/test_runner/test:461:7)\n      ...\n    # Subtest: test-runner/output/spec_reporter_successful.js\n    ok 25 - test-runner/output/spec_reporter_successful.js\n      ---\n      duration_ms: 1498.2115\n      ...\n    # Subtest: test-runner/output/spec_reporter.js\n    ok 26 - test-runner/output/spec_reporter.js\n      ---\n      duration_ms: 2608.5297\n      ...\n    # Subtest: test-runner/output/spec_reporter_cli.js\n    ok 27 - test-runner/output/spec_reporter_cli.js\n      ---\n      duration_ms: 3270.1534\n      ...\n    # Subtest: test-runner/output/source_mapped_locations.mjs\n    ok 28 - test-runner/output/source_mapped_locations.mjs\n      ---\n      duration_ms: 1195.9574\n      ...\n    # Subtest: test-runner/output/lcov_reporter.js\n    ok 29 - test-runner/output/lcov_reporter.js\n      ---\n      duration_ms: 3360.5605\n      ...\n    # Subtest: test-runner/output/output.js\n    ok 30 - test-runner/output/output.js\n      ---\n      duration_ms: 2033.2788\n      ...\n    # Subtest: test-runner/output/output_cli.js\n    ok 31 - test-runner/output/output_cli.js\n      ---\n      duration_ms: 3723.6272\n      ...\n    # Subtest: test-runner/output/name_and_skip_patterns.js\n    ok 32 - test-runner/output/name_and_skip_patterns.js\n      ---\n      duration_ms: 1205.1648\n      ...\n    # Subtest: test-runner/output/name_pattern.js\n    ok 33 - test-runner/output/name_pattern.js\n      ---\n      duration_ms: 1254.7855\n      ...\n    # Subtest: test-runner/output/name_pattern_with_only.js\n    ok 34 - test-runner/output/name_pattern_with_only.js\n      ---\n      duration_ms: 1785.8021\n      ...\n    # Subtest: test-runner/output/skip_pattern.js\n    ok 35 - test-runner/output/skip_pattern.js\n      ---\n      duration_ms: 1067.6194\n      ...\n    # Subtest: test-runner/output/unfinished-suite-async-error.js\n    ok 36 - test-runner/output/unfinished-suite-async-error.js\n      ---\n      duration_ms: 1219.694\n      ...\n    # Subtest: test-runner/output/unresolved_promise.js\n    not ok 37 - test-runner/output/unresolved_promise.js\n      ---\n      duration_ms: 1145.6675\n      location: 'C:\\\\workspace\\\\node-test-binary-windows-js-suites\\\\node\\\\test\\\\parallel\\\\test-runner-output.mjs:155:5'\n      failureType: 'testCodeFailure'\n      error: |-\n        Expected values to be strictly equal:\n        + actual - expected ... Lines skipped\n        \n          'TAP version 13\\n' +\n            '# Subtest: pass\\n' +\n        ...\n            \"  error: 'Promise resolution is still pending but the event loop has already resolved'\\n\" +\n            \"  code: 'ERR_TEST_FAILURE'\\n\" +\n        +   '  ...\\n' +\n        +   '# Subtest: fail\\n' +\n        +   'not ok 3 - fail\\n' +\n        +   '  ---\\n' +\n        +   '  duration_ms: *\\n' +\n        +   \"  location: '/test/fixtures/test-runner/output/unresolved_promise.js:(LINE):1'\\n\" +\n        +   \"  failureType: 'cancelledByParent'\\n\" +\n        +   \"  error: 'Promise resolution is still pending but the event loop has already resolved'\\n\" +\n        +   \"  code: 'ERR_TEST_FAILURE'\\n\" +\n        -   '  stack: |-\\n' +\n        -   '    *\\n' +\n        -   '  ...\\n' +\n        -   '# Subtest: fail\\n' +\n        -   'not ok 3 - fail\\n' +\n        -   '  ---\\n' +\n        -   '  duration_ms: *\\n' +\n        -   \"  location: '/test/fixtures/test-runner/output/unresolved_promise.js:(LINE):1'\\n\" +\n        -   \"  failureType: 'cancelledByParent'\\n\" +\n        -   \"  error: 'Promise resolution is still pending but the event loop has already resolved'\\n\" +\n        -   \"  code: 'ERR_TEST_FAILURE'\\n\" +\n        -   '  stack: |-\\n' +\n        -   '    *\\n' +\n            '  ...\\n' +\n        ...\n            '# skipped 0\\n' +\n            '# todo 0\\n' +\n            '# duration_ms *\\n'\n      code: 'ERR_ASSERTION'\n      name: 'AssertionError'\n      expected: |-\n        TAP version 13\n        # Subtest: pass\n        ok 1 - pass\n          ---\n          duration_ms: *\n          ...\n        # Subtest: never resolving promise\n        not ok 2 - never resolving promise\n          ---\n          duration_ms: *\n          location: '/test/fixtures/test-runner/output/unresolved_promise.js:(LINE):1'\n          failureType: 'cancelledByParent'\n          error: 'Promise resolution is still pending but the event loop has already resolved'\n          code: 'ERR_TEST_FAILURE'\n          stack: |-\n            *\n          ...\n        # Subtest: fail\n        not ok 3 - fail\n          ---\n          duration_ms: *\n          location: '/test/fixtures/test-runner/output/unresolved_promise.js:(LINE):1'\n          failureType: 'cancelledByParent'\n          error: 'Promise resolution is still pending but the event loop has already resolved'\n          code: 'ERR_TEST_FAILURE'\n          stack: |-\n            *\n          ...\n        1..3\n        # tests 3\n        # suites 0\n        # pass 1\n        # fail 0\n        # cancelled 2\n        # skipped 0\n        # todo 0\n        # duration_ms *\n        \n      actual: |-\n        TAP version 13\n        # Subtest: pass\n        ok 1 - pass\n          ---\n          duration_ms: *\n          ...\n        # Subtest: never resolving promise\n        not ok 2 - never resolving promise\n          ---\n          duration_ms: *\n          location: '/test/fixtures/test-runner/output/unresolved_promise.js:(LINE):1'\n          failureType: 'cancelledByParent'\n          error: 'Promise resolution is still pending but the event loop has already resolved'\n          code: 'ERR_TEST_FAILURE'\n          ...\n        # Subtest: fail\n        not ok 3 - fail\n          ---\n          duration_ms: *\n          location: '/test/fixtures/test-runner/output/unresolved_promise.js:(LINE):1'\n          failureType: 'cancelledByParent'\n          error: 'Promise resolution is still pending but the event loop has already resolved'\n          code: 'ERR_TEST_FAILURE'\n          ...\n        1..3\n        # tests 3\n        # suites 0\n        # pass 1\n        # fail 0\n        # cancelled 2\n        # skipped 0\n        # todo 0\n        # duration_ms *\n        \n      operator: 'strictEqual'\n      stack: |-\n        assertSnapshot (C:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:56:12)\n        async Module.spawnAndAssert (C:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:84:3)\n        async TestContext.<anonymous> (file:///C:/workspace/node-test-binary-windows-js-suites/node/test/parallel/test-runner-output.mjs:149:5)\n        async Test.run (node:internal/test_runner/test:748:9)\n        async Promise.all (index 36)\n        async Suite.run (node:internal/test_runner/test:1106:7)\n        async Test.processPendingSubtests (node:internal/test_runner/test:461:7)\n      ...\n    # Subtest: test-runner/output/default_output.js\n        # Subtest: <anonymous>\n        ok 1 - <anonymous> # SKIP Skipping pseudo-tty tests, as pseudo terminals are not available on Windows.\n          ---\n          duration_ms: 115.3848\n          ...\n        1..1\n    ok 38 - test-runner/output/default_output.js\n      ---\n      duration_ms: 116.5459\n      ...\n    # Subtest: test-runner/output/arbitrary-output.js\n    ok 39 - test-runner/output/arbitrary-output.js\n      ---\n      duration_ms: 2422.0319\n      ...\n    # Subtest: test-runner/output/async-test-scheduling.mjs\n    ok 40 - test-runner/output/async-test-scheduling.mjs\n      ---\n      duration_ms: 1838.3823\n      ...\n    # Subtest: test-runner/output/arbitrary-output-colored.js\n        # Subtest: <anonymous>\n        ok 1 - <anonymous> # SKIP Skipping pseudo-tty tests, as pseudo terminals are not available on Windows.\n          ---\n          duration_ms: 30.4285\n          ...\n        1..1\n    ok 41 - test-runner/output/arbitrary-output-colored.js\n      ---\n      duration_ms: 31.1349\n      ...\n    # Subtest: test-runner/output/dot_output_custom_columns.js\n        # Subtest: <anonymous>\n        ok 1 - <anonymous> # SKIP Skipping pseudo-tty tests, as pseudo terminals are not available on Windows.\n          ---\n          duration_ms: 30.2497\n          ...\n        1..1\n    ok 42 - test-runner/output/dot_output_custom_columns.js\n      ---\n      duration_ms: 30.9166\n      ...\n    # Subtest: test-runner/output/tap_escape.js\n    ok 43 - test-runner/output/tap_escape.js\n      ---\n      duration_ms: 1108.8499\n      ...\n    # Subtest: test-runner/output/coverage_failure.js\n    ok 44 - test-runner/output/coverage_failure.js\n      ---\n      duration_ms: 1637.6667\n      ...\n    1..44\nnot ok 1 - test runner output\n  ---\n  duration_ms: 4374.7712\n  type: 'suite'\n  location: 'C:\\\\workspace\\\\node-test-binary-windows-js-suites\\\\node\\\\test\\\\parallel\\\\test-runner-output.mjs:153:1'\n  failureType: 'subtestsFailed'\n  error: '3 subtests failed'\n  code: 'ERR_TEST_FAILURE'\n  ...\n1..1\n# tests 47\n# suites 1\n# pass 41\n# fail 3\n# cancelled 0\n# skipped 3\n# todo 0\n# duration_ms 4405.3339"},"time":4939.006,"fullname":"parallel/test-runner-output","closingTestPoint":false}},{"testName":"parallel/test-disable-proto-throw","timestamp":1714656652787,"status":"REGRESSION","jobName":"node-test-binary-windows-js-suites","config":"node-test-binary-windows-js-suites » 3,win2016-COMPILED_BY-vs2022-x86 #27524","buildUrl":"https://ci.nodejs.org/job/node-test-binary-windows-js-suites/RUN_SUBSET=3,nodes=win2016-COMPILED_BY-vs2022-x86/27524/","buildNumber":27524,"builtOn":"test-azure_msft-win2016_vs2017-x64-2","nodeVersion":"23.0.0","commitHash":"fa7baf79faaaf6b88b9781d7f3544228b8fa1b0f","callStack":[{"upstreamBuild":62662,"upstreamProject":"node-test-commit-windows-fanned","upstreamUrl":"job/node-test-commit-windows-fanned/"},{"upstreamBuild":70431,"upstreamProject":"node-test-commit","upstreamUrl":"job/node-test-commit/"},{"upstreamBuild":58863,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"upstreamBuild":58847,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"prId":"52733"}],"tap":{"ok":false,"name":"parallel/test-disable-proto-throw","id":223,"buffered":false,"tapError":null,"skip":false,"todo":false,"previous":null,"plan":null,"diag":{"severity":"fail","exitcode":1,"stack":"node:internal/events/slow_event_emitter:37\n  fastEventEmitter._events.__proto__ = null;\n                                     ^\n\nError: Accessing Object.prototype.__proto__ has been disallowed with --disable-proto=throw\n    at Function.fromFastEventEmitter (node:internal/events/slow_event_emitter:37:38)\n    at EventEmitter.<computed> (node:internal/events/event_emitter:413:36)\n    at ReadableWorkerStdio.addListener (node:internal/events/event_emitter:484:47)\n    at Readable.on (node:internal/streams/readable:1130:35)\n    at ReadableWorkerStdio.once (node:internal/events/event_emitter:549:8)\n    at Readable.pipe (node:internal/streams/readable:935:9)\n    at pipeWithoutWarning (node:internal/worker:481:10)\n    at new Worker (node:internal/worker:244:7)\n    at Object.<anonymous> (C:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\parallel\\test-disable-proto-throw.js:41:3)\n    at Module._compile (node:internal/modules/cjs/loader:1480:14) {\n  code: 'ERR_PROTO_ACCESS'\n}\n\nNode.js v23.0.0-pre"},"time":155.003,"fullname":"parallel/test-disable-proto-throw","closingTestPoint":false}},{"testName":"parallel/test-disable-proto-throw","timestamp":1714656652787,"status":"REGRESSION","jobName":"node-test-binary-windows-js-suites","config":"node-test-binary-windows-js-suites » 3,win2022-COMPILED_BY-vs2022 #27524","buildUrl":"https://ci.nodejs.org/job/node-test-binary-windows-js-suites/RUN_SUBSET=3,nodes=win2022-COMPILED_BY-vs2022/27524/","buildNumber":27524,"builtOn":"test-rackspace-win2022_vs2022-x64-5","nodeVersion":"23.0.0","commitHash":"fa7baf79faaaf6b88b9781d7f3544228b8fa1b0f","callStack":[{"upstreamBuild":62662,"upstreamProject":"node-test-commit-windows-fanned","upstreamUrl":"job/node-test-commit-windows-fanned/"},{"upstreamBuild":70431,"upstreamProject":"node-test-commit","upstreamUrl":"job/node-test-commit/"},{"upstreamBuild":58863,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"upstreamBuild":58847,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"prId":"52733"}],"tap":{"ok":false,"name":"parallel/test-disable-proto-throw","id":222,"buffered":false,"tapError":null,"skip":false,"todo":false,"previous":null,"plan":null,"diag":{"severity":"fail","exitcode":1,"stack":"node:internal/events/slow_event_emitter:37\n  fastEventEmitter._events.__proto__ = null;\n                                     ^\n\nError: Accessing Object.prototype.__proto__ has been disallowed with --disable-proto=throw\n    at Function.fromFastEventEmitter (node:internal/events/slow_event_emitter:37:38)\n    at EventEmitter.<computed> (node:internal/events/event_emitter:413:36)\n    at ReadableWorkerStdio.addListener (node:internal/events/event_emitter:484:47)\n    at Readable.on (node:internal/streams/readable:1130:35)\n    at ReadableWorkerStdio.once (node:internal/events/event_emitter:549:8)\n    at Readable.pipe (node:internal/streams/readable:935:9)\n    at pipeWithoutWarning (node:internal/worker:481:10)\n    at new Worker (node:internal/worker:244:7)\n    at Object.<anonymous> (C:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\parallel\\test-disable-proto-throw.js:41:3)\n    at Module._compile (node:internal/modules/cjs/loader:1480:14) {\n  code: 'ERR_PROTO_ACCESS'\n}\n\nNode.js v23.0.0-pre"},"time":256.01,"fullname":"parallel/test-disable-proto-throw","closingTestPoint":false}},{"testName":"parallel/test-assert-builtins-not-read-from-filesystem","timestamp":1714656652787,"status":"REGRESSION","jobName":"node-test-binary-windows-js-suites","config":"node-test-binary-windows-js-suites » 2,win2022-COMPILED_BY-vs2022 #27524","buildUrl":"https://ci.nodejs.org/job/node-test-binary-windows-js-suites/RUN_SUBSET=2,nodes=win2022-COMPILED_BY-vs2022/27524/","buildNumber":27524,"builtOn":"test-rackspace-win2022_vs2022-x64-2","nodeVersion":"23.0.0","commitHash":"fa7baf79faaaf6b88b9781d7f3544228b8fa1b0f","callStack":[{"upstreamBuild":62662,"upstreamProject":"node-test-commit-windows-fanned","upstreamUrl":"job/node-test-commit-windows-fanned/"},{"upstreamBuild":70431,"upstreamProject":"node-test-commit","upstreamUrl":"job/node-test-commit/"},{"upstreamBuild":58863,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"upstreamBuild":58847,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"prId":"52733"}],"tap":{"ok":false,"name":"parallel/test-assert-builtins-not-read-from-filesystem","id":71,"buffered":false,"tapError":null,"skip":false,"todo":false,"previous":null,"plan":null,"diag":{"severity":"fail","exitcode":1,"stack":"node:assert:126\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Exit code: 1\n,,node:fs:2348\n\n    return binding.writeFileUtf8(\n\n                   ^\n\n\n\nError: ENOENT: no such file or directory, open 'C:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\.tmp.68\\node:internal\\events\\fast_event_emitter'\n\n    at writeFileSync (node:fs:2348:20)\n\n    at Object.<anonymous> (C:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\parallel\\test-assert-builtins-not-read-from-filesystem.js:41:3)\n\n    at Module._compile (node:internal/modules/cjs/loader:1480:14)\n\n    at Module._extensions..js (node:internal/modules/cjs/loader:1564:10)\n\n    at Module.load (node:internal/modules/cjs/loader:1287:32)\n\n    at Module._load (node:internal/modules/cjs/loader:1103:12)\n\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:168:12)\n\n    at node:internal/main/run_main_module:30:49 {\n\n  errno: -4058,\n\n  code: 'ENOENT',\n\n  syscall: 'open',\n\n  path: 'C:\\\\workspace\\\\node-test-binary-windows-js-suites\\\\node\\\\test\\\\.tmp.68\\\\node:internal\\\\events\\\\fast_event_emitter'\n\n}\n\n\n\nNode.js v23.0.0-pre\n\n\n    at Object.<anonymous> (C:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\parallel\\test-assert-builtins-not-read-from-filesystem.js:31:12)\n    at Module._compile (node:internal/modules/cjs/loader:1480:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1564:10)\n    at Module.load (node:internal/modules/cjs/loader:1287:32)\n    at Module._load (node:internal/modules/cjs/loader:1103:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:168:12)\n    at node:internal/main/run_main_module:30:49 {\n  generatedMessage: false,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 0,\n  operator: 'strictEqual'\n}\n\nNode.js v23.0.0-pre"},"time":653.008,"fullname":"parallel/test-assert-builtins-not-read-from-filesystem","closingTestPoint":false}},{"testName":"parallel/test-disable-proto-delete","timestamp":1714656652787,"status":"REGRESSION","jobName":"node-test-binary-windows-js-suites","config":"node-test-binary-windows-js-suites » 2,win2022-COMPILED_BY-vs2022 #27524","buildUrl":"https://ci.nodejs.org/job/node-test-binary-windows-js-suites/RUN_SUBSET=2,nodes=win2022-COMPILED_BY-vs2022/27524/","buildNumber":27524,"builtOn":"test-rackspace-win2022_vs2022-x64-2","nodeVersion":"23.0.0","commitHash":"fa7baf79faaaf6b88b9781d7f3544228b8fa1b0f","callStack":[{"upstreamBuild":62662,"upstreamProject":"node-test-commit-windows-fanned","upstreamUrl":"job/node-test-commit-windows-fanned/"},{"upstreamBuild":70431,"upstreamProject":"node-test-commit","upstreamUrl":"job/node-test-commit/"},{"upstreamBuild":58863,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"upstreamBuild":58847,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"prId":"52733"}],"tap":{"ok":false,"name":"parallel/test-disable-proto-delete","id":224,"buffered":false,"tapError":null,"skip":false,"todo":false,"previous":null,"plan":null,"diag":{"severity":"fail","exitcode":1,"stack":"node:internal/events/slow_event_emitter:268\n    for (let i = listeners.length - 1; i >= 0; i--) {\n                           ^\n\nTypeError: Cannot read properties of null (reading 'length')\n    at SlowEventEmitter.removeAllListeners (node:internal/events/slow_event_emitter:268:28)\n    at Worker.removeAllListeners (node:internal/events/event_emitter:596:38)\n    at SlowEventEmitter.removeAllListeners (node:internal/events/slow_event_emitter:253:41)\n    at Worker.removeAllListeners (node:internal/events/event_emitter:596:38)\n    at [kOnExit] (node:internal/worker:316:10)\n    at Worker.<computed>.onexit (node:internal/worker:229:20)\n\nNode.js v23.0.0-pre"},"time":420.012,"fullname":"parallel/test-disable-proto-delete","closingTestPoint":false}},{"testName":"parallel/test-runner-output","timestamp":1714656652787,"status":"FAILED","jobName":"node-test-binary-windows-js-suites","config":"node-test-binary-windows-js-suites » 2,win2022-COMPILED_BY-vs2022 #27524","buildUrl":"https://ci.nodejs.org/job/node-test-binary-windows-js-suites/RUN_SUBSET=2,nodes=win2022-COMPILED_BY-vs2022/27524/","buildNumber":27524,"builtOn":"test-rackspace-win2022_vs2022-x64-2","nodeVersion":"23.0.0","commitHash":"fa7baf79faaaf6b88b9781d7f3544228b8fa1b0f","callStack":[{"upstreamBuild":62662,"upstreamProject":"node-test-commit-windows-fanned","upstreamUrl":"job/node-test-commit-windows-fanned/"},{"upstreamBuild":70431,"upstreamProject":"node-test-commit","upstreamUrl":"job/node-test-commit/"},{"upstreamBuild":58863,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"upstreamBuild":58847,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"prId":"52733"}],"tap":{"ok":false,"name":"parallel/test-runner-output","id":681,"buffered":false,"tapError":null,"skip":false,"todo":false,"previous":null,"plan":null,"diag":{"severity":"fail","exitcode":1,"stack":"TAP version 13\n# Subtest: test runner output\n    # Subtest: test-runner/output/abort.js\n    ok 1 - test-runner/output/abort.js\n      ---\n      duration_ms: 4114.7844\n      ...\n    # Subtest: test-runner/output/abort_suite.js\n    ok 2 - test-runner/output/abort_suite.js\n      ---\n      duration_ms: 4081.2598\n      ...\n    # Subtest: test-runner/output/abort_hooks.js\n    ok 3 - test-runner/output/abort_hooks.js\n      ---\n      duration_ms: 4095.3323\n      ...\n    # Subtest: test-runner/output/describe_it.js\n    ok 4 - test-runner/output/describe_it.js\n      ---\n      duration_ms: 4016.9302\n      ...\n    # Subtest: test-runner/output/describe_nested.js\n    ok 5 - test-runner/output/describe_nested.js\n      ---\n      duration_ms: 3990.9796\n      ...\n    # Subtest: test-runner/output/eval_dot.js\n    ok 6 - test-runner/output/eval_dot.js\n      ---\n      duration_ms: 3898.3223\n      ...\n    # Subtest: test-runner/output/eval_spec.js\n    ok 7 - test-runner/output/eval_spec.js\n      ---\n      duration_ms: 3908.0548\n      ...\n    # Subtest: test-runner/output/eval_tap.js\n    ok 8 - test-runner/output/eval_tap.js\n      ---\n      duration_ms: 3782.9436\n      ...\n    # Subtest: test-runner/output/hooks.js\n    ok 9 - test-runner/output/hooks.js\n      ---\n      duration_ms: 3734.9535\n      ...\n    # Subtest: test-runner/output/hooks_spec_reporter.js\n    ok 10 - test-runner/output/hooks_spec_reporter.js\n      ---\n      duration_ms: 3678.489\n      ...\n    # Subtest: test-runner/output/skip-each-hooks.js\n    ok 11 - test-runner/output/skip-each-hooks.js\n      ---\n      duration_ms: 3626.8337\n      ...\n    # Subtest: test-runner/output/suite-skip-hooks.js\n    ok 12 - test-runner/output/suite-skip-hooks.js\n      ---\n      duration_ms: 3588.8301\n      ...\n    # Subtest: test-runner/output/timeout_in_before_each_should_not_affect_further_tests.js\n    ok 13 - test-runner/output/timeout_in_before_each_should_not_affect_further_tests.js\n      ---\n      duration_ms: 3312.2267\n      ...\n    # Subtest: test-runner/output/hooks-with-no-global-test.js\n    ok 14 - test-runner/output/hooks-with-no-global-test.js\n      ---\n      duration_ms: 3115.0726\n      ...\n    # Subtest: test-runner/output/global-hooks-with-no-tests.js\n    ok 15 - test-runner/output/global-hooks-with-no-tests.js\n      ---\n      duration_ms: 2899.35\n      ...\n    # Subtest: test-runner/output/before-and-after-each-too-many-listeners.js\n    ok 16 - test-runner/output/before-and-after-each-too-many-listeners.js\n      ---\n      duration_ms: 2732.0024\n      ...\n    # Subtest: test-runner/output/before-and-after-each-with-timeout-too-many-listeners.js\n    ok 17 - test-runner/output/before-and-after-each-with-timeout-too-many-listeners.js\n      ---\n      duration_ms: 2701.4968\n      ...\n    # Subtest: test-runner/output/force_exit.js\n    ok 18 - test-runner/output/force_exit.js\n      ---\n      duration_ms: 2674.7601\n      ...\n    # Subtest: test-runner/output/global_after_should_fail_the_test.js\n    ok 19 - test-runner/output/global_after_should_fail_the_test.js\n      ---\n      duration_ms: 2513.2164\n      ...\n    # Subtest: test-runner/output/no_refs.js\n    not ok 20 - test-runner/output/no_refs.js\n      ---\n      duration_ms: 2348.1659\n      location: 'C:\\\\workspace\\\\node-test-binary-windows-js-suites\\\\node\\\\test\\\\parallel\\\\test-runner-output.mjs:155:5'\n      failureType: 'testCodeFailure'\n      error: |-\n        Expected values to be strictly equal:\n        + actual - expected ... Lines skipped\n        \n          'TAP version 13\\n' +\n            '# Subtest: does not keep event loop alive\\n' +\n        ...\n            \"      error: 'Promise resolution is still pending but the event loop has already resolved'\\n\" +\n            \"      code: 'ERR_TEST_FAILURE'\\n\" +\n        +   '      ...\\n' +\n        +   '    1..1\\n' +\n        +   'not ok 1 - does not keep event loop alive\\n' +\n        +   '  ---\\n' +\n        +   '  duration_ms: *\\n' +\n        +   \"  location: '/test/fixtures/test-runner/output/no_refs.js:(LINE):1'\\n\" +\n        +   \"  failureType: 'cancelledByParent'\\n\" +\n        +   \"  error: 'Promise resolution is still pending but the event loop has already resolved'\\n\" +\n        +   \"  code: 'ERR_TEST_FAILURE'\\n\" +\n        -   '      stack: |-\\n' +\n        -   '        *\\n' +\n        -   '      ...\\n' +\n        -   '    1..1\\n' +\n        -   'not ok 1 - does not keep event loop alive\\n' +\n        -   '  ---\\n' +\n        -   '  duration_ms: *\\n' +\n        -   \"  location: '/test/fixtures/test-runner/output/no_refs.js:(LINE):1'\\n\" +\n        -   \"  failureType: 'cancelledByParent'\\n\" +\n        -   \"  error: 'Promise resolution is still pending but the event loop has already resolved'\\n\" +\n        -   \"  code: 'ERR_TEST_FAILURE'\\n\" +\n        -   '  stack: |-\\n' +\n        -   '    *\\n' +\n            '  ...\\n' +\n        ...\n            '# skipped 0\\n' +\n            '# todo 0\\n' +\n            '# duration_ms *\\n'\n      code: 'ERR_ASSERTION'\n      name: 'AssertionError'\n      expected: |-\n        TAP version 13\n        # Subtest: does not keep event loop alive\n            # Subtest: +does not keep event loop alive\n            not ok 1 - +does not keep event loop alive\n              ---\n              duration_ms: *\n              location: '/test/fixtures/test-runner/output/no_refs.js:(LINE):11'\n              failureType: 'cancelledByParent'\n              error: 'Promise resolution is still pending but the event loop has already resolved'\n              code: 'ERR_TEST_FAILURE'\n              stack: |-\n                *\n              ...\n            1..1\n        not ok 1 - does not keep event loop alive\n          ---\n          duration_ms: *\n          location: '/test/fixtures/test-runner/output/no_refs.js:(LINE):1'\n          failureType: 'cancelledByParent'\n          error: 'Promise resolution is still pending but the event loop has already resolved'\n          code: 'ERR_TEST_FAILURE'\n          stack: |-\n            *\n          ...\n        1..1\n        # tests 2\n        # suites 0\n        # pass 0\n        # fail 0\n        # cancelled 2\n        # skipped 0\n        # todo 0\n        # duration_ms *\n        \n      actual: |-\n        TAP version 13\n        # Subtest: does not keep event loop alive\n            # Subtest: +does not keep event loop alive\n            not ok 1 - +does not keep event loop alive\n              ---\n              duration_ms: *\n              location: '/test/fixtures/test-runner/output/no_refs.js:(LINE):11'\n              failureType: 'cancelledByParent'\n              error: 'Promise resolution is still pending but the event loop has already resolved'\n              code: 'ERR_TEST_FAILURE'\n              ...\n            1..1\n        not ok 1 - does not keep event loop alive\n          ---\n          duration_ms: *\n          location: '/test/fixtures/test-runner/output/no_refs.js:(LINE):1'\n          failureType: 'cancelledByParent'\n          error: 'Promise resolution is still pending but the event loop has already resolved'\n          code: 'ERR_TEST_FAILURE'\n          ...\n        1..1\n        # tests 2\n        # suites 0\n        # pass 0\n        # fail 0\n        # cancelled 2\n        # skipped 0\n        # todo 0\n        # duration_ms *\n        \n      operator: 'strictEqual'\n      stack: |-\n        assertSnapshot (C:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:56:12)\n        async Module.spawnAndAssert (C:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:84:3)\n        async TestContext.<anonymous> (file:///C:/workspace/node-test-binary-windows-js-suites/node/test/parallel/test-runner-output.mjs:149:5)\n        async Test.run (node:internal/test_runner/test:748:9)\n        async Promise.all (index 19)\n        async Suite.run (node:internal/test_runner/test:1106:7)\n        async Test.processPendingSubtests (node:internal/test_runner/test:461:7)\n      ...\n    # Subtest: test-runner/output/no_tests.js\n    ok 21 - test-runner/output/no_tests.js\n      ---\n      duration_ms: 2057.135\n      ...\n    # Subtest: test-runner/output/only_tests.js\n    ok 22 - test-runner/output/only_tests.js\n      ---\n      duration_ms: 2030.2276\n      ...\n    # Subtest: test-runner/output/dot_reporter.js\n    ok 23 - test-runner/output/dot_reporter.js\n      ---\n      duration_ms: 2169.2263\n      ...\n    # Subtest: test-runner/output/junit_reporter.js\n    not ok 24 - test-runner/output/junit_reporter.js\n      ---\n      duration_ms: 1977.9896\n      location: 'C:\\\\workspace\\\\node-test-binary-windows-js-suites\\\\node\\\\test\\\\parallel\\\\test-runner-output.mjs:155:5'\n      failureType: 'testCodeFailure'\n      error: |-\n        Expected values to be strictly equal:\n        + actual - expected ... Lines skipped\n        \n          '<?xml version=\"1.0\" encoding=\"utf-8\"?>\\n' +\n            '<testsuites>\\n' +\n        ...\n            '\\t\\t</failure>\\n' +\n            '\\t</testcase>\\n' +\n        +   '\\t<testcase name=\"callback called twice\" time=\"*\" '... 11376 more characters\n        -   '\\t<testcase name=\"callback called twice\" time=\"*\" '... 11392 more characters\n      code: 'ERR_ASSERTION'\n      name: 'AssertionError'\n      expected: |-\n        <?xml version=\"1.0\" encoding=\"utf-8\"?>\n        <testsuites>\n        \t<testcase name=\"sync pass todo\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"todo\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync pass todo with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"todo\" message=\"this is a passing todo\"/>\n        \t</testcase>\n        \t<testcase name=\"sync fail todo\" time=\"*\" classname=\"test\" failure=\"thrown from sync fail todo\">\n        \t\t<skipped type=\"todo\" message=\"true\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync fail todo\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync fail todo] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync fail todo\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync fail todo with message\" time=\"*\" classname=\"test\" failure=\"thrown from sync fail todo with message\">\n        \t\t<skipped type=\"todo\" message=\"this is a failing todo\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync fail todo with message\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync fail todo with message] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync fail todo with message\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync skip pass\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip pass with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"this is skipped\"/>\n        \t</testcase>\n        \t<testcase name=\"sync pass\" time=\"*\" classname=\"test\"/>\n        \t<!-- this test should pass -->\n        \t<testcase name=\"sync throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from sync throw fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async skip pass\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"async pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from async throw fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from async throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from async throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async skip fail\" time=\"*\" classname=\"test\" failure=\"thrown from async throw fail\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from async throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from async throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async assertion fail\" time=\"*\" classname=\"test\" failure=\"Expected values to be strictly equal:true !== false\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Expected values to be strictly equal:true !== false\">\n        [Error [ERR_TEST_FAILURE]: Expected values to be strictly equal:\n        \n        true !== false\n        ] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n          \n          true !== false\n          \n              *\n              *\n              *\n              *\n              *\n              *\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: true,\n            expected: false,\n            operator: 'strictEqual'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"resolve pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"reject fail\" time=\"*\" classname=\"test\" failure=\"rejected from reject fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"rejected from reject fail\">\n        [Error [ERR_TEST_FAILURE]: rejected from reject fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: rejected from reject fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unhandled rejection - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async unhandled rejection - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate throw - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate reject - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate resolve pass\" time=\"*\" classname=\"test\"/>\n        \t<testsuite name=\"subtest sync throw fail\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"1\" failures=\"1\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"+sync throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fail\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fail\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fail\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<!-- this subtest should make its parent test fail -->\n        \t</testsuite>\n        \t<testcase name=\"sync throw non-error fail\" time=\"*\" classname=\"test\" failure=\"Symbol(thrown symbol from sync throw non-error fail)\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Symbol(thrown symbol from sync throw non-error fail)\">\n        [Error [ERR_TEST_FAILURE]: Symbol(thrown symbol from sync throw non-error fail)] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: Symbol(thrown symbol from sync throw non-error fail) }\n        \t\t</failure>\n        \t</testcase>\n        \t<testsuite name=\"level 0a\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"4\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"level 1a\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1b\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1c\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1d\" time=\"*\" classname=\"test\"/>\n        \t</testsuite>\n        \t<testsuite name=\"top level\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"2\" failures=\"1\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"+long running\" time=\"*\" classname=\"test\" failure=\"test did not finish before its parent and was cancelled\">\n        \t\t\t<failure type=\"cancelledByParent\" message=\"test did not finish before its parent and was cancelled\">\n        [Error [ERR_TEST_FAILURE]: test did not finish before its parent and was cancelled] { code: 'ERR_TEST_FAILURE', failureType: 'cancelledByParent', cause: 'test did not finish before its parent and was cancelled' }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<testsuite name=\"+short running\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"1\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t\t<testcase name=\"++short running\" time=\"*\" classname=\"test\"/>\n        \t\t</testsuite>\n        \t</testsuite>\n        \t<testcase name=\"invalid subtest - pass but subtest fails\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"sync skip option\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip option with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"this is skipped\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip option is false fail\" time=\"*\" classname=\"test\" failure=\"this should be executed\">\n        \t\t<failure type=\"testCodeFailure\" message=\"this should be executed\">\n        [Error [ERR_TEST_FAILURE]: this should be executed] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: this should be executed\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"functionOnly\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"test with only a name provided\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"test with a name and options provided\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"functionAndOptions\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"callback pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback fail\" time=\"*\" classname=\"test\" failure=\"callback failure\">\n        \t\t<failure type=\"testCodeFailure\" message=\"callback failure\">\n        [Error [ERR_TEST_FAILURE]: callback failure] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: callback failure\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback also returns a Promise\" time=\"*\" classname=\"test\" failure=\"passed a callback but also returned a Promise\">\n        \t\t<failure type=\"callbackAndPromisePresent\" message=\"passed a callback but also returned a Promise\">\n        [Error [ERR_TEST_FAILURE]: passed a callback but also returned a Promise] { code: 'ERR_TEST_FAILURE', failureType: 'callbackAndPromisePresent', cause: 'passed a callback but also returned a Promise' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback throw\" time=\"*\" classname=\"test\" failure=\"thrown from callback throw\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from callback throw\">\n        [Error [ERR_TEST_FAILURE]: thrown from callback throw] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from callback throw\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback called twice\" time=\"*\" classname=\"test\" failure=\"callback invoked multiple times\">\n        \t\t<failure type=\"multipleCallbackInvocations\" message=\"callback invoked multiple times\">\n        Error [ERR_TEST_FAILURE]: callback invoked multiple times\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'multipleCallbackInvocations',\n          cause: 'callback invoked multiple times'\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback called twice in different ticks\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback called twice in future tick\" time=\"*\" classname=\"test\" failure=\"callback invoked multiple times\">\n        \t\t<failure type=\"uncaughtException\" message=\"callback invoked multiple times\">\n        Error [ERR_TEST_FAILURE]: callback invoked multiple times\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error [ERR_TEST_FAILURE]: callback invoked multiple times\n              * {\n            code: 'ERR_TEST_FAILURE',\n            failureType: 'multipleCallbackInvocations',\n            cause: 'callback invoked multiple times'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback async throw\" time=\"*\" classname=\"test\" failure=\"thrown from callback async throw\">\n        \t\t<failure type=\"uncaughtException\" message=\"thrown from callback async throw\">\n        Error [ERR_TEST_FAILURE]: thrown from callback async throw\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error: thrown from callback async throw\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback async throw after done\" time=\"*\" classname=\"test\"/>\n        \t<testsuite name=\"only is set but not in only mode\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"4\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"running subtest 1\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"running subtest 2\" time=\"*\" classname=\"test\"/>\n        \t\t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t\t<testcase name=\"running subtest 3\" time=\"*\" classname=\"test\"/>\n        \t\t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t\t<testcase name=\"running subtest 4\" time=\"*\" classname=\"test\"/>\n        \t</testsuite>\n        \t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t<testcase name=\"custom inspect symbol fail\" time=\"*\" classname=\"test\" failure=\"customized\">\n        \t\t<failure type=\"testCodeFailure\" message=\"customized\">\n        [Error [ERR_TEST_FAILURE]: customized] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: customized }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"custom inspect symbol that throws fail\" time=\"*\" classname=\"test\" failure=\"{  foo: 1,  [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]}\">\n        \t\t<failure type=\"testCodeFailure\" message=\"{  foo: 1,  [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]}\">\n        [Error [ERR_TEST_FAILURE]: {\n          foo: 1,\n          [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]\n        }] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: { foo: 1, [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]] }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testsuite name=\"subtest sync throw fails\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"2\" failures=\"2\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"sync throw fails at first\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fails at first\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fails at first\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fails at first\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fails at first\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<testcase name=\"sync throw fails at second\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fails at second\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fails at second\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fails at second\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fails at second\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t</testsuite>\n        \t<testcase name=\"timed out async test\" time=\"*\" classname=\"test\" failure=\"test timed out after 5ms\">\n        \t\t<failure type=\"testTimeoutFailure\" message=\"test timed out after 5ms\">\n        [Error [ERR_TEST_FAILURE]: test timed out after 5ms] { code: 'ERR_TEST_FAILURE', failureType: 'testTimeoutFailure', cause: 'test timed out after 5ms' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"timed out callback test\" time=\"*\" classname=\"test\" failure=\"test timed out after 5ms\">\n        \t\t<failure type=\"testTimeoutFailure\" message=\"test timed out after 5ms\">\n        [Error [ERR_TEST_FAILURE]: test timed out after 5ms] { code: 'ERR_TEST_FAILURE', failureType: 'testTimeoutFailure', cause: 'test timed out after 5ms' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"large timeout async test is ok\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"large timeout callback test is ok\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"successful thenable\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"rejected thenable\" time=\"*\" classname=\"test\" failure=\"custom error\">\n        \t\t<failure type=\"testCodeFailure\" message=\"custom error\">\n        [Error [ERR_TEST_FAILURE]: custom error] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: 'custom error' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unfinished test with uncaughtException\" time=\"*\" classname=\"test\" failure=\"foo\">\n        \t\t<failure type=\"uncaughtException\" message=\"foo\">\n        Error [ERR_TEST_FAILURE]: foo\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error: foo\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unfinished test with unhandledRejection\" time=\"*\" classname=\"test\" failure=\"bar\">\n        \t\t<failure type=\"unhandledRejection\" message=\"bar\">\n        Error [ERR_TEST_FAILURE]: bar\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'unhandledRejection',\n          cause: Error: bar\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"assertion errors display actual and expected properly\" time=\"*\" classname=\"test\" failure=\"Expected values to be loosely deep-equal:{  bar: 1,  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  foo: 1}should loosely deep-equal{  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  circular: &lt;ref *1> {    bar: 2,    c: [Circular *1]  }}\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Expected values to be loosely deep-equal:{  bar: 1,  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  foo: 1}should loosely deep-equal{  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  circular: &lt;ref *1> {    bar: 2,    c: [Circular *1]  }}\">\n        [Error [ERR_TEST_FAILURE]: Expected values to be loosely deep-equal:\n        \n        {\n          bar: 1,\n          baz: {\n            date: 1970-01-01T00:00:00.000Z,\n            null: null,\n            number: 1,\n            string: 'Hello',\n            undefined: undefined\n          },\n          boo: [\n            1\n          ],\n          foo: 1\n        }\n        \n        should loosely deep-equal\n        \n        {\n          baz: {\n            date: 1970-01-01T00:00:00.000Z,\n            null: null,\n            number: 1,\n            string: 'Hello',\n            undefined: undefined\n          },\n          boo: [\n            1\n          ],\n          circular: &lt;ref *1> {\n            bar: 2,\n            c: [Circular *1]\n          }\n        }] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n          \n          {\n            bar: 1,\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            foo: 1\n          }\n          \n          should loosely deep-equal\n          \n          {\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            circular: &lt;ref *1> {\n              bar: 2,\n              c: [Circular *1]\n            }\n          }\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: [Object],\n            expected: [Object],\n            operator: 'deepEqual'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"invalid subtest fail\" time=\"*\" classname=\"test\" failure=\"test could not be started because its parent finished\">\n        \t\t<failure type=\"parentAlreadyFinished\" message=\"test could not be started because its parent finished\">\n        Error [ERR_TEST_FAILURE]: test could not be started because its parent finished\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'parentAlreadyFinished',\n          cause: 'test could not be started because its parent finished'\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<!-- Error: Test \"unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:72:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: Test \"async unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:76:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from async unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: A resource generated asynchronous activity after the test ended. This activity created the error \"Error: uncaught from outside of a test\" which triggered an uncaughtException event, caught by the test runner. -->\n        \t<!-- Error: Test \"immediate throw - passes but warns\" at test/fixtures/test-runner/output/output.js:80:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from immediate throw fail\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- Error: Test \"immediate reject - passes but warns\" at test/fixtures/test-runner/output/output.js:86:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from immediate reject fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: Test \"callback called twice in different ticks\" at test/fixtures/test-runner/output/output.js:251:1 generated asynchronous activity after the test ended. This activity created the error \"Error [ERR_TEST_FAILURE]: callback invoked multiple times\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- Error: Test \"callback async throw after done\" at test/fixtures/test-runner/output/output.js:269:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from callback async throw after done\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- tests 76 -->\n        \t<!-- suites 0 -->\n        \t<!-- pass 35 -->\n        \t<!-- fail 25 -->\n        \t<!-- cancelled 3 -->\n        \t<!-- skipped 9 -->\n        \t<!-- todo 4 -->\n        \t<!-- duration_ms * -->\n        </testsuites>\n        \n      actual: |-\n        <?xml version=\"1.0\" encoding=\"utf-8\"?>\n        <testsuites>\n        \t<testcase name=\"sync pass todo\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"todo\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync pass todo with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"todo\" message=\"this is a passing todo\"/>\n        \t</testcase>\n        \t<testcase name=\"sync fail todo\" time=\"*\" classname=\"test\" failure=\"thrown from sync fail todo\">\n        \t\t<skipped type=\"todo\" message=\"true\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync fail todo\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync fail todo] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync fail todo\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync fail todo with message\" time=\"*\" classname=\"test\" failure=\"thrown from sync fail todo with message\">\n        \t\t<skipped type=\"todo\" message=\"this is a failing todo\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync fail todo with message\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync fail todo with message] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync fail todo with message\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync skip pass\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip pass with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"this is skipped\"/>\n        \t</testcase>\n        \t<testcase name=\"sync pass\" time=\"*\" classname=\"test\"/>\n        \t<!-- this test should pass -->\n        \t<testcase name=\"sync throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from sync throw fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async skip pass\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"async pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from async throw fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from async throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from async throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async skip fail\" time=\"*\" classname=\"test\" failure=\"thrown from async throw fail\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from async throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from async throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async assertion fail\" time=\"*\" classname=\"test\" failure=\"Expected values to be strictly equal:true !== false\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Expected values to be strictly equal:true !== false\">\n        [Error [ERR_TEST_FAILURE]: Expected values to be strictly equal:\n        \n        true !== false\n        ] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n          \n          true !== false\n          \n              *\n              *\n              *\n              *\n              *\n              *\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: true,\n            expected: false,\n            operator: 'strictEqual'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"resolve pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"reject fail\" time=\"*\" classname=\"test\" failure=\"rejected from reject fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"rejected from reject fail\">\n        [Error [ERR_TEST_FAILURE]: rejected from reject fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: rejected from reject fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unhandled rejection - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async unhandled rejection - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate throw - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate reject - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate resolve pass\" time=\"*\" classname=\"test\"/>\n        \t<testsuite name=\"subtest sync throw fail\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"1\" failures=\"1\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"+sync throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fail\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fail\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fail\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<!-- this subtest should make its parent test fail -->\n        \t</testsuite>\n        \t<testcase name=\"sync throw non-error fail\" time=\"*\" classname=\"test\" failure=\"Symbol(thrown symbol from sync throw non-error fail)\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Symbol(thrown symbol from sync throw non-error fail)\">\n        [Error [ERR_TEST_FAILURE]: Symbol(thrown symbol from sync throw non-error fail)] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: Symbol(thrown symbol from sync throw non-error fail) }\n        \t\t</failure>\n        \t</testcase>\n        \t<testsuite name=\"level 0a\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"4\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"level 1a\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1b\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1c\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1d\" time=\"*\" classname=\"test\"/>\n        \t</testsuite>\n        \t<testsuite name=\"top level\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"2\" failures=\"1\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"+long running\" time=\"*\" classname=\"test\" failure=\"test did not finish before its parent and was cancelled\">\n        \t\t\t<failure type=\"cancelledByParent\" message=\"test did not finish before its parent and was cancelled\">\n        [Error [ERR_TEST_FAILURE]: test did not finish before its parent and was cancelled] { code: 'ERR_TEST_FAILURE', failureType: 'cancelledByParent', cause: 'test did not finish before its parent and was cancelled' }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<testsuite name=\"+short running\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"1\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t\t<testcase name=\"++short running\" time=\"*\" classname=\"test\"/>\n        \t\t</testsuite>\n        \t</testsuite>\n        \t<testcase name=\"invalid subtest - pass but subtest fails\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"sync skip option\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip option with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"this is skipped\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip option is false fail\" time=\"*\" classname=\"test\" failure=\"this should be executed\">\n        \t\t<failure type=\"testCodeFailure\" message=\"this should be executed\">\n        [Error [ERR_TEST_FAILURE]: this should be executed] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: this should be executed\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"functionOnly\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"test with only a name provided\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"test with a name and options provided\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"functionAndOptions\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"callback pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback fail\" time=\"*\" classname=\"test\" failure=\"callback failure\">\n        \t\t<failure type=\"testCodeFailure\" message=\"callback failure\">\n        [Error [ERR_TEST_FAILURE]: callback failure] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: callback failure\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback also returns a Promise\" time=\"*\" classname=\"test\" failure=\"passed a callback but also returned a Promise\">\n        \t\t<failure type=\"callbackAndPromisePresent\" message=\"passed a callback but also returned a Promise\">\n        [Error [ERR_TEST_FAILURE]: passed a callback but also returned a Promise] { code: 'ERR_TEST_FAILURE', failureType: 'callbackAndPromisePresent', cause: 'passed a callback but also returned a Promise' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback throw\" time=\"*\" classname=\"test\" failure=\"thrown from callback throw\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from callback throw\">\n        [Error [ERR_TEST_FAILURE]: thrown from callback throw] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from callback throw\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback called twice\" time=\"*\" classname=\"test\" failure=\"callback invoked multiple times\">\n        \t\t<failure type=\"multipleCallbackInvocations\" message=\"callback invoked multiple times\">\n        Error [ERR_TEST_FAILURE]: callback invoked multiple times\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'multipleCallbackInvocations',\n          cause: 'callback invoked multiple times'\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback called twice in different ticks\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback called twice in future tick\" time=\"*\" classname=\"test\" failure=\"callback invoked multiple times\">\n        \t\t<failure type=\"uncaughtException\" message=\"callback invoked multiple times\">\n        [Error [ERR_TEST_FAILURE]: callback invoked multiple times] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error [ERR_TEST_FAILURE]: callback invoked multiple times\n              * {\n            code: 'ERR_TEST_FAILURE',\n            failureType: 'multipleCallbackInvocations',\n            cause: 'callback invoked multiple times'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback async throw\" time=\"*\" classname=\"test\" failure=\"thrown from callback async throw\">\n        \t\t<failure type=\"uncaughtException\" message=\"thrown from callback async throw\">\n        [Error [ERR_TEST_FAILURE]: thrown from callback async throw] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error: thrown from callback async throw\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback async throw after done\" time=\"*\" classname=\"test\"/>\n        \t<testsuite name=\"only is set but not in only mode\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"4\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"running subtest 1\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"running subtest 2\" time=\"*\" classname=\"test\"/>\n        \t\t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t\t<testcase name=\"running subtest 3\" time=\"*\" classname=\"test\"/>\n        \t\t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t\t<testcase name=\"running subtest 4\" time=\"*\" classname=\"test\"/>\n        \t</testsuite>\n        \t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t<testcase name=\"custom inspect symbol fail\" time=\"*\" classname=\"test\" failure=\"customized\">\n        \t\t<failure type=\"testCodeFailure\" message=\"customized\">\n        [Error [ERR_TEST_FAILURE]: customized] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: customized }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"custom inspect symbol that throws fail\" time=\"*\" classname=\"test\" failure=\"{  foo: 1,  [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]}\">\n        \t\t<failure type=\"testCodeFailure\" message=\"{  foo: 1,  [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]}\">\n        [Error [ERR_TEST_FAILURE]: {\n          foo: 1,\n          [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]\n        }] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: { foo: 1, [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]] }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testsuite name=\"subtest sync throw fails\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"2\" failures=\"2\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"sync throw fails at first\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fails at first\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fails at first\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fails at first\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fails at first\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<testcase name=\"sync throw fails at second\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fails at second\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fails at second\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fails at second\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fails at second\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t</testsuite>\n        \t<testcase name=\"timed out async test\" time=\"*\" classname=\"test\" failure=\"test timed out after 5ms\">\n        \t\t<failure type=\"testTimeoutFailure\" message=\"test timed out after 5ms\">\n        [Error [ERR_TEST_FAILURE]: test timed out after 5ms] { code: 'ERR_TEST_FAILURE', failureType: 'testTimeoutFailure', cause: 'test timed out after 5ms' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"timed out callback test\" time=\"*\" classname=\"test\" failure=\"test timed out after 5ms\">\n        \t\t<failure type=\"testTimeoutFailure\" message=\"test timed out after 5ms\">\n        [Error [ERR_TEST_FAILURE]: test timed out after 5ms] { code: 'ERR_TEST_FAILURE', failureType: 'testTimeoutFailure', cause: 'test timed out after 5ms' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"large timeout async test is ok\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"large timeout callback test is ok\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"successful thenable\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"rejected thenable\" time=\"*\" classname=\"test\" failure=\"custom error\">\n        \t\t<failure type=\"testCodeFailure\" message=\"custom error\">\n        [Error [ERR_TEST_FAILURE]: custom error] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: 'custom error' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unfinished test with uncaughtException\" time=\"*\" classname=\"test\" failure=\"foo\">\n        \t\t<failure type=\"uncaughtException\" message=\"foo\">\n        [Error [ERR_TEST_FAILURE]: foo] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error: foo\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unfinished test with unhandledRejection\" time=\"*\" classname=\"test\" failure=\"bar\">\n        \t\t<failure type=\"unhandledRejection\" message=\"bar\">\n        [Error [ERR_TEST_FAILURE]: bar] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'unhandledRejection',\n          cause: Error: bar\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"assertion errors display actual and expected properly\" time=\"*\" classname=\"test\" failure=\"Expected values to be loosely deep-equal:{  bar: 1,  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  foo: 1}should loosely deep-equal{  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  circular: &lt;ref *1> {    bar: 2,    c: [Circular *1]  }}\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Expected values to be loosely deep-equal:{  bar: 1,  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  foo: 1}should loosely deep-equal{  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  circular: &lt;ref *1> {    bar: 2,    c: [Circular *1]  }}\">\n        [Error [ERR_TEST_FAILURE]: Expected values to be loosely deep-equal:\n        \n        {\n          bar: 1,\n          baz: {\n            date: 1970-01-01T00:00:00.000Z,\n            null: null,\n            number: 1,\n            string: 'Hello',\n            undefined: undefined\n          },\n          boo: [\n            1\n          ],\n          foo: 1\n        }\n        \n        should loosely deep-equal\n        \n        {\n          baz: {\n            date: 1970-01-01T00:00:00.000Z,\n            null: null,\n            number: 1,\n            string: 'Hello',\n            undefined: undefined\n          },\n          boo: [\n            1\n          ],\n          circular: &lt;ref *1> {\n            bar: 2,\n            c: [Circular *1]\n          }\n        }] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n          \n          {\n            bar: 1,\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            foo: 1\n          }\n          \n          should loosely deep-equal\n          \n          {\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            circular: &lt;ref *1> {\n              bar: 2,\n              c: [Circular *1]\n            }\n          }\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: [Object],\n            expected: [Object],\n            operator: 'deepEqual'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"invalid subtest fail\" time=\"*\" classname=\"test\" failure=\"test could not be started because its parent finished\">\n        \t\t<failure type=\"parentAlreadyFinished\" message=\"test could not be started because its parent finished\">\n        Error [ERR_TEST_FAILURE]: test could not be started because its parent finished\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'parentAlreadyFinished',\n          cause: 'test could not be started because its parent finished'\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<!-- Error: Test \"unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:72:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: Test \"async unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:76:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from async unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: A resource generated asynchronous activity after the test ended. This activity created the error \"Error: uncaught from outside of a test\" which triggered an uncaughtException event, caught by the test runner. -->\n        \t<!-- Error: Test \"immediate throw - passes but warns\" at test/fixtures/test-runner/output/output.js:80:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from immediate throw fail\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- Error: Test \"immediate reject - passes but warns\" at test/fixtures/test-runner/output/output.js:86:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from immediate reject fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: Test \"callback called twice in different ticks\" at test/fixtures/test-runner/output/output.js:251:1 generated asynchronous activity after the test ended. This activity created the error \"Error [ERR_TEST_FAILURE]: callback invoked multiple times\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- Error: Test \"callback async throw after done\" at test/fixtures/test-runner/output/output.js:269:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from callback async throw after done\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- tests 76 -->\n        \t<!-- suites 0 -->\n        \t<!-- pass 35 -->\n        \t<!-- fail 25 -->\n        \t<!-- cancelled 3 -->\n        \t<!-- skipped 9 -->\n        \t<!-- todo 4 -->\n        \t<!-- duration_ms * -->\n        </testsuites>\n        \n      operator: 'strictEqual'\n      stack: |-\n        assertSnapshot (C:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:56:12)\n        async Module.spawnAndAssert (C:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:84:3)\n        async TestContext.<anonymous> (file:///C:/workspace/node-test-binary-windows-js-suites/node/test/parallel/test-runner-output.mjs:149:5)\n        async Test.run (node:internal/test_runner/test:748:9)\n        async Promise.all (index 23)\n        async Suite.run (node:internal/test_runner/test:1106:7)\n        async Test.processPendingSubtests (node:internal/test_runner/test:461:7)\n      ...\n    # Subtest: test-runner/output/spec_reporter_successful.js\n    ok 25 - test-runner/output/spec_reporter_successful.js\n      ---\n      duration_ms: 1749.3878\n      ...\n    # Subtest: test-runner/output/spec_reporter.js\n    ok 26 - test-runner/output/spec_reporter.js\n      ---\n      duration_ms: 2110.4322\n      ...\n    # Subtest: test-runner/output/spec_reporter_cli.js\n    ok 27 - test-runner/output/spec_reporter_cli.js\n      ---\n      duration_ms: 2249.6619\n      ...\n    # Subtest: test-runner/output/source_mapped_locations.mjs\n    ok 28 - test-runner/output/source_mapped_locations.mjs\n      ---\n      duration_ms: 1269.1432\n      ...\n    # Subtest: test-runner/output/lcov_reporter.js\n    ok 29 - test-runner/output/lcov_reporter.js\n      ---\n      duration_ms: 2188.1488\n      ...\n    # Subtest: test-runner/output/output.js\n    ok 30 - test-runner/output/output.js\n      ---\n      duration_ms: 1291.8118\n      ...\n    # Subtest: test-runner/output/output_cli.js\n    ok 31 - test-runner/output/output_cli.js\n      ---\n      duration_ms: 1969.4566\n      ...\n    # Subtest: test-runner/output/name_and_skip_patterns.js\n    ok 32 - test-runner/output/name_and_skip_patterns.js\n      ---\n      duration_ms: 1159.9026\n      ...\n    # Subtest: test-runner/output/name_pattern.js\n    ok 33 - test-runner/output/name_pattern.js\n      ---\n      duration_ms: 1135.1349\n      ...\n    # Subtest: test-runner/output/name_pattern_with_only.js\n    ok 34 - test-runner/output/name_pattern_with_only.js\n      ---\n      duration_ms: 1075.6338\n      ...\n    # Subtest: test-runner/output/skip_pattern.js\n    ok 35 - test-runner/output/skip_pattern.js\n      ---\n      duration_ms: 1044.2419\n      ...\n    # Subtest: test-runner/output/unfinished-suite-async-error.js\n    ok 36 - test-runner/output/unfinished-suite-async-error.js\n      ---\n      duration_ms: 973.7004\n      ...\n    # Subtest: test-runner/output/unresolved_promise.js\n    not ok 37 - test-runner/output/unresolved_promise.js\n      ---\n      duration_ms: 750.7344\n      location: 'C:\\\\workspace\\\\node-test-binary-windows-js-suites\\\\node\\\\test\\\\parallel\\\\test-runner-output.mjs:155:5'\n      failureType: 'testCodeFailure'\n      error: |-\n        Expected values to be strictly equal:\n        + actual - expected ... Lines skipped\n        \n          'TAP version 13\\n' +\n            '# Subtest: pass\\n' +\n        ...\n            \"  error: 'Promise resolution is still pending but the event loop has already resolved'\\n\" +\n            \"  code: 'ERR_TEST_FAILURE'\\n\" +\n        +   '  ...\\n' +\n        +   '# Subtest: fail\\n' +\n        +   'not ok 3 - fail\\n' +\n        +   '  ---\\n' +\n        +   '  duration_ms: *\\n' +\n        +   \"  location: '/test/fixtures/test-runner/output/unresolved_promise.js:(LINE):1'\\n\" +\n        +   \"  failureType: 'cancelledByParent'\\n\" +\n        +   \"  error: 'Promise resolution is still pending but the event loop has already resolved'\\n\" +\n        +   \"  code: 'ERR_TEST_FAILURE'\\n\" +\n        -   '  stack: |-\\n' +\n        -   '    *\\n' +\n        -   '  ...\\n' +\n        -   '# Subtest: fail\\n' +\n        -   'not ok 3 - fail\\n' +\n        -   '  ---\\n' +\n        -   '  duration_ms: *\\n' +\n        -   \"  location: '/test/fixtures/test-runner/output/unresolved_promise.js:(LINE):1'\\n\" +\n        -   \"  failureType: 'cancelledByParent'\\n\" +\n        -   \"  error: 'Promise resolution is still pending but the event loop has already resolved'\\n\" +\n        -   \"  code: 'ERR_TEST_FAILURE'\\n\" +\n        -   '  stack: |-\\n' +\n        -   '    *\\n' +\n            '  ...\\n' +\n        ...\n            '# skipped 0\\n' +\n            '# todo 0\\n' +\n            '# duration_ms *\\n'\n      code: 'ERR_ASSERTION'\n      name: 'AssertionError'\n      expected: |-\n        TAP version 13\n        # Subtest: pass\n        ok 1 - pass\n          ---\n          duration_ms: *\n          ...\n        # Subtest: never resolving promise\n        not ok 2 - never resolving promise\n          ---\n          duration_ms: *\n          location: '/test/fixtures/test-runner/output/unresolved_promise.js:(LINE):1'\n          failureType: 'cancelledByParent'\n          error: 'Promise resolution is still pending but the event loop has already resolved'\n          code: 'ERR_TEST_FAILURE'\n          stack: |-\n            *\n          ...\n        # Subtest: fail\n        not ok 3 - fail\n          ---\n          duration_ms: *\n          location: '/test/fixtures/test-runner/output/unresolved_promise.js:(LINE):1'\n          failureType: 'cancelledByParent'\n          error: 'Promise resolution is still pending but the event loop has already resolved'\n          code: 'ERR_TEST_FAILURE'\n          stack: |-\n            *\n          ...\n        1..3\n        # tests 3\n        # suites 0\n        # pass 1\n        # fail 0\n        # cancelled 2\n        # skipped 0\n        # todo 0\n        # duration_ms *\n        \n      actual: |-\n        TAP version 13\n        # Subtest: pass\n        ok 1 - pass\n          ---\n          duration_ms: *\n          ...\n        # Subtest: never resolving promise\n        not ok 2 - never resolving promise\n          ---\n          duration_ms: *\n          location: '/test/fixtures/test-runner/output/unresolved_promise.js:(LINE):1'\n          failureType: 'cancelledByParent'\n          error: 'Promise resolution is still pending but the event loop has already resolved'\n          code: 'ERR_TEST_FAILURE'\n          ...\n        # Subtest: fail\n        not ok 3 - fail\n          ---\n          duration_ms: *\n          location: '/test/fixtures/test-runner/output/unresolved_promise.js:(LINE):1'\n          failureType: 'cancelledByParent'\n          error: 'Promise resolution is still pending but the event loop has already resolved'\n          code: 'ERR_TEST_FAILURE'\n          ...\n        1..3\n        # tests 3\n        # suites 0\n        # pass 1\n        # fail 0\n        # cancelled 2\n        # skipped 0\n        # todo 0\n        # duration_ms *\n        \n      operator: 'strictEqual'\n      stack: |-\n        assertSnapshot (C:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:56:12)\n        async Module.spawnAndAssert (C:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:84:3)\n        async TestContext.<anonymous> (file:///C:/workspace/node-test-binary-windows-js-suites/node/test/parallel/test-runner-output.mjs:149:5)\n        async Test.run (node:internal/test_runner/test:748:9)\n        async Promise.all (index 36)\n        async Suite.run (node:internal/test_runner/test:1106:7)\n        async Test.processPendingSubtests (node:internal/test_runner/test:461:7)\n      ...\n    # Subtest: test-runner/output/default_output.js\n        # Subtest: <anonymous>\n        ok 1 - <anonymous> # SKIP Skipping pseudo-tty tests, as pseudo terminals are not available on Windows.\n          ---\n          duration_ms: 179.7412\n          ...\n        1..1\n    ok 38 - test-runner/output/default_output.js\n      ---\n      duration_ms: 180.953\n      ...\n    # Subtest: test-runner/output/arbitrary-output.js\n    ok 39 - test-runner/output/arbitrary-output.js\n      ---\n      duration_ms: 1194.0153\n      ...\n    # Subtest: test-runner/output/async-test-scheduling.mjs\n    ok 40 - test-runner/output/async-test-scheduling.mjs\n      ---\n      duration_ms: 1176.4055\n      ...\n    # Subtest: test-runner/output/arbitrary-output-colored.js\n        # Subtest: <anonymous>\n        ok 1 - <anonymous> # SKIP Skipping pseudo-tty tests, as pseudo terminals are not available on Windows.\n          ---\n          duration_ms: 69.8541\n          ...\n        1..1\n    ok 41 - test-runner/output/arbitrary-output-colored.js\n      ---\n      duration_ms: 70.7198\n      ...\n    # Subtest: test-runner/output/dot_output_custom_columns.js\n        # Subtest: <anonymous>\n        ok 1 - <anonymous> # SKIP Skipping pseudo-tty tests, as pseudo terminals are not available on Windows.\n          ---\n          duration_ms: 69.66\n          ...\n        1..1\n    ok 42 - test-runner/output/dot_output_custom_columns.js\n      ---\n      duration_ms: 70.3419\n      ...\n    # Subtest: test-runner/output/tap_escape.js\n    ok 43 - test-runner/output/tap_escape.js\n      ---\n      duration_ms: 1004.239\n      ...\n    # Subtest: test-runner/output/coverage_failure.js\n    ok 44 - test-runner/output/coverage_failure.js\n      ---\n      duration_ms: 1049.2079\n      ...\n    1..44\nnot ok 1 - test runner output\n  ---\n  duration_ms: 5044.9142\n  type: 'suite'\n  location: 'C:\\\\workspace\\\\node-test-binary-windows-js-suites\\\\node\\\\test\\\\parallel\\\\test-runner-output.mjs:153:1'\n  failureType: 'subtestsFailed'\n  error: '3 subtests failed'\n  code: 'ERR_TEST_FAILURE'\n  ...\n1..1\n# tests 47\n# suites 1\n# pass 41\n# fail 3\n# cancelled 0\n# skipped 3\n# todo 0\n# duration_ms 5072.3439"},"time":5680.078,"fullname":"parallel/test-runner-output","closingTestPoint":false}},{"testName":"message/stdin_messages","timestamp":1714656652787,"status":"REGRESSION","jobName":"node-test-binary-windows-js-suites","config":"node-test-binary-windows-js-suites » 3,win11-arm64-COMPILED_BY-vs2022-arm64 #27524","buildUrl":"https://ci.nodejs.org/job/node-test-binary-windows-js-suites/RUN_SUBSET=3,nodes=win11-arm64-COMPILED_BY-vs2022-arm64/27524/","buildNumber":27524,"builtOn":"test-azure_msft-win11_vs2022-arm64-2","nodeVersion":"23.0.0","commitHash":"fa7baf79faaaf6b88b9781d7f3544228b8fa1b0f","callStack":[{"upstreamBuild":62662,"upstreamProject":"node-test-commit-windows-fanned","upstreamUrl":"job/node-test-commit-windows-fanned/"},{"upstreamBuild":70431,"upstreamProject":"node-test-commit","upstreamUrl":"job/node-test-commit/"},{"upstreamBuild":58863,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"upstreamBuild":58847,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"prId":"52733"}],"tap":{"ok":false,"name":"message/stdin_messages","id":93,"buffered":false,"tapError":null,"skip":false,"todo":false,"previous":null,"plan":null,"diag":{"severity":"fail","stack":"[stdin]\n[stdin]:1\nwith(this){__filename}\n^^^^\n\nSyntaxError: Strict mode code may not include a with statement\n    at makeContextifyScript (node:internal/vm:185:14)\n    at node:internal/process/execution:107:22\n    at [stdin]-wrapper:6:24\n    at runScript (node:internal/process/execution:101:62)\n    at evalScript (node:internal/process/execution:136:3)\n    at node:internal/main/eval_stdin:32:5\n    at Socket.<anonymous> (node:internal/process/execution:237:5)\n    at SlowEventEmitter.emit (node:internal/events/slow_event_emitter:88:35)\n    at Socket.emit (node:internal/events/event_emitter:463:41)\n    at endReadableNT (node:internal/streams/readable:1700:12)\n\nNode.js v23.0.0-pre\n42\n42\n[stdin]:1\nthrow new Error(\"hello\")\n^\n\nError: hello\n    at [stdin]:1:7\n    at runScriptInThisContext (node:internal/vm:209:10)\n    at node:internal/process/execution:118:14\n    at [stdin]-wrapper:6:24\n    at runScript (node:internal/process/execution:101:62)\n    at evalScript (node:internal/process/execution:136:3)\n    at node:internal/main/eval_stdin:32:5\n    at Socket.<anonymous> (node:internal/process/execution:237:5)\n    at SlowEventEmitter.emit (node:internal/events/slow_event_emitter:88:35)\n    at Socket.emit (node:internal/events/event_emitter:463:41)\n\nNode.js v23.0.0-pre\n[stdin]:1\nthrow new Error(\"hello\")\n^\n\nError: hello\n    at [stdin]:1:7\n    at runScriptInThisContext (node:internal/vm:209:10)\n    at node:internal/process/execution:118:14\n    at [stdin]-wrapper:6:24\n    at runScript (node:internal/process/execution:101:62)\n    at evalScript (node:internal/process/execution:136:3)\n    at node:internal/main/eval_stdin:32:5\n    at Socket.<anonymous> (node:internal/process/execution:237:5)\n    at SlowEventEmitter.emit (node:internal/events/slow_event_emitter:88:35)\n    at Socket.emit (node:internal/events/event_emitter:463:41)\n\nNode.js v23.0.0-pre\n100\n[stdin]:1\nlet x = 100; y = x;\n               ^\n\nReferenceError: y is not defined\n    at [stdin]:1:16\n    at runScriptInThisContext (node:internal/vm:209:10)\n    at node:internal/process/execution:118:14\n    at [stdin]-wrapper:6:24\n    at runScript (node:internal/process/execution:101:62)\n    at evalScript (node:internal/process/execution:136:3)\n    at node:internal/main/eval_stdin:32:5\n    at Socket.<anonymous> (node:internal/process/execution:237:5)\n    at SlowEventEmitter.emit (node:internal/events/slow_event_emitter:88:35)\n    at Socket.emit (node:internal/events/event_emitter:463:41)\n\nNode.js v23.0.0-pre\n\n[stdin]:1\nlet ______________________________________________; throw 10\n                                                    ^\n10\n(Use `node --trace-uncaught ...` to show where the exception was thrown)\n\nNode.js v23.0.0-pre\n\n[stdin]:1\nlet ______________________________________________; throw 10\n                                                    ^\n10\n(Use `node --trace-uncaught ...` to show where the exception was thrown)\n\nNode.js v23.0.0-pre\ndone"},"time":2211.999,"fullname":"message/stdin_messages","closingTestPoint":false}},{"testName":"parallel/test-disable-proto-delete","timestamp":1714656652787,"status":"REGRESSION","jobName":"node-test-binary-windows-js-suites","config":"node-test-binary-windows-js-suites » 3,win11-arm64-COMPILED_BY-vs2022-arm64 #27524","buildUrl":"https://ci.nodejs.org/job/node-test-binary-windows-js-suites/RUN_SUBSET=3,nodes=win11-arm64-COMPILED_BY-vs2022-arm64/27524/","buildNumber":27524,"builtOn":"test-azure_msft-win11_vs2022-arm64-2","nodeVersion":"23.0.0","commitHash":"fa7baf79faaaf6b88b9781d7f3544228b8fa1b0f","callStack":[{"upstreamBuild":62662,"upstreamProject":"node-test-commit-windows-fanned","upstreamUrl":"job/node-test-commit-windows-fanned/"},{"upstreamBuild":70431,"upstreamProject":"node-test-commit","upstreamUrl":"job/node-test-commit/"},{"upstreamBuild":58863,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"upstreamBuild":58847,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"prId":"52733"}],"tap":{"ok":false,"name":"parallel/test-disable-proto-delete","id":221,"buffered":false,"tapError":null,"skip":false,"todo":false,"previous":null,"plan":null,"diag":{"severity":"fail","exitcode":1,"stack":"node:internal/events/slow_event_emitter:268\n    for (let i = listeners.length - 1; i >= 0; i--) {\n                           ^\n\nTypeError: Cannot read properties of null (reading 'length')\n    at SlowEventEmitter.removeAllListeners (node:internal/events/slow_event_emitter:268:28)\n    at Worker.removeAllListeners (node:internal/events/event_emitter:596:38)\n    at SlowEventEmitter.removeAllListeners (node:internal/events/slow_event_emitter:253:41)\n    at Worker.removeAllListeners (node:internal/events/event_emitter:596:38)\n    at [kOnExit] (node:internal/worker:316:10)\n    at Worker.<computed>.onexit (node:internal/worker:229:20)\n\nNode.js v23.0.0-pre"},"time":338.987,"fullname":"parallel/test-disable-proto-delete","closingTestPoint":false}},{"testName":"parallel/test-runner-output","timestamp":1714656652787,"status":"FAILED","jobName":"node-test-binary-windows-js-suites","config":"node-test-binary-windows-js-suites » 3,win11-arm64-COMPILED_BY-vs2022-arm64 #27524","buildUrl":"https://ci.nodejs.org/job/node-test-binary-windows-js-suites/RUN_SUBSET=3,nodes=win11-arm64-COMPILED_BY-vs2022-arm64/27524/","buildNumber":27524,"builtOn":"test-azure_msft-win11_vs2022-arm64-2","nodeVersion":"23.0.0","commitHash":"fa7baf79faaaf6b88b9781d7f3544228b8fa1b0f","callStack":[{"upstreamBuild":62662,"upstreamProject":"node-test-commit-windows-fanned","upstreamUrl":"job/node-test-commit-windows-fanned/"},{"upstreamBuild":70431,"upstreamProject":"node-test-commit","upstreamUrl":"job/node-test-commit/"},{"upstreamBuild":58863,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"upstreamBuild":58847,"upstreamProject":"node-test-pull-request","upstreamUrl":"job/node-test-pull-request/"},{"prId":"52733"}],"tap":{"ok":false,"name":"parallel/test-runner-output","id":680,"buffered":false,"tapError":null,"skip":false,"todo":false,"previous":null,"plan":null,"diag":{"severity":"fail","exitcode":1,"stack":"TAP version 13\n# Subtest: test runner output\n    # Subtest: test-runner/output/abort.js\n    ok 1 - test-runner/output/abort.js\n      ---\n      duration_ms: 2460.798\n      ...\n    # Subtest: test-runner/output/abort_suite.js\n    ok 2 - test-runner/output/abort_suite.js\n      ---\n      duration_ms: 2437.761\n      ...\n    # Subtest: test-runner/output/abort_hooks.js\n    ok 3 - test-runner/output/abort_hooks.js\n      ---\n      duration_ms: 2413.7387\n      ...\n    # Subtest: test-runner/output/describe_it.js\n    ok 4 - test-runner/output/describe_it.js\n      ---\n      duration_ms: 2372.4047\n      ...\n    # Subtest: test-runner/output/describe_nested.js\n    ok 5 - test-runner/output/describe_nested.js\n      ---\n      duration_ms: 2338.8436\n      ...\n    # Subtest: test-runner/output/eval_dot.js\n    ok 6 - test-runner/output/eval_dot.js\n      ---\n      duration_ms: 2301.1771\n      ...\n    # Subtest: test-runner/output/eval_spec.js\n    ok 7 - test-runner/output/eval_spec.js\n      ---\n      duration_ms: 2296.7289\n      ...\n    # Subtest: test-runner/output/eval_tap.js\n    ok 8 - test-runner/output/eval_tap.js\n      ---\n      duration_ms: 2156.1499\n      ...\n    # Subtest: test-runner/output/hooks.js\n    ok 9 - test-runner/output/hooks.js\n      ---\n      duration_ms: 2705.4824\n      ...\n    # Subtest: test-runner/output/hooks_spec_reporter.js\n    ok 10 - test-runner/output/hooks_spec_reporter.js\n      ---\n      duration_ms: 3373.0887\n      ...\n    # Subtest: test-runner/output/skip-each-hooks.js\n    ok 11 - test-runner/output/skip-each-hooks.js\n      ---\n      duration_ms: 2152.613\n      ...\n    # Subtest: test-runner/output/suite-skip-hooks.js\n    ok 12 - test-runner/output/suite-skip-hooks.js\n      ---\n      duration_ms: 1909.3934\n      ...\n    # Subtest: test-runner/output/timeout_in_before_each_should_not_affect_further_tests.js\n    ok 13 - test-runner/output/timeout_in_before_each_should_not_affect_further_tests.js\n      ---\n      duration_ms: 2525.759\n      ...\n    # Subtest: test-runner/output/hooks-with-no-global-test.js\n    ok 14 - test-runner/output/hooks-with-no-global-test.js\n      ---\n      duration_ms: 1949.9505\n      ...\n    # Subtest: test-runner/output/global-hooks-with-no-tests.js\n    ok 15 - test-runner/output/global-hooks-with-no-tests.js\n      ---\n      duration_ms: 2216.4462\n      ...\n    # Subtest: test-runner/output/before-and-after-each-too-many-listeners.js\n    ok 16 - test-runner/output/before-and-after-each-too-many-listeners.js\n      ---\n      duration_ms: 2190.1734\n      ...\n    # Subtest: test-runner/output/before-and-after-each-with-timeout-too-many-listeners.js\n    ok 17 - test-runner/output/before-and-after-each-with-timeout-too-many-listeners.js\n      ---\n      duration_ms: 1834.4533\n      ...\n    # Subtest: test-runner/output/force_exit.js\n    ok 18 - test-runner/output/force_exit.js\n      ---\n      duration_ms: 1805.476\n      ...\n    # Subtest: test-runner/output/global_after_should_fail_the_test.js\n    ok 19 - test-runner/output/global_after_should_fail_the_test.js\n      ---\n      duration_ms: 1934.6264\n      ...\n    # Subtest: test-runner/output/no_refs.js\n    not ok 20 - test-runner/output/no_refs.js\n      ---\n      duration_ms: 2323.8236\n      location: 'd:\\\\workspace\\\\node-test-binary-windows-js-suites\\\\node\\\\test\\\\parallel\\\\test-runner-output.mjs:155:5'\n      failureType: 'testCodeFailure'\n      error: |-\n        Expected values to be strictly equal:\n        + actual - expected ... Lines skipped\n        \n          'TAP version 13\\n' +\n            '# Subtest: does not keep event loop alive\\n' +\n        ...\n            \"      error: 'Promise resolution is still pending but the event loop has already resolved'\\n\" +\n            \"      code: 'ERR_TEST_FAILURE'\\n\" +\n        +   '      ...\\n' +\n        +   '    1..1\\n' +\n        +   'not ok 1 - does not keep event loop alive\\n' +\n        +   '  ---\\n' +\n        +   '  duration_ms: *\\n' +\n        +   \"  location: '/test/fixtures/test-runner/output/no_refs.js:(LINE):1'\\n\" +\n        +   \"  failureType: 'cancelledByParent'\\n\" +\n        +   \"  error: 'Promise resolution is still pending but the event loop has already resolved'\\n\" +\n        +   \"  code: 'ERR_TEST_FAILURE'\\n\" +\n        -   '      stack: |-\\n' +\n        -   '        *\\n' +\n        -   '      ...\\n' +\n        -   '    1..1\\n' +\n        -   'not ok 1 - does not keep event loop alive\\n' +\n        -   '  ---\\n' +\n        -   '  duration_ms: *\\n' +\n        -   \"  location: '/test/fixtures/test-runner/output/no_refs.js:(LINE):1'\\n\" +\n        -   \"  failureType: 'cancelledByParent'\\n\" +\n        -   \"  error: 'Promise resolution is still pending but the event loop has already resolved'\\n\" +\n        -   \"  code: 'ERR_TEST_FAILURE'\\n\" +\n        -   '  stack: |-\\n' +\n        -   '    *\\n' +\n            '  ...\\n' +\n        ...\n            '# skipped 0\\n' +\n            '# todo 0\\n' +\n            '# duration_ms *\\n'\n      code: 'ERR_ASSERTION'\n      name: 'AssertionError'\n      expected: |-\n        TAP version 13\n        # Subtest: does not keep event loop alive\n            # Subtest: +does not keep event loop alive\n            not ok 1 - +does not keep event loop alive\n              ---\n              duration_ms: *\n              location: '/test/fixtures/test-runner/output/no_refs.js:(LINE):11'\n              failureType: 'cancelledByParent'\n              error: 'Promise resolution is still pending but the event loop has already resolved'\n              code: 'ERR_TEST_FAILURE'\n              stack: |-\n                *\n              ...\n            1..1\n        not ok 1 - does not keep event loop alive\n          ---\n          duration_ms: *\n          location: '/test/fixtures/test-runner/output/no_refs.js:(LINE):1'\n          failureType: 'cancelledByParent'\n          error: 'Promise resolution is still pending but the event loop has already resolved'\n          code: 'ERR_TEST_FAILURE'\n          stack: |-\n            *\n          ...\n        1..1\n        # tests 2\n        # suites 0\n        # pass 0\n        # fail 0\n        # cancelled 2\n        # skipped 0\n        # todo 0\n        # duration_ms *\n        \n      actual: |-\n        TAP version 13\n        # Subtest: does not keep event loop alive\n            # Subtest: +does not keep event loop alive\n            not ok 1 - +does not keep event loop alive\n              ---\n              duration_ms: *\n              location: '/test/fixtures/test-runner/output/no_refs.js:(LINE):11'\n              failureType: 'cancelledByParent'\n              error: 'Promise resolution is still pending but the event loop has already resolved'\n              code: 'ERR_TEST_FAILURE'\n              ...\n            1..1\n        not ok 1 - does not keep event loop alive\n          ---\n          duration_ms: *\n          location: '/test/fixtures/test-runner/output/no_refs.js:(LINE):1'\n          failureType: 'cancelledByParent'\n          error: 'Promise resolution is still pending but the event loop has already resolved'\n          code: 'ERR_TEST_FAILURE'\n          ...\n        1..1\n        # tests 2\n        # suites 0\n        # pass 0\n        # fail 0\n        # cancelled 2\n        # skipped 0\n        # todo 0\n        # duration_ms *\n        \n      operator: 'strictEqual'\n      stack: |-\n        assertSnapshot (d:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:56:12)\n        async Module.spawnAndAssert (d:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:84:3)\n        async TestContext.<anonymous> (file:///d:/workspace/node-test-binary-windows-js-suites/node/test/parallel/test-runner-output.mjs:149:5)\n        async Test.run (node:internal/test_runner/test:748:9)\n        async Promise.all (index 19)\n        async Suite.run (node:internal/test_runner/test:1106:7)\n        async Test.processPendingSubtests (node:internal/test_runner/test:461:7)\n      ...\n    # Subtest: test-runner/output/no_tests.js\n    ok 21 - test-runner/output/no_tests.js\n      ---\n      duration_ms: 1937.966\n      ...\n    # Subtest: test-runner/output/only_tests.js\n    ok 22 - test-runner/output/only_tests.js\n      ---\n      duration_ms: 1840.4784\n      ...\n    # Subtest: test-runner/output/dot_reporter.js\n    ok 23 - test-runner/output/dot_reporter.js\n      ---\n      duration_ms: 3476.4301\n      ...\n    # Subtest: test-runner/output/junit_reporter.js\n    not ok 24 - test-runner/output/junit_reporter.js\n      ---\n      duration_ms: 3588.8606\n      location: 'd:\\\\workspace\\\\node-test-binary-windows-js-suites\\\\node\\\\test\\\\parallel\\\\test-runner-output.mjs:155:5'\n      failureType: 'testCodeFailure'\n      error: |-\n        Expected values to be strictly equal:\n        + actual - expected ... Lines skipped\n        \n          '<?xml version=\"1.0\" encoding=\"utf-8\"?>\\n' +\n            '<testsuites>\\n' +\n        ...\n            '\\t\\t</failure>\\n' +\n            '\\t</testcase>\\n' +\n        +   '\\t<testcase name=\"callback called twice\" time=\"*\" '... 11376 more characters\n        -   '\\t<testcase name=\"callback called twice\" time=\"*\" '... 11392 more characters\n      code: 'ERR_ASSERTION'\n      name: 'AssertionError'\n      expected: |-\n        <?xml version=\"1.0\" encoding=\"utf-8\"?>\n        <testsuites>\n        \t<testcase name=\"sync pass todo\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"todo\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync pass todo with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"todo\" message=\"this is a passing todo\"/>\n        \t</testcase>\n        \t<testcase name=\"sync fail todo\" time=\"*\" classname=\"test\" failure=\"thrown from sync fail todo\">\n        \t\t<skipped type=\"todo\" message=\"true\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync fail todo\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync fail todo] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync fail todo\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync fail todo with message\" time=\"*\" classname=\"test\" failure=\"thrown from sync fail todo with message\">\n        \t\t<skipped type=\"todo\" message=\"this is a failing todo\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync fail todo with message\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync fail todo with message] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync fail todo with message\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync skip pass\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip pass with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"this is skipped\"/>\n        \t</testcase>\n        \t<testcase name=\"sync pass\" time=\"*\" classname=\"test\"/>\n        \t<!-- this test should pass -->\n        \t<testcase name=\"sync throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from sync throw fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async skip pass\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"async pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from async throw fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from async throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from async throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async skip fail\" time=\"*\" classname=\"test\" failure=\"thrown from async throw fail\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from async throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from async throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async assertion fail\" time=\"*\" classname=\"test\" failure=\"Expected values to be strictly equal:true !== false\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Expected values to be strictly equal:true !== false\">\n        [Error [ERR_TEST_FAILURE]: Expected values to be strictly equal:\n        \n        true !== false\n        ] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n          \n          true !== false\n          \n              *\n              *\n              *\n              *\n              *\n              *\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: true,\n            expected: false,\n            operator: 'strictEqual'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"resolve pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"reject fail\" time=\"*\" classname=\"test\" failure=\"rejected from reject fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"rejected from reject fail\">\n        [Error [ERR_TEST_FAILURE]: rejected from reject fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: rejected from reject fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unhandled rejection - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async unhandled rejection - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate throw - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate reject - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate resolve pass\" time=\"*\" classname=\"test\"/>\n        \t<testsuite name=\"subtest sync throw fail\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"1\" failures=\"1\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"+sync throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fail\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fail\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fail\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<!-- this subtest should make its parent test fail -->\n        \t</testsuite>\n        \t<testcase name=\"sync throw non-error fail\" time=\"*\" classname=\"test\" failure=\"Symbol(thrown symbol from sync throw non-error fail)\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Symbol(thrown symbol from sync throw non-error fail)\">\n        [Error [ERR_TEST_FAILURE]: Symbol(thrown symbol from sync throw non-error fail)] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: Symbol(thrown symbol from sync throw non-error fail) }\n        \t\t</failure>\n        \t</testcase>\n        \t<testsuite name=\"level 0a\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"4\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"level 1a\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1b\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1c\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1d\" time=\"*\" classname=\"test\"/>\n        \t</testsuite>\n        \t<testsuite name=\"top level\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"2\" failures=\"1\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"+long running\" time=\"*\" classname=\"test\" failure=\"test did not finish before its parent and was cancelled\">\n        \t\t\t<failure type=\"cancelledByParent\" message=\"test did not finish before its parent and was cancelled\">\n        [Error [ERR_TEST_FAILURE]: test did not finish before its parent and was cancelled] { code: 'ERR_TEST_FAILURE', failureType: 'cancelledByParent', cause: 'test did not finish before its parent and was cancelled' }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<testsuite name=\"+short running\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"1\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t\t<testcase name=\"++short running\" time=\"*\" classname=\"test\"/>\n        \t\t</testsuite>\n        \t</testsuite>\n        \t<testcase name=\"invalid subtest - pass but subtest fails\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"sync skip option\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip option with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"this is skipped\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip option is false fail\" time=\"*\" classname=\"test\" failure=\"this should be executed\">\n        \t\t<failure type=\"testCodeFailure\" message=\"this should be executed\">\n        [Error [ERR_TEST_FAILURE]: this should be executed] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: this should be executed\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"functionOnly\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"test with only a name provided\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"test with a name and options provided\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"functionAndOptions\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"callback pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback fail\" time=\"*\" classname=\"test\" failure=\"callback failure\">\n        \t\t<failure type=\"testCodeFailure\" message=\"callback failure\">\n        [Error [ERR_TEST_FAILURE]: callback failure] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: callback failure\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback also returns a Promise\" time=\"*\" classname=\"test\" failure=\"passed a callback but also returned a Promise\">\n        \t\t<failure type=\"callbackAndPromisePresent\" message=\"passed a callback but also returned a Promise\">\n        [Error [ERR_TEST_FAILURE]: passed a callback but also returned a Promise] { code: 'ERR_TEST_FAILURE', failureType: 'callbackAndPromisePresent', cause: 'passed a callback but also returned a Promise' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback throw\" time=\"*\" classname=\"test\" failure=\"thrown from callback throw\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from callback throw\">\n        [Error [ERR_TEST_FAILURE]: thrown from callback throw] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from callback throw\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback called twice\" time=\"*\" classname=\"test\" failure=\"callback invoked multiple times\">\n        \t\t<failure type=\"multipleCallbackInvocations\" message=\"callback invoked multiple times\">\n        Error [ERR_TEST_FAILURE]: callback invoked multiple times\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'multipleCallbackInvocations',\n          cause: 'callback invoked multiple times'\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback called twice in different ticks\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback called twice in future tick\" time=\"*\" classname=\"test\" failure=\"callback invoked multiple times\">\n        \t\t<failure type=\"uncaughtException\" message=\"callback invoked multiple times\">\n        Error [ERR_TEST_FAILURE]: callback invoked multiple times\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error [ERR_TEST_FAILURE]: callback invoked multiple times\n              * {\n            code: 'ERR_TEST_FAILURE',\n            failureType: 'multipleCallbackInvocations',\n            cause: 'callback invoked multiple times'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback async throw\" time=\"*\" classname=\"test\" failure=\"thrown from callback async throw\">\n        \t\t<failure type=\"uncaughtException\" message=\"thrown from callback async throw\">\n        Error [ERR_TEST_FAILURE]: thrown from callback async throw\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error: thrown from callback async throw\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback async throw after done\" time=\"*\" classname=\"test\"/>\n        \t<testsuite name=\"only is set but not in only mode\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"4\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"running subtest 1\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"running subtest 2\" time=\"*\" classname=\"test\"/>\n        \t\t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t\t<testcase name=\"running subtest 3\" time=\"*\" classname=\"test\"/>\n        \t\t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t\t<testcase name=\"running subtest 4\" time=\"*\" classname=\"test\"/>\n        \t</testsuite>\n        \t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t<testcase name=\"custom inspect symbol fail\" time=\"*\" classname=\"test\" failure=\"customized\">\n        \t\t<failure type=\"testCodeFailure\" message=\"customized\">\n        [Error [ERR_TEST_FAILURE]: customized] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: customized }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"custom inspect symbol that throws fail\" time=\"*\" classname=\"test\" failure=\"{  foo: 1,  [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]}\">\n        \t\t<failure type=\"testCodeFailure\" message=\"{  foo: 1,  [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]}\">\n        [Error [ERR_TEST_FAILURE]: {\n          foo: 1,\n          [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]\n        }] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: { foo: 1, [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]] }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testsuite name=\"subtest sync throw fails\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"2\" failures=\"2\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"sync throw fails at first\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fails at first\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fails at first\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fails at first\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fails at first\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<testcase name=\"sync throw fails at second\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fails at second\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fails at second\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fails at second\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fails at second\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t</testsuite>\n        \t<testcase name=\"timed out async test\" time=\"*\" classname=\"test\" failure=\"test timed out after 5ms\">\n        \t\t<failure type=\"testTimeoutFailure\" message=\"test timed out after 5ms\">\n        [Error [ERR_TEST_FAILURE]: test timed out after 5ms] { code: 'ERR_TEST_FAILURE', failureType: 'testTimeoutFailure', cause: 'test timed out after 5ms' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"timed out callback test\" time=\"*\" classname=\"test\" failure=\"test timed out after 5ms\">\n        \t\t<failure type=\"testTimeoutFailure\" message=\"test timed out after 5ms\">\n        [Error [ERR_TEST_FAILURE]: test timed out after 5ms] { code: 'ERR_TEST_FAILURE', failureType: 'testTimeoutFailure', cause: 'test timed out after 5ms' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"large timeout async test is ok\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"large timeout callback test is ok\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"successful thenable\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"rejected thenable\" time=\"*\" classname=\"test\" failure=\"custom error\">\n        \t\t<failure type=\"testCodeFailure\" message=\"custom error\">\n        [Error [ERR_TEST_FAILURE]: custom error] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: 'custom error' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unfinished test with uncaughtException\" time=\"*\" classname=\"test\" failure=\"foo\">\n        \t\t<failure type=\"uncaughtException\" message=\"foo\">\n        Error [ERR_TEST_FAILURE]: foo\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error: foo\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unfinished test with unhandledRejection\" time=\"*\" classname=\"test\" failure=\"bar\">\n        \t\t<failure type=\"unhandledRejection\" message=\"bar\">\n        Error [ERR_TEST_FAILURE]: bar\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'unhandledRejection',\n          cause: Error: bar\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"assertion errors display actual and expected properly\" time=\"*\" classname=\"test\" failure=\"Expected values to be loosely deep-equal:{  bar: 1,  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  foo: 1}should loosely deep-equal{  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  circular: &lt;ref *1> {    bar: 2,    c: [Circular *1]  }}\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Expected values to be loosely deep-equal:{  bar: 1,  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  foo: 1}should loosely deep-equal{  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  circular: &lt;ref *1> {    bar: 2,    c: [Circular *1]  }}\">\n        [Error [ERR_TEST_FAILURE]: Expected values to be loosely deep-equal:\n        \n        {\n          bar: 1,\n          baz: {\n            date: 1970-01-01T00:00:00.000Z,\n            null: null,\n            number: 1,\n            string: 'Hello',\n            undefined: undefined\n          },\n          boo: [\n            1\n          ],\n          foo: 1\n        }\n        \n        should loosely deep-equal\n        \n        {\n          baz: {\n            date: 1970-01-01T00:00:00.000Z,\n            null: null,\n            number: 1,\n            string: 'Hello',\n            undefined: undefined\n          },\n          boo: [\n            1\n          ],\n          circular: &lt;ref *1> {\n            bar: 2,\n            c: [Circular *1]\n          }\n        }] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n          \n          {\n            bar: 1,\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            foo: 1\n          }\n          \n          should loosely deep-equal\n          \n          {\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            circular: &lt;ref *1> {\n              bar: 2,\n              c: [Circular *1]\n            }\n          }\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: [Object],\n            expected: [Object],\n            operator: 'deepEqual'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"invalid subtest fail\" time=\"*\" classname=\"test\" failure=\"test could not be started because its parent finished\">\n        \t\t<failure type=\"parentAlreadyFinished\" message=\"test could not be started because its parent finished\">\n        Error [ERR_TEST_FAILURE]: test could not be started because its parent finished\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'parentAlreadyFinished',\n          cause: 'test could not be started because its parent finished'\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<!-- Error: Test \"unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:72:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: Test \"async unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:76:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from async unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: A resource generated asynchronous activity after the test ended. This activity created the error \"Error: uncaught from outside of a test\" which triggered an uncaughtException event, caught by the test runner. -->\n        \t<!-- Error: Test \"immediate throw - passes but warns\" at test/fixtures/test-runner/output/output.js:80:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from immediate throw fail\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- Error: Test \"immediate reject - passes but warns\" at test/fixtures/test-runner/output/output.js:86:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from immediate reject fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: Test \"callback called twice in different ticks\" at test/fixtures/test-runner/output/output.js:251:1 generated asynchronous activity after the test ended. This activity created the error \"Error [ERR_TEST_FAILURE]: callback invoked multiple times\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- Error: Test \"callback async throw after done\" at test/fixtures/test-runner/output/output.js:269:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from callback async throw after done\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- tests 76 -->\n        \t<!-- suites 0 -->\n        \t<!-- pass 35 -->\n        \t<!-- fail 25 -->\n        \t<!-- cancelled 3 -->\n        \t<!-- skipped 9 -->\n        \t<!-- todo 4 -->\n        \t<!-- duration_ms * -->\n        </testsuites>\n        \n      actual: |-\n        <?xml version=\"1.0\" encoding=\"utf-8\"?>\n        <testsuites>\n        \t<testcase name=\"sync pass todo\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"todo\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync pass todo with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"todo\" message=\"this is a passing todo\"/>\n        \t</testcase>\n        \t<testcase name=\"sync fail todo\" time=\"*\" classname=\"test\" failure=\"thrown from sync fail todo\">\n        \t\t<skipped type=\"todo\" message=\"true\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync fail todo\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync fail todo] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync fail todo\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync fail todo with message\" time=\"*\" classname=\"test\" failure=\"thrown from sync fail todo with message\">\n        \t\t<skipped type=\"todo\" message=\"this is a failing todo\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync fail todo with message\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync fail todo with message] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync fail todo with message\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync skip pass\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip pass with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"this is skipped\"/>\n        \t</testcase>\n        \t<testcase name=\"sync pass\" time=\"*\" classname=\"test\"/>\n        \t<!-- this test should pass -->\n        \t<testcase name=\"sync throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from sync throw fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from sync throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from sync throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async skip pass\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"async pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from async throw fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from async throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from async throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async skip fail\" time=\"*\" classname=\"test\" failure=\"thrown from async throw fail\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from async throw fail\">\n        [Error [ERR_TEST_FAILURE]: thrown from async throw fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from async throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"async assertion fail\" time=\"*\" classname=\"test\" failure=\"Expected values to be strictly equal:true !== false\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Expected values to be strictly equal:true !== false\">\n        [Error [ERR_TEST_FAILURE]: Expected values to be strictly equal:\n        \n        true !== false\n        ] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:\n          \n          true !== false\n          \n              *\n              *\n              *\n              *\n              *\n              *\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: true,\n            expected: false,\n            operator: 'strictEqual'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"resolve pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"reject fail\" time=\"*\" classname=\"test\" failure=\"rejected from reject fail\">\n        \t\t<failure type=\"testCodeFailure\" message=\"rejected from reject fail\">\n        [Error [ERR_TEST_FAILURE]: rejected from reject fail] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: rejected from reject fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unhandled rejection - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async unhandled rejection - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate throw - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate reject - passes but warns\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"immediate resolve pass\" time=\"*\" classname=\"test\"/>\n        \t<testsuite name=\"subtest sync throw fail\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"1\" failures=\"1\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"+sync throw fail\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fail\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fail\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fail\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fail\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<!-- this subtest should make its parent test fail -->\n        \t</testsuite>\n        \t<testcase name=\"sync throw non-error fail\" time=\"*\" classname=\"test\" failure=\"Symbol(thrown symbol from sync throw non-error fail)\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Symbol(thrown symbol from sync throw non-error fail)\">\n        [Error [ERR_TEST_FAILURE]: Symbol(thrown symbol from sync throw non-error fail)] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: Symbol(thrown symbol from sync throw non-error fail) }\n        \t\t</failure>\n        \t</testcase>\n        \t<testsuite name=\"level 0a\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"4\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"level 1a\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1b\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1c\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"level 1d\" time=\"*\" classname=\"test\"/>\n        \t</testsuite>\n        \t<testsuite name=\"top level\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"2\" failures=\"1\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"+long running\" time=\"*\" classname=\"test\" failure=\"test did not finish before its parent and was cancelled\">\n        \t\t\t<failure type=\"cancelledByParent\" message=\"test did not finish before its parent and was cancelled\">\n        [Error [ERR_TEST_FAILURE]: test did not finish before its parent and was cancelled] { code: 'ERR_TEST_FAILURE', failureType: 'cancelledByParent', cause: 'test did not finish before its parent and was cancelled' }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<testsuite name=\"+short running\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"1\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t\t<testcase name=\"++short running\" time=\"*\" classname=\"test\"/>\n        \t\t</testsuite>\n        \t</testsuite>\n        \t<testcase name=\"invalid subtest - pass but subtest fails\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"sync skip option\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip option with message\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"this is skipped\"/>\n        \t</testcase>\n        \t<testcase name=\"sync skip option is false fail\" time=\"*\" classname=\"test\" failure=\"this should be executed\">\n        \t\t<failure type=\"testCodeFailure\" message=\"this should be executed\">\n        [Error [ERR_TEST_FAILURE]: this should be executed] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: this should be executed\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"functionOnly\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"test with only a name provided\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"&lt;anonymous>\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"test with a name and options provided\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"functionAndOptions\" time=\"*\" classname=\"test\">\n        \t\t<skipped type=\"skipped\" message=\"true\"/>\n        \t</testcase>\n        \t<testcase name=\"callback pass\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback fail\" time=\"*\" classname=\"test\" failure=\"callback failure\">\n        \t\t<failure type=\"testCodeFailure\" message=\"callback failure\">\n        [Error [ERR_TEST_FAILURE]: callback failure] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: callback failure\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"sync t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"async t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback t is this in test\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback also returns a Promise\" time=\"*\" classname=\"test\" failure=\"passed a callback but also returned a Promise\">\n        \t\t<failure type=\"callbackAndPromisePresent\" message=\"passed a callback but also returned a Promise\">\n        [Error [ERR_TEST_FAILURE]: passed a callback but also returned a Promise] { code: 'ERR_TEST_FAILURE', failureType: 'callbackAndPromisePresent', cause: 'passed a callback but also returned a Promise' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback throw\" time=\"*\" classname=\"test\" failure=\"thrown from callback throw\">\n        \t\t<failure type=\"testCodeFailure\" message=\"thrown from callback throw\">\n        [Error [ERR_TEST_FAILURE]: thrown from callback throw] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from callback throw\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback called twice\" time=\"*\" classname=\"test\" failure=\"callback invoked multiple times\">\n        \t\t<failure type=\"multipleCallbackInvocations\" message=\"callback invoked multiple times\">\n        Error [ERR_TEST_FAILURE]: callback invoked multiple times\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'multipleCallbackInvocations',\n          cause: 'callback invoked multiple times'\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback called twice in different ticks\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"callback called twice in future tick\" time=\"*\" classname=\"test\" failure=\"callback invoked multiple times\">\n        \t\t<failure type=\"uncaughtException\" message=\"callback invoked multiple times\">\n        [Error [ERR_TEST_FAILURE]: callback invoked multiple times] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error [ERR_TEST_FAILURE]: callback invoked multiple times\n              * {\n            code: 'ERR_TEST_FAILURE',\n            failureType: 'multipleCallbackInvocations',\n            cause: 'callback invoked multiple times'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback async throw\" time=\"*\" classname=\"test\" failure=\"thrown from callback async throw\">\n        \t\t<failure type=\"uncaughtException\" message=\"thrown from callback async throw\">\n        [Error [ERR_TEST_FAILURE]: thrown from callback async throw] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error: thrown from callback async throw\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"callback async throw after done\" time=\"*\" classname=\"test\"/>\n        \t<testsuite name=\"only is set but not in only mode\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"4\" failures=\"0\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"running subtest 1\" time=\"*\" classname=\"test\"/>\n        \t\t<testcase name=\"running subtest 2\" time=\"*\" classname=\"test\"/>\n        \t\t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t\t<testcase name=\"running subtest 3\" time=\"*\" classname=\"test\"/>\n        \t\t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t\t<testcase name=\"running subtest 4\" time=\"*\" classname=\"test\"/>\n        \t</testsuite>\n        \t<!-- 'only' and 'runOnly' require the &#45;&#45;test-only command-line option. -->\n        \t<testcase name=\"custom inspect symbol fail\" time=\"*\" classname=\"test\" failure=\"customized\">\n        \t\t<failure type=\"testCodeFailure\" message=\"customized\">\n        [Error [ERR_TEST_FAILURE]: customized] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: customized }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"custom inspect symbol that throws fail\" time=\"*\" classname=\"test\" failure=\"{  foo: 1,  [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]}\">\n        \t\t<failure type=\"testCodeFailure\" message=\"{  foo: 1,  [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]}\">\n        [Error [ERR_TEST_FAILURE]: {\n          foo: 1,\n          [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]]\n        }] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: { foo: 1, [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]] }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testsuite name=\"subtest sync throw fails\" time=\"*\" disabled=\"0\" errors=\"0\" tests=\"2\" failures=\"2\" skipped=\"0\" hostname=\"HOSTNAME\">\n        \t\t<testcase name=\"sync throw fails at first\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fails at first\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fails at first\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fails at first\n            *\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fails at first\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t\t<testcase name=\"sync throw fails at second\" time=\"*\" classname=\"test\" failure=\"thrown from subtest sync throw fails at second\">\n        \t\t\t<failure type=\"testCodeFailure\" message=\"thrown from subtest sync throw fails at second\">\n        Error [ERR_TEST_FAILURE]: thrown from subtest sync throw fails at second\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: Error: thrown from subtest sync throw fails at second\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n              *\n        }\n        \t\t\t</failure>\n        \t\t</testcase>\n        \t</testsuite>\n        \t<testcase name=\"timed out async test\" time=\"*\" classname=\"test\" failure=\"test timed out after 5ms\">\n        \t\t<failure type=\"testTimeoutFailure\" message=\"test timed out after 5ms\">\n        [Error [ERR_TEST_FAILURE]: test timed out after 5ms] { code: 'ERR_TEST_FAILURE', failureType: 'testTimeoutFailure', cause: 'test timed out after 5ms' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"timed out callback test\" time=\"*\" classname=\"test\" failure=\"test timed out after 5ms\">\n        \t\t<failure type=\"testTimeoutFailure\" message=\"test timed out after 5ms\">\n        [Error [ERR_TEST_FAILURE]: test timed out after 5ms] { code: 'ERR_TEST_FAILURE', failureType: 'testTimeoutFailure', cause: 'test timed out after 5ms' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"large timeout async test is ok\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"large timeout callback test is ok\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"successful thenable\" time=\"*\" classname=\"test\"/>\n        \t<testcase name=\"rejected thenable\" time=\"*\" classname=\"test\" failure=\"custom error\">\n        \t\t<failure type=\"testCodeFailure\" message=\"custom error\">\n        [Error [ERR_TEST_FAILURE]: custom error] { code: 'ERR_TEST_FAILURE', failureType: 'testCodeFailure', cause: 'custom error' }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unfinished test with uncaughtException\" time=\"*\" classname=\"test\" failure=\"foo\">\n        \t\t<failure type=\"uncaughtException\" message=\"foo\">\n        [Error [ERR_TEST_FAILURE]: foo] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'uncaughtException',\n          cause: Error: foo\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"unfinished test with unhandledRejection\" time=\"*\" classname=\"test\" failure=\"bar\">\n        \t\t<failure type=\"unhandledRejection\" message=\"bar\">\n        [Error [ERR_TEST_FAILURE]: bar] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'unhandledRejection',\n          cause: Error: bar\n              *\n              *\n              *\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"assertion errors display actual and expected properly\" time=\"*\" classname=\"test\" failure=\"Expected values to be loosely deep-equal:{  bar: 1,  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  foo: 1}should loosely deep-equal{  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  circular: &lt;ref *1> {    bar: 2,    c: [Circular *1]  }}\">\n        \t\t<failure type=\"testCodeFailure\" message=\"Expected values to be loosely deep-equal:{  bar: 1,  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  foo: 1}should loosely deep-equal{  baz: {    date: 1970-01-01T00:00:00.000Z,    null: null,    number: 1,    string: 'Hello',    undefined: undefined  },  boo: [    1  ],  circular: &lt;ref *1> {    bar: 2,    c: [Circular *1]  }}\">\n        [Error [ERR_TEST_FAILURE]: Expected values to be loosely deep-equal:\n        \n        {\n          bar: 1,\n          baz: {\n            date: 1970-01-01T00:00:00.000Z,\n            null: null,\n            number: 1,\n            string: 'Hello',\n            undefined: undefined\n          },\n          boo: [\n            1\n          ],\n          foo: 1\n        }\n        \n        should loosely deep-equal\n        \n        {\n          baz: {\n            date: 1970-01-01T00:00:00.000Z,\n            null: null,\n            number: 1,\n            string: 'Hello',\n            undefined: undefined\n          },\n          boo: [\n            1\n          ],\n          circular: &lt;ref *1> {\n            bar: 2,\n            c: [Circular *1]\n          }\n        }] {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'testCodeFailure',\n          cause: AssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n          \n          {\n            bar: 1,\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            foo: 1\n          }\n          \n          should loosely deep-equal\n          \n          {\n            baz: {\n              date: 1970-01-01T00:00:00.000Z,\n              null: null,\n              number: 1,\n              string: 'Hello',\n              undefined: undefined\n            },\n            boo: [\n              1\n            ],\n            circular: &lt;ref *1> {\n              bar: 2,\n              c: [Circular *1]\n            }\n          }\n              * {\n            generatedMessage: true,\n            code: 'ERR_ASSERTION',\n            actual: [Object],\n            expected: [Object],\n            operator: 'deepEqual'\n          }\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<testcase name=\"invalid subtest fail\" time=\"*\" classname=\"test\" failure=\"test could not be started because its parent finished\">\n        \t\t<failure type=\"parentAlreadyFinished\" message=\"test could not be started because its parent finished\">\n        Error [ERR_TEST_FAILURE]: test could not be started because its parent finished\n            * {\n          code: 'ERR_TEST_FAILURE',\n          failureType: 'parentAlreadyFinished',\n          cause: 'test could not be started because its parent finished'\n        }\n        \t\t</failure>\n        \t</testcase>\n        \t<!-- Error: Test \"unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:72:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: Test \"async unhandled rejection - passes but warns\" at test/fixtures/test-runner/output/output.js:76:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from async unhandled rejection fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: A resource generated asynchronous activity after the test ended. This activity created the error \"Error: uncaught from outside of a test\" which triggered an uncaughtException event, caught by the test runner. -->\n        \t<!-- Error: Test \"immediate throw - passes but warns\" at test/fixtures/test-runner/output/output.js:80:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from immediate throw fail\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- Error: Test \"immediate reject - passes but warns\" at test/fixtures/test-runner/output/output.js:86:1 generated asynchronous activity after the test ended. This activity created the error \"Error: rejected from immediate reject fail\" and would have caused the test to fail, but instead triggered an unhandledRejection event. -->\n        \t<!-- Error: Test \"callback called twice in different ticks\" at test/fixtures/test-runner/output/output.js:251:1 generated asynchronous activity after the test ended. This activity created the error \"Error [ERR_TEST_FAILURE]: callback invoked multiple times\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- Error: Test \"callback async throw after done\" at test/fixtures/test-runner/output/output.js:269:1 generated asynchronous activity after the test ended. This activity created the error \"Error: thrown from callback async throw after done\" and would have caused the test to fail, but instead triggered an uncaughtException event. -->\n        \t<!-- tests 76 -->\n        \t<!-- suites 0 -->\n        \t<!-- pass 35 -->\n        \t<!-- fail 25 -->\n        \t<!-- cancelled 3 -->\n        \t<!-- skipped 9 -->\n        \t<!-- todo 4 -->\n        \t<!-- duration_ms * -->\n        </testsuites>\n        \n      operator: 'strictEqual'\n      stack: |-\n        assertSnapshot (d:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:56:12)\n        async Module.spawnAndAssert (d:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:84:3)\n        async TestContext.<anonymous> (file:///d:/workspace/node-test-binary-windows-js-suites/node/test/parallel/test-runner-output.mjs:149:5)\n        async Test.run (node:internal/test_runner/test:748:9)\n        async Promise.all (index 23)\n        async Suite.run (node:internal/test_runner/test:1106:7)\n        async Test.processPendingSubtests (node:internal/test_runner/test:461:7)\n      ...\n    # Subtest: test-runner/output/spec_reporter_successful.js\n    ok 25 - test-runner/output/spec_reporter_successful.js\n      ---\n      duration_ms: 2187.6304\n      ...\n    # Subtest: test-runner/output/spec_reporter.js\n    ok 26 - test-runner/output/spec_reporter.js\n      ---\n      duration_ms: 3532.632\n      ...\n    # Subtest: test-runner/output/spec_reporter_cli.js\n    ok 27 - test-runner/output/spec_reporter_cli.js\n      ---\n      duration_ms: 3805.392\n      ...\n    # Subtest: test-runner/output/source_mapped_locations.mjs\n    ok 28 - test-runner/output/source_mapped_locations.mjs\n      ---\n      duration_ms: 1923.5638\n      ...\n    # Subtest: test-runner/output/lcov_reporter.js\n    ok 29 - test-runner/output/lcov_reporter.js\n      ---\n      duration_ms: 3211.4976\n      ...\n    # Subtest: test-runner/output/output.js\n    ok 30 - test-runner/output/output.js\n      ---\n      duration_ms: 2278.7101\n      ...\n    # Subtest: test-runner/output/output_cli.js\n    ok 31 - test-runner/output/output_cli.js\n      ---\n      duration_ms: 3475.9147\n      ...\n    # Subtest: test-runner/output/name_and_skip_patterns.js\n    ok 32 - test-runner/output/name_and_skip_patterns.js\n      ---\n      duration_ms: 1656.3052\n      ...\n    # Subtest: test-runner/output/name_pattern.js\n    ok 33 - test-runner/output/name_pattern.js\n      ---\n      duration_ms: 1952.9541\n      ...\n    # Subtest: test-runner/output/name_pattern_with_only.js\n    ok 34 - test-runner/output/name_pattern_with_only.js\n      ---\n      duration_ms: 1937.7067\n      ...\n    # Subtest: test-runner/output/skip_pattern.js\n    ok 35 - test-runner/output/skip_pattern.js\n      ---\n      duration_ms: 1996.2711\n      ...\n    # Subtest: test-runner/output/unfinished-suite-async-error.js\n    ok 36 - test-runner/output/unfinished-suite-async-error.js\n      ---\n      duration_ms: 1712.6491\n      ...\n    # Subtest: test-runner/output/unresolved_promise.js\n    not ok 37 - test-runner/output/unresolved_promise.js\n      ---\n      duration_ms: 1894.6882\n      location: 'd:\\\\workspace\\\\node-test-binary-windows-js-suites\\\\node\\\\test\\\\parallel\\\\test-runner-output.mjs:155:5'\n      failureType: 'testCodeFailure'\n      error: |-\n        Expected values to be strictly equal:\n        + actual - expected ... Lines skipped\n        \n          'TAP version 13\\n' +\n            '# Subtest: pass\\n' +\n        ...\n            \"  error: 'Promise resolution is still pending but the event loop has already resolved'\\n\" +\n            \"  code: 'ERR_TEST_FAILURE'\\n\" +\n        +   '  ...\\n' +\n        +   '# Subtest: fail\\n' +\n        +   'not ok 3 - fail\\n' +\n        +   '  ---\\n' +\n        +   '  duration_ms: *\\n' +\n        +   \"  location: '/test/fixtures/test-runner/output/unresolved_promise.js:(LINE):1'\\n\" +\n        +   \"  failureType: 'cancelledByParent'\\n\" +\n        +   \"  error: 'Promise resolution is still pending but the event loop has already resolved'\\n\" +\n        +   \"  code: 'ERR_TEST_FAILURE'\\n\" +\n        -   '  stack: |-\\n' +\n        -   '    *\\n' +\n        -   '  ...\\n' +\n        -   '# Subtest: fail\\n' +\n        -   'not ok 3 - fail\\n' +\n        -   '  ---\\n' +\n        -   '  duration_ms: *\\n' +\n        -   \"  location: '/test/fixtures/test-runner/output/unresolved_promise.js:(LINE):1'\\n\" +\n        -   \"  failureType: 'cancelledByParent'\\n\" +\n        -   \"  error: 'Promise resolution is still pending but the event loop has already resolved'\\n\" +\n        -   \"  code: 'ERR_TEST_FAILURE'\\n\" +\n        -   '  stack: |-\\n' +\n        -   '    *\\n' +\n            '  ...\\n' +\n        ...\n            '# skipped 0\\n' +\n            '# todo 0\\n' +\n            '# duration_ms *\\n'\n      code: 'ERR_ASSERTION'\n      name: 'AssertionError'\n      expected: |-\n        TAP version 13\n        # Subtest: pass\n        ok 1 - pass\n          ---\n          duration_ms: *\n          ...\n        # Subtest: never resolving promise\n        not ok 2 - never resolving promise\n          ---\n          duration_ms: *\n          location: '/test/fixtures/test-runner/output/unresolved_promise.js:(LINE):1'\n          failureType: 'cancelledByParent'\n          error: 'Promise resolution is still pending but the event loop has already resolved'\n          code: 'ERR_TEST_FAILURE'\n          stack: |-\n            *\n          ...\n        # Subtest: fail\n        not ok 3 - fail\n          ---\n          duration_ms: *\n          location: '/test/fixtures/test-runner/output/unresolved_promise.js:(LINE):1'\n          failureType: 'cancelledByParent'\n          error: 'Promise resolution is still pending but the event loop has already resolved'\n          code: 'ERR_TEST_FAILURE'\n          stack: |-\n            *\n          ...\n        1..3\n        # tests 3\n        # suites 0\n        # pass 1\n        # fail 0\n        # cancelled 2\n        # skipped 0\n        # todo 0\n        # duration_ms *\n        \n      actual: |-\n        TAP version 13\n        # Subtest: pass\n        ok 1 - pass\n          ---\n          duration_ms: *\n          ...\n        # Subtest: never resolving promise\n        not ok 2 - never resolving promise\n          ---\n          duration_ms: *\n          location: '/test/fixtures/test-runner/output/unresolved_promise.js:(LINE):1'\n          failureType: 'cancelledByParent'\n          error: 'Promise resolution is still pending but the event loop has already resolved'\n          code: 'ERR_TEST_FAILURE'\n          ...\n        # Subtest: fail\n        not ok 3 - fail\n          ---\n          duration_ms: *\n          location: '/test/fixtures/test-runner/output/unresolved_promise.js:(LINE):1'\n          failureType: 'cancelledByParent'\n          error: 'Promise resolution is still pending but the event loop has already resolved'\n          code: 'ERR_TEST_FAILURE'\n          ...\n        1..3\n        # tests 3\n        # suites 0\n        # pass 1\n        # fail 0\n        # cancelled 2\n        # skipped 0\n        # todo 0\n        # duration_ms *\n        \n      operator: 'strictEqual'\n      stack: |-\n        assertSnapshot (d:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:56:12)\n        async Module.spawnAndAssert (d:\\workspace\\node-test-binary-windows-js-suites\\node\\test\\common\\assertSnapshot.js:84:3)\n        async TestContext.<anonymous> (file:///d:/workspace/node-test-binary-windows-js-suites/node/test/parallel/test-runner-output.mjs:149:5)\n        async Test.run (node:internal/test_runner/test:748:9)\n        async Promise.all (index 36)\n        async Suite.run (node:internal/test_runner/test:1106:7)\n        async Test.processPendingSubtests (node:internal/test_runner/test:461:7)\n      ...\n    # Subtest: test-runner/output/default_output.js\n        # Subtest: <anonymous>\n        ok 1 - <anonymous> # SKIP Skipping pseudo-tty tests, as pseudo terminals are not available on Windows.\n          ---\n          duration_ms: 308.6188\n          ...\n        1..1\n    ok 38 - test-runner/output/default_output.js\n      ---\n      duration_ms: 309.2926\n      ...\n    # Subtest: test-runner/output/arbitrary-output.js\n    ok 39 - test-runner/output/arbitrary-output.js\n      ---\n      duration_ms: 2058.0654\n      ...\n    # Subtest: test-runner/output/async-test-scheduling.mjs\n    ok 40 - test-runner/output/async-test-scheduling.mjs\n      ---\n      duration_ms: 1922.5768\n      ...\n    # Subtest: test-runner/output/arbitrary-output-colored.js\n        # Subtest: <anonymous>\n        ok 1 - <anonymous> # SKIP Skipping pseudo-tty tests, as pseudo terminals are not available on Windows.\n          ---\n          duration_ms: 135.5041\n          ...\n        1..1\n    ok 41 - test-runner/output/arbitrary-output-colored.js\n      ---\n      duration_ms: 135.9643\n      ...\n    # Subtest: test-runner/output/dot_output_custom_columns.js\n        # Subtest: <anonymous>\n        ok 1 - <anonymous> # SKIP Skipping pseudo-tty tests, as pseudo terminals are not available on Windows.\n          ---\n          duration_ms: 135.4087\n          ...\n        1..1\n    ok 42 - test-runner/output/dot_output_custom_columns.js\n      ---\n      duration_ms: 135.7812\n      ...\n    # Subtest: test-runner/output/tap_escape.js\n    ok 43 - test-runner/output/tap_escape.js\n      ---\n      duration_ms: 1434.0501\n      ...\n    # Subtest: test-runner/output/coverage_failure.js\n    ok 44 - test-runner/output/coverage_failure.js\n      ---\n      duration_ms: 1407.0695\n      ...\n    1..44\nnot ok 1 - test runner output\n  ---\n  duration_ms: 5090.5126\n  type: 'suite'\n  location: 'd:\\\\workspace\\\\node-test-binary-windows-js-suites\\\\node\\\\test\\\\parallel\\\\test-runner-output.mjs:153:1'\n  failureType: 'subtestsFailed'\n  error: '3 subtests failed'\n  code: 'ERR_TEST_FAILURE'\n  ...\n1..1\n# tests 47\n# suites 1\n# pass 41\n# fail 3\n# cancelled 0\n# skipped 3\n# todo 0\n# duration_ms 5107.9204"},"time":5801.004,"fullname":"parallel/test-runner-output","closingTestPoint":false}}]}